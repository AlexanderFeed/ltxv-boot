; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 2, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 128, !dbg !11
  %.lobit3 = lshr i32 %19, 6, !dbg !11
  %21 = and i32 %.lobit3, 3, !dbg !11
  %22 = and i32 %19, 31, !dbg !11
  %.lobit = lshr exact i32 %20, 7, !dbg !11
  %23 = or disjoint i32 %21, %18, !dbg !12
  %24 = or disjoint i32 %.lobit, %18, !dbg !12
  %25 = or disjoint i32 %24, 2, !dbg !12
  %26 = icmp slt i32 %23, 3600, !dbg !13
  %27 = icmp slt i32 %18, 3600, !dbg !13
  %28 = icmp slt i32 %24, 3600, !dbg !13
  %29 = icmp slt i32 %25, 3600, !dbg !13
  %30 = shl i32 %19, 2, !dbg !14
  %31 = and i32 %30, 1020, !dbg !14
  %32 = shl i32 %19, 4, !dbg !14
  %33 = and i32 %32, 1008, !dbg !14
  %34 = or disjoint i32 %33, 4, !dbg !14
  %35 = or disjoint i32 %33, 8, !dbg !14
  %36 = or disjoint i32 %33, 12, !dbg !14
  %37 = shl i32 %19, 3, !dbg !14
  %38 = and i32 %37, 1016, !dbg !14
  %39 = sext i32 %23 to i64, !dbg !15
  %40 = getelementptr bfloat, ptr addrspace(1) %4, i64 %39, !dbg !15
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %57 = bitcast i16 %56 to bfloat, !dbg !16
  %58 = getelementptr bfloat, ptr addrspace(1) %5, i64 %39, !dbg !17
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %71 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %72 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %75 = bitcast i16 %74 to bfloat, !dbg !18
  %76 = mul i32 %23, 3072, !dbg !19
  %77 = mul i32 %24, 3072, !dbg !19
  %78 = mul i32 %25, 3072, !dbg !19
  %.inv = fcmp oge bfloat %57, 0xR0000, !dbg !20
  %79 = select i1 %.inv, bfloat 0xR0000, bfloat %57, !dbg !20
  %80 = fpext bfloat %79 to float, !dbg !20
  %81 = fsub float 0.000000e+00, %80, !dbg !24
  %.inv6 = fcmp ole bfloat %75, 0xR0000, !dbg !25
  %82 = select i1 %.inv6, bfloat 0xR0000, bfloat %75, !dbg !25
  %83 = fpext bfloat %82 to float, !dbg !25
  %84 = fcmp ogt float %81, %83, !dbg !27
  %85 = fcmp uno float %81, 0.000000e+00, !dbg !29
  %86 = or i1 %85, %84, !dbg !30
  %87 = select i1 %86, float %81, float %83, !dbg !31
  %88 = fmul float %87, 0x3F80204080000000, !dbg !32
  %89 = fcmp ogt float %88, 0x3EE4F8B580000000, !dbg !33
  %90 = fcmp uno float %88, 0.000000e+00, !dbg !35
  %91 = or i1 %89, %90, !dbg !36
  %92 = select i1 %91, float %88, float 0x3EE4F8B580000000, !dbg !37
  %93 = or disjoint i32 %76, %33
  %94 = or disjoint i32 %76, %34
  %95 = or disjoint i32 %76, %35
  %96 = or disjoint i32 %76, %36
  %97 = and i32 %32, 4080
  %98 = lshr i32 %97, 10
  %.idx60 = shl nuw nsw i32 %98, 4
  %99 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx60
  %100 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %99, i32 %97
  %101 = or disjoint i32 %97, 8
  %102 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %99, i32 %101
  %103 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %31
  %104 = getelementptr inbounds nuw i8, ptr addrspace(3) %103, i32 2064
  %105 = getelementptr inbounds nuw i8, ptr addrspace(3) %103, i32 4128
  %106 = getelementptr inbounds nuw i8, ptr addrspace(3) %103, i32 6192
  %107 = shl nuw nsw i32 %98, 2
  %108 = or disjoint i32 %107, %97
  %109 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %108
  %110 = or disjoint i32 %97, 4
  %111 = lshr i32 %32, 8
  %112 = and i32 %111, 12
  %113 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %112
  %114 = getelementptr inbounds nuw float, ptr addrspace(3) %113, i32 %110
  %115 = getelementptr inbounds nuw float, ptr addrspace(3) %99, i32 %101
  %116 = or disjoint i32 %97, 12
  %117 = getelementptr inbounds nuw float, ptr addrspace(3) %113, i32 %116
  %118 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %31
  %119 = getelementptr inbounds nuw i8, ptr addrspace(3) %118, i32 4112
  %120 = getelementptr inbounds nuw i8, ptr addrspace(3) %118, i32 8224
  %121 = getelementptr inbounds nuw i8, ptr addrspace(3) %118, i32 12336
  %122 = shl nuw nsw i32 %20, 3
  %123 = or disjoint i32 %38, %122
  %124 = lshr exact i32 %20, 3
  %125 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %124
  %126 = getelementptr bfloat, ptr addrspace(3) %125, i32 %123
  %127 = zext nneg i32 %31 to i64, !dbg !38
  %128 = getelementptr inbounds nuw i8, ptr addrspace(3) %103, i32 4
  %129 = getelementptr inbounds nuw i8, ptr addrspace(3) %103, i32 2068
  %130 = getelementptr inbounds nuw i8, ptr addrspace(3) %103, i32 4132
  %131 = getelementptr inbounds nuw i8, ptr addrspace(3) %103, i32 6194
  %132 = getelementptr inbounds nuw i8, ptr addrspace(3) %103, i32 6196
  %133 = insertelement <16 x i1> poison, i1 %27, i64 0, !dbg !39
  %134 = shufflevector <16 x i1> %133, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !39
  br label %135, !dbg !38

135:                                              ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %136 = phi float [ 0.000000e+00, %16 ], [ %527, %._crit_edge ]
  %137 = phi float [ 0.000000e+00, %16 ], [ %528, %._crit_edge ]
  %138 = phi float [ 0.000000e+00, %16 ], [ %529, %._crit_edge ]
  %139 = phi float [ 0.000000e+00, %16 ], [ %530, %._crit_edge ]
  %140 = phi float [ 0.000000e+00, %16 ], [ %531, %._crit_edge ]
  %141 = phi float [ 0.000000e+00, %16 ], [ %532, %._crit_edge ]
  %142 = phi float [ 0.000000e+00, %16 ], [ %533, %._crit_edge ]
  %143 = phi float [ 0.000000e+00, %16 ], [ %534, %._crit_edge ]
  %144 = phi float [ 0.000000e+00, %16 ], [ %535, %._crit_edge ]
  %145 = phi float [ 0.000000e+00, %16 ], [ %536, %._crit_edge ]
  %146 = phi float [ 0.000000e+00, %16 ], [ %537, %._crit_edge ]
  %147 = phi float [ 0.000000e+00, %16 ], [ %538, %._crit_edge ]
  %148 = phi float [ 0.000000e+00, %16 ], [ %539, %._crit_edge ]
  %149 = phi float [ 0.000000e+00, %16 ], [ %540, %._crit_edge ]
  %150 = phi float [ 0.000000e+00, %16 ], [ %541, %._crit_edge ]
  %151 = phi float [ 0.000000e+00, %16 ], [ %542, %._crit_edge ]
  %152 = phi float [ 0.000000e+00, %16 ], [ %511, %._crit_edge ]
  %153 = phi float [ 0.000000e+00, %16 ], [ %512, %._crit_edge ]
  %154 = phi float [ 0.000000e+00, %16 ], [ %513, %._crit_edge ]
  %155 = phi float [ 0.000000e+00, %16 ], [ %514, %._crit_edge ]
  %156 = phi float [ 0.000000e+00, %16 ], [ %515, %._crit_edge ]
  %157 = phi float [ 0.000000e+00, %16 ], [ %516, %._crit_edge ]
  %158 = phi float [ 0.000000e+00, %16 ], [ %517, %._crit_edge ]
  %159 = phi float [ 0.000000e+00, %16 ], [ %518, %._crit_edge ]
  %160 = phi float [ 0.000000e+00, %16 ], [ %519, %._crit_edge ]
  %161 = phi float [ 0.000000e+00, %16 ], [ %520, %._crit_edge ]
  %162 = phi float [ 0.000000e+00, %16 ], [ %521, %._crit_edge ]
  %163 = phi float [ 0.000000e+00, %16 ], [ %522, %._crit_edge ]
  %164 = phi float [ 0.000000e+00, %16 ], [ %523, %._crit_edge ]
  %165 = phi float [ 0.000000e+00, %16 ], [ %524, %._crit_edge ]
  %166 = phi float [ 0.000000e+00, %16 ], [ %525, %._crit_edge ]
  %167 = phi float [ 0.000000e+00, %16 ], [ %526, %._crit_edge ]
  %168 = phi <16 x float> [ zeroinitializer, %16 ], [ %510, %._crit_edge ]
  %169 = or disjoint i64 %indvars.iv, %127, !dbg !40
  %170 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %171 = add i32 %93, %170, !dbg !41
  %172 = add i32 %94, %170, !dbg !41
  %173 = add i32 %95, %170, !dbg !41
  %174 = add i32 %96, %170, !dbg !41
  %175 = trunc i64 %indvars.iv to i32, !dbg !41
  %176 = or disjoint i32 %38, %175, !dbg !41
  %177 = add i32 %176, %77, !dbg !41
  %178 = add i32 %176, %78, !dbg !41
  %179 = sext i32 %171 to i64, !dbg !42
  %180 = getelementptr bfloat, ptr addrspace(1) %0, i64 %179, !dbg !42
  %181 = sext i32 %173 to i64, !dbg !42
  %182 = getelementptr bfloat, ptr addrspace(1) %0, i64 %181, !dbg !42
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %180, i1 %26) #5, !dbg !43
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !43
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !43
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !43
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !43
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %182, i1 %26) #5, !dbg !43
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !43
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !43
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !43
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %100, i32 %184, i32 %185, i32 %186, i32 %187, i1 true) #5, !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %102, i32 %189, i32 %190, i32 %191, i32 %192, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %193 = add nuw nsw i64 %169, 6144, !dbg !45
  %194 = getelementptr float, ptr addrspace(1) %1, i64 %193, !dbg !46
  %195 = getelementptr bfloat, ptr addrspace(1) %2, i64 %193, !dbg !47
  %196 = getelementptr i32, ptr addrspace(1) %3, i64 %179, !dbg !48
  %197 = sext i32 %172 to i64, !dbg !48
  %198 = getelementptr i32, ptr addrspace(1) %3, i64 %197, !dbg !48
  %199 = getelementptr i32, ptr addrspace(1) %3, i64 %181, !dbg !48
  %200 = sext i32 %174 to i64, !dbg !48
  %201 = getelementptr i32, ptr addrspace(1) %3, i64 %200, !dbg !48
  %202 = getelementptr bfloat, ptr addrspace(1) %6, i64 %169, !dbg !49
  %203 = getelementptr bfloat, ptr addrspace(1) %7, i64 %169, !dbg !50
  %204 = load <4 x bfloat>, ptr addrspace(3) %103, align 8, !dbg !44
  %205 = load <4 x bfloat>, ptr addrspace(3) %104, align 8, !dbg !44
  %206 = load <4 x bfloat>, ptr addrspace(3) %105, align 8, !dbg !44
  %207 = load <4 x bfloat>, ptr addrspace(3) %106, align 8, !dbg !44
  %208 = shufflevector <4 x bfloat> %204, <4 x bfloat> %205, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %209 = shufflevector <4 x bfloat> %206, <4 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %210 = shufflevector <16 x bfloat> %208, <16 x bfloat> %209, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %211 = shufflevector <4 x bfloat> %207, <4 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %212 = shufflevector <16 x bfloat> %210, <16 x bfloat> %211, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !44
  %213 = fpext <16 x bfloat> %212 to <16 x float>, !dbg !44
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %194, i1 true) #5, !dbg !51
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !51
  %216 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !51
  %217 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !51
  %218 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !51
  %219 = insertelement <4 x i32> poison, i32 %215, i64 0, !dbg !51
  %220 = insertelement <4 x i32> %219, i32 %216, i64 1, !dbg !51
  %221 = insertelement <4 x i32> %220, i32 %217, i64 2, !dbg !51
  %222 = insertelement <4 x i32> %221, i32 %218, i64 3, !dbg !51
  %223 = bitcast <4 x i32> %222 to <4 x float>, !dbg !51
  %224 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %195, i1 true) #5, !dbg !52
  %225 = extractvalue { i32, i32 } %224, 0, !dbg !52
  %226 = bitcast i32 %225 to <2 x bfloat>, !dbg !52
  %227 = extractvalue { i32, i32 } %224, 1, !dbg !52
  %228 = bitcast i32 %227 to <2 x bfloat>, !dbg !52
  %229 = shufflevector <2 x bfloat> %226, <2 x bfloat> %228, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !53
  %230 = fpext <4 x bfloat> %229 to <4 x float>, !dbg !53
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %196, i1 %26) #5, !dbg !54
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !54
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !54
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !54
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !54
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %198, i1 %26) #5, !dbg !54
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !54
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !54
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !54
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !54
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %199, i1 %26) #5, !dbg !54
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !54
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !54
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !54
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !54
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %201, i1 %26) #5, !dbg !54
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !54
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !54
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !54
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !54
  %251 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %202, i1 true) #5, !dbg !55
  %252 = extractvalue { i32, i32 } %251, 0, !dbg !55
  %253 = bitcast i32 %252 to <2 x bfloat>, !dbg !55
  %254 = extractvalue { i32, i32 } %251, 1, !dbg !55
  %255 = bitcast i32 %254 to <2 x bfloat>, !dbg !55
  %256 = shufflevector <2 x bfloat> %253, <2 x bfloat> %255, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !56
  %257 = fpext <4 x bfloat> %256 to <4 x float>, !dbg !56
  %258 = shufflevector <4 x float> %257, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !56
  %259 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %203, i1 true) #5, !dbg !57
  %260 = extractvalue { i32, i32 } %259, 0, !dbg !57
  %261 = bitcast i32 %260 to <2 x bfloat>, !dbg !57
  %262 = extractvalue { i32, i32 } %259, 1, !dbg !57
  %263 = bitcast i32 %262 to <2 x bfloat>, !dbg !57
  %264 = shufflevector <2 x bfloat> %261, <2 x bfloat> %263, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !58
  %265 = fpext <4 x bfloat> %264 to <4 x float>, !dbg !58
  %266 = shufflevector <4 x float> %265, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !58
  %267 = fadd <4 x float> %223, %230, !dbg !59
  %268 = shufflevector <4 x float> %267, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %269 = sitofp i32 %232 to float, !dbg !60
  %270 = sitofp i32 %233 to float, !dbg !60
  %271 = sitofp i32 %234 to float, !dbg !60
  %272 = sitofp i32 %235 to float, !dbg !60
  %273 = sitofp i32 %237 to float, !dbg !60
  %274 = sitofp i32 %238 to float, !dbg !60
  %275 = sitofp i32 %239 to float, !dbg !60
  %276 = sitofp i32 %240 to float, !dbg !60
  %277 = sitofp i32 %242 to float, !dbg !60
  %278 = sitofp i32 %243 to float, !dbg !60
  %279 = sitofp i32 %244 to float, !dbg !60
  %280 = sitofp i32 %245 to float, !dbg !60
  %281 = sitofp i32 %247 to float, !dbg !60
  %282 = sitofp i32 %248 to float, !dbg !60
  %283 = sitofp i32 %249 to float, !dbg !60
  %284 = sitofp i32 %250 to float, !dbg !60
  %285 = fmul float %92, %269, !dbg !61
  %286 = fmul float %92, %270, !dbg !61
  %287 = fmul float %92, %271, !dbg !61
  %288 = fmul float %92, %272, !dbg !61
  %289 = fmul float %92, %273, !dbg !61
  %290 = fmul float %92, %274, !dbg !61
  %291 = fmul float %92, %275, !dbg !61
  %292 = fmul float %92, %276, !dbg !61
  %293 = fmul float %92, %277, !dbg !61
  %294 = fmul float %92, %278, !dbg !61
  %295 = fmul float %92, %279, !dbg !61
  %296 = fmul float %92, %280, !dbg !61
  %297 = fmul float %92, %281, !dbg !61
  %298 = fmul float %92, %282, !dbg !61
  %299 = fmul float %92, %283, !dbg !61
  %300 = fmul float %92, %284, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %301 = bitcast float %285 to i32, !dbg !61
  %302 = bitcast float %286 to i32, !dbg !61
  %303 = bitcast float %287 to i32, !dbg !61
  %304 = bitcast float %288 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %109, i32 %301, i32 %302, i32 %303, i32 %304, i1 true) #5, !dbg !61
  %305 = bitcast float %289 to i32, !dbg !61
  %306 = bitcast float %290 to i32, !dbg !61
  %307 = bitcast float %291 to i32, !dbg !61
  %308 = bitcast float %292 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %114, i32 %305, i32 %306, i32 %307, i32 %308, i1 true) #5, !dbg !61
  %309 = bitcast float %293 to i32, !dbg !61
  %310 = bitcast float %294 to i32, !dbg !61
  %311 = bitcast float %295 to i32, !dbg !61
  %312 = bitcast float %296 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %115, i32 %309, i32 %310, i32 %311, i32 %312, i1 true) #5, !dbg !61
  %313 = bitcast float %297 to i32, !dbg !61
  %314 = bitcast float %298 to i32, !dbg !61
  %315 = bitcast float %299 to i32, !dbg !61
  %316 = bitcast float %300 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %117, i32 %313, i32 %314, i32 %315, i32 %316, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %317 = load <4 x float>, ptr addrspace(3) %118, align 16, !dbg !61
  %318 = load <4 x float>, ptr addrspace(3) %119, align 16, !dbg !61
  %319 = load <4 x float>, ptr addrspace(3) %120, align 16, !dbg !61
  %320 = load <4 x float>, ptr addrspace(3) %121, align 16, !dbg !61
  %321 = shufflevector <4 x float> %317, <4 x float> %318, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %322 = shufflevector <4 x float> %319, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %323 = shufflevector <16 x float> %321, <16 x float> %322, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %324 = shufflevector <4 x float> %320, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %325 = shufflevector <16 x float> %323, <16 x float> %324, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !62
  %326 = fmul <16 x float> %325, %258, !dbg !62
  %327 = fadd <16 x float> %326, %266, !dbg !63
  %328 = fmul <16 x float> %268, %327, !dbg !64
  %329 = fadd <16 x float> %328, %213, !dbg !65
  %330 = icmp eq i64 %indvars.iv, 0, !dbg !66
  br i1 %330, label %._crit_edge, label %331, !dbg !67

331:                                              ; preds = %135
  %332 = fsub <16 x float> %329, %168, !dbg !69
  %333 = extractelement <16 x float> %332, i64 0, !dbg !69
  %334 = fsub <16 x float> %329, %168, !dbg !69
  %335 = extractelement <16 x float> %334, i64 1, !dbg !69
  %336 = fsub <16 x float> %329, %168, !dbg !69
  %337 = extractelement <16 x float> %336, i64 2, !dbg !69
  %338 = fsub <16 x float> %329, %168, !dbg !69
  %339 = extractelement <16 x float> %338, i64 3, !dbg !69
  %340 = fsub <16 x float> %329, %168, !dbg !69
  %341 = extractelement <16 x float> %340, i64 4, !dbg !69
  %342 = fsub <16 x float> %329, %168, !dbg !69
  %343 = extractelement <16 x float> %342, i64 5, !dbg !69
  %344 = fsub <16 x float> %329, %168, !dbg !69
  %345 = extractelement <16 x float> %344, i64 6, !dbg !69
  %346 = fsub <16 x float> %329, %168, !dbg !69
  %347 = extractelement <16 x float> %346, i64 7, !dbg !69
  %348 = fsub <16 x float> %329, %168, !dbg !69
  %349 = extractelement <16 x float> %348, i64 8, !dbg !69
  %350 = fsub <16 x float> %329, %168, !dbg !69
  %351 = extractelement <16 x float> %350, i64 9, !dbg !69
  %352 = fsub <16 x float> %329, %168, !dbg !69
  %353 = extractelement <16 x float> %352, i64 10, !dbg !69
  %354 = fsub <16 x float> %329, %168, !dbg !69
  %355 = extractelement <16 x float> %354, i64 11, !dbg !69
  %356 = fsub <16 x float> %329, %168, !dbg !69
  %357 = extractelement <16 x float> %356, i64 12, !dbg !69
  %358 = fsub <16 x float> %329, %168, !dbg !69
  %359 = extractelement <16 x float> %358, i64 13, !dbg !69
  %360 = fsub <16 x float> %329, %168, !dbg !69
  %361 = extractelement <16 x float> %360, i64 14, !dbg !69
  %362 = fsub <16 x float> %329, %168, !dbg !69
  %363 = extractelement <16 x float> %362, i64 15, !dbg !69
  %364 = fadd float %136, 1.000000e+00, !dbg !70
  %365 = fadd float %137, 1.000000e+00, !dbg !70
  %366 = fadd float %138, 1.000000e+00, !dbg !70
  %367 = fadd float %139, 1.000000e+00, !dbg !70
  %368 = fadd float %140, 1.000000e+00, !dbg !70
  %369 = fadd float %141, 1.000000e+00, !dbg !70
  %370 = fadd float %142, 1.000000e+00, !dbg !70
  %371 = fadd float %143, 1.000000e+00, !dbg !70
  %372 = fadd float %144, 1.000000e+00, !dbg !70
  %373 = fadd float %145, 1.000000e+00, !dbg !70
  %374 = fadd float %146, 1.000000e+00, !dbg !70
  %375 = fadd float %147, 1.000000e+00, !dbg !70
  %376 = fadd float %148, 1.000000e+00, !dbg !70
  %377 = fadd float %149, 1.000000e+00, !dbg !70
  %378 = fadd float %150, 1.000000e+00, !dbg !70
  %379 = fadd float %151, 1.000000e+00, !dbg !70
  %380 = tail call float @llvm.nvvm.div.full(float %333, float %364), !dbg !71
  %381 = tail call float @llvm.nvvm.div.full(float %335, float %365), !dbg !71
  %382 = tail call float @llvm.nvvm.div.full(float %337, float %366), !dbg !71
  %383 = tail call float @llvm.nvvm.div.full(float %339, float %367), !dbg !71
  %384 = tail call float @llvm.nvvm.div.full(float %341, float %368), !dbg !71
  %385 = tail call float @llvm.nvvm.div.full(float %343, float %369), !dbg !71
  %386 = tail call float @llvm.nvvm.div.full(float %345, float %370), !dbg !71
  %387 = tail call float @llvm.nvvm.div.full(float %347, float %371), !dbg !71
  %388 = tail call float @llvm.nvvm.div.full(float %349, float %372), !dbg !71
  %389 = tail call float @llvm.nvvm.div.full(float %351, float %373), !dbg !71
  %390 = tail call float @llvm.nvvm.div.full(float %353, float %374), !dbg !71
  %391 = tail call float @llvm.nvvm.div.full(float %355, float %375), !dbg !71
  %392 = tail call float @llvm.nvvm.div.full(float %357, float %376), !dbg !71
  %393 = tail call float @llvm.nvvm.div.full(float %359, float %377), !dbg !71
  %394 = tail call float @llvm.nvvm.div.full(float %361, float %378), !dbg !71
  %395 = tail call float @llvm.nvvm.div.full(float %363, float %379), !dbg !71
  %396 = insertelement <16 x float> poison, float %380, i64 0, !dbg !72
  %397 = insertelement <16 x float> %396, float %381, i64 1, !dbg !72
  %398 = insertelement <16 x float> %397, float %382, i64 2, !dbg !72
  %399 = insertelement <16 x float> %398, float %383, i64 3, !dbg !72
  %400 = insertelement <16 x float> %399, float %384, i64 4, !dbg !72
  %401 = insertelement <16 x float> %400, float %385, i64 5, !dbg !72
  %402 = insertelement <16 x float> %401, float %386, i64 6, !dbg !72
  %403 = insertelement <16 x float> %402, float %387, i64 7, !dbg !72
  %404 = insertelement <16 x float> %403, float %388, i64 8, !dbg !72
  %405 = insertelement <16 x float> %404, float %389, i64 9, !dbg !72
  %406 = insertelement <16 x float> %405, float %390, i64 10, !dbg !72
  %407 = insertelement <16 x float> %406, float %391, i64 11, !dbg !72
  %408 = insertelement <16 x float> %407, float %392, i64 12, !dbg !72
  %409 = insertelement <16 x float> %408, float %393, i64 13, !dbg !72
  %410 = insertelement <16 x float> %409, float %394, i64 14, !dbg !72
  %411 = insertelement <16 x float> %410, float %395, i64 15, !dbg !72
  %412 = fadd <16 x float> %168, %411, !dbg !72
  %413 = fsub <16 x float> %329, %412, !dbg !73
  %414 = fsub <16 x float> %329, %412, !dbg !73
  %415 = fsub <16 x float> %329, %412, !dbg !73
  %416 = fsub <16 x float> %329, %412, !dbg !73
  %417 = fsub <16 x float> %329, %412, !dbg !73
  %418 = fsub <16 x float> %329, %412, !dbg !73
  %419 = fsub <16 x float> %329, %412, !dbg !73
  %420 = fsub <16 x float> %329, %412, !dbg !73
  %421 = fsub <16 x float> %329, %412, !dbg !73
  %422 = fsub <16 x float> %329, %412, !dbg !73
  %423 = fsub <16 x float> %329, %412, !dbg !73
  %424 = fsub <16 x float> %329, %412, !dbg !73
  %425 = fsub <16 x float> %329, %412, !dbg !73
  %426 = fsub <16 x float> %329, %412, !dbg !73
  %427 = fsub <16 x float> %329, %412, !dbg !73
  %428 = fsub <16 x float> %329, %412, !dbg !73
  %429 = fmul <16 x float> %332, %413, !dbg !74
  %430 = extractelement <16 x float> %429, i64 0, !dbg !74
  %431 = fmul <16 x float> %334, %414, !dbg !74
  %432 = extractelement <16 x float> %431, i64 1, !dbg !74
  %433 = fmul <16 x float> %336, %415, !dbg !74
  %434 = extractelement <16 x float> %433, i64 2, !dbg !74
  %435 = fmul <16 x float> %338, %416, !dbg !74
  %436 = extractelement <16 x float> %435, i64 3, !dbg !74
  %437 = fmul <16 x float> %340, %417, !dbg !74
  %438 = extractelement <16 x float> %437, i64 4, !dbg !74
  %439 = fmul <16 x float> %342, %418, !dbg !74
  %440 = extractelement <16 x float> %439, i64 5, !dbg !74
  %441 = fmul <16 x float> %344, %419, !dbg !74
  %442 = extractelement <16 x float> %441, i64 6, !dbg !74
  %443 = fmul <16 x float> %346, %420, !dbg !74
  %444 = extractelement <16 x float> %443, i64 7, !dbg !74
  %445 = fmul <16 x float> %348, %421, !dbg !74
  %446 = extractelement <16 x float> %445, i64 8, !dbg !74
  %447 = fmul <16 x float> %350, %422, !dbg !74
  %448 = extractelement <16 x float> %447, i64 9, !dbg !74
  %449 = fmul <16 x float> %352, %423, !dbg !74
  %450 = extractelement <16 x float> %449, i64 10, !dbg !74
  %451 = fmul <16 x float> %354, %424, !dbg !74
  %452 = extractelement <16 x float> %451, i64 11, !dbg !74
  %453 = fmul <16 x float> %356, %425, !dbg !74
  %454 = extractelement <16 x float> %453, i64 12, !dbg !74
  %455 = fmul <16 x float> %358, %426, !dbg !74
  %456 = extractelement <16 x float> %455, i64 13, !dbg !74
  %457 = fmul <16 x float> %360, %427, !dbg !74
  %458 = extractelement <16 x float> %457, i64 14, !dbg !74
  %459 = fmul <16 x float> %362, %428, !dbg !74
  %460 = extractelement <16 x float> %459, i64 15, !dbg !74
  %461 = fadd float %152, %430, !dbg !75
  %462 = fadd float %153, %432, !dbg !75
  %463 = fadd float %154, %434, !dbg !75
  %464 = fadd float %155, %436, !dbg !75
  %465 = fadd float %156, %438, !dbg !75
  %466 = fadd float %157, %440, !dbg !75
  %467 = fadd float %158, %442, !dbg !75
  %468 = fadd float %159, %444, !dbg !75
  %469 = fadd float %160, %446, !dbg !75
  %470 = fadd float %161, %448, !dbg !75
  %471 = fadd float %162, %450, !dbg !75
  %472 = fadd float %163, %452, !dbg !75
  %473 = fadd float %164, %454, !dbg !75
  %474 = fadd float %165, %456, !dbg !75
  %475 = fadd float %166, %458, !dbg !75
  %476 = fadd float %167, %460, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %135, %331
  %477 = phi float [ %461, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %478 = phi float [ %462, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %479 = phi float [ %463, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %480 = phi float [ %464, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %481 = phi float [ %465, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %482 = phi float [ %466, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %483 = phi float [ %467, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %484 = phi float [ %468, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %485 = phi float [ %469, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %486 = phi float [ %470, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %487 = phi float [ %471, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %488 = phi float [ %472, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %489 = phi float [ %473, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %490 = phi float [ %474, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %491 = phi float [ %475, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %492 = phi float [ %476, %331 ], [ 0.000000e+00, %135 ], !dbg !68
  %493 = phi float [ %364, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %494 = phi float [ %365, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %495 = phi float [ %366, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %496 = phi float [ %367, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %497 = phi float [ %368, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %498 = phi float [ %369, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %499 = phi float [ %370, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %500 = phi float [ %371, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %501 = phi float [ %372, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %502 = phi float [ %373, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %503 = phi float [ %374, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %504 = phi float [ %375, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %505 = phi float [ %376, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %506 = phi float [ %377, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %507 = phi float [ %378, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %508 = phi float [ %379, %331 ], [ 1.000000e+00, %135 ], !dbg !68
  %509 = phi <16 x float> [ %412, %331 ], [ %329, %135 ]
  %510 = select <16 x i1> %134, <16 x float> %509, <16 x float> %168, !dbg !39
  %511 = select i1 %27, float %477, float %152, !dbg !76
  %512 = select i1 %27, float %478, float %153, !dbg !76
  %513 = select i1 %27, float %479, float %154, !dbg !76
  %514 = select i1 %27, float %480, float %155, !dbg !76
  %515 = select i1 %27, float %481, float %156, !dbg !76
  %516 = select i1 %27, float %482, float %157, !dbg !76
  %517 = select i1 %27, float %483, float %158, !dbg !76
  %518 = select i1 %27, float %484, float %159, !dbg !76
  %519 = select i1 %27, float %485, float %160, !dbg !76
  %520 = select i1 %27, float %486, float %161, !dbg !76
  %521 = select i1 %27, float %487, float %162, !dbg !76
  %522 = select i1 %27, float %488, float %163, !dbg !76
  %523 = select i1 %27, float %489, float %164, !dbg !76
  %524 = select i1 %27, float %490, float %165, !dbg !76
  %525 = select i1 %27, float %491, float %166, !dbg !76
  %526 = select i1 %27, float %492, float %167, !dbg !76
  %527 = select i1 %27, float %493, float %136, !dbg !77
  %528 = select i1 %27, float %494, float %137, !dbg !77
  %529 = select i1 %27, float %495, float %138, !dbg !77
  %530 = select i1 %27, float %496, float %139, !dbg !77
  %531 = select i1 %27, float %497, float %140, !dbg !77
  %532 = select i1 %27, float %498, float %141, !dbg !77
  %533 = select i1 %27, float %499, float %142, !dbg !77
  %534 = select i1 %27, float %500, float %143, !dbg !77
  %535 = select i1 %27, float %501, float %144, !dbg !77
  %536 = select i1 %27, float %502, float %145, !dbg !77
  %537 = select i1 %27, float %503, float %146, !dbg !77
  %538 = select i1 %27, float %504, float %147, !dbg !77
  %539 = select i1 %27, float %505, float %148, !dbg !77
  %540 = select i1 %27, float %506, float %149, !dbg !77
  %541 = select i1 %27, float %507, float %150, !dbg !77
  %542 = select i1 %27, float %508, float %151, !dbg !77
  %543 = sext i32 %177 to i64, !dbg !78
  %544 = getelementptr bfloat, ptr addrspace(1) %8, i64 %543, !dbg !78
  %545 = sext i32 %178 to i64, !dbg !78
  %546 = getelementptr bfloat, ptr addrspace(1) %8, i64 %545, !dbg !78
  %547 = extractelement <16 x float> %329, i64 0, !dbg !79
  %548 = fptrunc float %547 to bfloat, !dbg !79
  %549 = extractelement <16 x float> %329, i64 1, !dbg !79
  %550 = fptrunc float %549 to bfloat, !dbg !79
  %551 = extractelement <16 x float> %329, i64 2, !dbg !79
  %552 = fptrunc float %551 to bfloat, !dbg !79
  %553 = extractelement <16 x float> %329, i64 3, !dbg !79
  %554 = fptrunc float %553 to bfloat, !dbg !79
  %555 = extractelement <16 x float> %329, i64 4, !dbg !79
  %556 = fptrunc float %555 to bfloat, !dbg !79
  %557 = extractelement <16 x float> %329, i64 5, !dbg !79
  %558 = fptrunc float %557 to bfloat, !dbg !79
  %559 = extractelement <16 x float> %329, i64 6, !dbg !79
  %560 = fptrunc float %559 to bfloat, !dbg !79
  %561 = extractelement <16 x float> %329, i64 7, !dbg !79
  %562 = fptrunc float %561 to bfloat, !dbg !79
  %563 = extractelement <16 x float> %329, i64 8, !dbg !79
  %564 = fptrunc float %563 to bfloat, !dbg !79
  %565 = extractelement <16 x float> %329, i64 9, !dbg !79
  %566 = fptrunc float %565 to bfloat, !dbg !79
  %567 = extractelement <16 x float> %329, i64 10, !dbg !79
  %568 = fptrunc float %567 to bfloat, !dbg !79
  %569 = extractelement <16 x float> %329, i64 11, !dbg !79
  %570 = fptrunc float %569 to bfloat, !dbg !79
  %571 = extractelement <16 x float> %329, i64 12, !dbg !79
  %572 = fptrunc float %571 to bfloat, !dbg !79
  %573 = extractelement <16 x float> %329, i64 13, !dbg !79
  %574 = fptrunc float %573 to bfloat, !dbg !79
  %575 = extractelement <16 x float> %329, i64 14, !dbg !79
  %576 = fptrunc float %575 to bfloat, !dbg !79
  %577 = extractelement <16 x float> %329, i64 15, !dbg !79
  %578 = fptrunc float %577 to bfloat, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %579 = bitcast bfloat %548 to i16, !dbg !79
  %580 = bitcast bfloat %550 to i16, !dbg !79
  %581 = bitcast bfloat %552 to i16, !dbg !79
  %582 = bitcast bfloat %554 to i16, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %103, i16 %579, i16 %580, i16 %581, i16 %582, i1 true) #5, !dbg !79
  %583 = bitcast bfloat %556 to i16, !dbg !79
  %584 = bitcast bfloat %558 to i16, !dbg !79
  %585 = bitcast bfloat %560 to i16, !dbg !79
  %586 = bitcast bfloat %562 to i16, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %104, i16 %583, i16 %584, i16 %585, i16 %586, i1 true) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %587 = load <4 x i32>, ptr addrspace(3) %126, align 16, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %588 = bitcast bfloat %564 to i16, !dbg !79
  %589 = bitcast bfloat %566 to i16, !dbg !79
  %590 = bitcast bfloat %568 to i16, !dbg !79
  %591 = bitcast bfloat %570 to i16, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %103, i16 %588, i16 %589, i16 %590, i16 %591, i1 true) #5, !dbg !79
  %592 = bitcast bfloat %572 to i16, !dbg !79
  %593 = bitcast bfloat %574 to i16, !dbg !79
  %594 = bitcast bfloat %576 to i16, !dbg !79
  %595 = bitcast bfloat %578 to i16, !dbg !79
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %104, i16 %592, i16 %593, i16 %594, i16 %595, i1 true) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %596 = load <4 x i32>, ptr addrspace(3) %126, align 16, !dbg !79
  %.extract224 = extractelement <4 x i32> %587, i64 0, !dbg !79
  %.extract226 = extractelement <4 x i32> %587, i64 1, !dbg !79
  %.extract228 = extractelement <4 x i32> %587, i64 2, !dbg !79
  %.extract230 = extractelement <4 x i32> %587, i64 3, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract224, i32 %.extract226, i32 %.extract228, i32 %.extract230, ptr addrspace(1) %544, i1 %28) #5, !dbg !79
  %.extract232 = extractelement <4 x i32> %596, i64 0, !dbg !79
  %.extract234 = extractelement <4 x i32> %596, i64 1, !dbg !79
  %.extract236 = extractelement <4 x i32> %596, i64 2, !dbg !79
  %.extract238 = extractelement <4 x i32> %596, i64 3, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract232, i32 %.extract234, i32 %.extract236, i32 %.extract238, ptr addrspace(1) %546, i1 %29) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !38
  %597 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !38
  br i1 %597, label %135, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %598 = lshr i32 %19, 5, !dbg !11
  %599 = and i32 %19, 3, !dbg !11
  %600 = or disjoint i32 %18, %599, !dbg !12
  %601 = icmp slt i32 %600, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %602 = extractelement <16 x float> %510, i64 0, !dbg !82
  %603 = extractelement <16 x float> %510, i64 1, !dbg !82
  %604 = fsub float %603, %602, !dbg !82
  %605 = fadd float %527, %528, !dbg !84
  %606 = fcmp oeq float %605, 0.000000e+00, !dbg !85
  %607 = tail call float @llvm.nvvm.div.full(float %528, float %605), !dbg !86
  %608 = select i1 %606, float 0.000000e+00, float %607, !dbg !87
  %609 = fmul float %604, %608, !dbg !88
  %610 = fadd float %602, %609, !dbg !89
  %611 = fadd float %511, %512, !dbg !90
  %612 = fmul float %604, %604, !dbg !91
  %613 = fmul float %612, %527, !dbg !92
  %614 = fmul float %613, %608, !dbg !93
  %615 = fadd float %611, %614, !dbg !94
  %616 = extractelement <16 x float> %510, i64 2, !dbg !82
  %617 = fsub float %616, %610, !dbg !82
  %618 = fadd float %529, %605, !dbg !84
  %619 = fcmp oeq float %618, 0.000000e+00, !dbg !85
  %620 = tail call float @llvm.nvvm.div.full(float %529, float %618), !dbg !86
  %621 = select i1 %619, float 0.000000e+00, float %620, !dbg !87
  %622 = fmul float %621, %617, !dbg !88
  %623 = fadd float %610, %622, !dbg !89
  %624 = fadd float %513, %615, !dbg !90
  %625 = fmul float %617, %617, !dbg !91
  %626 = fmul float %605, %625, !dbg !92
  %627 = fmul float %621, %626, !dbg !93
  %628 = fadd float %624, %627, !dbg !94
  %629 = extractelement <16 x float> %510, i64 3, !dbg !82
  %630 = fsub float %629, %623, !dbg !82
  %631 = fadd float %530, %618, !dbg !84
  %632 = fcmp oeq float %631, 0.000000e+00, !dbg !85
  %633 = tail call float @llvm.nvvm.div.full(float %530, float %631), !dbg !86
  %634 = select i1 %632, float 0.000000e+00, float %633, !dbg !87
  %635 = fmul float %634, %630, !dbg !88
  %636 = fadd float %623, %635, !dbg !89
  %637 = fadd float %514, %628, !dbg !90
  %638 = fmul float %630, %630, !dbg !91
  %639 = fmul float %618, %638, !dbg !92
  %640 = fmul float %634, %639, !dbg !93
  %641 = fadd float %637, %640, !dbg !94
  %642 = extractelement <16 x float> %510, i64 4, !dbg !82
  %643 = extractelement <16 x float> %510, i64 5, !dbg !82
  %644 = fsub float %643, %642, !dbg !82
  %645 = fadd float %531, %532, !dbg !84
  %646 = fcmp oeq float %645, 0.000000e+00, !dbg !85
  %647 = tail call float @llvm.nvvm.div.full(float %532, float %645), !dbg !86
  %648 = select i1 %646, float 0.000000e+00, float %647, !dbg !87
  %649 = fmul float %644, %648, !dbg !88
  %650 = fadd float %642, %649, !dbg !89
  %651 = fadd float %515, %516, !dbg !90
  %652 = fmul float %644, %644, !dbg !91
  %653 = fmul float %652, %531, !dbg !92
  %654 = fmul float %653, %648, !dbg !93
  %655 = fadd float %651, %654, !dbg !94
  %656 = extractelement <16 x float> %510, i64 6, !dbg !82
  %657 = fsub float %656, %650, !dbg !82
  %658 = fadd float %533, %645, !dbg !84
  %659 = fcmp oeq float %658, 0.000000e+00, !dbg !85
  %660 = tail call float @llvm.nvvm.div.full(float %533, float %658), !dbg !86
  %661 = select i1 %659, float 0.000000e+00, float %660, !dbg !87
  %662 = fmul float %661, %657, !dbg !88
  %663 = fadd float %650, %662, !dbg !89
  %664 = fadd float %517, %655, !dbg !90
  %665 = fmul float %657, %657, !dbg !91
  %666 = fmul float %645, %665, !dbg !92
  %667 = fmul float %661, %666, !dbg !93
  %668 = fadd float %664, %667, !dbg !94
  %669 = extractelement <16 x float> %510, i64 7, !dbg !82
  %670 = fsub float %669, %663, !dbg !82
  %671 = fadd float %534, %658, !dbg !84
  %672 = fcmp oeq float %671, 0.000000e+00, !dbg !85
  %673 = tail call float @llvm.nvvm.div.full(float %534, float %671), !dbg !86
  %674 = select i1 %672, float 0.000000e+00, float %673, !dbg !87
  %675 = fmul float %674, %670, !dbg !88
  %676 = fadd float %663, %675, !dbg !89
  %677 = fadd float %518, %668, !dbg !90
  %678 = fmul float %670, %670, !dbg !91
  %679 = fmul float %658, %678, !dbg !92
  %680 = fmul float %674, %679, !dbg !93
  %681 = fadd float %677, %680, !dbg !94
  %682 = extractelement <16 x float> %510, i64 8, !dbg !82
  %683 = extractelement <16 x float> %510, i64 9, !dbg !82
  %684 = fsub float %683, %682, !dbg !82
  %685 = fadd float %535, %536, !dbg !84
  %686 = fcmp oeq float %685, 0.000000e+00, !dbg !85
  %687 = tail call float @llvm.nvvm.div.full(float %536, float %685), !dbg !86
  %688 = select i1 %686, float 0.000000e+00, float %687, !dbg !87
  %689 = fmul float %684, %688, !dbg !88
  %690 = fadd float %682, %689, !dbg !89
  %691 = fadd float %519, %520, !dbg !90
  %692 = fmul float %684, %684, !dbg !91
  %693 = fmul float %692, %535, !dbg !92
  %694 = fmul float %693, %688, !dbg !93
  %695 = fadd float %691, %694, !dbg !94
  %696 = extractelement <16 x float> %510, i64 10, !dbg !82
  %697 = fsub float %696, %690, !dbg !82
  %698 = fadd float %537, %685, !dbg !84
  %699 = fcmp oeq float %698, 0.000000e+00, !dbg !85
  %700 = tail call float @llvm.nvvm.div.full(float %537, float %698), !dbg !86
  %701 = select i1 %699, float 0.000000e+00, float %700, !dbg !87
  %702 = fmul float %701, %697, !dbg !88
  %703 = fadd float %690, %702, !dbg !89
  %704 = fadd float %521, %695, !dbg !90
  %705 = fmul float %697, %697, !dbg !91
  %706 = fmul float %685, %705, !dbg !92
  %707 = fmul float %701, %706, !dbg !93
  %708 = fadd float %704, %707, !dbg !94
  %709 = extractelement <16 x float> %510, i64 11, !dbg !82
  %710 = fsub float %709, %703, !dbg !82
  %711 = fadd float %538, %698, !dbg !84
  %712 = fcmp oeq float %711, 0.000000e+00, !dbg !85
  %713 = tail call float @llvm.nvvm.div.full(float %538, float %711), !dbg !86
  %714 = select i1 %712, float 0.000000e+00, float %713, !dbg !87
  %715 = fmul float %714, %710, !dbg !88
  %716 = fadd float %703, %715, !dbg !89
  %717 = fadd float %522, %708, !dbg !90
  %718 = fmul float %710, %710, !dbg !91
  %719 = fmul float %698, %718, !dbg !92
  %720 = fmul float %714, %719, !dbg !93
  %721 = fadd float %717, %720, !dbg !94
  %722 = extractelement <16 x float> %510, i64 12, !dbg !82
  %723 = extractelement <16 x float> %510, i64 13, !dbg !82
  %724 = fsub float %723, %722, !dbg !82
  %725 = fadd float %539, %540, !dbg !84
  %726 = fcmp oeq float %725, 0.000000e+00, !dbg !85
  %727 = tail call float @llvm.nvvm.div.full(float %540, float %725), !dbg !86
  %728 = select i1 %726, float 0.000000e+00, float %727, !dbg !87
  %729 = fmul float %724, %728, !dbg !88
  %730 = fadd float %722, %729, !dbg !89
  %731 = fadd float %523, %524, !dbg !90
  %732 = fmul float %724, %724, !dbg !91
  %733 = fmul float %732, %539, !dbg !92
  %734 = fmul float %733, %728, !dbg !93
  %735 = fadd float %731, %734, !dbg !94
  %736 = extractelement <16 x float> %510, i64 14, !dbg !82
  %737 = fsub float %736, %730, !dbg !82
  %738 = fadd float %541, %725, !dbg !84
  %739 = fcmp oeq float %738, 0.000000e+00, !dbg !85
  %740 = tail call float @llvm.nvvm.div.full(float %541, float %738), !dbg !86
  %741 = select i1 %739, float 0.000000e+00, float %740, !dbg !87
  %742 = fmul float %741, %737, !dbg !88
  %743 = fadd float %730, %742, !dbg !89
  %744 = fadd float %525, %735, !dbg !90
  %745 = fmul float %737, %737, !dbg !91
  %746 = fmul float %725, %745, !dbg !92
  %747 = fmul float %741, %746, !dbg !93
  %748 = fadd float %744, %747, !dbg !94
  %749 = extractelement <16 x float> %510, i64 15, !dbg !82
  %750 = fsub float %749, %743, !dbg !82
  %751 = fadd float %542, %738, !dbg !84
  %752 = fcmp oeq float %751, 0.000000e+00, !dbg !85
  %753 = tail call float @llvm.nvvm.div.full(float %542, float %751), !dbg !86
  %754 = select i1 %752, float 0.000000e+00, float %753, !dbg !87
  %755 = fmul float %754, %750, !dbg !88
  %756 = fadd float %743, %755, !dbg !89
  %757 = fadd float %526, %748, !dbg !90
  %758 = fmul float %750, %750, !dbg !91
  %759 = fmul float %738, %758, !dbg !92
  %760 = fmul float %754, %759, !dbg !93
  %761 = fadd float %757, %760, !dbg !94
  %762 = bitcast float %636 to i32, !dbg !80
  %763 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %762, i32 16, i32 31), !dbg !80
  %764 = bitcast i32 %763 to float, !dbg !80
  %765 = bitcast float %641 to i32, !dbg !80
  %766 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %765, i32 16, i32 31), !dbg !80
  %767 = bitcast i32 %766 to float, !dbg !80
  %768 = bitcast float %631 to i32, !dbg !80
  %769 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %768, i32 16, i32 31), !dbg !80
  %770 = bitcast i32 %769 to float, !dbg !80
  %771 = fsub float %764, %636, !dbg !82
  %772 = fadd float %631, %770, !dbg !84
  %773 = fcmp oeq float %772, 0.000000e+00, !dbg !85
  %774 = tail call float @llvm.nvvm.div.full(float %770, float %772), !dbg !86
  %775 = select i1 %773, float 0.000000e+00, float %774, !dbg !87
  %776 = fmul float %771, %775, !dbg !88
  %777 = fadd float %636, %776, !dbg !89
  %778 = fadd float %641, %767, !dbg !90
  %779 = fmul float %771, %771, !dbg !91
  %780 = fmul float %631, %779, !dbg !92
  %781 = fmul float %780, %775, !dbg !93
  %782 = fadd float %778, %781, !dbg !94
  %783 = bitcast float %777 to i32, !dbg !80
  %784 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %783, i32 8, i32 31), !dbg !80
  %785 = bitcast i32 %784 to float, !dbg !80
  %786 = bitcast float %782 to i32, !dbg !80
  %787 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %786, i32 8, i32 31), !dbg !80
  %788 = bitcast i32 %787 to float, !dbg !80
  %789 = bitcast float %772 to i32, !dbg !80
  %790 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %789, i32 8, i32 31), !dbg !80
  %791 = bitcast i32 %790 to float, !dbg !80
  %792 = fsub float %785, %777, !dbg !82
  %793 = fadd float %772, %791, !dbg !84
  %794 = fcmp oeq float %793, 0.000000e+00, !dbg !85
  %795 = tail call float @llvm.nvvm.div.full(float %791, float %793), !dbg !86
  %796 = select i1 %794, float 0.000000e+00, float %795, !dbg !87
  %797 = fmul float %792, %796, !dbg !88
  %798 = fadd float %777, %797, !dbg !89
  %799 = fadd float %782, %788, !dbg !90
  %800 = fmul float %792, %792, !dbg !91
  %801 = fmul float %772, %800, !dbg !92
  %802 = fmul float %796, %801, !dbg !93
  %803 = fadd float %799, %802, !dbg !94
  %804 = bitcast float %798 to i32, !dbg !80
  %805 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %804, i32 4, i32 31), !dbg !80
  %806 = bitcast i32 %805 to float, !dbg !80
  %807 = bitcast float %803 to i32, !dbg !80
  %808 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %807, i32 4, i32 31), !dbg !80
  %809 = bitcast i32 %808 to float, !dbg !80
  %810 = bitcast float %793 to i32, !dbg !80
  %811 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %810, i32 4, i32 31), !dbg !80
  %812 = bitcast i32 %811 to float, !dbg !80
  %813 = fsub float %806, %798, !dbg !82
  %814 = fadd float %793, %812, !dbg !84
  %815 = fcmp oeq float %814, 0.000000e+00, !dbg !85
  %816 = tail call float @llvm.nvvm.div.full(float %812, float %814), !dbg !86
  %817 = select i1 %815, float 0.000000e+00, float %816, !dbg !87
  %818 = fmul float %813, %817, !dbg !88
  %819 = fadd float %798, %818, !dbg !89
  %820 = fadd float %803, %809, !dbg !90
  %821 = fmul float %813, %813, !dbg !91
  %822 = fmul float %793, %821, !dbg !92
  %823 = fmul float %817, %822, !dbg !93
  %824 = fadd float %820, %823, !dbg !94
  %825 = bitcast float %819 to i32, !dbg !80
  %826 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %825, i32 2, i32 31), !dbg !80
  %827 = bitcast i32 %826 to float, !dbg !80
  %828 = bitcast float %824 to i32, !dbg !80
  %829 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %828, i32 2, i32 31), !dbg !80
  %830 = bitcast i32 %829 to float, !dbg !80
  %831 = bitcast float %814 to i32, !dbg !80
  %832 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %831, i32 2, i32 31), !dbg !80
  %833 = bitcast i32 %832 to float, !dbg !80
  %834 = fsub float %827, %819, !dbg !82
  %835 = fadd float %814, %833, !dbg !84
  %836 = fcmp oeq float %835, 0.000000e+00, !dbg !85
  %837 = tail call float @llvm.nvvm.div.full(float %833, float %835), !dbg !86
  %838 = select i1 %836, float 0.000000e+00, float %837, !dbg !87
  %839 = fmul float %834, %838, !dbg !88
  %840 = fadd float %819, %839, !dbg !89
  %841 = fadd float %824, %830, !dbg !90
  %842 = fmul float %834, %834, !dbg !91
  %843 = fmul float %814, %842, !dbg !92
  %844 = fmul float %838, %843, !dbg !93
  %845 = fadd float %841, %844, !dbg !94
  %846 = bitcast float %840 to i32, !dbg !80
  %847 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %846, i32 1, i32 31), !dbg !80
  %848 = bitcast i32 %847 to float, !dbg !80
  %849 = bitcast float %845 to i32, !dbg !80
  %850 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %849, i32 1, i32 31), !dbg !80
  %851 = bitcast i32 %850 to float, !dbg !80
  %852 = bitcast float %835 to i32, !dbg !80
  %853 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %852, i32 1, i32 31), !dbg !80
  %854 = bitcast i32 %853 to float, !dbg !80
  %855 = fsub float %848, %840, !dbg !82
  %856 = fadd float %835, %854, !dbg !84
  %857 = fcmp oeq float %856, 0.000000e+00, !dbg !85
  %858 = tail call float @llvm.nvvm.div.full(float %854, float %856), !dbg !86
  %859 = select i1 %857, float 0.000000e+00, float %858, !dbg !87
  %860 = fmul float %855, %859, !dbg !88
  %861 = fadd float %840, %860, !dbg !89
  %862 = fadd float %845, %851, !dbg !90
  %863 = fmul float %855, %855, !dbg !91
  %864 = fmul float %835, %863, !dbg !92
  %865 = fmul float %859, %864, !dbg !93
  %866 = fadd float %862, %865, !dbg !94
  %867 = bitcast float %676 to i32, !dbg !80
  %868 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %867, i32 16, i32 31), !dbg !80
  %869 = bitcast i32 %868 to float, !dbg !80
  %870 = bitcast float %681 to i32, !dbg !80
  %871 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %870, i32 16, i32 31), !dbg !80
  %872 = bitcast i32 %871 to float, !dbg !80
  %873 = bitcast float %671 to i32, !dbg !80
  %874 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %873, i32 16, i32 31), !dbg !80
  %875 = bitcast i32 %874 to float, !dbg !80
  %876 = fsub float %869, %676, !dbg !82
  %877 = fadd float %671, %875, !dbg !84
  %878 = fcmp oeq float %877, 0.000000e+00, !dbg !85
  %879 = tail call float @llvm.nvvm.div.full(float %875, float %877), !dbg !86
  %880 = select i1 %878, float 0.000000e+00, float %879, !dbg !87
  %881 = fmul float %876, %880, !dbg !88
  %882 = fadd float %676, %881, !dbg !89
  %883 = fadd float %681, %872, !dbg !90
  %884 = fmul float %876, %876, !dbg !91
  %885 = fmul float %671, %884, !dbg !92
  %886 = fmul float %885, %880, !dbg !93
  %887 = fadd float %883, %886, !dbg !94
  %888 = bitcast float %882 to i32, !dbg !80
  %889 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %888, i32 8, i32 31), !dbg !80
  %890 = bitcast i32 %889 to float, !dbg !80
  %891 = bitcast float %887 to i32, !dbg !80
  %892 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %891, i32 8, i32 31), !dbg !80
  %893 = bitcast i32 %892 to float, !dbg !80
  %894 = bitcast float %877 to i32, !dbg !80
  %895 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %894, i32 8, i32 31), !dbg !80
  %896 = bitcast i32 %895 to float, !dbg !80
  %897 = fsub float %890, %882, !dbg !82
  %898 = fadd float %877, %896, !dbg !84
  %899 = fcmp oeq float %898, 0.000000e+00, !dbg !85
  %900 = tail call float @llvm.nvvm.div.full(float %896, float %898), !dbg !86
  %901 = select i1 %899, float 0.000000e+00, float %900, !dbg !87
  %902 = fmul float %897, %901, !dbg !88
  %903 = fadd float %882, %902, !dbg !89
  %904 = fadd float %887, %893, !dbg !90
  %905 = fmul float %897, %897, !dbg !91
  %906 = fmul float %877, %905, !dbg !92
  %907 = fmul float %901, %906, !dbg !93
  %908 = fadd float %904, %907, !dbg !94
  %909 = bitcast float %903 to i32, !dbg !80
  %910 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %909, i32 4, i32 31), !dbg !80
  %911 = bitcast i32 %910 to float, !dbg !80
  %912 = bitcast float %908 to i32, !dbg !80
  %913 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %912, i32 4, i32 31), !dbg !80
  %914 = bitcast i32 %913 to float, !dbg !80
  %915 = bitcast float %898 to i32, !dbg !80
  %916 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %915, i32 4, i32 31), !dbg !80
  %917 = bitcast i32 %916 to float, !dbg !80
  %918 = fsub float %911, %903, !dbg !82
  %919 = fadd float %898, %917, !dbg !84
  %920 = fcmp oeq float %919, 0.000000e+00, !dbg !85
  %921 = tail call float @llvm.nvvm.div.full(float %917, float %919), !dbg !86
  %922 = select i1 %920, float 0.000000e+00, float %921, !dbg !87
  %923 = fmul float %918, %922, !dbg !88
  %924 = fadd float %903, %923, !dbg !89
  %925 = fadd float %908, %914, !dbg !90
  %926 = fmul float %918, %918, !dbg !91
  %927 = fmul float %898, %926, !dbg !92
  %928 = fmul float %922, %927, !dbg !93
  %929 = fadd float %925, %928, !dbg !94
  %930 = bitcast float %924 to i32, !dbg !80
  %931 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %930, i32 2, i32 31), !dbg !80
  %932 = bitcast i32 %931 to float, !dbg !80
  %933 = bitcast float %929 to i32, !dbg !80
  %934 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %933, i32 2, i32 31), !dbg !80
  %935 = bitcast i32 %934 to float, !dbg !80
  %936 = bitcast float %919 to i32, !dbg !80
  %937 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %936, i32 2, i32 31), !dbg !80
  %938 = bitcast i32 %937 to float, !dbg !80
  %939 = fsub float %932, %924, !dbg !82
  %940 = fadd float %919, %938, !dbg !84
  %941 = fcmp oeq float %940, 0.000000e+00, !dbg !85
  %942 = tail call float @llvm.nvvm.div.full(float %938, float %940), !dbg !86
  %943 = select i1 %941, float 0.000000e+00, float %942, !dbg !87
  %944 = fmul float %939, %943, !dbg !88
  %945 = fadd float %924, %944, !dbg !89
  %946 = fadd float %929, %935, !dbg !90
  %947 = fmul float %939, %939, !dbg !91
  %948 = fmul float %919, %947, !dbg !92
  %949 = fmul float %943, %948, !dbg !93
  %950 = fadd float %946, %949, !dbg !94
  %951 = bitcast float %945 to i32, !dbg !80
  %952 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %951, i32 1, i32 31), !dbg !80
  %953 = bitcast i32 %952 to float, !dbg !80
  %954 = bitcast float %950 to i32, !dbg !80
  %955 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %954, i32 1, i32 31), !dbg !80
  %956 = bitcast i32 %955 to float, !dbg !80
  %957 = bitcast float %940 to i32, !dbg !80
  %958 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %957, i32 1, i32 31), !dbg !80
  %959 = bitcast i32 %958 to float, !dbg !80
  %960 = fsub float %953, %945, !dbg !82
  %961 = fadd float %940, %959, !dbg !84
  %962 = fcmp oeq float %961, 0.000000e+00, !dbg !85
  %963 = tail call float @llvm.nvvm.div.full(float %959, float %961), !dbg !86
  %964 = select i1 %962, float 0.000000e+00, float %963, !dbg !87
  %965 = fmul float %960, %964, !dbg !88
  %966 = fadd float %945, %965, !dbg !89
  %967 = fadd float %950, %956, !dbg !90
  %968 = fmul float %960, %960, !dbg !91
  %969 = fmul float %940, %968, !dbg !92
  %970 = fmul float %964, %969, !dbg !93
  %971 = fadd float %967, %970, !dbg !94
  %972 = bitcast float %716 to i32, !dbg !80
  %973 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %972, i32 16, i32 31), !dbg !80
  %974 = bitcast i32 %973 to float, !dbg !80
  %975 = bitcast float %721 to i32, !dbg !80
  %976 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %975, i32 16, i32 31), !dbg !80
  %977 = bitcast i32 %976 to float, !dbg !80
  %978 = bitcast float %711 to i32, !dbg !80
  %979 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %978, i32 16, i32 31), !dbg !80
  %980 = bitcast i32 %979 to float, !dbg !80
  %981 = fsub float %974, %716, !dbg !82
  %982 = fadd float %711, %980, !dbg !84
  %983 = fcmp oeq float %982, 0.000000e+00, !dbg !85
  %984 = tail call float @llvm.nvvm.div.full(float %980, float %982), !dbg !86
  %985 = select i1 %983, float 0.000000e+00, float %984, !dbg !87
  %986 = fmul float %981, %985, !dbg !88
  %987 = fadd float %716, %986, !dbg !89
  %988 = fadd float %721, %977, !dbg !90
  %989 = fmul float %981, %981, !dbg !91
  %990 = fmul float %711, %989, !dbg !92
  %991 = fmul float %990, %985, !dbg !93
  %992 = fadd float %988, %991, !dbg !94
  %993 = bitcast float %987 to i32, !dbg !80
  %994 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %993, i32 8, i32 31), !dbg !80
  %995 = bitcast i32 %994 to float, !dbg !80
  %996 = bitcast float %992 to i32, !dbg !80
  %997 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %996, i32 8, i32 31), !dbg !80
  %998 = bitcast i32 %997 to float, !dbg !80
  %999 = bitcast float %982 to i32, !dbg !80
  %1000 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %999, i32 8, i32 31), !dbg !80
  %1001 = bitcast i32 %1000 to float, !dbg !80
  %1002 = fsub float %995, %987, !dbg !82
  %1003 = fadd float %982, %1001, !dbg !84
  %1004 = fcmp oeq float %1003, 0.000000e+00, !dbg !85
  %1005 = tail call float @llvm.nvvm.div.full(float %1001, float %1003), !dbg !86
  %1006 = select i1 %1004, float 0.000000e+00, float %1005, !dbg !87
  %1007 = fmul float %1002, %1006, !dbg !88
  %1008 = fadd float %987, %1007, !dbg !89
  %1009 = fadd float %992, %998, !dbg !90
  %1010 = fmul float %1002, %1002, !dbg !91
  %1011 = fmul float %982, %1010, !dbg !92
  %1012 = fmul float %1006, %1011, !dbg !93
  %1013 = fadd float %1009, %1012, !dbg !94
  %1014 = bitcast float %1008 to i32, !dbg !80
  %1015 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1014, i32 4, i32 31), !dbg !80
  %1016 = bitcast i32 %1015 to float, !dbg !80
  %1017 = bitcast float %1013 to i32, !dbg !80
  %1018 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1017, i32 4, i32 31), !dbg !80
  %1019 = bitcast i32 %1018 to float, !dbg !80
  %1020 = bitcast float %1003 to i32, !dbg !80
  %1021 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1020, i32 4, i32 31), !dbg !80
  %1022 = bitcast i32 %1021 to float, !dbg !80
  %1023 = fsub float %1016, %1008, !dbg !82
  %1024 = fadd float %1003, %1022, !dbg !84
  %1025 = fcmp oeq float %1024, 0.000000e+00, !dbg !85
  %1026 = tail call float @llvm.nvvm.div.full(float %1022, float %1024), !dbg !86
  %1027 = select i1 %1025, float 0.000000e+00, float %1026, !dbg !87
  %1028 = fmul float %1023, %1027, !dbg !88
  %1029 = fadd float %1008, %1028, !dbg !89
  %1030 = fadd float %1013, %1019, !dbg !90
  %1031 = fmul float %1023, %1023, !dbg !91
  %1032 = fmul float %1003, %1031, !dbg !92
  %1033 = fmul float %1027, %1032, !dbg !93
  %1034 = fadd float %1030, %1033, !dbg !94
  %1035 = bitcast float %1029 to i32, !dbg !80
  %1036 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1035, i32 2, i32 31), !dbg !80
  %1037 = bitcast i32 %1036 to float, !dbg !80
  %1038 = bitcast float %1034 to i32, !dbg !80
  %1039 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1038, i32 2, i32 31), !dbg !80
  %1040 = bitcast i32 %1039 to float, !dbg !80
  %1041 = bitcast float %1024 to i32, !dbg !80
  %1042 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1041, i32 2, i32 31), !dbg !80
  %1043 = bitcast i32 %1042 to float, !dbg !80
  %1044 = fsub float %1037, %1029, !dbg !82
  %1045 = fadd float %1024, %1043, !dbg !84
  %1046 = fcmp oeq float %1045, 0.000000e+00, !dbg !85
  %1047 = tail call float @llvm.nvvm.div.full(float %1043, float %1045), !dbg !86
  %1048 = select i1 %1046, float 0.000000e+00, float %1047, !dbg !87
  %1049 = fmul float %1044, %1048, !dbg !88
  %1050 = fadd float %1029, %1049, !dbg !89
  %1051 = fadd float %1034, %1040, !dbg !90
  %1052 = fmul float %1044, %1044, !dbg !91
  %1053 = fmul float %1024, %1052, !dbg !92
  %1054 = fmul float %1048, %1053, !dbg !93
  %1055 = fadd float %1051, %1054, !dbg !94
  %1056 = bitcast float %1050 to i32, !dbg !80
  %1057 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1056, i32 1, i32 31), !dbg !80
  %1058 = bitcast i32 %1057 to float, !dbg !80
  %1059 = bitcast float %1055 to i32, !dbg !80
  %1060 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1059, i32 1, i32 31), !dbg !80
  %1061 = bitcast i32 %1060 to float, !dbg !80
  %1062 = bitcast float %1045 to i32, !dbg !80
  %1063 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1062, i32 1, i32 31), !dbg !80
  %1064 = bitcast i32 %1063 to float, !dbg !80
  %1065 = fsub float %1058, %1050, !dbg !82
  %1066 = fadd float %1045, %1064, !dbg !84
  %1067 = fcmp oeq float %1066, 0.000000e+00, !dbg !85
  %1068 = tail call float @llvm.nvvm.div.full(float %1064, float %1066), !dbg !86
  %1069 = select i1 %1067, float 0.000000e+00, float %1068, !dbg !87
  %1070 = fmul float %1065, %1069, !dbg !88
  %1071 = fadd float %1050, %1070, !dbg !89
  %1072 = fadd float %1055, %1061, !dbg !90
  %1073 = fmul float %1065, %1065, !dbg !91
  %1074 = fmul float %1045, %1073, !dbg !92
  %1075 = fmul float %1069, %1074, !dbg !93
  %1076 = fadd float %1072, %1075, !dbg !94
  %1077 = bitcast float %756 to i32, !dbg !80
  %1078 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1077, i32 16, i32 31), !dbg !80
  %1079 = bitcast i32 %1078 to float, !dbg !80
  %1080 = bitcast float %761 to i32, !dbg !80
  %1081 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1080, i32 16, i32 31), !dbg !80
  %1082 = bitcast i32 %1081 to float, !dbg !80
  %1083 = bitcast float %751 to i32, !dbg !80
  %1084 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1083, i32 16, i32 31), !dbg !80
  %1085 = bitcast i32 %1084 to float, !dbg !80
  %1086 = fsub float %1079, %756, !dbg !82
  %1087 = fadd float %751, %1085, !dbg !84
  %1088 = fcmp oeq float %1087, 0.000000e+00, !dbg !85
  %1089 = tail call float @llvm.nvvm.div.full(float %1085, float %1087), !dbg !86
  %1090 = select i1 %1088, float 0.000000e+00, float %1089, !dbg !87
  %1091 = fmul float %1086, %1090, !dbg !88
  %1092 = fadd float %756, %1091, !dbg !89
  %1093 = fadd float %761, %1082, !dbg !90
  %1094 = fmul float %1086, %1086, !dbg !91
  %1095 = fmul float %751, %1094, !dbg !92
  %1096 = fmul float %1095, %1090, !dbg !93
  %1097 = fadd float %1093, %1096, !dbg !94
  %1098 = bitcast float %1092 to i32, !dbg !80
  %1099 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1098, i32 8, i32 31), !dbg !80
  %1100 = bitcast i32 %1099 to float, !dbg !80
  %1101 = bitcast float %1097 to i32, !dbg !80
  %1102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1101, i32 8, i32 31), !dbg !80
  %1103 = bitcast i32 %1102 to float, !dbg !80
  %1104 = bitcast float %1087 to i32, !dbg !80
  %1105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1104, i32 8, i32 31), !dbg !80
  %1106 = bitcast i32 %1105 to float, !dbg !80
  %1107 = fsub float %1100, %1092, !dbg !82
  %1108 = fadd float %1087, %1106, !dbg !84
  %1109 = fcmp oeq float %1108, 0.000000e+00, !dbg !85
  %1110 = tail call float @llvm.nvvm.div.full(float %1106, float %1108), !dbg !86
  %1111 = select i1 %1109, float 0.000000e+00, float %1110, !dbg !87
  %1112 = fmul float %1107, %1111, !dbg !88
  %1113 = fadd float %1092, %1112, !dbg !89
  %1114 = fadd float %1097, %1103, !dbg !90
  %1115 = fmul float %1107, %1107, !dbg !91
  %1116 = fmul float %1087, %1115, !dbg !92
  %1117 = fmul float %1111, %1116, !dbg !93
  %1118 = fadd float %1114, %1117, !dbg !94
  %1119 = bitcast float %1113 to i32, !dbg !80
  %1120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1119, i32 4, i32 31), !dbg !80
  %1121 = bitcast i32 %1120 to float, !dbg !80
  %1122 = bitcast float %1118 to i32, !dbg !80
  %1123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1122, i32 4, i32 31), !dbg !80
  %1124 = bitcast i32 %1123 to float, !dbg !80
  %1125 = bitcast float %1108 to i32, !dbg !80
  %1126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1125, i32 4, i32 31), !dbg !80
  %1127 = bitcast i32 %1126 to float, !dbg !80
  %1128 = fsub float %1121, %1113, !dbg !82
  %1129 = fadd float %1108, %1127, !dbg !84
  %1130 = fcmp oeq float %1129, 0.000000e+00, !dbg !85
  %1131 = tail call float @llvm.nvvm.div.full(float %1127, float %1129), !dbg !86
  %1132 = select i1 %1130, float 0.000000e+00, float %1131, !dbg !87
  %1133 = fmul float %1128, %1132, !dbg !88
  %1134 = fadd float %1113, %1133, !dbg !89
  %1135 = fadd float %1118, %1124, !dbg !90
  %1136 = fmul float %1128, %1128, !dbg !91
  %1137 = fmul float %1108, %1136, !dbg !92
  %1138 = fmul float %1132, %1137, !dbg !93
  %1139 = fadd float %1135, %1138, !dbg !94
  %1140 = bitcast float %1134 to i32, !dbg !80
  %1141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1140, i32 2, i32 31), !dbg !80
  %1142 = bitcast i32 %1141 to float, !dbg !80
  %1143 = bitcast float %1139 to i32, !dbg !80
  %1144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1143, i32 2, i32 31), !dbg !80
  %1145 = bitcast i32 %1144 to float, !dbg !80
  %1146 = bitcast float %1129 to i32, !dbg !80
  %1147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1146, i32 2, i32 31), !dbg !80
  %1148 = bitcast i32 %1147 to float, !dbg !80
  %1149 = fsub float %1142, %1134, !dbg !82
  %1150 = fadd float %1129, %1148, !dbg !84
  %1151 = fcmp oeq float %1150, 0.000000e+00, !dbg !85
  %1152 = tail call float @llvm.nvvm.div.full(float %1148, float %1150), !dbg !86
  %1153 = select i1 %1151, float 0.000000e+00, float %1152, !dbg !87
  %1154 = fmul float %1149, %1153, !dbg !88
  %1155 = fadd float %1134, %1154, !dbg !89
  %1156 = fadd float %1139, %1145, !dbg !90
  %1157 = fmul float %1149, %1149, !dbg !91
  %1158 = fmul float %1129, %1157, !dbg !92
  %1159 = fmul float %1153, %1158, !dbg !93
  %1160 = fadd float %1156, %1159, !dbg !94
  %1161 = bitcast float %1155 to i32, !dbg !80
  %1162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1161, i32 1, i32 31), !dbg !80
  %1163 = bitcast i32 %1162 to float, !dbg !80
  %1164 = bitcast float %1160 to i32, !dbg !80
  %1165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1164, i32 1, i32 31), !dbg !80
  %1166 = bitcast i32 %1165 to float, !dbg !80
  %1167 = bitcast float %1150 to i32, !dbg !80
  %1168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1167, i32 1, i32 31), !dbg !80
  %1169 = bitcast i32 %1168 to float, !dbg !80
  %1170 = fsub float %1163, %1155, !dbg !82
  %1171 = fadd float %1150, %1169, !dbg !84
  %1172 = fcmp oeq float %1171, 0.000000e+00, !dbg !85
  %1173 = tail call float @llvm.nvvm.div.full(float %1169, float %1171), !dbg !86
  %1174 = select i1 %1172, float 0.000000e+00, float %1173, !dbg !87
  %1175 = fmul float %1170, %1174, !dbg !88
  %1176 = fadd float %1155, %1175, !dbg !89
  %1177 = fadd float %1160, %1166, !dbg !90
  %1178 = fmul float %1170, %1170, !dbg !91
  %1179 = fmul float %1150, %1178, !dbg !92
  %1180 = fmul float %1174, %1179, !dbg !93
  %1181 = fadd float %1177, %1180, !dbg !94
  %1182 = and i32 %598, 7, !dbg !80
  %1183 = icmp eq i32 %22, 0, !dbg !80
  %1184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1182, !dbg !80
  %1185 = bitcast float %861 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1184, <1 x i32> %1185, i1 %1183) #5, !dbg !80
  %1186 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1182, !dbg !80
  %1187 = bitcast float %866 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1186, <1 x i32> %1187, i1 %1183) #5, !dbg !80
  %1188 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1182, !dbg !80
  %1189 = bitcast float %856 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1188, <1 x i32> %1189, i1 %1183) #5, !dbg !80
  %1190 = or disjoint i32 %1182, 8, !dbg !80
  %1191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1190, !dbg !80
  %1192 = bitcast float %966 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1191, <1 x i32> %1192, i1 %1183) #5, !dbg !80
  %1193 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1190, !dbg !80
  %1194 = bitcast float %971 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1193, <1 x i32> %1194, i1 %1183) #5, !dbg !80
  %1195 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1190, !dbg !80
  %1196 = bitcast float %961 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1195, <1 x i32> %1196, i1 %1183) #5, !dbg !80
  %1197 = or disjoint i32 %1182, 16, !dbg !80
  %1198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1197, !dbg !80
  %1199 = bitcast float %1071 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1198, <1 x i32> %1199, i1 %1183) #5, !dbg !80
  %1200 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1197, !dbg !80
  %1201 = bitcast float %1076 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1200, <1 x i32> %1201, i1 %1183) #5, !dbg !80
  %1202 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1197, !dbg !80
  %1203 = bitcast float %1066 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1202, <1 x i32> %1203, i1 %1183) #5, !dbg !80
  %1204 = or disjoint i32 %1182, 24, !dbg !80
  %1205 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1204, !dbg !80
  %1206 = bitcast float %1176 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1205, <1 x i32> %1206, i1 %1183) #5, !dbg !80
  %1207 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1204, !dbg !80
  %1208 = bitcast float %1181 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1207, <1 x i32> %1208, i1 %1183) #5, !dbg !80
  %1209 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1204, !dbg !80
  %1210 = bitcast float %1171 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1209, <1 x i32> %1210, i1 %1183) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1211 = icmp slt i32 %19, 32, !dbg !80
  %1212 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !80
  %1213 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1212, i1 %1211) #5, !dbg !80
  %1214 = bitcast i32 %1213 to float, !dbg !80
  %1215 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %19, !dbg !80
  %1216 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1215, i1 %1211) #5, !dbg !80
  %1217 = bitcast i32 %1216 to float, !dbg !80
  %1218 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %19, !dbg !80
  %1219 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1218, i1 %1211) #5, !dbg !80
  %1220 = bitcast i32 %1219 to float, !dbg !80
  %1221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1213, i32 4, i32 31), !dbg !80
  %1222 = bitcast i32 %1221 to float, !dbg !80
  %1223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1216, i32 4, i32 31), !dbg !80
  %1224 = bitcast i32 %1223 to float, !dbg !80
  %1225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1219, i32 4, i32 31), !dbg !80
  %1226 = bitcast i32 %1225 to float, !dbg !80
  %1227 = fsub float %1222, %1214, !dbg !82
  %1228 = fadd float %1220, %1226, !dbg !84
  %1229 = fcmp oeq float %1228, 0.000000e+00, !dbg !85
  %1230 = tail call float @llvm.nvvm.div.full(float %1226, float %1228), !dbg !86
  %1231 = select i1 %1229, float 0.000000e+00, float %1230, !dbg !87
  %1232 = fmul float %1227, %1231, !dbg !88
  %1233 = fadd float %1232, %1214, !dbg !89
  %1234 = fadd float %1217, %1224, !dbg !90
  %1235 = fmul float %1227, %1227, !dbg !91
  %1236 = fmul float %1235, %1220, !dbg !92
  %1237 = fmul float %1236, %1231, !dbg !93
  %1238 = fadd float %1234, %1237, !dbg !94
  %1239 = bitcast float %1233 to i32, !dbg !80
  %1240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1239, i32 2, i32 31), !dbg !80
  %1241 = bitcast i32 %1240 to float, !dbg !80
  %1242 = bitcast float %1238 to i32, !dbg !80
  %1243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1242, i32 2, i32 31), !dbg !80
  %1244 = bitcast i32 %1243 to float, !dbg !80
  %1245 = bitcast float %1228 to i32, !dbg !80
  %1246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1245, i32 2, i32 31), !dbg !80
  %1247 = bitcast i32 %1246 to float, !dbg !80
  %1248 = fsub float %1241, %1233, !dbg !82
  %1249 = fadd float %1228, %1247, !dbg !84
  %1250 = fcmp oeq float %1249, 0.000000e+00, !dbg !85
  %1251 = tail call float @llvm.nvvm.div.full(float %1247, float %1249), !dbg !86
  %1252 = select i1 %1250, float 0.000000e+00, float %1251, !dbg !87
  %1253 = fmul float %1248, %1252, !dbg !88
  %1254 = fadd float %1233, %1253, !dbg !89
  %1255 = fadd float %1238, %1244, !dbg !90
  %1256 = fmul float %1248, %1248, !dbg !91
  %1257 = fmul float %1228, %1256, !dbg !92
  %1258 = fmul float %1252, %1257, !dbg !93
  %1259 = fadd float %1255, %1258, !dbg !94
  %1260 = bitcast float %1254 to i32, !dbg !80
  %1261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1260, i32 1, i32 31), !dbg !80
  %1262 = bitcast i32 %1261 to float, !dbg !80
  %1263 = bitcast float %1259 to i32, !dbg !80
  %1264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1263, i32 1, i32 31), !dbg !80
  %1265 = bitcast i32 %1264 to float, !dbg !80
  %1266 = bitcast float %1249 to i32, !dbg !80
  %1267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1266, i32 1, i32 31), !dbg !80
  %1268 = bitcast i32 %1267 to float, !dbg !80
  %1269 = fsub float %1262, %1254, !dbg !82
  %1270 = fadd float %1249, %1268, !dbg !84
  %1271 = fcmp oeq float %1270, 0.000000e+00, !dbg !85
  %1272 = tail call float @llvm.nvvm.div.full(float %1268, float %1270), !dbg !86
  %1273 = select i1 %1271, float 0.000000e+00, float %1272, !dbg !87
  %1274 = fmul float %1269, %1273, !dbg !88
  %1275 = fadd float %1254, %1274, !dbg !89
  %1276 = fadd float %1259, %1265, !dbg !90
  %1277 = fmul float %1269, %1269, !dbg !91
  %1278 = fmul float %1249, %1277, !dbg !92
  %1279 = fmul float %1273, %1278, !dbg !93
  %1280 = fadd float %1276, %1279, !dbg !94
  %1281 = and i32 %19, 7, !dbg !80
  %1282 = icmp eq i32 %1281, 0, !dbg !80
  %1283 = and i1 %1211, %1282, !dbg !80
  %1284 = bitcast float %1275 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1212, <1 x i32> %1284, i1 %1283) #5, !dbg !80
  %1285 = bitcast float %1280 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1215, <1 x i32> %1285, i1 %1283) #5, !dbg !80
  %1286 = bitcast float %1270 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1218, <1 x i32> %1286, i1 %1283) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1287 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %1288 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !80
  %1289 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !80
  %1290 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !80
  %1291 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !80
  %1292 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 160), align 16, !dbg !80
  %1293 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !80
  %1294 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 224), align 16, !dbg !80
  %1295 = tail call float @llvm.nvvm.div.full(float %1291, float 3.072000e+03), !dbg !95
  %1296 = tail call float @llvm.nvvm.div.full(float %1292, float 3.072000e+03), !dbg !95
  %1297 = tail call float @llvm.nvvm.div.full(float %1293, float 3.072000e+03), !dbg !95
  %1298 = tail call float @llvm.nvvm.div.full(float %1294, float 3.072000e+03), !dbg !95
  %1299 = fadd float %1295, 0x3EB0C6F7A0000000, !dbg !96
  %1300 = fadd float %1296, 0x3EB0C6F7A0000000, !dbg !96
  %1301 = fadd float %1297, 0x3EB0C6F7A0000000, !dbg !96
  %1302 = fadd float %1298, 0x3EB0C6F7A0000000, !dbg !96
  %1303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i170 = icmp eq i32 %1306, 0, !dbg !97
  br i1 %.not.i170, label %1309, label %1307, !dbg !97

1307:                                             ; preds = %__nv_rsqrtf.exit
  %1308 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1299), !dbg !97
  br label %__nv_rsqrtf.exit172, !dbg !97

1309:                                             ; preds = %__nv_rsqrtf.exit
  %1310 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1299), !dbg !97
  br label %__nv_rsqrtf.exit172, !dbg !97

__nv_rsqrtf.exit172:                              ; preds = %1307, %1309
  %.0.i171 = phi float [ %1308, %1307 ], [ %1310, %1309 ], !dbg !97
  %1311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i182 = icmp eq i32 %1314, 0, !dbg !97
  br i1 %.not.i182, label %1317, label %1315, !dbg !97

1315:                                             ; preds = %__nv_rsqrtf.exit172
  %1316 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1300), !dbg !97
  br label %__nv_rsqrtf.exit184, !dbg !97

1317:                                             ; preds = %__nv_rsqrtf.exit172
  %1318 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1300), !dbg !97
  br label %__nv_rsqrtf.exit184, !dbg !97

__nv_rsqrtf.exit184:                              ; preds = %1315, %1317
  %.0.i183 = phi float [ %1316, %1315 ], [ %1318, %1317 ], !dbg !97
  %1319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i194 = icmp eq i32 %1322, 0, !dbg !97
  br i1 %.not.i194, label %1325, label %1323, !dbg !97

1323:                                             ; preds = %__nv_rsqrtf.exit184
  %1324 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1301), !dbg !97
  br label %__nv_rsqrtf.exit196, !dbg !97

1325:                                             ; preds = %__nv_rsqrtf.exit184
  %1326 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1301), !dbg !97
  br label %__nv_rsqrtf.exit196, !dbg !97

__nv_rsqrtf.exit196:                              ; preds = %1323, %1325
  %.0.i195 = phi float [ %1324, %1323 ], [ %1326, %1325 ], !dbg !97
  %1327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i206 = icmp eq i32 %1330, 0, !dbg !97
  br i1 %.not.i206, label %1333, label %1331, !dbg !97

1331:                                             ; preds = %__nv_rsqrtf.exit196
  %1332 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1302), !dbg !97
  br label %__nv_rsqrtf.exit208, !dbg !97

1333:                                             ; preds = %__nv_rsqrtf.exit196
  %1334 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1302), !dbg !97
  br label %__nv_rsqrtf.exit208, !dbg !97

__nv_rsqrtf.exit208:                              ; preds = %1331, %1333
  %.0.i207 = phi float [ %1332, %1331 ], [ %1334, %1333 ], !dbg !97
  %1335 = lshr i32 %32, 7
  %1336 = and i32 %1335, 24
  %1337 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1336
  %1338 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1337, i32 %97
  %1339 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1337, i32 %101
  %1340 = and i32 %37, 2040
  %1341 = lshr i32 %37, 7
  %1342 = and i32 %1341, 8
  %1343 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %1342
  %1344 = getelementptr bfloat, ptr addrspace(3) %1343, i32 %1340
  %1345 = insertelement <2 x i1> poison, i1 %27, i64 0, !dbg !98
  %1346 = shufflevector <2 x i1> %1345, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !98
  %1347 = insertelement <2 x float> poison, float %.0.i171, i64 0, !dbg !99
  %1348 = shufflevector <2 x float> %1347, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %1349 = insertelement <2 x float> poison, float %1287, i64 0, !dbg !100
  %1350 = shufflevector <2 x float> %1349, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %1351 = insertelement <4 x i1> poison, i1 %27, i64 0, !dbg !101
  %1352 = shufflevector <4 x i1> %1351, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !101
  %1353 = insertelement <16 x float> poison, float %.0.i171, i64 0, !dbg !99
  %1354 = insertelement <16 x float> %1353, float %.0.i183, i64 1, !dbg !99
  %1355 = insertelement <16 x float> %1354, float %.0.i195, i64 2, !dbg !99
  %1356 = insertelement <16 x float> %1355, float %.0.i207, i64 3, !dbg !99
  %1357 = shufflevector <16 x float> %1356, <16 x float> poison, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2>, !dbg !99
  %1358 = insertelement <16 x float> poison, float %1287, i64 0, !dbg !100
  %1359 = insertelement <16 x float> %1358, float %1288, i64 1, !dbg !100
  %1360 = insertelement <16 x float> %1359, float %1289, i64 2, !dbg !100
  %1361 = insertelement <16 x float> %1360, float %1290, i64 3, !dbg !100
  %1362 = shufflevector <16 x float> %1361, <16 x float> poison, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2>, !dbg !100
  %invariant.op = or i32 %31, 12288, !dbg !102
  br label %1363, !dbg !102

1363:                                             ; preds = %__nv_rsqrtf.exit208, %1363
  %indvars.iv322 = phi i64 [ 0, %__nv_rsqrtf.exit208 ], [ %indvars.iv.next323, %1363 ]
  %1364 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit208 ], [ %1525, %1363 ]
  %1365 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit208 ], [ %1526, %1363 ]
  %1366 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit208 ], [ %1519, %1363 ]
  %1367 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit208 ], [ %1544, %1363 ]
  %1368 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit208 ], [ %1545, %1363 ]
  %1369 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit208 ], [ %1546, %1363 ]
  %1370 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit208 ], [ %1527, %1363 ]
  %1371 = or disjoint i64 %indvars.iv322, %127, !dbg !103
  %1372 = trunc nuw nsw i64 %indvars.iv322 to i32, !dbg !104
  %1373 = add i32 %93, %1372, !dbg !104
  %1374 = add i32 %95, %1372, !dbg !104
  %1375 = trunc i64 %indvars.iv322 to i32, !dbg !104
  %1376 = or disjoint i32 %38, %1375, !dbg !104
  %1377 = add i32 %1376, %77, !dbg !104
  %1378 = add i32 %1376, %78, !dbg !104
  %1379 = sext i32 %1373 to i64, !dbg !105
  %1380 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1379, !dbg !105
  %1381 = sext i32 %1374 to i64, !dbg !105
  %1382 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1381, !dbg !105
  %1383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1380, i1 %26) #5, !dbg !106
  %1384 = extractvalue { i32, i32, i32, i32 } %1383, 0, !dbg !106
  %1385 = extractvalue { i32, i32, i32, i32 } %1383, 1, !dbg !106
  %1386 = extractvalue { i32, i32, i32, i32 } %1383, 2, !dbg !106
  %1387 = extractvalue { i32, i32, i32, i32 } %1383, 3, !dbg !106
  %1388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1382, i1 %26) #5, !dbg !106
  %1389 = extractvalue { i32, i32, i32, i32 } %1388, 0, !dbg !106
  %1390 = extractvalue { i32, i32, i32, i32 } %1388, 1, !dbg !106
  %1391 = extractvalue { i32, i32, i32, i32 } %1388, 2, !dbg !106
  %1392 = extractvalue { i32, i32, i32, i32 } %1388, 3, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1338, i32 %1384, i32 %1385, i32 %1386, i32 %1387, i1 true) #5, !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1339, i32 %1389, i32 %1390, i32 %1391, i32 %1392, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1393 = load bfloat, ptr addrspace(3) %106, align 8, !dbg !99
  %1394 = load bfloat, ptr addrspace(3) %131, align 2, !dbg !99
  %1395 = fpext bfloat %1393 to float, !dbg !107
  %1396 = fpext bfloat %1394 to float, !dbg !107
  %.reass.reass.reass = or i32 %1372, %invariant.op
  %1397 = zext nneg i32 %.reass.reass.reass to i64, !dbg !108
  %1398 = getelementptr float, ptr addrspace(1) %1, i64 %1397, !dbg !108
  %1399 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1397, !dbg !109
  %1400 = add nuw nsw i64 %1371, 9216, !dbg !110
  %1401 = getelementptr float, ptr addrspace(1) %1, i64 %1400, !dbg !111
  %1402 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1400, !dbg !112
  %1403 = fsub float %1395, %1290, !dbg !100
  %1404 = fsub float %1396, %1290, !dbg !100
  %1405 = fmul float %.0.i207, %1403, !dbg !99
  %1406 = fmul float %.0.i207, %1404, !dbg !99
  %1407 = fcmp uno <2 x float> %1366, zeroinitializer, !dbg !113
  %1408 = fcmp uno <16 x float> %1369, zeroinitializer, !dbg !115
  %1409 = fcmp uno <4 x float> %1370, zeroinitializer, !dbg !113
  %1410 = fcmp uno float %1364, 0.000000e+00, !dbg !113
  %1411 = fcmp uno float %1365, 0.000000e+00, !dbg !113
  %1412 = load <2 x bfloat>, ptr addrspace(3) %103, align 8, !dbg !99
  %1413 = fpext <2 x bfloat> %1412 to <2 x float>, !dbg !107
  %1414 = fsub <2 x float> %1413, %1350, !dbg !100
  %1415 = fmul <2 x float> %1348, %1414, !dbg !99
  %1416 = fcmp uno <4 x float> %1367, zeroinitializer, !dbg !115
  %1417 = fcmp uno <4 x float> %1368, zeroinitializer, !dbg !115
  %1418 = load <2 x bfloat>, ptr addrspace(3) %128, align 4, !dbg !99
  %1419 = load <2 x bfloat>, ptr addrspace(3) %104, align 8, !dbg !99
  %1420 = load <2 x bfloat>, ptr addrspace(3) %129, align 4, !dbg !99
  %1421 = load <2 x bfloat>, ptr addrspace(3) %105, align 8, !dbg !99
  %1422 = load <2 x bfloat>, ptr addrspace(3) %130, align 4, !dbg !99
  %1423 = load <2 x bfloat>, ptr addrspace(3) %132, align 4, !dbg !99
  %1424 = shufflevector <2 x bfloat> %1418, <2 x bfloat> %1420, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1425 = shufflevector <2 x bfloat> %1422, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1426 = shufflevector <16 x bfloat> %1424, <16 x bfloat> %1425, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1427 = shufflevector <2 x bfloat> %1423, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1428 = shufflevector <16 x bfloat> %1426, <16 x bfloat> %1427, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1429 = shufflevector <2 x bfloat> %1418, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1430 = shufflevector <16 x bfloat> %1428, <16 x bfloat> %1429, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1431 = shufflevector <2 x bfloat> %1419, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1432 = shufflevector <16 x bfloat> %1430, <16 x bfloat> %1431, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1433 = shufflevector <2 x bfloat> %1420, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1434 = shufflevector <16 x bfloat> %1432, <16 x bfloat> %1433, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !107
  %1435 = shufflevector <2 x bfloat> %1421, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !107
  %1436 = shufflevector <16 x bfloat> %1434, <16 x bfloat> %1435, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !107
  %1437 = fpext <16 x bfloat> %1436 to <16 x float>, !dbg !107
  %1438 = fsub <16 x float> %1437, %1362, !dbg !100
  %1439 = fmul <16 x float> %1357, %1438, !dbg !99
  %1440 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1398, i1 true) #5, !dbg !117
  %1441 = extractvalue { i32, i32, i32, i32 } %1440, 0, !dbg !117
  %1442 = extractvalue { i32, i32, i32, i32 } %1440, 1, !dbg !117
  %1443 = extractvalue { i32, i32, i32, i32 } %1440, 2, !dbg !117
  %1444 = extractvalue { i32, i32, i32, i32 } %1440, 3, !dbg !117
  %1445 = insertelement <2 x i32> poison, i32 %1441, i64 0, !dbg !117
  %1446 = insertelement <2 x i32> %1445, i32 %1442, i64 1, !dbg !117
  %1447 = bitcast <2 x i32> %1446 to <2 x float>, !dbg !117
  %1448 = insertelement <2 x i32> poison, i32 %1443, i64 0, !dbg !117
  %1449 = insertelement <2 x i32> %1448, i32 %1444, i64 1, !dbg !117
  %1450 = bitcast <2 x i32> %1449 to <2 x float>, !dbg !117
  %1451 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1399, i1 true) #5, !dbg !118
  %1452 = extractvalue { i32, i32 } %1451, 0, !dbg !118
  %1453 = bitcast i32 %1452 to <2 x bfloat>, !dbg !118
  %1454 = extractvalue { i32, i32 } %1451, 1, !dbg !118
  %1455 = bitcast i32 %1454 to <2 x bfloat>, !dbg !118
  %1456 = fpext <2 x bfloat> %1453 to <2 x float>, !dbg !119
  %1457 = fpext <2 x bfloat> %1455 to <2 x float>, !dbg !119
  %1458 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1401, i1 true) #5, !dbg !120
  %1459 = extractvalue { i32, i32, i32, i32 } %1458, 0, !dbg !120
  %1460 = extractvalue { i32, i32, i32, i32 } %1458, 1, !dbg !120
  %1461 = extractvalue { i32, i32, i32, i32 } %1458, 2, !dbg !120
  %1462 = extractvalue { i32, i32, i32, i32 } %1458, 3, !dbg !120
  %1463 = insertelement <2 x i32> poison, i32 %1459, i64 0, !dbg !120
  %1464 = insertelement <2 x i32> %1463, i32 %1460, i64 1, !dbg !120
  %1465 = bitcast <2 x i32> %1464 to <2 x float>, !dbg !120
  %1466 = insertelement <2 x i32> poison, i32 %1461, i64 0, !dbg !120
  %1467 = insertelement <2 x i32> %1466, i32 %1462, i64 1, !dbg !120
  %1468 = bitcast <2 x i32> %1467 to <2 x float>, !dbg !120
  %1469 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1402, i1 true) #5, !dbg !121
  %1470 = extractvalue { i32, i32 } %1469, 0, !dbg !121
  %1471 = bitcast i32 %1470 to <2 x bfloat>, !dbg !121
  %1472 = extractvalue { i32, i32 } %1469, 1, !dbg !121
  %1473 = bitcast i32 %1472 to <2 x bfloat>, !dbg !121
  %1474 = fpext <2 x bfloat> %1471 to <2 x float>, !dbg !122
  %1475 = fpext <2 x bfloat> %1473 to <2 x float>, !dbg !122
  %1476 = fadd <2 x float> %1447, %1456, !dbg !123
  %1477 = fadd <2 x float> %1450, %1457, !dbg !123
  %1478 = fadd <2 x float> %1476, splat (float 1.000000e+00), !dbg !124
  %1479 = fadd <2 x float> %1477, splat (float 1.000000e+00), !dbg !124
  %1480 = fmul <2 x float> %1415, %1478, !dbg !125
  %1481 = extractelement <2 x float> %1478, i64 0, !dbg !125
  %1482 = extractelement <2 x float> %1478, i64 1, !dbg !125
  %1483 = fmul float %1405, %1481, !dbg !125
  %1484 = fmul float %1406, %1482, !dbg !125
  %1485 = shufflevector <2 x float> %1478, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !125
  %1486 = shufflevector <2 x float> %1479, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !125
  %1487 = shufflevector <4 x float> %1486, <4 x float> %1485, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !125
  %1488 = shufflevector <4 x float> %1487, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !125
  %1489 = fmul <16 x float> %1439, %1488, !dbg !125
  %1490 = fadd <2 x float> %1465, %1474, !dbg !126
  %1491 = fadd <2 x float> %1468, %1475, !dbg !126
  %1492 = fadd <2 x float> %1480, %1490, !dbg !127
  %1493 = extractelement <2 x float> %1490, i64 0, !dbg !127
  %1494 = extractelement <2 x float> %1490, i64 1, !dbg !127
  %1495 = fadd float %1483, %1493, !dbg !127
  %1496 = fadd float %1484, %1494, !dbg !127
  %1497 = shufflevector <2 x float> %1490, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !127
  %1498 = shufflevector <2 x float> %1491, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !127
  %1499 = shufflevector <4 x float> %1498, <4 x float> %1497, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !127
  %1500 = shufflevector <4 x float> %1499, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !127
  %1501 = fadd <16 x float> %1489, %1500, !dbg !127
  %1502 = fcmp olt <2 x float> %1366, %1492, !dbg !128
  %1503 = extractelement <16 x float> %1501, i64 4, !dbg !129
  %1504 = extractelement <16 x float> %1501, i64 5, !dbg !129
  %1505 = fcmp olt float %1364, %1495, !dbg !128
  %1506 = fcmp olt float %1365, %1496, !dbg !128
  %1507 = extractelement <16 x float> %1501, i64 6, !dbg !129
  %1508 = extractelement <16 x float> %1501, i64 7, !dbg !129
  %1509 = or <2 x i1> %1407, %1502, !dbg !130
  %1510 = or i1 %1410, %1505, !dbg !130
  %1511 = or i1 %1411, %1506, !dbg !130
  %1512 = select <2 x i1> %1509, <2 x float> %1366, <2 x float> %1492, !dbg !131
  %1513 = select i1 %1510, float %1364, float %1495, !dbg !131
  %1514 = select i1 %1511, float %1365, float %1496, !dbg !131
  %1515 = shufflevector <16 x float> %1501, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !128
  %1516 = fcmp olt <4 x float> %1370, %1515, !dbg !128
  %1517 = or <4 x i1> %1409, %1516, !dbg !130
  %1518 = select <4 x i1> %1517, <4 x float> %1370, <4 x float> %1515, !dbg !131
  %1519 = select <2 x i1> %1346, <2 x float> %1512, <2 x float> %1366, !dbg !98
  %1520 = fcmp ogt <16 x float> %1369, %1501, !dbg !132
  %1521 = fcmp olt <16 x float> %1369, %1501, !dbg !132
  %1522 = shufflevector <16 x i1> %1520, <16 x i1> %1521, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !132
  %1523 = or <16 x i1> %1408, %1522, !dbg !133
  %1524 = select <16 x i1> %1523, <16 x float> %1369, <16 x float> %1501, !dbg !134
  %1525 = select i1 %27, float %1513, float %1364, !dbg !98
  %1526 = select i1 %27, float %1514, float %1365, !dbg !98
  %1527 = select <4 x i1> %1352, <4 x float> %1518, <4 x float> %1370, !dbg !98
  %1528 = extractelement <2 x float> %1492, i64 0, !dbg !129
  %1529 = extractelement <2 x float> %1492, i64 1, !dbg !129
  %1530 = shufflevector <2 x float> %1492, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 0>, !dbg !132
  %1531 = insertelement <4 x float> %1530, float %1495, i64 0, !dbg !132
  %1532 = shufflevector <16 x float> %1501, <16 x float> poison, <4 x i32> <i32 poison, i32 14, i32 10, i32 poison>, !dbg !132
  %1533 = shufflevector <4 x float> %1531, <4 x float> %1532, <4 x i32> <i32 0, i32 5, i32 6, i32 3>, !dbg !132
  %1534 = fcmp ogt <4 x float> %1367, %1533, !dbg !132
  %1535 = shufflevector <2 x float> %1492, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 1>, !dbg !132
  %1536 = insertelement <4 x float> %1535, float %1496, i64 0, !dbg !132
  %1537 = shufflevector <16 x float> %1501, <16 x float> poison, <4 x i32> <i32 poison, i32 15, i32 11, i32 poison>, !dbg !132
  %1538 = shufflevector <4 x float> %1536, <4 x float> %1537, <4 x i32> <i32 0, i32 5, i32 6, i32 3>, !dbg !132
  %1539 = fcmp ogt <4 x float> %1368, %1538, !dbg !132
  %1540 = or <4 x i1> %1416, %1534, !dbg !133
  %1541 = or <4 x i1> %1417, %1539, !dbg !133
  %1542 = select <4 x i1> %1540, <4 x float> %1367, <4 x float> %1533, !dbg !134
  %1543 = select <4 x i1> %1541, <4 x float> %1368, <4 x float> %1538, !dbg !134
  %1544 = select <4 x i1> %1352, <4 x float> %1542, <4 x float> %1367, !dbg !101
  %1545 = select <4 x i1> %1352, <4 x float> %1543, <4 x float> %1368, !dbg !101
  %1546 = select <16 x i1> %134, <16 x float> %1524, <16 x float> %1369, !dbg !101
  %1547 = sext i32 %1377 to i64, !dbg !135
  %1548 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1547, !dbg !135
  %1549 = sext i32 %1378 to i64, !dbg !135
  %1550 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1549, !dbg !135
  %1551 = fptrunc float %1528 to bfloat, !dbg !129
  %1552 = fptrunc float %1529 to bfloat, !dbg !129
  %1553 = extractelement <16 x float> %1501, i64 0, !dbg !129
  %1554 = fptrunc float %1553 to bfloat, !dbg !129
  %1555 = extractelement <16 x float> %1501, i64 1, !dbg !129
  %1556 = fptrunc float %1555 to bfloat, !dbg !129
  %1557 = extractelement <16 x float> %1501, i64 10, !dbg !129
  %1558 = fptrunc float %1557 to bfloat, !dbg !129
  %1559 = extractelement <16 x float> %1501, i64 11, !dbg !129
  %1560 = fptrunc float %1559 to bfloat, !dbg !129
  %1561 = extractelement <16 x float> %1501, i64 2, !dbg !129
  %1562 = fptrunc float %1561 to bfloat, !dbg !129
  %1563 = extractelement <16 x float> %1501, i64 3, !dbg !129
  %1564 = fptrunc float %1563 to bfloat, !dbg !129
  %1565 = extractelement <16 x float> %1501, i64 14, !dbg !129
  %1566 = fptrunc float %1565 to bfloat, !dbg !129
  %1567 = extractelement <16 x float> %1501, i64 15, !dbg !129
  %1568 = fptrunc float %1567 to bfloat, !dbg !129
  %1569 = fptrunc float %1503 to bfloat, !dbg !129
  %1570 = fptrunc float %1504 to bfloat, !dbg !129
  %1571 = fptrunc float %1495 to bfloat, !dbg !129
  %1572 = fptrunc float %1496 to bfloat, !dbg !129
  %1573 = fptrunc float %1507 to bfloat, !dbg !129
  %1574 = fptrunc float %1508 to bfloat, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1575 = bitcast bfloat %1551 to i16, !dbg !129
  %1576 = bitcast bfloat %1552 to i16, !dbg !129
  %1577 = bitcast bfloat %1554 to i16, !dbg !129
  %1578 = bitcast bfloat %1556 to i16, !dbg !129
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %103, i16 %1575, i16 %1576, i16 %1577, i16 %1578, i1 true) #5, !dbg !129
  %1579 = bitcast bfloat %1558 to i16, !dbg !129
  %1580 = bitcast bfloat %1560 to i16, !dbg !129
  %1581 = bitcast bfloat %1562 to i16, !dbg !129
  %1582 = bitcast bfloat %1564 to i16, !dbg !129
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %104, i16 %1579, i16 %1580, i16 %1581, i16 %1582, i1 true) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1583 = load <4 x i32>, ptr addrspace(3) %1344, align 16, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1584 = bitcast bfloat %1566 to i16, !dbg !129
  %1585 = bitcast bfloat %1568 to i16, !dbg !129
  %1586 = bitcast bfloat %1569 to i16, !dbg !129
  %1587 = bitcast bfloat %1570 to i16, !dbg !129
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %103, i16 %1584, i16 %1585, i16 %1586, i16 %1587, i1 true) #5, !dbg !129
  %1588 = bitcast bfloat %1571 to i16, !dbg !129
  %1589 = bitcast bfloat %1572 to i16, !dbg !129
  %1590 = bitcast bfloat %1573 to i16, !dbg !129
  %1591 = bitcast bfloat %1574 to i16, !dbg !129
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %104, i16 %1588, i16 %1589, i16 %1590, i16 %1591, i1 true) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1592 = load <4 x i32>, ptr addrspace(3) %1344, align 16, !dbg !129
  %.extract = extractelement <4 x i32> %1583, i64 0, !dbg !129
  %.extract210 = extractelement <4 x i32> %1583, i64 1, !dbg !129
  %.extract212 = extractelement <4 x i32> %1583, i64 2, !dbg !129
  %.extract214 = extractelement <4 x i32> %1583, i64 3, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract210, i32 %.extract212, i32 %.extract214, ptr addrspace(1) %1548, i1 %28) #5, !dbg !129
  %.extract216 = extractelement <4 x i32> %1592, i64 0, !dbg !129
  %.extract218 = extractelement <4 x i32> %1592, i64 1, !dbg !129
  %.extract220 = extractelement <4 x i32> %1592, i64 2, !dbg !129
  %.extract222 = extractelement <4 x i32> %1592, i64 3, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract216, i32 %.extract218, i32 %.extract220, i32 %.extract222, ptr addrspace(1) %1550, i1 %29) #5, !dbg !129
  %indvars.iv.next323 = add nuw nsw i64 %indvars.iv322, 1024, !dbg !102
  %1593 = icmp samesign ult i64 %indvars.iv322, 2048, !dbg !102
  br i1 %1593, label %1363, label %1594, !dbg !102

1594:                                             ; preds = %1363
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1595 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1519, <2 x i32> <i32 0, i32 2>, !dbg !138
  %1596 = fcmp olt <2 x float> %1595, %1519, !dbg !138
  %1597 = fcmp uno <2 x float> %1595, %1519, !dbg !138
  %shift = shufflevector <2 x i1> %1596, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !139
  %1598 = or <2 x i1> %shift, %1597, !dbg !139
  %1599 = extractelement <2 x i1> %1598, i64 0, !dbg !139
  %1600 = extractelement <2 x float> %1519, i64 0, !dbg !140
  %1601 = extractelement <2 x float> %1519, i64 1, !dbg !140
  %1602 = select i1 %1599, float %1600, float %1601, !dbg !140
  %1603 = extractelement <16 x float> %1546, i64 8, !dbg !138
  %1604 = fcmp olt float %1602, %1603, !dbg !138
  %1605 = fcmp uno float %1602, 0.000000e+00, !dbg !141
  %1606 = or i1 %1604, %1605, !dbg !139
  %1607 = select i1 %1606, float %1602, float %1603, !dbg !140
  %1608 = extractelement <16 x float> %1546, i64 9, !dbg !138
  %1609 = fcmp olt float %1607, %1608, !dbg !138
  %1610 = fcmp uno float %1607, 0.000000e+00, !dbg !141
  %1611 = or i1 %1609, %1610, !dbg !139
  %1612 = select i1 %1611, float %1607, float %1608, !dbg !140
  %1613 = extractelement <16 x float> %1546, i64 10, !dbg !138
  %1614 = extractelement <16 x float> %1546, i64 11, !dbg !138
  %1615 = fcmp olt float %1613, %1614, !dbg !138
  %1616 = fcmp uno float %1613, 0.000000e+00, !dbg !141
  %1617 = or i1 %1615, %1616, !dbg !139
  %1618 = select i1 %1617, float %1613, float %1614, !dbg !140
  %1619 = extractelement <16 x float> %1546, i64 12, !dbg !138
  %1620 = fcmp olt float %1618, %1619, !dbg !138
  %1621 = fcmp uno float %1618, 0.000000e+00, !dbg !141
  %1622 = or i1 %1620, %1621, !dbg !139
  %1623 = select i1 %1622, float %1618, float %1619, !dbg !140
  %1624 = extractelement <16 x float> %1546, i64 13, !dbg !138
  %1625 = fcmp olt float %1623, %1624, !dbg !138
  %1626 = fcmp uno float %1623, 0.000000e+00, !dbg !141
  %1627 = or i1 %1625, %1626, !dbg !139
  %1628 = select i1 %1627, float %1623, float %1624, !dbg !140
  %1629 = extractelement <16 x float> %1546, i64 14, !dbg !138
  %1630 = extractelement <16 x float> %1546, i64 15, !dbg !138
  %1631 = fcmp olt float %1629, %1630, !dbg !138
  %1632 = fcmp uno float %1629, 0.000000e+00, !dbg !141
  %1633 = or i1 %1631, %1632, !dbg !139
  %1634 = select i1 %1633, float %1629, float %1630, !dbg !140
  %1635 = extractelement <4 x float> %1527, i64 0, !dbg !138
  %1636 = fcmp olt float %1634, %1635, !dbg !138
  %1637 = fcmp uno float %1634, 0.000000e+00, !dbg !141
  %1638 = or i1 %1636, %1637, !dbg !139
  %1639 = select i1 %1638, float %1634, float %1635, !dbg !140
  %1640 = extractelement <4 x float> %1527, i64 1, !dbg !138
  %1641 = fcmp olt float %1639, %1640, !dbg !138
  %1642 = fcmp uno float %1639, 0.000000e+00, !dbg !141
  %1643 = or i1 %1641, %1642, !dbg !139
  %1644 = select i1 %1643, float %1639, float %1640, !dbg !140
  %1645 = fcmp olt float %1525, %1526, !dbg !138
  %1646 = fcmp uno float %1525, 0.000000e+00, !dbg !141
  %1647 = or i1 %1645, %1646, !dbg !139
  %1648 = select i1 %1647, float %1525, float %1526, !dbg !140
  %1649 = extractelement <4 x float> %1527, i64 2, !dbg !138
  %1650 = fcmp olt float %1648, %1649, !dbg !138
  %1651 = fcmp uno float %1648, 0.000000e+00, !dbg !141
  %1652 = or i1 %1650, %1651, !dbg !139
  %1653 = select i1 %1652, float %1648, float %1649, !dbg !140
  %1654 = extractelement <4 x float> %1527, i64 3, !dbg !138
  %1655 = fcmp olt float %1653, %1654, !dbg !138
  %1656 = fcmp uno float %1653, 0.000000e+00, !dbg !141
  %1657 = or i1 %1655, %1656, !dbg !139
  %1658 = select i1 %1657, float %1653, float %1654, !dbg !140
  %1659 = bitcast float %1612 to i32, !dbg !136
  %1660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1659, i32 16, i32 31), !dbg !136
  %1661 = bitcast i32 %1660 to float, !dbg !136
  %1662 = fcmp olt float %1612, %1661, !dbg !138
  %1663 = fcmp uno float %1612, 0.000000e+00, !dbg !141
  %1664 = or i1 %1663, %1662, !dbg !139
  %1665 = select i1 %1664, float %1612, float %1661, !dbg !140
  %1666 = bitcast float %1665 to i32, !dbg !136
  %1667 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1666, i32 8, i32 31), !dbg !136
  %1668 = bitcast i32 %1667 to float, !dbg !136
  %1669 = fcmp olt float %1665, %1668, !dbg !138
  %1670 = fcmp uno float %1665, 0.000000e+00, !dbg !141
  %1671 = or i1 %1669, %1670, !dbg !139
  %1672 = select i1 %1671, float %1665, float %1668, !dbg !140
  %1673 = bitcast float %1672 to i32, !dbg !136
  %1674 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1673, i32 4, i32 31), !dbg !136
  %1675 = bitcast i32 %1674 to float, !dbg !136
  %1676 = fcmp olt float %1672, %1675, !dbg !138
  %1677 = fcmp uno float %1672, 0.000000e+00, !dbg !141
  %1678 = or i1 %1676, %1677, !dbg !139
  %1679 = select i1 %1678, float %1672, float %1675, !dbg !140
  %1680 = bitcast float %1679 to i32, !dbg !136
  %1681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1680, i32 2, i32 31), !dbg !136
  %1682 = bitcast i32 %1681 to float, !dbg !136
  %1683 = fcmp olt float %1679, %1682, !dbg !138
  %1684 = fcmp uno float %1679, 0.000000e+00, !dbg !141
  %1685 = or i1 %1683, %1684, !dbg !139
  %1686 = select i1 %1685, float %1679, float %1682, !dbg !140
  %1687 = bitcast float %1686 to i32, !dbg !136
  %1688 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1687, i32 1, i32 31), !dbg !136
  %1689 = bitcast i32 %1688 to float, !dbg !136
  %1690 = fcmp olt float %1686, %1689, !dbg !138
  %1691 = fcmp uno float %1686, 0.000000e+00, !dbg !141
  %1692 = or i1 %1690, %1691, !dbg !139
  %1693 = bitcast float %1628 to i32, !dbg !136
  %1694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1693, i32 16, i32 31), !dbg !136
  %1695 = bitcast i32 %1694 to float, !dbg !136
  %1696 = fcmp olt float %1628, %1695, !dbg !138
  %1697 = fcmp uno float %1628, 0.000000e+00, !dbg !141
  %1698 = or i1 %1697, %1696, !dbg !139
  %1699 = select i1 %1698, float %1628, float %1695, !dbg !140
  %1700 = bitcast float %1699 to i32, !dbg !136
  %1701 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1700, i32 8, i32 31), !dbg !136
  %1702 = bitcast i32 %1701 to float, !dbg !136
  %1703 = fcmp olt float %1699, %1702, !dbg !138
  %1704 = fcmp uno float %1699, 0.000000e+00, !dbg !141
  %1705 = or i1 %1703, %1704, !dbg !139
  %1706 = select i1 %1705, float %1699, float %1702, !dbg !140
  %1707 = bitcast float %1706 to i32, !dbg !136
  %1708 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1707, i32 4, i32 31), !dbg !136
  %1709 = bitcast i32 %1708 to float, !dbg !136
  %1710 = fcmp olt float %1706, %1709, !dbg !138
  %1711 = fcmp uno float %1706, 0.000000e+00, !dbg !141
  %1712 = or i1 %1710, %1711, !dbg !139
  %1713 = select i1 %1712, float %1706, float %1709, !dbg !140
  %1714 = bitcast float %1713 to i32, !dbg !136
  %1715 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1714, i32 2, i32 31), !dbg !136
  %1716 = bitcast i32 %1715 to float, !dbg !136
  %1717 = fcmp olt float %1713, %1716, !dbg !138
  %1718 = fcmp uno float %1713, 0.000000e+00, !dbg !141
  %1719 = or i1 %1717, %1718, !dbg !139
  %1720 = select i1 %1719, float %1713, float %1716, !dbg !140
  %1721 = bitcast float %1720 to i32, !dbg !136
  %1722 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1721, i32 1, i32 31), !dbg !136
  %1723 = bitcast i32 %1722 to float, !dbg !136
  %1724 = fcmp olt float %1720, %1723, !dbg !138
  %1725 = fcmp uno float %1720, 0.000000e+00, !dbg !141
  %1726 = or i1 %1724, %1725, !dbg !139
  %1727 = bitcast float %1644 to i32, !dbg !136
  %1728 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1727, i32 16, i32 31), !dbg !136
  %1729 = bitcast i32 %1728 to float, !dbg !136
  %1730 = fcmp olt float %1644, %1729, !dbg !138
  %1731 = fcmp uno float %1644, 0.000000e+00, !dbg !141
  %1732 = or i1 %1731, %1730, !dbg !139
  %1733 = select i1 %1732, float %1644, float %1729, !dbg !140
  %1734 = bitcast float %1733 to i32, !dbg !136
  %1735 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1734, i32 8, i32 31), !dbg !136
  %1736 = bitcast i32 %1735 to float, !dbg !136
  %1737 = fcmp olt float %1733, %1736, !dbg !138
  %1738 = fcmp uno float %1733, 0.000000e+00, !dbg !141
  %1739 = or i1 %1737, %1738, !dbg !139
  %1740 = select i1 %1739, float %1733, float %1736, !dbg !140
  %1741 = bitcast float %1740 to i32, !dbg !136
  %1742 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1741, i32 4, i32 31), !dbg !136
  %1743 = bitcast i32 %1742 to float, !dbg !136
  %1744 = fcmp olt float %1740, %1743, !dbg !138
  %1745 = fcmp uno float %1740, 0.000000e+00, !dbg !141
  %1746 = or i1 %1744, %1745, !dbg !139
  %1747 = select i1 %1746, float %1740, float %1743, !dbg !140
  %1748 = bitcast float %1747 to i32, !dbg !136
  %1749 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1748, i32 2, i32 31), !dbg !136
  %1750 = bitcast i32 %1749 to float, !dbg !136
  %1751 = fcmp olt float %1747, %1750, !dbg !138
  %1752 = fcmp uno float %1747, 0.000000e+00, !dbg !141
  %1753 = or i1 %1751, %1752, !dbg !139
  %1754 = select i1 %1753, float %1747, float %1750, !dbg !140
  %1755 = bitcast float %1754 to i32, !dbg !136
  %1756 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1755, i32 1, i32 31), !dbg !136
  %1757 = bitcast i32 %1756 to float, !dbg !136
  %1758 = fcmp olt float %1754, %1757, !dbg !138
  %1759 = fcmp uno float %1754, 0.000000e+00, !dbg !141
  %1760 = or i1 %1758, %1759, !dbg !139
  %1761 = bitcast float %1658 to i32, !dbg !136
  %1762 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1761, i32 16, i32 31), !dbg !136
  %1763 = bitcast i32 %1762 to float, !dbg !136
  %1764 = fcmp olt float %1658, %1763, !dbg !138
  %1765 = fcmp uno float %1658, 0.000000e+00, !dbg !141
  %1766 = or i1 %1765, %1764, !dbg !139
  %1767 = select i1 %1766, float %1658, float %1763, !dbg !140
  %1768 = bitcast float %1767 to i32, !dbg !136
  %1769 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1768, i32 8, i32 31), !dbg !136
  %1770 = bitcast i32 %1769 to float, !dbg !136
  %1771 = fcmp olt float %1767, %1770, !dbg !138
  %1772 = fcmp uno float %1767, 0.000000e+00, !dbg !141
  %1773 = or i1 %1771, %1772, !dbg !139
  %1774 = select i1 %1773, float %1767, float %1770, !dbg !140
  %1775 = bitcast float %1774 to i32, !dbg !136
  %1776 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1775, i32 4, i32 31), !dbg !136
  %1777 = bitcast i32 %1776 to float, !dbg !136
  %1778 = fcmp olt float %1774, %1777, !dbg !138
  %1779 = fcmp uno float %1774, 0.000000e+00, !dbg !141
  %1780 = or i1 %1778, %1779, !dbg !139
  %1781 = select i1 %1780, float %1774, float %1777, !dbg !140
  %1782 = bitcast float %1781 to i32, !dbg !136
  %1783 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1782, i32 2, i32 31), !dbg !136
  %1784 = bitcast i32 %1783 to float, !dbg !136
  %1785 = fcmp olt float %1781, %1784, !dbg !138
  %1786 = fcmp uno float %1781, 0.000000e+00, !dbg !141
  %1787 = or i1 %1785, %1786, !dbg !139
  %1788 = select i1 %1787, float %1781, float %1784, !dbg !140
  %1789 = bitcast float %1788 to i32, !dbg !136
  %1790 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1789, i32 1, i32 31), !dbg !136
  %1791 = bitcast i32 %1790 to float, !dbg !136
  %1792 = fcmp olt float %1788, %1791, !dbg !138
  %1793 = fcmp uno float %1788, 0.000000e+00, !dbg !141
  %1794 = or i1 %1792, %1793, !dbg !139
  %1795 = select i1 %1692, i32 %1687, i32 %1688, !dbg !140
  %1796 = insertelement <1 x i32> poison, i32 %1795, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1184, <1 x i32> %1796, i1 %1183) #5, !dbg !136
  %1797 = select i1 %1726, i32 %1721, i32 %1722, !dbg !140
  %1798 = insertelement <1 x i32> poison, i32 %1797, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1191, <1 x i32> %1798, i1 %1183) #5, !dbg !136
  %1799 = select i1 %1760, i32 %1755, i32 %1756, !dbg !140
  %1800 = insertelement <1 x i32> poison, i32 %1799, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1198, <1 x i32> %1800, i1 %1183) #5, !dbg !136
  %1801 = select i1 %1794, i32 %1789, i32 %1790, !dbg !140
  %1802 = insertelement <1 x i32> poison, i32 %1801, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1205, <1 x i32> %1802, i1 %1183) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1803 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1212, i1 %1211) #5, !dbg !136
  %1804 = bitcast i32 %1803 to float, !dbg !136
  %1805 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1803, i32 4, i32 31), !dbg !136
  %1806 = bitcast i32 %1805 to float, !dbg !136
  %1807 = fcmp olt float %1804, %1806, !dbg !138
  %1808 = fcmp uno float %1804, 0.000000e+00, !dbg !141
  %1809 = or i1 %1808, %1807, !dbg !139
  %1810 = select i1 %1809, float %1804, float %1806, !dbg !140
  %1811 = bitcast float %1810 to i32, !dbg !136
  %1812 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1811, i32 2, i32 31), !dbg !136
  %1813 = bitcast i32 %1812 to float, !dbg !136
  %1814 = fcmp olt float %1810, %1813, !dbg !138
  %1815 = fcmp uno float %1810, 0.000000e+00, !dbg !141
  %1816 = or i1 %1814, %1815, !dbg !139
  %1817 = select i1 %1816, float %1810, float %1813, !dbg !140
  %1818 = bitcast float %1817 to i32, !dbg !136
  %1819 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1818, i32 1, i32 31), !dbg !136
  %1820 = bitcast i32 %1819 to float, !dbg !136
  %1821 = fcmp olt float %1817, %1820, !dbg !138
  %1822 = fcmp uno float %1817, 0.000000e+00, !dbg !141
  %1823 = or i1 %1821, %1822, !dbg !139
  %1824 = select i1 %1823, i32 %1818, i32 %1819, !dbg !140
  %1825 = insertelement <1 x i32> poison, i32 %1824, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1212, <1 x i32> %1825, i1 %1283) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %1826 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !136
  %1827 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !136
  %1828 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !136
  %1829 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1830 = bitcast float %1826 to i32, !dbg !142
  %1831 = bitcast float %1827 to i32, !dbg !142
  %1832 = bitcast float %1828 to i32, !dbg !142
  %1833 = bitcast float %1829 to i32, !dbg !142
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1830, i32 %1831, i32 %1832, i32 %1833, i1 true) #5, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %1834 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %599, !dbg !142
  %1835 = load float, ptr addrspace(3) %1834, align 4, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1836 = fcmp ogt <4 x float> %1544, %1545, !dbg !145
  %1837 = extractelement <4 x float> %1544, i64 3, !dbg !146
  %1838 = fcmp uno float %1837, 0.000000e+00, !dbg !146
  %1839 = extractelement <4 x i1> %1836, i64 3, !dbg !147
  %1840 = or i1 %1839, %1838, !dbg !147
  %1841 = extractelement <4 x float> %1545, i64 3, !dbg !148
  %1842 = select i1 %1840, float %1837, float %1841, !dbg !148
  %1843 = extractelement <16 x float> %1546, i64 0, !dbg !145
  %1844 = fcmp ogt float %1842, %1843, !dbg !145
  %1845 = fcmp uno float %1842, 0.000000e+00, !dbg !146
  %1846 = or i1 %1844, %1845, !dbg !147
  %1847 = select i1 %1846, float %1842, float %1843, !dbg !148
  %1848 = extractelement <16 x float> %1546, i64 1, !dbg !145
  %1849 = fcmp ogt float %1847, %1848, !dbg !145
  %1850 = fcmp uno float %1847, 0.000000e+00, !dbg !146
  %1851 = or i1 %1849, %1850, !dbg !147
  %1852 = select i1 %1851, float %1847, float %1848, !dbg !148
  %1853 = extractelement <4 x float> %1544, i64 2, !dbg !146
  %1854 = fcmp uno float %1853, 0.000000e+00, !dbg !146
  %1855 = extractelement <4 x i1> %1836, i64 2, !dbg !147
  %1856 = or i1 %1855, %1854, !dbg !147
  %1857 = extractelement <4 x float> %1545, i64 2, !dbg !148
  %1858 = select i1 %1856, float %1853, float %1857, !dbg !148
  %1859 = extractelement <16 x float> %1546, i64 2, !dbg !145
  %1860 = fcmp ogt float %1858, %1859, !dbg !145
  %1861 = fcmp uno float %1858, 0.000000e+00, !dbg !146
  %1862 = or i1 %1860, %1861, !dbg !147
  %1863 = select i1 %1862, float %1858, float %1859, !dbg !148
  %1864 = extractelement <16 x float> %1546, i64 3, !dbg !145
  %1865 = fcmp ogt float %1863, %1864, !dbg !145
  %1866 = fcmp uno float %1863, 0.000000e+00, !dbg !146
  %1867 = or i1 %1865, %1866, !dbg !147
  %1868 = select i1 %1867, float %1863, float %1864, !dbg !148
  %1869 = extractelement <4 x float> %1544, i64 1, !dbg !146
  %1870 = fcmp uno float %1869, 0.000000e+00, !dbg !146
  %1871 = extractelement <4 x i1> %1836, i64 1, !dbg !147
  %1872 = or i1 %1871, %1870, !dbg !147
  %1873 = extractelement <4 x float> %1545, i64 1, !dbg !148
  %1874 = select i1 %1872, float %1869, float %1873, !dbg !148
  %1875 = extractelement <16 x float> %1546, i64 4, !dbg !145
  %1876 = fcmp ogt float %1874, %1875, !dbg !145
  %1877 = fcmp uno float %1874, 0.000000e+00, !dbg !146
  %1878 = or i1 %1876, %1877, !dbg !147
  %1879 = select i1 %1878, float %1874, float %1875, !dbg !148
  %1880 = extractelement <16 x float> %1546, i64 5, !dbg !145
  %1881 = fcmp ogt float %1879, %1880, !dbg !145
  %1882 = fcmp uno float %1879, 0.000000e+00, !dbg !146
  %1883 = or i1 %1881, %1882, !dbg !147
  %1884 = select i1 %1883, float %1879, float %1880, !dbg !148
  %1885 = extractelement <4 x float> %1544, i64 0, !dbg !146
  %1886 = fcmp uno float %1885, 0.000000e+00, !dbg !146
  %1887 = extractelement <4 x i1> %1836, i64 0, !dbg !147
  %1888 = or i1 %1887, %1886, !dbg !147
  %1889 = extractelement <4 x float> %1545, i64 0, !dbg !148
  %1890 = select i1 %1888, float %1885, float %1889, !dbg !148
  %1891 = extractelement <16 x float> %1546, i64 6, !dbg !145
  %1892 = fcmp ogt float %1890, %1891, !dbg !145
  %1893 = fcmp uno float %1890, 0.000000e+00, !dbg !146
  %1894 = or i1 %1892, %1893, !dbg !147
  %1895 = select i1 %1894, float %1890, float %1891, !dbg !148
  %1896 = extractelement <16 x float> %1546, i64 7, !dbg !145
  %1897 = fcmp ogt float %1895, %1896, !dbg !145
  %1898 = fcmp uno float %1895, 0.000000e+00, !dbg !146
  %1899 = or i1 %1897, %1898, !dbg !147
  %1900 = select i1 %1899, float %1895, float %1896, !dbg !148
  %1901 = bitcast float %1852 to i32, !dbg !143
  %1902 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1901, i32 16, i32 31), !dbg !143
  %1903 = bitcast i32 %1902 to float, !dbg !143
  %1904 = fcmp ogt float %1852, %1903, !dbg !145
  %1905 = fcmp uno float %1852, 0.000000e+00, !dbg !146
  %1906 = or i1 %1905, %1904, !dbg !147
  %1907 = select i1 %1906, float %1852, float %1903, !dbg !148
  %1908 = bitcast float %1907 to i32, !dbg !143
  %1909 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1908, i32 8, i32 31), !dbg !143
  %1910 = bitcast i32 %1909 to float, !dbg !143
  %1911 = fcmp ogt float %1907, %1910, !dbg !145
  %1912 = fcmp uno float %1907, 0.000000e+00, !dbg !146
  %1913 = or i1 %1911, %1912, !dbg !147
  %1914 = select i1 %1913, float %1907, float %1910, !dbg !148
  %1915 = bitcast float %1914 to i32, !dbg !143
  %1916 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1915, i32 4, i32 31), !dbg !143
  %1917 = bitcast i32 %1916 to float, !dbg !143
  %1918 = fcmp ogt float %1914, %1917, !dbg !145
  %1919 = fcmp uno float %1914, 0.000000e+00, !dbg !146
  %1920 = or i1 %1918, %1919, !dbg !147
  %1921 = select i1 %1920, float %1914, float %1917, !dbg !148
  %1922 = bitcast float %1921 to i32, !dbg !143
  %1923 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1922, i32 2, i32 31), !dbg !143
  %1924 = bitcast i32 %1923 to float, !dbg !143
  %1925 = fcmp ogt float %1921, %1924, !dbg !145
  %1926 = fcmp uno float %1921, 0.000000e+00, !dbg !146
  %1927 = or i1 %1925, %1926, !dbg !147
  %1928 = select i1 %1927, float %1921, float %1924, !dbg !148
  %1929 = bitcast float %1928 to i32, !dbg !143
  %1930 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1929, i32 1, i32 31), !dbg !143
  %1931 = bitcast i32 %1930 to float, !dbg !143
  %1932 = fcmp ogt float %1928, %1931, !dbg !145
  %1933 = fcmp uno float %1928, 0.000000e+00, !dbg !146
  %1934 = or i1 %1932, %1933, !dbg !147
  %1935 = bitcast float %1868 to i32, !dbg !143
  %1936 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1935, i32 16, i32 31), !dbg !143
  %1937 = bitcast i32 %1936 to float, !dbg !143
  %1938 = fcmp ogt float %1868, %1937, !dbg !145
  %1939 = fcmp uno float %1868, 0.000000e+00, !dbg !146
  %1940 = or i1 %1939, %1938, !dbg !147
  %1941 = select i1 %1940, float %1868, float %1937, !dbg !148
  %1942 = bitcast float %1941 to i32, !dbg !143
  %1943 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1942, i32 8, i32 31), !dbg !143
  %1944 = bitcast i32 %1943 to float, !dbg !143
  %1945 = fcmp ogt float %1941, %1944, !dbg !145
  %1946 = fcmp uno float %1941, 0.000000e+00, !dbg !146
  %1947 = or i1 %1945, %1946, !dbg !147
  %1948 = select i1 %1947, float %1941, float %1944, !dbg !148
  %1949 = bitcast float %1948 to i32, !dbg !143
  %1950 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1949, i32 4, i32 31), !dbg !143
  %1951 = bitcast i32 %1950 to float, !dbg !143
  %1952 = fcmp ogt float %1948, %1951, !dbg !145
  %1953 = fcmp uno float %1948, 0.000000e+00, !dbg !146
  %1954 = or i1 %1952, %1953, !dbg !147
  %1955 = select i1 %1954, float %1948, float %1951, !dbg !148
  %1956 = bitcast float %1955 to i32, !dbg !143
  %1957 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1956, i32 2, i32 31), !dbg !143
  %1958 = bitcast i32 %1957 to float, !dbg !143
  %1959 = fcmp ogt float %1955, %1958, !dbg !145
  %1960 = fcmp uno float %1955, 0.000000e+00, !dbg !146
  %1961 = or i1 %1959, %1960, !dbg !147
  %1962 = select i1 %1961, float %1955, float %1958, !dbg !148
  %1963 = bitcast float %1962 to i32, !dbg !143
  %1964 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1963, i32 1, i32 31), !dbg !143
  %1965 = bitcast i32 %1964 to float, !dbg !143
  %1966 = fcmp ogt float %1962, %1965, !dbg !145
  %1967 = fcmp uno float %1962, 0.000000e+00, !dbg !146
  %1968 = or i1 %1966, %1967, !dbg !147
  %1969 = bitcast float %1884 to i32, !dbg !143
  %1970 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1969, i32 16, i32 31), !dbg !143
  %1971 = bitcast i32 %1970 to float, !dbg !143
  %1972 = fcmp ogt float %1884, %1971, !dbg !145
  %1973 = fcmp uno float %1884, 0.000000e+00, !dbg !146
  %1974 = or i1 %1973, %1972, !dbg !147
  %1975 = select i1 %1974, float %1884, float %1971, !dbg !148
  %1976 = bitcast float %1975 to i32, !dbg !143
  %1977 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1976, i32 8, i32 31), !dbg !143
  %1978 = bitcast i32 %1977 to float, !dbg !143
  %1979 = fcmp ogt float %1975, %1978, !dbg !145
  %1980 = fcmp uno float %1975, 0.000000e+00, !dbg !146
  %1981 = or i1 %1979, %1980, !dbg !147
  %1982 = select i1 %1981, float %1975, float %1978, !dbg !148
  %1983 = bitcast float %1982 to i32, !dbg !143
  %1984 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1983, i32 4, i32 31), !dbg !143
  %1985 = bitcast i32 %1984 to float, !dbg !143
  %1986 = fcmp ogt float %1982, %1985, !dbg !145
  %1987 = fcmp uno float %1982, 0.000000e+00, !dbg !146
  %1988 = or i1 %1986, %1987, !dbg !147
  %1989 = select i1 %1988, float %1982, float %1985, !dbg !148
  %1990 = bitcast float %1989 to i32, !dbg !143
  %1991 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1990, i32 2, i32 31), !dbg !143
  %1992 = bitcast i32 %1991 to float, !dbg !143
  %1993 = fcmp ogt float %1989, %1992, !dbg !145
  %1994 = fcmp uno float %1989, 0.000000e+00, !dbg !146
  %1995 = or i1 %1993, %1994, !dbg !147
  %1996 = select i1 %1995, float %1989, float %1992, !dbg !148
  %1997 = bitcast float %1996 to i32, !dbg !143
  %1998 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1997, i32 1, i32 31), !dbg !143
  %1999 = bitcast i32 %1998 to float, !dbg !143
  %2000 = fcmp ogt float %1996, %1999, !dbg !145
  %2001 = fcmp uno float %1996, 0.000000e+00, !dbg !146
  %2002 = or i1 %2000, %2001, !dbg !147
  %2003 = bitcast float %1900 to i32, !dbg !143
  %2004 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2003, i32 16, i32 31), !dbg !143
  %2005 = bitcast i32 %2004 to float, !dbg !143
  %2006 = fcmp ogt float %1900, %2005, !dbg !145
  %2007 = fcmp uno float %1900, 0.000000e+00, !dbg !146
  %2008 = or i1 %2007, %2006, !dbg !147
  %2009 = select i1 %2008, float %1900, float %2005, !dbg !148
  %2010 = bitcast float %2009 to i32, !dbg !143
  %2011 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2010, i32 8, i32 31), !dbg !143
  %2012 = bitcast i32 %2011 to float, !dbg !143
  %2013 = fcmp ogt float %2009, %2012, !dbg !145
  %2014 = fcmp uno float %2009, 0.000000e+00, !dbg !146
  %2015 = or i1 %2013, %2014, !dbg !147
  %2016 = select i1 %2015, float %2009, float %2012, !dbg !148
  %2017 = bitcast float %2016 to i32, !dbg !143
  %2018 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2017, i32 4, i32 31), !dbg !143
  %2019 = bitcast i32 %2018 to float, !dbg !143
  %2020 = fcmp ogt float %2016, %2019, !dbg !145
  %2021 = fcmp uno float %2016, 0.000000e+00, !dbg !146
  %2022 = or i1 %2020, %2021, !dbg !147
  %2023 = select i1 %2022, float %2016, float %2019, !dbg !148
  %2024 = bitcast float %2023 to i32, !dbg !143
  %2025 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2024, i32 2, i32 31), !dbg !143
  %2026 = bitcast i32 %2025 to float, !dbg !143
  %2027 = fcmp ogt float %2023, %2026, !dbg !145
  %2028 = fcmp uno float %2023, 0.000000e+00, !dbg !146
  %2029 = or i1 %2027, %2028, !dbg !147
  %2030 = select i1 %2029, float %2023, float %2026, !dbg !148
  %2031 = bitcast float %2030 to i32, !dbg !143
  %2032 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2031, i32 1, i32 31), !dbg !143
  %2033 = bitcast i32 %2032 to float, !dbg !143
  %2034 = fcmp ogt float %2030, %2033, !dbg !145
  %2035 = fcmp uno float %2030, 0.000000e+00, !dbg !146
  %2036 = or i1 %2034, %2035, !dbg !147
  %2037 = select i1 %1934, i32 %1929, i32 %1930, !dbg !148
  %2038 = insertelement <1 x i32> poison, i32 %2037, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1184, <1 x i32> %2038, i1 %1183) #5, !dbg !143
  %2039 = select i1 %1968, i32 %1963, i32 %1964, !dbg !148
  %2040 = insertelement <1 x i32> poison, i32 %2039, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1191, <1 x i32> %2040, i1 %1183) #5, !dbg !143
  %2041 = select i1 %2002, i32 %1997, i32 %1998, !dbg !148
  %2042 = insertelement <1 x i32> poison, i32 %2041, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1198, <1 x i32> %2042, i1 %1183) #5, !dbg !143
  %2043 = select i1 %2036, i32 %2031, i32 %2032, !dbg !148
  %2044 = insertelement <1 x i32> poison, i32 %2043, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1205, <1 x i32> %2044, i1 %1183) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %2045 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1212, i1 %1211) #5, !dbg !143
  %2046 = bitcast i32 %2045 to float, !dbg !143
  %2047 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2045, i32 4, i32 31), !dbg !143
  %2048 = bitcast i32 %2047 to float, !dbg !143
  %2049 = fcmp ogt float %2046, %2048, !dbg !145
  %2050 = fcmp uno float %2046, 0.000000e+00, !dbg !146
  %2051 = or i1 %2050, %2049, !dbg !147
  %2052 = select i1 %2051, float %2046, float %2048, !dbg !148
  %2053 = bitcast float %2052 to i32, !dbg !143
  %2054 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2053, i32 2, i32 31), !dbg !143
  %2055 = bitcast i32 %2054 to float, !dbg !143
  %2056 = fcmp ogt float %2052, %2055, !dbg !145
  %2057 = fcmp uno float %2052, 0.000000e+00, !dbg !146
  %2058 = or i1 %2056, %2057, !dbg !147
  %2059 = select i1 %2058, float %2052, float %2055, !dbg !148
  %2060 = bitcast float %2059 to i32, !dbg !143
  %2061 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2060, i32 1, i32 31), !dbg !143
  %2062 = bitcast i32 %2061 to float, !dbg !143
  %2063 = fcmp ogt float %2059, %2062, !dbg !145
  %2064 = fcmp uno float %2059, 0.000000e+00, !dbg !146
  %2065 = or i1 %2063, %2064, !dbg !147
  %2066 = select i1 %2065, i32 %2060, i32 %2061, !dbg !148
  %2067 = insertelement <1 x i32> poison, i32 %2066, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1212, <1 x i32> %2067, i1 %1283) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %2068 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !143
  %2069 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !143
  %2070 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !143
  %2071 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %2072 = bitcast float %2068 to i32, !dbg !149
  %2073 = bitcast float %2069 to i32, !dbg !149
  %2074 = bitcast float %2070 to i32, !dbg !149
  %2075 = bitcast float %2071 to i32, !dbg !149
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2072, i32 %2073, i32 %2074, i32 %2075, i1 true) #5, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %2076 = load float, ptr addrspace(3) %1834, align 4, !dbg !149
  %2077 = sext i32 %600 to i64, !dbg !150
  %2078 = getelementptr bfloat, ptr addrspace(1) %10, i64 %2077, !dbg !150
  %2079 = fptrunc float %1835 to bfloat, !dbg !142
  %2080 = and i32 %19, 252, !dbg !142
  %2081 = icmp eq i32 %2080, 0, !dbg !142
  %2082 = bitcast bfloat %2079 to i16, !dbg !142
  %2083 = and i1 %2081, %601, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2082, ptr addrspace(1) %2078, i1 %2083) #5, !dbg !142
  %2084 = getelementptr bfloat, ptr addrspace(1) %11, i64 %2077, !dbg !151
  %2085 = fptrunc float %2076 to bfloat, !dbg !149
  %2086 = bitcast bfloat %2085 to i16, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2086, ptr addrspace(1) %2084, i1 %2083) #5, !dbg !149
  %2087 = insertelement <4 x float> poison, float %1829, i64 0, !dbg !152
  %2088 = insertelement <4 x float> %2087, float %1828, i64 1, !dbg !152
  %2089 = insertelement <4 x float> %2088, float %1827, i64 2, !dbg !152
  %2090 = insertelement <4 x float> %2089, float %1826, i64 3, !dbg !152
  %2091 = fcmp oge <4 x float> %2090, zeroinitializer, !dbg !152
  %2092 = select <4 x i1> %2091, <4 x float> zeroinitializer, <4 x float> %2090, !dbg !152
  %2093 = fsub <4 x float> zeroinitializer, %2092, !dbg !154
  %2094 = insertelement <4 x float> poison, float %2071, i64 0, !dbg !155
  %2095 = insertelement <4 x float> %2094, float %2070, i64 1, !dbg !155
  %2096 = insertelement <4 x float> %2095, float %2069, i64 2, !dbg !155
  %2097 = insertelement <4 x float> %2096, float %2068, i64 3, !dbg !155
  %2098 = fcmp ole <4 x float> %2097, zeroinitializer, !dbg !155
  %2099 = select <4 x i1> %2098, <4 x float> zeroinitializer, <4 x float> %2097, !dbg !155
  %2100 = fcmp ogt <4 x float> %2093, %2099, !dbg !157
  %2101 = fcmp uno <4 x float> %2093, zeroinitializer, !dbg !159
  %2102 = or <4 x i1> %2101, %2100, !dbg !160
  %2103 = select <4 x i1> %2102, <4 x float> %2093, <4 x float> %2099, !dbg !161
  %2104 = fmul <4 x float> %2103, splat (float 0x3F80204080000000), !dbg !162
  %2105 = fcmp ogt <4 x float> %2104, splat (float 0x3EE4F8B580000000), !dbg !163
  %2106 = extractelement <4 x float> %2104, i64 3, !dbg !165
  %2107 = fcmp uno float %2106, 0.000000e+00, !dbg !166
  %2108 = extractelement <4 x float> %2104, i64 2, !dbg !165
  %2109 = fcmp uno float %2108, 0.000000e+00, !dbg !166
  %2110 = extractelement <4 x float> %2104, i64 1, !dbg !165
  %2111 = fcmp uno float %2110, 0.000000e+00, !dbg !166
  %2112 = extractelement <4 x float> %2104, i64 0, !dbg !165
  %2113 = fcmp uno float %2112, 0.000000e+00, !dbg !166
  %2114 = extractelement <4 x i1> %2105, i64 3, !dbg !167
  %2115 = or i1 %2114, %2107, !dbg !167
  %2116 = extractelement <4 x i1> %2105, i64 2, !dbg !167
  %2117 = or i1 %2116, %2109, !dbg !167
  %2118 = extractelement <4 x i1> %2105, i64 1, !dbg !167
  %2119 = or i1 %2118, %2111, !dbg !167
  %2120 = extractelement <4 x i1> %2105, i64 0, !dbg !167
  %2121 = or i1 %2120, %2113, !dbg !167
  %2122 = select i1 %2115, float %2106, float 0x3EE4F8B580000000, !dbg !165
  %2123 = select i1 %2117, float %2108, float 0x3EE4F8B580000000, !dbg !165
  %2124 = select i1 %2119, float %2110, float 0x3EE4F8B580000000, !dbg !165
  %2125 = select i1 %2121, float %2112, float 0x3EE4F8B580000000, !dbg !165
  %2126 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2122), !dbg !168
  %2127 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2123), !dbg !168
  %2128 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2124), !dbg !168
  %2129 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2125), !dbg !168
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %2130 = bitcast float %2126 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2130, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2130, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2130, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2130, i1 true) #5, !dbg !169
  %2131 = bitcast float %2127 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %2131, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %2131, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %2131, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %2131, i1 true) #5, !dbg !169
  %2132 = bitcast float %2128 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %2132, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %2132, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %2132, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %2132, i1 true) #5, !dbg !169
  %2133 = bitcast float %2129 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %2133, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %2133, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %2133, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %2133, i1 true) #5, !dbg !169
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %.idx = shl nuw nsw i32 %21, 3, !dbg !169
  %2134 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !169
  %2135 = load float, ptr addrspace(3) %2134, align 8, !dbg !169
  br label %2136, !dbg !170

2136:                                             ; preds = %1594, %2136
  %indvars.iv324 = phi i64 [ 0, %1594 ], [ %indvars.iv.next325, %2136 ]
  %2137 = trunc nuw nsw i64 %indvars.iv324 to i32, !dbg !171
  %2138 = add i32 %93, %2137, !dbg !171
  %2139 = add i32 %95, %2137, !dbg !171
  %2140 = sext i32 %2138 to i64, !dbg !172
  %2141 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2140, !dbg !172
  %2142 = sext i32 %2139 to i64, !dbg !172
  %2143 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2142, !dbg !172
  %2144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2141, i1 %26) #5, !dbg !173
  %2145 = extractvalue { i32, i32, i32, i32 } %2144, 0, !dbg !173
  %2146 = bitcast i32 %2145 to <2 x bfloat>, !dbg !173
  %2147 = extractvalue { i32, i32, i32, i32 } %2144, 1, !dbg !173
  %2148 = bitcast i32 %2147 to <2 x bfloat>, !dbg !173
  %2149 = extractvalue { i32, i32, i32, i32 } %2144, 2, !dbg !173
  %2150 = bitcast i32 %2149 to <2 x bfloat>, !dbg !173
  %2151 = extractvalue { i32, i32, i32, i32 } %2144, 3, !dbg !173
  %2152 = bitcast i32 %2151 to <2 x bfloat>, !dbg !173
  %2153 = extractelement <2 x bfloat> %2146, i64 0, !dbg !173
  %2154 = extractelement <2 x bfloat> %2146, i64 1, !dbg !173
  %2155 = extractelement <2 x bfloat> %2148, i64 0, !dbg !173
  %2156 = extractelement <2 x bfloat> %2148, i64 1, !dbg !173
  %2157 = extractelement <2 x bfloat> %2150, i64 0, !dbg !173
  %2158 = extractelement <2 x bfloat> %2150, i64 1, !dbg !173
  %2159 = extractelement <2 x bfloat> %2152, i64 0, !dbg !173
  %2160 = extractelement <2 x bfloat> %2152, i64 1, !dbg !173
  %2161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2143, i1 %26) #5, !dbg !173
  %2162 = extractvalue { i32, i32, i32, i32 } %2161, 0, !dbg !173
  %2163 = bitcast i32 %2162 to <2 x bfloat>, !dbg !173
  %2164 = extractvalue { i32, i32, i32, i32 } %2161, 1, !dbg !173
  %2165 = bitcast i32 %2164 to <2 x bfloat>, !dbg !173
  %2166 = extractvalue { i32, i32, i32, i32 } %2161, 2, !dbg !173
  %2167 = bitcast i32 %2166 to <2 x bfloat>, !dbg !173
  %2168 = extractvalue { i32, i32, i32, i32 } %2161, 3, !dbg !173
  %2169 = bitcast i32 %2168 to <2 x bfloat>, !dbg !173
  %2170 = extractelement <2 x bfloat> %2163, i64 0, !dbg !173
  %2171 = extractelement <2 x bfloat> %2163, i64 1, !dbg !173
  %2172 = extractelement <2 x bfloat> %2165, i64 0, !dbg !173
  %2173 = extractelement <2 x bfloat> %2165, i64 1, !dbg !173
  %2174 = extractelement <2 x bfloat> %2167, i64 0, !dbg !173
  %2175 = extractelement <2 x bfloat> %2167, i64 1, !dbg !173
  %2176 = extractelement <2 x bfloat> %2169, i64 0, !dbg !173
  %2177 = extractelement <2 x bfloat> %2169, i64 1, !dbg !173
  %2178 = fpext bfloat %2153 to float, !dbg !174
  %2179 = fpext bfloat %2154 to float, !dbg !174
  %2180 = fpext bfloat %2155 to float, !dbg !174
  %2181 = fpext bfloat %2156 to float, !dbg !174
  %2182 = fpext bfloat %2157 to float, !dbg !174
  %2183 = fpext bfloat %2158 to float, !dbg !174
  %2184 = fpext bfloat %2159 to float, !dbg !174
  %2185 = fpext bfloat %2160 to float, !dbg !174
  %2186 = fpext bfloat %2170 to float, !dbg !174
  %2187 = fpext bfloat %2171 to float, !dbg !174
  %2188 = fpext bfloat %2172 to float, !dbg !174
  %2189 = fpext bfloat %2173 to float, !dbg !174
  %2190 = fpext bfloat %2174 to float, !dbg !174
  %2191 = fpext bfloat %2175 to float, !dbg !174
  %2192 = fpext bfloat %2176 to float, !dbg !174
  %2193 = fpext bfloat %2177 to float, !dbg !174
  %2194 = fmul float %2135, %2178, !dbg !169
  %2195 = fmul float %2135, %2179, !dbg !169
  %2196 = fmul float %2135, %2180, !dbg !169
  %2197 = fmul float %2135, %2181, !dbg !169
  %2198 = fmul float %2135, %2182, !dbg !169
  %2199 = fmul float %2135, %2183, !dbg !169
  %2200 = fmul float %2135, %2184, !dbg !169
  %2201 = fmul float %2135, %2185, !dbg !169
  %2202 = fmul float %2135, %2186, !dbg !169
  %2203 = fmul float %2135, %2187, !dbg !169
  %2204 = fmul float %2135, %2188, !dbg !169
  %2205 = fmul float %2135, %2189, !dbg !169
  %2206 = fmul float %2135, %2190, !dbg !169
  %2207 = fmul float %2135, %2191, !dbg !169
  %2208 = fmul float %2135, %2192, !dbg !169
  %2209 = fmul float %2135, %2193, !dbg !169
  %2210 = tail call float @llvm.nvvm.round.f(float %2194) #5, !dbg !175
  %2211 = tail call float @llvm.nvvm.round.f(float %2195) #5, !dbg !175
  %2212 = tail call float @llvm.nvvm.round.f(float %2196) #5, !dbg !175
  %2213 = tail call float @llvm.nvvm.round.f(float %2197) #5, !dbg !175
  %2214 = tail call float @llvm.nvvm.round.f(float %2198) #5, !dbg !175
  %2215 = tail call float @llvm.nvvm.round.f(float %2199) #5, !dbg !175
  %2216 = tail call float @llvm.nvvm.round.f(float %2200) #5, !dbg !175
  %2217 = tail call float @llvm.nvvm.round.f(float %2201) #5, !dbg !175
  %2218 = tail call float @llvm.nvvm.round.f(float %2202) #5, !dbg !175
  %2219 = tail call float @llvm.nvvm.round.f(float %2203) #5, !dbg !175
  %2220 = tail call float @llvm.nvvm.round.f(float %2204) #5, !dbg !175
  %2221 = tail call float @llvm.nvvm.round.f(float %2205) #5, !dbg !175
  %2222 = tail call float @llvm.nvvm.round.f(float %2206) #5, !dbg !175
  %2223 = tail call float @llvm.nvvm.round.f(float %2207) #5, !dbg !175
  %2224 = tail call float @llvm.nvvm.round.f(float %2208) #5, !dbg !175
  %2225 = tail call float @llvm.nvvm.round.f(float %2209) #5, !dbg !175
  %2226 = insertelement <4 x float> poison, float %2210, i64 0, !dbg !176
  %2227 = insertelement <4 x float> %2226, float %2211, i64 1, !dbg !176
  %2228 = insertelement <4 x float> %2227, float %2212, i64 2, !dbg !176
  %2229 = insertelement <4 x float> %2228, float %2213, i64 3, !dbg !176
  %2230 = fcmp ogt <4 x float> %2229, splat (float -1.270000e+02), !dbg !176
  %2231 = fcmp uno <4 x float> %2229, zeroinitializer, !dbg !178
  %2232 = or <4 x i1> %2230, %2231, !dbg !179
  %2233 = select <4 x i1> %2232, <4 x float> %2229, <4 x float> splat (float -1.270000e+02), !dbg !180
  %2234 = fcmp olt <4 x float> %2233, splat (float 1.270000e+02), !dbg !181
  %2235 = fcmp uno <4 x float> %2233, zeroinitializer, !dbg !183
  %2236 = or <4 x i1> %2234, %2235, !dbg !184
  %2237 = fptosi <4 x float> %2233 to <4 x i8>, !dbg !185
  %2238 = select <4 x i1> %2236, <4 x i8> %2237, <4 x i8> splat (i8 127), !dbg !186
  %2239 = insertelement <4 x float> poison, float %2214, i64 0, !dbg !176
  %2240 = insertelement <4 x float> %2239, float %2215, i64 1, !dbg !176
  %2241 = insertelement <4 x float> %2240, float %2216, i64 2, !dbg !176
  %2242 = insertelement <4 x float> %2241, float %2217, i64 3, !dbg !176
  %2243 = fcmp ogt <4 x float> %2242, splat (float -1.270000e+02), !dbg !176
  %2244 = fcmp uno <4 x float> %2242, zeroinitializer, !dbg !178
  %2245 = or <4 x i1> %2243, %2244, !dbg !179
  %2246 = select <4 x i1> %2245, <4 x float> %2242, <4 x float> splat (float -1.270000e+02), !dbg !180
  %2247 = fcmp olt <4 x float> %2246, splat (float 1.270000e+02), !dbg !181
  %2248 = fcmp uno <4 x float> %2246, zeroinitializer, !dbg !183
  %2249 = or <4 x i1> %2247, %2248, !dbg !184
  %2250 = fptosi <4 x float> %2246 to <4 x i8>, !dbg !185
  %2251 = select <4 x i1> %2249, <4 x i8> %2250, <4 x i8> splat (i8 127), !dbg !186
  %2252 = insertelement <4 x float> poison, float %2218, i64 0, !dbg !176
  %2253 = insertelement <4 x float> %2252, float %2219, i64 1, !dbg !176
  %2254 = insertelement <4 x float> %2253, float %2220, i64 2, !dbg !176
  %2255 = insertelement <4 x float> %2254, float %2221, i64 3, !dbg !176
  %2256 = fcmp ogt <4 x float> %2255, splat (float -1.270000e+02), !dbg !176
  %2257 = fcmp uno <4 x float> %2255, zeroinitializer, !dbg !178
  %2258 = or <4 x i1> %2256, %2257, !dbg !179
  %2259 = select <4 x i1> %2258, <4 x float> %2255, <4 x float> splat (float -1.270000e+02), !dbg !180
  %2260 = fcmp olt <4 x float> %2259, splat (float 1.270000e+02), !dbg !181
  %2261 = fcmp uno <4 x float> %2259, zeroinitializer, !dbg !183
  %2262 = or <4 x i1> %2260, %2261, !dbg !184
  %2263 = fptosi <4 x float> %2259 to <4 x i8>, !dbg !185
  %2264 = select <4 x i1> %2262, <4 x i8> %2263, <4 x i8> splat (i8 127), !dbg !186
  %2265 = insertelement <4 x float> poison, float %2222, i64 0, !dbg !176
  %2266 = insertelement <4 x float> %2265, float %2223, i64 1, !dbg !176
  %2267 = insertelement <4 x float> %2266, float %2224, i64 2, !dbg !176
  %2268 = insertelement <4 x float> %2267, float %2225, i64 3, !dbg !176
  %2269 = fcmp ogt <4 x float> %2268, splat (float -1.270000e+02), !dbg !176
  %2270 = fcmp uno <4 x float> %2268, zeroinitializer, !dbg !178
  %2271 = or <4 x i1> %2269, %2270, !dbg !179
  %2272 = select <4 x i1> %2271, <4 x float> %2268, <4 x float> splat (float -1.270000e+02), !dbg !180
  %2273 = fcmp olt <4 x float> %2272, splat (float 1.270000e+02), !dbg !181
  %2274 = fcmp uno <4 x float> %2272, zeroinitializer, !dbg !183
  %2275 = or <4 x i1> %2273, %2274, !dbg !184
  %2276 = fptosi <4 x float> %2272 to <4 x i8>, !dbg !185
  %2277 = select <4 x i1> %2275, <4 x i8> %2276, <4 x i8> splat (i8 127), !dbg !186
  %2278 = getelementptr i8, ptr addrspace(1) %12, i64 %2140, !dbg !187
  %2279 = bitcast <4 x i8> %2238 to i32, !dbg !188
  %2280 = bitcast <4 x i8> %2251 to i32, !dbg !188
  %2281 = bitcast <4 x i8> %2264 to i32, !dbg !188
  %2282 = bitcast <4 x i8> %2277 to i32, !dbg !188
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2279, i32 %2280, i32 %2281, i32 %2282, ptr addrspace(1) %2278, i1 %26) #5, !dbg !188
  %indvars.iv.next325 = add nuw nsw i64 %indvars.iv324, 1024, !dbg !170
  %2283 = icmp samesign ult i64 %indvars.iv324, 2048, !dbg !170
  br i1 %2283, label %2136, label %2284, !dbg !170

2284:                                             ; preds = %2136
  ret void, !dbg !189
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 35, column: 31, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 40, column: 113, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 41, column: 48, scope: !6)
!52 = !DILocation(line: 42, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 43, column: 51, scope: !6)
!55 = !DILocation(line: 44, column: 42, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 42, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 60, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 72, column: 68, scope: !6)
!78 = !DILocation(line: 73, column: 29, scope: !6)
!79 = !DILocation(line: 73, column: 53, scope: !6)
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 110, column: 50, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 112, column: 50, scope: !6)
!102 = !DILocation(line: 80, column: 40, scope: !6)
!103 = !DILocation(line: 81, column: 31, scope: !6)
!104 = !DILocation(line: 86, column: 43, scope: !6)
!105 = !DILocation(line: 86, column: 36, scope: !6)
!106 = !DILocation(line: 86, column: 53, scope: !6)
!107 = !DILocation(line: 86, column: 115, scope: !6)
!108 = !DILocation(line: 87, column: 35, scope: !6)
!109 = !DILocation(line: 88, column: 35, scope: !6)
!110 = !DILocation(line: 89, column: 42, scope: !6)
!111 = !DILocation(line: 89, column: 35, scope: !6)
!112 = !DILocation(line: 90, column: 35, scope: !6)
!113 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !114)
!114 = !DILocation(line: 109, column: 47, scope: !6)
!115 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !116)
!116 = !DILocation(line: 111, column: 47, scope: !6)
!117 = !DILocation(line: 87, column: 50, scope: !6)
!118 = !DILocation(line: 88, column: 50, scope: !6)
!119 = !DILocation(line: 88, column: 103, scope: !6)
!120 = !DILocation(line: 89, column: 49, scope: !6)
!121 = !DILocation(line: 90, column: 49, scope: !6)
!122 = !DILocation(line: 90, column: 102, scope: !6)
!123 = !DILocation(line: 101, column: 24, scope: !6)
!124 = !DILocation(line: 103, column: 24, scope: !6)
!125 = !DILocation(line: 104, column: 24, scope: !6)
!126 = !DILocation(line: 106, column: 24, scope: !6)
!127 = !DILocation(line: 107, column: 24, scope: !6)
!128 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !114)
!129 = !DILocation(line: 113, column: 53, scope: !6)
!130 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !114)
!131 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !114)
!132 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !116)
!133 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !116)
!134 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !116)
!135 = !DILocation(line: 113, column: 29, scope: !6)
!136 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !137)
!137 = !DILocation(line: 114, column: 40, scope: !6)
!138 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !137)
!139 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !137)
!140 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !137)
!141 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !137)
!142 = !DILocation(line: 116, column: 37, scope: !6)
!143 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !144)
!144 = !DILocation(line: 115, column: 40, scope: !6)
!145 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !144)
!146 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !144)
!147 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !144)
!148 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !144)
!149 = !DILocation(line: 117, column: 37, scope: !6)
!150 = !DILocation(line: 116, column: 25, scope: !6)
!151 = !DILocation(line: 117, column: 25, scope: !6)
!152 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !153)
!153 = !DILocation(line: 126, column: 46, scope: !6)
!154 = !DILocation(line: 127, column: 17, scope: !6)
!155 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !156)
!156 = !DILocation(line: 128, column: 46, scope: !6)
!157 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !158)
!158 = !DILocation(line: 129, column: 46, scope: !6)
!159 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !158)
!160 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !158)
!161 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !158)
!162 = !DILocation(line: 131, column: 24, scope: !6)
!163 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !164)
!164 = !DILocation(line: 134, column: 46, scope: !6)
!165 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !164)
!166 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !164)
!167 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !164)
!168 = !DILocation(line: 137, column: 25, scope: !6)
!169 = !DILocation(line: 140, column: 24, scope: !6)
!170 = !DILocation(line: 118, column: 40, scope: !6)
!171 = !DILocation(line: 124, column: 43, scope: !6)
!172 = !DILocation(line: 124, column: 36, scope: !6)
!173 = !DILocation(line: 124, column: 53, scope: !6)
!174 = !DILocation(line: 124, column: 115, scope: !6)
!175 = !DILocation(line: 141, column: 36, scope: !6)
!176 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !177)
!177 = !DILocation(line: 144, column: 46, scope: !6)
!178 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !177)
!179 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !177)
!180 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !177)
!181 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !182)
!182 = !DILocation(line: 146, column: 46, scope: !6)
!183 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !182)
!184 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !182)
!185 = !DILocation(line: 148, column: 25, scope: !6)
!186 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !182)
!187 = !DILocation(line: 149, column: 29, scope: !6)
!188 = !DILocation(line: 149, column: 53, scope: !6)
!189 = !DILocation(line: 118, column: 4, scope: !6)
