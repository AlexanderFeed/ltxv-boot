; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 64, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 4, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 64, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = lshr i32 %15, 2, !dbg !19
  %17 = and i32 %16, 8, !dbg !19
  %18 = and i32 %16, 16, !dbg !19
  %19 = and i32 %15, 128, !dbg !19
  %20 = lshr exact i32 %19, 2, !dbg !19
  %21 = and i32 %16, 31, !dbg !19
  %22 = or disjoint i32 %21, %20, !dbg !19
  %23 = or disjoint i32 %14, %22, !dbg !20
  %24 = or disjoint i32 %23, 64, !dbg !20
  %25 = shl nsw i32 %13, 6, !dbg !21
  %26 = shl i32 %15, 3, !dbg !22
  %27 = and i32 %26, 24, !dbg !22
  %28 = or disjoint i32 %25, %22, !dbg !23
  %29 = srem i32 %23, 512, !dbg !24
  %30 = srem i32 %24, 512, !dbg !24
  %.lhs.trunc = trunc i32 %28 to i16, !dbg !25
  %31 = srem i16 %.lhs.trunc, 512, !dbg !25
  %.sext = sext i16 %31 to i32, !dbg !25
  %32 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !26
  %33 = shl nsw i32 %29, 12, !dbg !27
  %34 = shl nsw i32 %30, 12, !dbg !27
  %35 = shl i32 %32, 6, !dbg !28
  %36 = or disjoint i32 %27, %35, !dbg !29
  %37 = add i32 %36, %33, !dbg !30
  %38 = add i32 %36, %34, !dbg !30
  %39 = sext i32 %37 to i64, !dbg !31
  %40 = getelementptr bfloat, ptr addrspace(1) %0, i64 %39, !dbg !31
  %41 = sext i32 %38 to i64, !dbg !31
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !31
  %43 = shl nsw i32 %.sext, 12, !dbg !32
  %44 = add i32 %36, %43, !dbg !33
  %45 = sext i32 %44 to i64, !dbg !34
  %46 = getelementptr bfloat, ptr addrspace(1) %1, i64 %45, !dbg !34
  %47 = xor i32 %26, %15, !dbg !35
  %48 = and i32 %47, 24, !dbg !35
  %49 = shl nuw nsw i32 %22, 5, !dbg !35
  %50 = or disjoint i32 %49, %48, !dbg !35
  %51 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %50, !dbg !35
  %52 = and i32 %16, 31, !dbg !35
  %53 = or disjoint i32 %52, %20, !dbg !35
  %54 = shl nuw nsw i32 %53, 5, !dbg !35
  %55 = or disjoint i32 %54, %48, !dbg !35
  %56 = or disjoint i32 %55, 2048, !dbg !35
  %57 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %56, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %51, ptr addrspace(1) %40, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %57, ptr addrspace(1) %42, i32 16) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %58 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %50, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %58, ptr addrspace(1) %46, i32 16) #1, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %59 = getelementptr i8, ptr addrspace(1) %40, i64 64, !dbg !37
  %60 = getelementptr i8, ptr addrspace(1) %42, i64 64, !dbg !37
  %61 = getelementptr i8, ptr addrspace(1) %46, i64 64, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %62 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %50, !dbg !35
  %63 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %56, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %62, ptr addrspace(1) %59, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %63, ptr addrspace(1) %60, i32 16) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %64 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 28672), i32 %50, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %64, ptr addrspace(1) %61, i32 16) #1, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %65 = getelementptr i8, ptr addrspace(1) %40, i64 128, !dbg !37
  %66 = getelementptr i8, ptr addrspace(1) %42, i64 128, !dbg !37
  %67 = getelementptr i8, ptr addrspace(1) %46, i64 128, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %68 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %50, !dbg !35
  %69 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %56, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %68, ptr addrspace(1) %65, i32 0) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %69, ptr addrspace(1) %66, i32 0) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %70 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %50, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %70, ptr addrspace(1) %67, i32 0) #1, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %71 = shl i32 %15, 2
  %72 = and i32 %71, 8
  %73 = and i32 %71, 16
  %74 = and i32 %71, 24
  %75 = and i32 %15, 7
  %76 = and i32 %15, 15
  %77 = lshr i32 %15, 1
  %78 = and i32 %77, 8
  %79 = xor i32 %74, %78
  %80 = or disjoint i32 %18, %76
  %81 = or disjoint i32 %80, %20
  %82 = shl nuw nsw i32 %81, 5
  %83 = or disjoint i32 %82, %79
  %84 = or disjoint i32 %72, 16
  %85 = or disjoint i32 %78, %73
  %86 = xor i32 %85, %84
  %87 = or disjoint i32 %86, %82
  %88 = or disjoint i32 %82, 2048
  %89 = or disjoint i32 %88, %79
  %90 = or disjoint i32 %88, %86
  %91 = xor i32 %71, %15
  %92 = and i32 %91, 24
  %93 = or disjoint i32 %17, %75
  %94 = shl nuw nsw i32 %93, 5
  %95 = or disjoint i32 %92, %94
  %96 = or disjoint i32 %95, 512
  %97 = or disjoint i32 %95, 1024
  %98 = or disjoint i32 %95, 1536
  br label %99, !dbg !39

99:                                               ; preds = %4, %99
  %100 = phi i32 [ -1, %4 ], [ %137, %99 ]
  %101 = phi i32 [ 2, %4 ], [ %281, %99 ]
  %.pn50134 = phi ptr addrspace(1) [ %67, %4 ], [ %278, %99 ]
  %.pn18133 = phi ptr addrspace(1) [ %66, %4 ], [ %277, %99 ]
  %.pn34132 = phi ptr addrspace(1) [ %65, %4 ], [ %276, %99 ]
  %102 = phi float [ 0.000000e+00, %4 ], [ %237, %99 ]
  %103 = phi float [ 0.000000e+00, %4 ], [ %238, %99 ]
  %104 = phi float [ 0.000000e+00, %4 ], [ %239, %99 ]
  %105 = phi float [ 0.000000e+00, %4 ], [ %240, %99 ]
  %106 = phi float [ 0.000000e+00, %4 ], [ %242, %99 ]
  %107 = phi float [ 0.000000e+00, %4 ], [ %243, %99 ]
  %108 = phi float [ 0.000000e+00, %4 ], [ %244, %99 ]
  %109 = phi float [ 0.000000e+00, %4 ], [ %245, %99 ]
  %110 = phi float [ 0.000000e+00, %4 ], [ %247, %99 ]
  %111 = phi float [ 0.000000e+00, %4 ], [ %248, %99 ]
  %112 = phi float [ 0.000000e+00, %4 ], [ %249, %99 ]
  %113 = phi float [ 0.000000e+00, %4 ], [ %250, %99 ]
  %114 = phi float [ 0.000000e+00, %4 ], [ %252, %99 ]
  %115 = phi float [ 0.000000e+00, %4 ], [ %253, %99 ]
  %116 = phi float [ 0.000000e+00, %4 ], [ %254, %99 ]
  %117 = phi float [ 0.000000e+00, %4 ], [ %255, %99 ]
  %118 = phi float [ 0.000000e+00, %4 ], [ %257, %99 ]
  %119 = phi float [ 0.000000e+00, %4 ], [ %258, %99 ]
  %120 = phi float [ 0.000000e+00, %4 ], [ %259, %99 ]
  %121 = phi float [ 0.000000e+00, %4 ], [ %260, %99 ]
  %122 = phi float [ 0.000000e+00, %4 ], [ %262, %99 ]
  %123 = phi float [ 0.000000e+00, %4 ], [ %263, %99 ]
  %124 = phi float [ 0.000000e+00, %4 ], [ %264, %99 ]
  %125 = phi float [ 0.000000e+00, %4 ], [ %265, %99 ]
  %126 = phi float [ 0.000000e+00, %4 ], [ %267, %99 ]
  %127 = phi float [ 0.000000e+00, %4 ], [ %268, %99 ]
  %128 = phi float [ 0.000000e+00, %4 ], [ %269, %99 ]
  %129 = phi float [ 0.000000e+00, %4 ], [ %270, %99 ]
  %130 = phi float [ 0.000000e+00, %4 ], [ %272, %99 ]
  %131 = phi float [ 0.000000e+00, %4 ], [ %273, %99 ]
  %132 = phi float [ 0.000000e+00, %4 ], [ %274, %99 ]
  %133 = phi float [ 0.000000e+00, %4 ], [ %275, %99 ]
  %134 = phi i1 [ true, %4 ], [ false, %99 ]
  %135 = add i32 %100, 1, !dbg !39
  %136 = icmp slt i32 %135, 3, !dbg !39
  %137 = select i1 %136, i32 %135, i32 0, !dbg !39
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %.idx = shl i32 %137, 13, !dbg !35
  %138 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !35
  %139 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %138, i32 %83, !dbg !35
  %140 = ptrtoint ptr addrspace(3) %139 to i32, !dbg !35
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %140) #1, !dbg !35
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !35
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !35
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !35
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !35
  %146 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %138, i32 %87, !dbg !35
  %147 = ptrtoint ptr addrspace(3) %146 to i32, !dbg !35
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %147) #1, !dbg !35
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !35
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !35
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !35
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !35
  %153 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %138, i32 %89, !dbg !35
  %154 = ptrtoint ptr addrspace(3) %153 to i32, !dbg !35
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %154) #1, !dbg !35
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !35
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !35
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !35
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !35
  %160 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %138, i32 %90, !dbg !35
  %161 = ptrtoint ptr addrspace(3) %160 to i32, !dbg !35
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %161) #1, !dbg !35
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !35
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !35
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !35
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !35
  %.idx97 = shl i32 %137, 12, !dbg !36
  %167 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %.idx97, !dbg !36
  %168 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %167, i32 %95, !dbg !36
  %169 = ptrtoint ptr addrspace(3) %168 to i32, !dbg !36
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %169) #1, !dbg !36
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !36
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !36
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !36
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !36
  %175 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %167, i32 %96, !dbg !36
  %176 = ptrtoint ptr addrspace(3) %175 to i32, !dbg !36
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %176) #1, !dbg !36
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !36
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !36
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !36
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !36
  %182 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %167, i32 %97, !dbg !36
  %183 = ptrtoint ptr addrspace(3) %182 to i32, !dbg !36
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %183) #1, !dbg !36
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !36
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !36
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !36
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !36
  %189 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %167, i32 %98, !dbg !36
  %190 = ptrtoint ptr addrspace(3) %189 to i32, !dbg !36
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %190) #1, !dbg !36
  %192 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !36
  %193 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !36
  %194 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !36
  %195 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !36
  %196 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %102, float %103, float %104, float %105, i32 %142, i32 %143, i32 %144, i32 %145, i32 %171, i32 %172) #1, !dbg !40
  %197 = extractvalue { float, float, float, float } %196, 0, !dbg !40
  %198 = extractvalue { float, float, float, float } %196, 1, !dbg !40
  %199 = extractvalue { float, float, float, float } %196, 2, !dbg !40
  %200 = extractvalue { float, float, float, float } %196, 3, !dbg !40
  %201 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %106, float %107, float %108, float %109, i32 %142, i32 %143, i32 %144, i32 %145, i32 %178, i32 %179) #1, !dbg !40
  %202 = extractvalue { float, float, float, float } %201, 0, !dbg !40
  %203 = extractvalue { float, float, float, float } %201, 1, !dbg !40
  %204 = extractvalue { float, float, float, float } %201, 2, !dbg !40
  %205 = extractvalue { float, float, float, float } %201, 3, !dbg !40
  %206 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %110, float %111, float %112, float %113, i32 %142, i32 %143, i32 %144, i32 %145, i32 %185, i32 %186) #1, !dbg !40
  %207 = extractvalue { float, float, float, float } %206, 0, !dbg !40
  %208 = extractvalue { float, float, float, float } %206, 1, !dbg !40
  %209 = extractvalue { float, float, float, float } %206, 2, !dbg !40
  %210 = extractvalue { float, float, float, float } %206, 3, !dbg !40
  %211 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %114, float %115, float %116, float %117, i32 %142, i32 %143, i32 %144, i32 %145, i32 %192, i32 %193) #1, !dbg !40
  %212 = extractvalue { float, float, float, float } %211, 0, !dbg !40
  %213 = extractvalue { float, float, float, float } %211, 1, !dbg !40
  %214 = extractvalue { float, float, float, float } %211, 2, !dbg !40
  %215 = extractvalue { float, float, float, float } %211, 3, !dbg !40
  %216 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %118, float %119, float %120, float %121, i32 %156, i32 %157, i32 %158, i32 %159, i32 %171, i32 %172) #1, !dbg !40
  %217 = extractvalue { float, float, float, float } %216, 0, !dbg !40
  %218 = extractvalue { float, float, float, float } %216, 1, !dbg !40
  %219 = extractvalue { float, float, float, float } %216, 2, !dbg !40
  %220 = extractvalue { float, float, float, float } %216, 3, !dbg !40
  %221 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %122, float %123, float %124, float %125, i32 %156, i32 %157, i32 %158, i32 %159, i32 %178, i32 %179) #1, !dbg !40
  %222 = extractvalue { float, float, float, float } %221, 0, !dbg !40
  %223 = extractvalue { float, float, float, float } %221, 1, !dbg !40
  %224 = extractvalue { float, float, float, float } %221, 2, !dbg !40
  %225 = extractvalue { float, float, float, float } %221, 3, !dbg !40
  %226 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %126, float %127, float %128, float %129, i32 %156, i32 %157, i32 %158, i32 %159, i32 %185, i32 %186) #1, !dbg !40
  %227 = extractvalue { float, float, float, float } %226, 0, !dbg !40
  %228 = extractvalue { float, float, float, float } %226, 1, !dbg !40
  %229 = extractvalue { float, float, float, float } %226, 2, !dbg !40
  %230 = extractvalue { float, float, float, float } %226, 3, !dbg !40
  %231 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %130, float %131, float %132, float %133, i32 %156, i32 %157, i32 %158, i32 %159, i32 %192, i32 %193) #1, !dbg !40
  %232 = extractvalue { float, float, float, float } %231, 0, !dbg !40
  %233 = extractvalue { float, float, float, float } %231, 1, !dbg !40
  %234 = extractvalue { float, float, float, float } %231, 2, !dbg !40
  %235 = extractvalue { float, float, float, float } %231, 3, !dbg !40
  %236 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %197, float %198, float %199, float %200, i32 %149, i32 %150, i32 %151, i32 %152, i32 %173, i32 %174) #1, !dbg !40
  %237 = extractvalue { float, float, float, float } %236, 0, !dbg !40
  %238 = extractvalue { float, float, float, float } %236, 1, !dbg !40
  %239 = extractvalue { float, float, float, float } %236, 2, !dbg !40
  %240 = extractvalue { float, float, float, float } %236, 3, !dbg !40
  %241 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %202, float %203, float %204, float %205, i32 %149, i32 %150, i32 %151, i32 %152, i32 %180, i32 %181) #1, !dbg !40
  %242 = extractvalue { float, float, float, float } %241, 0, !dbg !40
  %243 = extractvalue { float, float, float, float } %241, 1, !dbg !40
  %244 = extractvalue { float, float, float, float } %241, 2, !dbg !40
  %245 = extractvalue { float, float, float, float } %241, 3, !dbg !40
  %246 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %207, float %208, float %209, float %210, i32 %149, i32 %150, i32 %151, i32 %152, i32 %187, i32 %188) #1, !dbg !40
  %247 = extractvalue { float, float, float, float } %246, 0, !dbg !40
  %248 = extractvalue { float, float, float, float } %246, 1, !dbg !40
  %249 = extractvalue { float, float, float, float } %246, 2, !dbg !40
  %250 = extractvalue { float, float, float, float } %246, 3, !dbg !40
  %251 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %212, float %213, float %214, float %215, i32 %149, i32 %150, i32 %151, i32 %152, i32 %194, i32 %195) #1, !dbg !40
  %252 = extractvalue { float, float, float, float } %251, 0, !dbg !40
  %253 = extractvalue { float, float, float, float } %251, 1, !dbg !40
  %254 = extractvalue { float, float, float, float } %251, 2, !dbg !40
  %255 = extractvalue { float, float, float, float } %251, 3, !dbg !40
  %256 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %217, float %218, float %219, float %220, i32 %163, i32 %164, i32 %165, i32 %166, i32 %173, i32 %174) #1, !dbg !40
  %257 = extractvalue { float, float, float, float } %256, 0, !dbg !40
  %258 = extractvalue { float, float, float, float } %256, 1, !dbg !40
  %259 = extractvalue { float, float, float, float } %256, 2, !dbg !40
  %260 = extractvalue { float, float, float, float } %256, 3, !dbg !40
  %261 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %222, float %223, float %224, float %225, i32 %163, i32 %164, i32 %165, i32 %166, i32 %180, i32 %181) #1, !dbg !40
  %262 = extractvalue { float, float, float, float } %261, 0, !dbg !40
  %263 = extractvalue { float, float, float, float } %261, 1, !dbg !40
  %264 = extractvalue { float, float, float, float } %261, 2, !dbg !40
  %265 = extractvalue { float, float, float, float } %261, 3, !dbg !40
  %266 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %227, float %228, float %229, float %230, i32 %163, i32 %164, i32 %165, i32 %166, i32 %187, i32 %188) #1, !dbg !40
  %267 = extractvalue { float, float, float, float } %266, 0, !dbg !40
  %268 = extractvalue { float, float, float, float } %266, 1, !dbg !40
  %269 = extractvalue { float, float, float, float } %266, 2, !dbg !40
  %270 = extractvalue { float, float, float, float } %266, 3, !dbg !40
  %271 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %232, float %233, float %234, float %235, i32 %163, i32 %164, i32 %165, i32 %166, i32 %194, i32 %195) #1, !dbg !40
  %272 = extractvalue { float, float, float, float } %271, 0, !dbg !40
  %273 = extractvalue { float, float, float, float } %271, 1, !dbg !40
  %274 = extractvalue { float, float, float, float } %271, 2, !dbg !40
  %275 = extractvalue { float, float, float, float } %271, 3, !dbg !40
  %276 = getelementptr i8, ptr addrspace(1) %.pn34132, i64 64, !dbg !37
  %277 = getelementptr i8, ptr addrspace(1) %.pn18133, i64 64, !dbg !37
  %278 = getelementptr i8, ptr addrspace(1) %.pn50134, i64 64, !dbg !38
  %279 = add i32 %101, 1, !dbg !39
  %280 = icmp slt i32 %279, 3, !dbg !39
  %281 = select i1 %280, i32 %279, i32 0, !dbg !39
  %.idx98 = shl i32 %281, 13, !dbg !35
  %282 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx98, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %283 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %282, i32 %50, !dbg !35
  %284 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %282, i32 %56, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %283, ptr addrspace(1) %276, i32 0) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %284, ptr addrspace(1) %277, i32 0) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %.idx99 = shl i32 %281, 12, !dbg !36
  %gep = getelementptr i8, ptr addrspace(3) %58, i32 %.idx99, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %278, i32 0) #1, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  br i1 %134, label %99, label %285, !dbg !39

285:                                              ; preds = %99
  %286 = and i32 %26, 56, !dbg !22
  %287 = or disjoint i32 %25, %286, !dbg !23
  %288 = lshr i32 %15, 3, !dbg !19
  %289 = and i32 %288, 31, !dbg !19
  %290 = or disjoint i32 %289, %14, !dbg !20
  %291 = or disjoint i32 %290, 96, !dbg !20
  %292 = or disjoint i32 %290, 64, !dbg !20
  %293 = or disjoint i32 %290, 32, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %294 = icmp slt i32 %290, 512, !dbg !41
  %295 = icmp slt i32 %293, 512, !dbg !41
  %296 = icmp slt i32 %292, 512, !dbg !41
  %297 = icmp slt i32 %291, 512, !dbg !41
  %298 = icmp slt i32 %287, 512, !dbg !42
  %299 = and i1 %294, %298, !dbg !43
  %300 = and i1 %295, %298, !dbg !43
  %301 = and i1 %296, %298, !dbg !43
  %302 = and i1 %297, %298, !dbg !43
  %303 = shl i32 %290, 9, !dbg !44
  %304 = shl i32 %293, 9, !dbg !44
  %305 = shl i32 %292, 9, !dbg !44
  %306 = shl i32 %291, 9, !dbg !44
  %307 = shl i32 %32, 18, !dbg !45
  %308 = add i32 %287, %307, !dbg !46
  %309 = add i32 %308, %303, !dbg !47
  %310 = add i32 %308, %304, !dbg !47
  %311 = add i32 %308, %305, !dbg !47
  %312 = add i32 %308, %306, !dbg !47
  %313 = sext i32 %309 to i64, !dbg !48
  %314 = getelementptr bfloat, ptr addrspace(1) %2, i64 %313, !dbg !48
  %315 = sext i32 %310 to i64, !dbg !48
  %316 = getelementptr bfloat, ptr addrspace(1) %2, i64 %315, !dbg !48
  %317 = sext i32 %311 to i64, !dbg !48
  %318 = getelementptr bfloat, ptr addrspace(1) %2, i64 %317, !dbg !48
  %319 = sext i32 %312 to i64, !dbg !48
  %320 = getelementptr bfloat, ptr addrspace(1) %2, i64 %319, !dbg !48
  %321 = fptrunc float %237 to bfloat, !dbg !49
  %322 = fptrunc float %238 to bfloat, !dbg !49
  %323 = fptrunc float %239 to bfloat, !dbg !49
  %324 = fptrunc float %240 to bfloat, !dbg !49
  %325 = fptrunc float %242 to bfloat, !dbg !49
  %326 = fptrunc float %243 to bfloat, !dbg !49
  %327 = fptrunc float %244 to bfloat, !dbg !49
  %328 = fptrunc float %245 to bfloat, !dbg !49
  %329 = fptrunc float %247 to bfloat, !dbg !49
  %330 = fptrunc float %248 to bfloat, !dbg !49
  %331 = fptrunc float %249 to bfloat, !dbg !49
  %332 = fptrunc float %250 to bfloat, !dbg !49
  %333 = fptrunc float %252 to bfloat, !dbg !49
  %334 = fptrunc float %253 to bfloat, !dbg !49
  %335 = fptrunc float %254 to bfloat, !dbg !49
  %336 = fptrunc float %255 to bfloat, !dbg !49
  %337 = fptrunc float %257 to bfloat, !dbg !49
  %338 = fptrunc float %258 to bfloat, !dbg !49
  %339 = fptrunc float %259 to bfloat, !dbg !49
  %340 = fptrunc float %260 to bfloat, !dbg !49
  %341 = fptrunc float %262 to bfloat, !dbg !49
  %342 = fptrunc float %263 to bfloat, !dbg !49
  %343 = fptrunc float %264 to bfloat, !dbg !49
  %344 = fptrunc float %265 to bfloat, !dbg !49
  %345 = fptrunc float %267 to bfloat, !dbg !49
  %346 = fptrunc float %268 to bfloat, !dbg !49
  %347 = fptrunc float %269 to bfloat, !dbg !49
  %348 = fptrunc float %270 to bfloat, !dbg !49
  %349 = fptrunc float %272 to bfloat, !dbg !49
  %350 = fptrunc float %273 to bfloat, !dbg !49
  %351 = fptrunc float %274 to bfloat, !dbg !49
  %352 = fptrunc float %275 to bfloat, !dbg !49
  %353 = shl i32 %15, 1, !dbg !49
  %354 = and i32 %353, 6, !dbg !49
  %355 = shl i32 %15, 4, !dbg !49
  %356 = and i32 %355, 1472, !dbg !49
  %357 = or disjoint i32 %356, %354, !dbg !49
  %358 = shl nuw nsw i32 %19, 4, !dbg !49
  %359 = or disjoint i32 %357, %358, !dbg !49
  %360 = or disjoint i32 %359, %17, !dbg !49
  %361 = and i32 %26, 2040, !dbg !49
  %362 = lshr i32 %359, 3, !dbg !49
  %363 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %362, !dbg !49
  %364 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %363, i32 %360, !dbg !49
  %365 = bitcast bfloat %321 to i16, !dbg !49
  %366 = bitcast bfloat %322 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %364, i16 %365, i16 %366, i1 true) #1, !dbg !49
  %367 = or disjoint i32 %360, 512, !dbg !49
  %368 = lshr i32 %367, 3, !dbg !49
  %369 = and i32 %368, 536870904, !dbg !49
  %370 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %369, !dbg !49
  %371 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %370, i32 %367, !dbg !49
  %372 = bitcast bfloat %323 to i16, !dbg !49
  %373 = bitcast bfloat %324 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %371, i16 %372, i16 %373, i1 true) #1, !dbg !49
  %374 = or disjoint i32 %360, 16, !dbg !49
  %375 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %363, i32 %374, !dbg !49
  %376 = bitcast bfloat %325 to i16, !dbg !49
  %377 = bitcast bfloat %326 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %375, i16 %376, i16 %377, i1 true) #1, !dbg !49
  %378 = or disjoint i32 %360, 528, !dbg !49
  %379 = lshr i32 %378, 3, !dbg !49
  %380 = and i32 %379, 536870904, !dbg !49
  %381 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %380, !dbg !49
  %382 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %381, i32 %378, !dbg !49
  %383 = bitcast bfloat %327 to i16, !dbg !49
  %384 = bitcast bfloat %328 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %382, i16 %383, i16 %384, i1 true) #1, !dbg !49
  %385 = or disjoint i32 %360, 32, !dbg !49
  %386 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %363, i32 %385, !dbg !49
  %387 = bitcast bfloat %329 to i16, !dbg !49
  %388 = bitcast bfloat %330 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %386, i16 %387, i16 %388, i1 true) #1, !dbg !49
  %389 = or disjoint i32 %360, 544, !dbg !49
  %390 = lshr i32 %389, 3, !dbg !49
  %391 = and i32 %390, 536870904, !dbg !49
  %392 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %391, !dbg !49
  %393 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %392, i32 %389, !dbg !49
  %394 = bitcast bfloat %331 to i16, !dbg !49
  %395 = bitcast bfloat %332 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %393, i16 %394, i16 %395, i1 true) #1, !dbg !49
  %396 = or disjoint i32 %360, 48, !dbg !49
  %397 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %363, i32 %396, !dbg !49
  %398 = bitcast bfloat %333 to i16, !dbg !49
  %399 = bitcast bfloat %334 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %397, i16 %398, i16 %399, i1 true) #1, !dbg !49
  %400 = or disjoint i32 %360, 560, !dbg !49
  %401 = lshr i32 %400, 3, !dbg !49
  %402 = and i32 %401, 536870904, !dbg !49
  %403 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %402, !dbg !49
  %404 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %403, i32 %400, !dbg !49
  %405 = bitcast bfloat %335 to i16, !dbg !49
  %406 = bitcast bfloat %336 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %404, i16 %405, i16 %406, i1 true) #1, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %407 = and i32 %15, 248, !dbg !49
  %408 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %407, !dbg !49
  %409 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %408, i32 %361, !dbg !49
  %410 = load <4 x i32>, ptr addrspace(3) %409, align 16, !dbg !49
  %411 = or disjoint i32 %361, 2048, !dbg !49
  %412 = lshr exact i32 %411, 3, !dbg !49
  %413 = and i32 %412, 504, !dbg !49
  %414 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %413, !dbg !49
  %415 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %414, i32 %411, !dbg !49
  %416 = load <4 x i32>, ptr addrspace(3) %415, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %417 = bitcast bfloat %337 to i16, !dbg !49
  %418 = bitcast bfloat %338 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %364, i16 %417, i16 %418, i1 true) #1, !dbg !49
  %419 = bitcast bfloat %339 to i16, !dbg !49
  %420 = bitcast bfloat %340 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %371, i16 %419, i16 %420, i1 true) #1, !dbg !49
  %421 = bitcast bfloat %341 to i16, !dbg !49
  %422 = bitcast bfloat %342 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %375, i16 %421, i16 %422, i1 true) #1, !dbg !49
  %423 = bitcast bfloat %343 to i16, !dbg !49
  %424 = bitcast bfloat %344 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %382, i16 %423, i16 %424, i1 true) #1, !dbg !49
  %425 = bitcast bfloat %345 to i16, !dbg !49
  %426 = bitcast bfloat %346 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %386, i16 %425, i16 %426, i1 true) #1, !dbg !49
  %427 = bitcast bfloat %347 to i16, !dbg !49
  %428 = bitcast bfloat %348 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %393, i16 %427, i16 %428, i1 true) #1, !dbg !49
  %429 = bitcast bfloat %349 to i16, !dbg !49
  %430 = bitcast bfloat %350 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %397, i16 %429, i16 %430, i1 true) #1, !dbg !49
  %431 = bitcast bfloat %351 to i16, !dbg !49
  %432 = bitcast bfloat %352 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %404, i16 %431, i16 %432, i1 true) #1, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %433 = load <4 x i32>, ptr addrspace(3) %409, align 16, !dbg !49
  %434 = load <4 x i32>, ptr addrspace(3) %415, align 16, !dbg !49
  %.extract = extractelement <4 x i32> %410, i64 0, !dbg !49
  %.extract102 = extractelement <4 x i32> %410, i64 1, !dbg !49
  %.extract104 = extractelement <4 x i32> %410, i64 2, !dbg !49
  %.extract106 = extractelement <4 x i32> %410, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract102, i32 %.extract104, i32 %.extract106, ptr addrspace(1) %314, i1 %299) #1, !dbg !49
  %.extract108 = extractelement <4 x i32> %416, i64 0, !dbg !49
  %.extract110 = extractelement <4 x i32> %416, i64 1, !dbg !49
  %.extract112 = extractelement <4 x i32> %416, i64 2, !dbg !49
  %.extract114 = extractelement <4 x i32> %416, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract108, i32 %.extract110, i32 %.extract112, i32 %.extract114, ptr addrspace(1) %316, i1 %300) #1, !dbg !49
  %.extract116 = extractelement <4 x i32> %433, i64 0, !dbg !49
  %.extract118 = extractelement <4 x i32> %433, i64 1, !dbg !49
  %.extract120 = extractelement <4 x i32> %433, i64 2, !dbg !49
  %.extract122 = extractelement <4 x i32> %433, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract116, i32 %.extract118, i32 %.extract120, i32 %.extract122, ptr addrspace(1) %318, i1 %301) #1, !dbg !49
  %.extract124 = extractelement <4 x i32> %434, i64 0, !dbg !49
  %.extract126 = extractelement <4 x i32> %434, i64 1, !dbg !49
  %.extract128 = extractelement <4 x i32> %434, i64 2, !dbg !49
  %.extract130 = extractelement <4 x i32> %434, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract124, i32 %.extract126, i32 %.extract128, i32 %.extract130, ptr addrspace(1) %320, i1 %302) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbuck75cxidu7swrspavrgazgnf2bc47i24xdyndszung5sk36d2.py", directory: "/tmp/torchinductor_root/bu")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 40, scope: !6)
!23 = !DILocation(line: 53, column: 27, scope: !6)
!24 = !DILocation(line: 57, column: 19, scope: !6)
!25 = !DILocation(line: 61, column: 19, scope: !6)
!26 = !DILocation(line: 65, column: 26, scope: !6)
!27 = !DILocation(line: 66, column: 28, scope: !6)
!28 = !DILocation(line: 66, column: 72, scope: !6)
!29 = !DILocation(line: 66, column: 40, scope: !6)
!30 = !DILocation(line: 66, column: 66, scope: !6)
!31 = !DILocation(line: 66, column: 13, scope: !6)
!32 = !DILocation(line: 67, column: 54, scope: !6)
!33 = !DILocation(line: 67, column: 66, scope: !6)
!34 = !DILocation(line: 67, column: 13, scope: !6)
!35 = !DILocation(line: 72, column: 24, scope: !6)
!36 = !DILocation(line: 73, column: 24, scope: !6)
!37 = !DILocation(line: 78, column: 13, scope: !6)
!38 = !DILocation(line: 79, column: 13, scope: !6)
!39 = !DILocation(line: 70, column: 25, scope: !6)
!40 = !DILocation(line: 77, column: 25, scope: !6)
!41 = !DILocation(line: 87, column: 20, scope: !6)
!42 = !DILocation(line: 87, column: 34, scope: !6)
!43 = !DILocation(line: 87, column: 26, scope: !6)
!44 = !DILocation(line: 90, column: 25, scope: !6)
!45 = !DILocation(line: 90, column: 40, scope: !6)
!46 = !DILocation(line: 90, column: 21, scope: !6)
!47 = !DILocation(line: 90, column: 33, scope: !6)
!48 = !DILocation(line: 91, column: 25, scope: !6)
!49 = !DILocation(line: 91, column: 67, scope: !6)
!50 = !DILocation(line: 91, column: 4, scope: !6)
