; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = icmp slt i32 %7, 512, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = shl i32 %9, 2, !dbg !11
  %12 = and i32 %11, 2044, !dbg !11
  %13 = shl i32 %7, 12, !dbg !12
  %14 = or disjoint i32 %12, %13
  %15 = sext i32 %14 to i64, !dbg !13
  %16 = getelementptr bfloat, ptr addrspace(1) %0, i64 %15, !dbg !13
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %16, i1 %8) #5, !dbg !14
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !14
  %19 = bitcast i32 %18 to <2 x bfloat>, !dbg !14
  %20 = extractvalue { i32, i32 } %17, 1, !dbg !14
  %21 = bitcast i32 %20 to <2 x bfloat>, !dbg !14
  %22 = getelementptr bfloat, ptr addrspace(1) %1, i64 %15, !dbg !15
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %22, i1 %8) #5, !dbg !16
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !16
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !16
  %26 = extractvalue { i32, i32 } %23, 1, !dbg !16
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !16
  %28 = or disjoint i32 %14, 2048, !dbg !17
  %29 = sext i32 %28 to i64, !dbg !13
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !13
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %8) #5, !dbg !14
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !14
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !14
  %34 = extractvalue { i32, i32 } %31, 1, !dbg !14
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !14
  %36 = getelementptr bfloat, ptr addrspace(1) %1, i64 %29, !dbg !15
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %36, i1 %8) #5, !dbg !16
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !16
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !16
  %40 = extractvalue { i32, i32 } %37, 1, !dbg !16
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !16
  %42 = fpext <2 x bfloat> %19 to <2 x float>, !dbg !18
  %43 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !19
  %44 = fadd <2 x float> %42, %43, !dbg !20
  %45 = fmul <2 x float> %44, %44, !dbg !21
  %46 = fpext <2 x bfloat> %33 to <2 x float>, !dbg !18
  %47 = fpext <2 x bfloat> %39 to <2 x float>, !dbg !19
  %48 = fadd <2 x float> %46, %47, !dbg !20
  %49 = fmul <2 x float> %48, %48, !dbg !21
  %50 = fadd <2 x float> %45, %49, !dbg !22
  %51 = fpext <2 x bfloat> %21 to <2 x float>, !dbg !18
  %52 = fpext <2 x bfloat> %27 to <2 x float>, !dbg !19
  %53 = fadd <2 x float> %51, %52, !dbg !20
  %54 = fmul <2 x float> %53, %53, !dbg !21
  %55 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !18
  %56 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !19
  %57 = fadd <2 x float> %55, %56, !dbg !20
  %58 = fmul <2 x float> %57, %57, !dbg !21
  %59 = fadd <2 x float> %54, %58, !dbg !22
  %60 = lshr i32 %9, 5, !dbg !11
  %shift = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %61 = fadd <2 x float> %50, %shift, !dbg !23
  %62 = fadd <2 x float> %59, %61, !dbg !23
  %shift14 = shufflevector <2 x float> %59, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %63 = fadd <2 x float> %shift14, %62, !dbg !23
  %64 = extractelement <2 x float> %63, i64 0, !dbg !23
  %65 = select i1 %8, float %64, float 0.000000e+00, !dbg !23
  %66 = bitcast float %65 to i32, !dbg !28
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 16, i32 31), !dbg !28
  %68 = bitcast i32 %67 to float, !dbg !28
  %69 = fadd float %65, %68, !dbg !23
  %70 = bitcast float %69 to i32, !dbg !28
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 8, i32 31), !dbg !28
  %72 = bitcast i32 %71 to float, !dbg !28
  %73 = fadd float %69, %72, !dbg !23
  %74 = bitcast float %73 to i32, !dbg !28
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 4, i32 31), !dbg !28
  %76 = bitcast i32 %75 to float, !dbg !28
  %77 = fadd float %73, %76, !dbg !23
  %78 = bitcast float %77 to i32, !dbg !28
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 2, i32 31), !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = fadd float %77, %80, !dbg !23
  %82 = bitcast float %81 to i32, !dbg !28
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 1, i32 31), !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = fadd float %81, %84, !dbg !23
  %86 = and i32 %60, 15, !dbg !28
  %87 = icmp eq i32 %10, 0, !dbg !28
  %88 = zext nneg i32 %86 to i64, !dbg !28
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i64 %88, !dbg !28
  %90 = bitcast float %85 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 %87) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %91 = icmp slt i32 %9, 16, !dbg !28
  %92 = sext i32 %9 to i64, !dbg !28
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i64 %92, !dbg !28
  %94 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %93, i1 %91) #5, !dbg !28
  %95 = bitcast i32 %94 to float, !dbg !28
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !28
  %97 = bitcast i32 %96 to float, !dbg !28
  %98 = fadd float %95, %97, !dbg !23
  %99 = bitcast float %98 to i32, !dbg !28
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 4, i32 31), !dbg !28
  %101 = bitcast i32 %100 to float, !dbg !28
  %102 = fadd float %98, %101, !dbg !23
  %103 = bitcast float %102 to i32, !dbg !28
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 2, i32 31), !dbg !28
  %105 = bitcast i32 %104 to float, !dbg !28
  %106 = fadd float %102, %105, !dbg !23
  %107 = bitcast float %106 to i32, !dbg !28
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !28
  %109 = bitcast i32 %108 to float, !dbg !28
  %110 = fadd float %106, %109, !dbg !23
  %111 = and i32 %9, 15, !dbg !28
  %112 = icmp eq i32 %111, 0, !dbg !28
  %113 = and i1 %91, %112, !dbg !28
  %114 = bitcast float %110 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %114, i1 %113) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %115 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %116 = tail call float @llvm.nvvm.div.full(float %115, float 4.096000e+03), !dbg !29
  %117 = fadd float %116, 0x3EB0C6F7A0000000, !dbg !30
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i8 = icmp eq i32 %121, 0, !dbg !31
  br i1 %.not.i8, label %124, label %122, !dbg !31

122:                                              ; preds = %__nv_rsqrtf.exit
  %123 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %117), !dbg !31
  br label %__nv_rsqrtf.exit10, !dbg !31

124:                                              ; preds = %__nv_rsqrtf.exit
  %125 = tail call float @llvm.nvvm.rsqrt.approx.f(float %117), !dbg !31
  br label %__nv_rsqrtf.exit10, !dbg !31

__nv_rsqrtf.exit10:                               ; preds = %122, %124
  %.0.i9 = phi float [ %123, %122 ], [ %125, %124 ], !dbg !31
  %126 = zext nneg i32 %12 to i64, !dbg !32
  %127 = getelementptr bfloat, ptr addrspace(1) %2, i64 %126, !dbg !33
  %128 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %127, i1 true) #5, !dbg !34
  %129 = extractvalue { i32, i32 } %128, 0, !dbg !34
  %130 = bitcast i32 %129 to <2 x bfloat>, !dbg !34
  %131 = extractvalue { i32, i32 } %128, 1, !dbg !34
  %132 = bitcast i32 %131 to <2 x bfloat>, !dbg !34
  %133 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %16, i1 %8) #5, !dbg !35
  %134 = extractvalue { i32, i32 } %133, 0, !dbg !35
  %135 = bitcast i32 %134 to <2 x bfloat>, !dbg !35
  %136 = extractvalue { i32, i32 } %133, 1, !dbg !35
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !35
  %138 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %22, i1 %8) #5, !dbg !36
  %139 = extractvalue { i32, i32 } %138, 0, !dbg !36
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !36
  %141 = extractvalue { i32, i32 } %138, 1, !dbg !36
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !36
  %143 = getelementptr bfloat, ptr addrspace(1) %3, i64 %15, !dbg !37
  %144 = fpext <2 x bfloat> %130 to <2 x float>, !dbg !38
  %145 = fpext <2 x bfloat> %135 to <2 x float>, !dbg !39
  %146 = fpext <2 x bfloat> %140 to <2 x float>, !dbg !40
  %147 = fadd <2 x float> %145, %146, !dbg !41
  %148 = insertelement <2 x float> poison, float %.0.i9, i64 0, !dbg !42
  %149 = shufflevector <2 x float> %148, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  %150 = fmul <2 x float> %149, %147, !dbg !42
  %151 = fmul <2 x float> %150, %144, !dbg !43
  %152 = fptrunc <2 x float> %151 to <2 x bfloat>, !dbg !44
  %153 = fpext <2 x bfloat> %132 to <2 x float>, !dbg !38
  %154 = fpext <2 x bfloat> %137 to <2 x float>, !dbg !39
  %155 = fpext <2 x bfloat> %142 to <2 x float>, !dbg !40
  %156 = fadd <2 x float> %154, %155, !dbg !41
  %157 = fmul <2 x float> %149, %156, !dbg !42
  %158 = fmul <2 x float> %157, %153, !dbg !43
  %159 = fptrunc <2 x float> %158 to <2 x bfloat>, !dbg !44
  %160 = bitcast <2 x bfloat> %152 to i32, !dbg !44
  %161 = bitcast <2 x bfloat> %159 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %160, i32 %161, ptr addrspace(1) %143, i1 %8) #5, !dbg !44
  %162 = or disjoint i64 %126, 2048, !dbg !45
  %163 = getelementptr bfloat, ptr addrspace(1) %2, i64 %162, !dbg !33
  %164 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %163, i1 true) #5, !dbg !34
  %165 = extractvalue { i32, i32 } %164, 0, !dbg !34
  %166 = bitcast i32 %165 to <2 x bfloat>, !dbg !34
  %167 = extractvalue { i32, i32 } %164, 1, !dbg !34
  %168 = bitcast i32 %167 to <2 x bfloat>, !dbg !34
  %169 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %8) #5, !dbg !35
  %170 = extractvalue { i32, i32 } %169, 0, !dbg !35
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !35
  %172 = extractvalue { i32, i32 } %169, 1, !dbg !35
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !35
  %174 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %36, i1 %8) #5, !dbg !36
  %175 = extractvalue { i32, i32 } %174, 0, !dbg !36
  %176 = bitcast i32 %175 to <2 x bfloat>, !dbg !36
  %177 = extractvalue { i32, i32 } %174, 1, !dbg !36
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !36
  %179 = getelementptr bfloat, ptr addrspace(1) %3, i64 %29, !dbg !37
  %180 = fpext <2 x bfloat> %166 to <2 x float>, !dbg !38
  %181 = fpext <2 x bfloat> %171 to <2 x float>, !dbg !39
  %182 = fpext <2 x bfloat> %176 to <2 x float>, !dbg !40
  %183 = fadd <2 x float> %181, %182, !dbg !41
  %184 = fmul <2 x float> %149, %183, !dbg !42
  %185 = fmul <2 x float> %184, %180, !dbg !43
  %186 = fptrunc <2 x float> %185 to <2 x bfloat>, !dbg !44
  %187 = fpext <2 x bfloat> %168 to <2 x float>, !dbg !38
  %188 = fpext <2 x bfloat> %173 to <2 x float>, !dbg !39
  %189 = fpext <2 x bfloat> %178 to <2 x float>, !dbg !40
  %190 = fadd <2 x float> %188, %189, !dbg !41
  %191 = fmul <2 x float> %149, %190, !dbg !42
  %192 = fmul <2 x float> %191, %187, !dbg !43
  %193 = fptrunc <2 x float> %192 to <2 x bfloat>, !dbg !44
  %194 = bitcast <2 x bfloat> %186 to i32, !dbg !44
  %195 = bitcast <2 x bfloat> %193 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %194, i32 %195, ptr addrspace(1) %179, i1 %8) #5, !dbg !44
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckgelonpnfjx5qippwn5d37xrianno3p4xpople2ptmvxc6pahje.py", directory: "/tmp/torchinductor_root/kg")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_7, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_7", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 36, column: 46, scope: !6)
!13 = !DILocation(line: 36, column: 34, scope: !6)
!14 = !DILocation(line: 36, column: 51, scope: !6)
!15 = !DILocation(line: 37, column: 34, scope: !6)
!16 = !DILocation(line: 37, column: 51, scope: !6)
!17 = !DILocation(line: 36, column: 41, scope: !6)
!18 = !DILocation(line: 36, column: 112, scope: !6)
!19 = !DILocation(line: 37, column: 112, scope: !6)
!20 = !DILocation(line: 38, column: 22, scope: !6)
!21 = !DILocation(line: 40, column: 22, scope: !6)
!22 = !DILocation(line: 42, column: 23, scope: !6)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!27 = !DILocation(line: 44, column: 25, scope: !6)
!28 = !DILocation(line: 286, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 57, column: 24, scope: !6)
!30 = !DILocation(line: 59, column: 24, scope: !6)
!31 = !DILocation(line: 60, column: 32, scope: !6)
!32 = !DILocation(line: 45, column: 40, scope: !6)
!33 = !DILocation(line: 51, column: 34, scope: !6)
!34 = !DILocation(line: 51, column: 41, scope: !6)
!35 = !DILocation(line: 52, column: 51, scope: !6)
!36 = !DILocation(line: 53, column: 52, scope: !6)
!37 = !DILocation(line: 64, column: 29, scope: !6)
!38 = !DILocation(line: 51, column: 94, scope: !6)
!39 = !DILocation(line: 52, column: 113, scope: !6)
!40 = !DILocation(line: 53, column: 114, scope: !6)
!41 = !DILocation(line: 54, column: 23, scope: !6)
!42 = !DILocation(line: 61, column: 24, scope: !6)
!43 = !DILocation(line: 63, column: 23, scope: !6)
!44 = !DILocation(line: 64, column: 53, scope: !6)
!45 = !DILocation(line: 46, column: 31, scope: !6)
!46 = !DILocation(line: 45, column: 4, scope: !6)
