; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = icmp slt i32 %10, 512, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = shl i32 %12, 2, !dbg !11
  %15 = and i32 %14, 2044, !dbg !11
  %16 = shl i32 %10, 12, !dbg !12
  %17 = or disjoint i32 %15, %16
  %18 = sext i32 %17 to i64, !dbg !13
  %19 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !13
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %19, i1 %11) #5, !dbg !14
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !14
  %22 = bitcast i32 %21 to <2 x bfloat>, !dbg !14
  %23 = extractvalue { i32, i32 } %20, 1, !dbg !14
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !14
  %25 = getelementptr bfloat, ptr addrspace(1) %1, i64 %18, !dbg !15
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %25, i1 %11) #5, !dbg !16
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !16
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !16
  %29 = extractvalue { i32, i32 } %26, 1, !dbg !16
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !16
  %31 = getelementptr bfloat, ptr addrspace(1) %2, i64 %18, !dbg !17
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %31, i1 %11) #5, !dbg !18
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !18
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !18
  %35 = extractvalue { i32, i32 } %32, 1, !dbg !18
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !18
  %37 = getelementptr bfloat, ptr addrspace(1) %3, i64 %18, !dbg !19
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %37, i1 %11) #5, !dbg !20
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !20
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !20
  %41 = extractvalue { i32, i32 } %38, 1, !dbg !20
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !20
  %43 = getelementptr bfloat, ptr addrspace(1) %4, i64 %18, !dbg !21
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %43, i1 %11) #5, !dbg !22
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !22
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !22
  %47 = extractvalue { i32, i32 } %44, 1, !dbg !22
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !22
  %49 = fpext <2 x bfloat> %22 to <2 x float>, !dbg !23
  %50 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !24
  %51 = fpext <2 x bfloat> %34 to <2 x float>, !dbg !25
  %52 = fpext <2 x bfloat> %40 to <2 x float>, !dbg !26
  %53 = fpext <2 x bfloat> %46 to <2 x float>, !dbg !27
  %54 = fadd <2 x float> %49, %50, !dbg !28
  %55 = fadd <2 x float> %54, %51, !dbg !29
  %56 = fadd <2 x float> %55, %52, !dbg !30
  %57 = fadd <2 x float> %56, %53, !dbg !31
  %58 = fptrunc <2 x float> %57 to <2 x bfloat>, !dbg !32
  %59 = fpext <2 x bfloat> %24 to <2 x float>, !dbg !23
  %60 = fpext <2 x bfloat> %30 to <2 x float>, !dbg !24
  %61 = fpext <2 x bfloat> %36 to <2 x float>, !dbg !25
  %62 = fpext <2 x bfloat> %42 to <2 x float>, !dbg !26
  %63 = fpext <2 x bfloat> %48 to <2 x float>, !dbg !27
  %64 = fadd <2 x float> %59, %60, !dbg !28
  %65 = fadd <2 x float> %64, %61, !dbg !29
  %66 = fadd <2 x float> %65, %62, !dbg !30
  %67 = fadd <2 x float> %66, %63, !dbg !31
  %68 = fptrunc <2 x float> %67 to <2 x bfloat>, !dbg !32
  %69 = bitcast <2 x bfloat> %58 to i32, !dbg !32
  %70 = bitcast <2 x bfloat> %68 to i32, !dbg !32
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %69, i32 %70, ptr addrspace(1) %19, i1 %11) #5, !dbg !32
  %71 = or disjoint i32 %17, 2048, !dbg !33
  %72 = sext i32 %71 to i64, !dbg !13
  %73 = getelementptr bfloat, ptr addrspace(1) %0, i64 %72, !dbg !13
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %73, i1 %11) #5, !dbg !14
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !14
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !14
  %77 = extractvalue { i32, i32 } %74, 1, !dbg !14
  %78 = bitcast i32 %77 to <2 x bfloat>, !dbg !14
  %79 = getelementptr bfloat, ptr addrspace(1) %1, i64 %72, !dbg !15
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %79, i1 %11) #5, !dbg !16
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !16
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !16
  %83 = extractvalue { i32, i32 } %80, 1, !dbg !16
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !16
  %85 = getelementptr bfloat, ptr addrspace(1) %2, i64 %72, !dbg !17
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %85, i1 %11) #5, !dbg !18
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !18
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !18
  %89 = extractvalue { i32, i32 } %86, 1, !dbg !18
  %90 = bitcast i32 %89 to <2 x bfloat>, !dbg !18
  %91 = getelementptr bfloat, ptr addrspace(1) %3, i64 %72, !dbg !19
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %91, i1 %11) #5, !dbg !20
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !20
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !20
  %95 = extractvalue { i32, i32 } %92, 1, !dbg !20
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !20
  %97 = getelementptr bfloat, ptr addrspace(1) %4, i64 %72, !dbg !21
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %97, i1 %11) #5, !dbg !22
  %99 = extractvalue { i32, i32 } %98, 0, !dbg !22
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !22
  %101 = extractvalue { i32, i32 } %98, 1, !dbg !22
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !22
  %103 = fpext <2 x bfloat> %76 to <2 x float>, !dbg !23
  %104 = fpext <2 x bfloat> %82 to <2 x float>, !dbg !24
  %105 = fpext <2 x bfloat> %88 to <2 x float>, !dbg !25
  %106 = fpext <2 x bfloat> %94 to <2 x float>, !dbg !26
  %107 = fpext <2 x bfloat> %100 to <2 x float>, !dbg !27
  %108 = fadd <2 x float> %103, %104, !dbg !28
  %109 = fadd <2 x float> %108, %105, !dbg !29
  %110 = fadd <2 x float> %109, %106, !dbg !30
  %111 = fadd <2 x float> %110, %107, !dbg !31
  %112 = fmul <2 x float> %57, %57, !dbg !34
  %113 = fmul <2 x float> %111, %111, !dbg !34
  %114 = fadd <2 x float> %112, %113, !dbg !35
  %115 = fptrunc <2 x float> %111 to <2 x bfloat>, !dbg !32
  %116 = fpext <2 x bfloat> %78 to <2 x float>, !dbg !23
  %117 = fpext <2 x bfloat> %84 to <2 x float>, !dbg !24
  %118 = fpext <2 x bfloat> %90 to <2 x float>, !dbg !25
  %119 = fpext <2 x bfloat> %96 to <2 x float>, !dbg !26
  %120 = fpext <2 x bfloat> %102 to <2 x float>, !dbg !27
  %121 = fadd <2 x float> %116, %117, !dbg !28
  %122 = fadd <2 x float> %121, %118, !dbg !29
  %123 = fadd <2 x float> %122, %119, !dbg !30
  %124 = fadd <2 x float> %123, %120, !dbg !31
  %125 = fmul <2 x float> %67, %67, !dbg !34
  %126 = fmul <2 x float> %124, %124, !dbg !34
  %127 = fadd <2 x float> %125, %126, !dbg !35
  %128 = fptrunc <2 x float> %124 to <2 x bfloat>, !dbg !32
  %129 = bitcast <2 x bfloat> %115 to i32, !dbg !32
  %130 = bitcast <2 x bfloat> %128 to i32, !dbg !32
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %129, i32 %130, ptr addrspace(1) %73, i1 %11) #5, !dbg !32
  %131 = lshr i32 %12, 5, !dbg !11
  %shift = shufflevector <2 x float> %114, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %132 = fadd <2 x float> %114, %shift, !dbg !36
  %133 = fadd <2 x float> %127, %132, !dbg !36
  %shift14 = shufflevector <2 x float> %127, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %134 = fadd <2 x float> %shift14, %133, !dbg !36
  %135 = extractelement <2 x float> %134, i64 0, !dbg !36
  %136 = select i1 %11, float %135, float 0.000000e+00, !dbg !36
  %137 = bitcast float %136 to i32, !dbg !41
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 16, i32 31), !dbg !41
  %139 = bitcast i32 %138 to float, !dbg !41
  %140 = fadd float %136, %139, !dbg !36
  %141 = bitcast float %140 to i32, !dbg !41
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 8, i32 31), !dbg !41
  %143 = bitcast i32 %142 to float, !dbg !41
  %144 = fadd float %140, %143, !dbg !36
  %145 = bitcast float %144 to i32, !dbg !41
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 4, i32 31), !dbg !41
  %147 = bitcast i32 %146 to float, !dbg !41
  %148 = fadd float %144, %147, !dbg !36
  %149 = bitcast float %148 to i32, !dbg !41
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 2, i32 31), !dbg !41
  %151 = bitcast i32 %150 to float, !dbg !41
  %152 = fadd float %148, %151, !dbg !36
  %153 = bitcast float %152 to i32, !dbg !41
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 1, i32 31), !dbg !41
  %155 = bitcast i32 %154 to float, !dbg !41
  %156 = fadd float %152, %155, !dbg !36
  %157 = and i32 %131, 15, !dbg !41
  %158 = icmp eq i32 %13, 0, !dbg !41
  %159 = zext nneg i32 %157 to i64, !dbg !41
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i64 %159, !dbg !41
  %161 = bitcast float %156 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 %158) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %162 = icmp slt i32 %12, 16, !dbg !41
  %163 = sext i32 %12 to i64, !dbg !41
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i64 %163, !dbg !41
  %165 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %164, i1 %162) #5, !dbg !41
  %166 = bitcast i32 %165 to float, !dbg !41
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 8, i32 31), !dbg !41
  %168 = bitcast i32 %167 to float, !dbg !41
  %169 = fadd float %166, %168, !dbg !36
  %170 = bitcast float %169 to i32, !dbg !41
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 4, i32 31), !dbg !41
  %172 = bitcast i32 %171 to float, !dbg !41
  %173 = fadd float %169, %172, !dbg !36
  %174 = bitcast float %173 to i32, !dbg !41
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 2, i32 31), !dbg !41
  %176 = bitcast i32 %175 to float, !dbg !41
  %177 = fadd float %173, %176, !dbg !36
  %178 = bitcast float %177 to i32, !dbg !41
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 1, i32 31), !dbg !41
  %180 = bitcast i32 %179 to float, !dbg !41
  %181 = fadd float %177, %180, !dbg !36
  %182 = and i32 %12, 15, !dbg !41
  %183 = icmp eq i32 %182, 0, !dbg !41
  %184 = and i1 %162, %183, !dbg !41
  %185 = bitcast float %181 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %185, i1 %184) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %186 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %187 = tail call float @llvm.nvvm.div.full(float %186, float 4.096000e+03), !dbg !42
  %188 = fadd float %187, 0x3EB0C6F7A0000000, !dbg !43
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i8 = icmp eq i32 %192, 0, !dbg !44
  br i1 %.not.i8, label %195, label %193, !dbg !44

193:                                              ; preds = %__nv_rsqrtf.exit
  %194 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %188), !dbg !44
  br label %__nv_rsqrtf.exit10, !dbg !44

195:                                              ; preds = %__nv_rsqrtf.exit
  %196 = tail call float @llvm.nvvm.rsqrt.approx.f(float %188), !dbg !44
  br label %__nv_rsqrtf.exit10, !dbg !44

__nv_rsqrtf.exit10:                               ; preds = %193, %195
  %.0.i9 = phi float [ %194, %193 ], [ %196, %195 ], !dbg !44
  %197 = zext nneg i32 %15 to i64, !dbg !45
  %198 = getelementptr bfloat, ptr addrspace(1) %5, i64 %197, !dbg !46
  %199 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %198, i1 true) #5, !dbg !47
  %200 = extractvalue { i32, i32 } %199, 0, !dbg !47
  %201 = bitcast i32 %200 to <2 x bfloat>, !dbg !47
  %202 = extractvalue { i32, i32 } %199, 1, !dbg !47
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !47
  %204 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %19, i1 %11) #5, !dbg !48
  %205 = extractvalue { i32, i32 } %204, 0, !dbg !48
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !48
  %207 = extractvalue { i32, i32 } %204, 1, !dbg !48
  %208 = bitcast i32 %207 to <2 x bfloat>, !dbg !48
  %209 = getelementptr bfloat, ptr addrspace(1) %6, i64 %18, !dbg !49
  %210 = fpext <2 x bfloat> %201 to <2 x float>, !dbg !50
  %211 = fpext <2 x bfloat> %206 to <2 x float>, !dbg !51
  %212 = insertelement <2 x float> poison, float %.0.i9, i64 0, !dbg !52
  %213 = shufflevector <2 x float> %212, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %214 = fmul <2 x float> %213, %211, !dbg !52
  %215 = fmul <2 x float> %214, %210, !dbg !53
  %216 = fptrunc <2 x float> %215 to <2 x bfloat>, !dbg !54
  %217 = fpext <2 x bfloat> %203 to <2 x float>, !dbg !50
  %218 = fpext <2 x bfloat> %208 to <2 x float>, !dbg !51
  %219 = fmul <2 x float> %213, %218, !dbg !52
  %220 = fmul <2 x float> %219, %217, !dbg !53
  %221 = fptrunc <2 x float> %220 to <2 x bfloat>, !dbg !54
  %222 = bitcast <2 x bfloat> %216 to i32, !dbg !54
  %223 = bitcast <2 x bfloat> %221 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %222, i32 %223, ptr addrspace(1) %209, i1 %11) #5, !dbg !54
  %224 = or disjoint i64 %197, 2048, !dbg !55
  %225 = getelementptr bfloat, ptr addrspace(1) %5, i64 %224, !dbg !46
  %226 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %225, i1 true) #5, !dbg !47
  %227 = extractvalue { i32, i32 } %226, 0, !dbg !47
  %228 = bitcast i32 %227 to <2 x bfloat>, !dbg !47
  %229 = extractvalue { i32, i32 } %226, 1, !dbg !47
  %230 = bitcast i32 %229 to <2 x bfloat>, !dbg !47
  %231 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %73, i1 %11) #5, !dbg !48
  %232 = extractvalue { i32, i32 } %231, 0, !dbg !48
  %233 = bitcast i32 %232 to <2 x bfloat>, !dbg !48
  %234 = extractvalue { i32, i32 } %231, 1, !dbg !48
  %235 = bitcast i32 %234 to <2 x bfloat>, !dbg !48
  %236 = getelementptr bfloat, ptr addrspace(1) %6, i64 %72, !dbg !49
  %237 = fpext <2 x bfloat> %228 to <2 x float>, !dbg !50
  %238 = fpext <2 x bfloat> %233 to <2 x float>, !dbg !51
  %239 = fmul <2 x float> %213, %238, !dbg !52
  %240 = fmul <2 x float> %239, %237, !dbg !53
  %241 = fptrunc <2 x float> %240 to <2 x bfloat>, !dbg !54
  %242 = fpext <2 x bfloat> %230 to <2 x float>, !dbg !50
  %243 = fpext <2 x bfloat> %235 to <2 x float>, !dbg !51
  %244 = fmul <2 x float> %213, %243, !dbg !52
  %245 = fmul <2 x float> %244, %242, !dbg !53
  %246 = fptrunc <2 x float> %245 to <2 x bfloat>, !dbg !54
  %247 = bitcast <2 x bfloat> %241 to i32, !dbg !54
  %248 = bitcast <2 x bfloat> %246 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %247, i32 %248, ptr addrspace(1) %236, i1 %11) #5, !dbg !54
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cykz3fxksokmcj4ur5jq2wtkuo3ew2hepqsaplattmgptizvqqtl.py", directory: "/tmp/torchinductor_root/yk")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 36, column: 50, scope: !6)
!13 = !DILocation(line: 36, column: 38, scope: !6)
!14 = !DILocation(line: 36, column: 55, scope: !6)
!15 = !DILocation(line: 37, column: 34, scope: !6)
!16 = !DILocation(line: 37, column: 51, scope: !6)
!17 = !DILocation(line: 38, column: 34, scope: !6)
!18 = !DILocation(line: 38, column: 51, scope: !6)
!19 = !DILocation(line: 39, column: 34, scope: !6)
!20 = !DILocation(line: 39, column: 51, scope: !6)
!21 = !DILocation(line: 40, column: 34, scope: !6)
!22 = !DILocation(line: 40, column: 51, scope: !6)
!23 = !DILocation(line: 36, column: 117, scope: !6)
!24 = !DILocation(line: 37, column: 113, scope: !6)
!25 = !DILocation(line: 38, column: 113, scope: !6)
!26 = !DILocation(line: 39, column: 113, scope: !6)
!27 = !DILocation(line: 40, column: 113, scope: !6)
!28 = !DILocation(line: 41, column: 22, scope: !6)
!29 = !DILocation(line: 42, column: 22, scope: !6)
!30 = !DILocation(line: 43, column: 22, scope: !6)
!31 = !DILocation(line: 44, column: 22, scope: !6)
!32 = !DILocation(line: 50, column: 55, scope: !6)
!33 = !DILocation(line: 36, column: 45, scope: !6)
!34 = !DILocation(line: 46, column: 23, scope: !6)
!35 = !DILocation(line: 48, column: 25, scope: !6)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !6, file: !38, discriminator: 0)
!40 = !DILocation(line: 51, column: 27, scope: !6)
!41 = !DILocation(line: 286, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 62, column: 25, scope: !6)
!43 = !DILocation(line: 64, column: 24, scope: !6)
!44 = !DILocation(line: 65, column: 32, scope: !6)
!45 = !DILocation(line: 52, column: 40, scope: !6)
!46 = !DILocation(line: 58, column: 35, scope: !6)
!47 = !DILocation(line: 58, column: 42, scope: !6)
!48 = !DILocation(line: 59, column: 56, scope: !6)
!49 = !DILocation(line: 69, column: 29, scope: !6)
!50 = !DILocation(line: 58, column: 95, scope: !6)
!51 = !DILocation(line: 59, column: 118, scope: !6)
!52 = !DILocation(line: 66, column: 24, scope: !6)
!53 = !DILocation(line: 68, column: 24, scope: !6)
!54 = !DILocation(line: 69, column: 53, scope: !6)
!55 = !DILocation(line: 53, column: 31, scope: !6)
!56 = !DILocation(line: 52, column: 4, scope: !6)
