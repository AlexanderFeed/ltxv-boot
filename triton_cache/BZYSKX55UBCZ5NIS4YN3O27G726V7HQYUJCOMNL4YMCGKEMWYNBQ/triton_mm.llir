; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 768, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 57, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 768, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = lshr i32 %15, 2, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr exact i32 %18, 2, !dbg !19
  %20 = and i32 %17, 16, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 2, !dbg !19
  %23 = and i32 %17, 23, !dbg !19
  %24 = or disjoint i32 %23, %22, !dbg !19
  %25 = or disjoint i32 %24, %19, !dbg !19
  %26 = lshr i32 %15, 3, !dbg !19
  %27 = and i32 %26, 31, !dbg !19
  %28 = or disjoint i32 %14, %25, !dbg !20
  %29 = shl nsw i32 %13, 5, !dbg !21
  %30 = shl i32 %15, 2, !dbg !22
  %31 = and i32 %30, 28, !dbg !22
  %32 = or disjoint i32 %29, %27, !dbg !23
  %33 = srem i32 %28, 3600, !dbg !24
  %34 = srem i32 %32, 3072, !dbg !25
  %35 = shl i32 %15, 3, !dbg !26
  %36 = and i32 %35, 24, !dbg !26
  %37 = mul nsw i32 %33, 3072, !dbg !27
  %38 = mul nsw i32 %34, 3072, !dbg !28
  %39 = or disjoint i32 %37, %36, !dbg !29
  %40 = sext i32 %39 to i64, !dbg !30
  %41 = getelementptr i8, ptr addrspace(1) %0, i64 %40, !dbg !30
  %42 = xor i32 %36, %16, !dbg !31
  %43 = shl nuw nsw i32 %25, 5, !dbg !31
  %44 = or disjoint i32 %43, %42, !dbg !31
  %45 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %44, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %45, ptr addrspace(1) %41, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %46 = or disjoint i32 %38, %31, !dbg !32
  %47 = sext i32 %46 to i64, !dbg !33
  %48 = getelementptr i8, ptr addrspace(1) %1, i64 %47, !dbg !33
  %49 = lshr exact i32 %18, 1, !dbg !34
  %50 = xor i32 %31, %49, !dbg !34
  %51 = shl nuw nsw i32 %27, 5, !dbg !34
  %52 = or disjoint i32 %50, %51, !dbg !34
  %53 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %52, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %53, ptr addrspace(1) %48, i32 4) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %54 = or disjoint i32 %39, 32, !dbg !29
  %55 = sext i32 %54 to i64, !dbg !30
  %56 = getelementptr i8, ptr addrspace(1) %0, i64 %55, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %57 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %44, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %57, ptr addrspace(1) %56, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %58 = or disjoint i32 %46, 32, !dbg !32
  %59 = sext i32 %58 to i64, !dbg !33
  %60 = getelementptr i8, ptr addrspace(1) %1, i64 %59, !dbg !33
  %61 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 9216), i32 %52, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %61, ptr addrspace(1) %60, i32 4) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %62 = or disjoint i32 %39, 64, !dbg !29
  %63 = sext i32 %62 to i64, !dbg !30
  %64 = getelementptr i8, ptr addrspace(1) %0, i64 %63, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %65 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %44, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %65, ptr addrspace(1) %64, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %66 = or disjoint i32 %46, 64, !dbg !32
  %67 = sext i32 %66 to i64, !dbg !33
  %68 = getelementptr i8, ptr addrspace(1) %1, i64 %67, !dbg !33
  %69 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10240), i32 %52, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %69, ptr addrspace(1) %68, i32 4) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %70 = or disjoint i32 %39, 96, !dbg !29
  %71 = sext i32 %70 to i64, !dbg !30
  %72 = getelementptr i8, ptr addrspace(1) %0, i64 %71, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %73 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 6144), i32 %44, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %73, ptr addrspace(1) %72, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %74 = or disjoint i32 %46, 96, !dbg !32
  %75 = sext i32 %74 to i64, !dbg !33
  %76 = getelementptr i8, ptr addrspace(1) %1, i64 %75, !dbg !33
  %77 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 11264), i32 %52, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %77, ptr addrspace(1) %76, i32 4) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %78 = and i32 %15, 7
  %79 = and i32 %15, 15
  %80 = xor i32 %30, %15
  %81 = and i32 %80, 16
  %82 = or disjoint i32 %79, %20
  %83 = or disjoint i32 %82, %22
  %84 = shl nuw nsw i32 %83, 5
  %85 = or disjoint i32 %84, %81
  %invariant.gep13 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %85, !dbg !35
  %86 = shl i32 %15, 1
  %87 = xor i32 %30, %86
  %88 = and i32 %87, 16
  %89 = or disjoint i32 %19, %78
  %90 = shl nuw nsw i32 %89, 5
  %91 = or disjoint i32 %90, %88
  %92 = or disjoint i32 %91, 512
  %invariant.op = or disjoint i32 %39, 128, !dbg !35
  %invariant.op15 = or disjoint i32 %46, 128, !dbg !35
  %93 = sext i32 %invariant.op to i64, !dbg !35
  %94 = sext i32 %invariant.op15 to i64, !dbg !35
  %invariant.gep = getelementptr i8, ptr addrspace(1) %0, i64 %93, !dbg !35
  %invariant.gep34 = getelementptr i8, ptr addrspace(1) %1, i64 %94, !dbg !35
  br label %95, !dbg !35

95:                                               ; preds = %4, %95
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %95 ]
  %96 = phi i32 [ -1, %4 ], [ %109, %95 ]
  %97 = phi i32 [ 3, %4 ], [ %141, %95 ]
  %98 = phi i32 [ 0, %4 ], [ %130, %95 ]
  %99 = phi i32 [ 0, %4 ], [ %131, %95 ]
  %100 = phi i32 [ 0, %4 ], [ %132, %95 ]
  %101 = phi i32 [ 0, %4 ], [ %133, %95 ]
  %102 = phi i32 [ 0, %4 ], [ %135, %95 ]
  %103 = phi i32 [ 0, %4 ], [ %136, %95 ]
  %104 = phi i32 [ 0, %4 ], [ %137, %95 ]
  %105 = phi i32 [ 0, %4 ], [ %138, %95 ]
  %106 = icmp samesign ult i64 %indvars.iv, 92, !dbg !35
  %107 = add i32 %96, 1, !dbg !35
  %108 = icmp slt i32 %107, 4, !dbg !35
  %109 = select i1 %108, i32 %107, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %110 = shl i32 %109, 11, !dbg !31
  %gep14 = getelementptr i8, ptr addrspace(3) %invariant.gep13, i32 %110, !dbg !31
  %111 = ptrtoint ptr addrspace(3) %gep14 to i32, !dbg !31
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %111) #1, !dbg !31
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !31
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !31
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !31
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !31
  %117 = shl i32 %109, 10, !dbg !34
  %118 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %117, !dbg !34
  %119 = getelementptr inbounds nuw i8, ptr addrspace(3) %118, i32 %91, !dbg !34
  %120 = ptrtoint ptr addrspace(3) %119 to i32, !dbg !34
  %121 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %120) #1, !dbg !34
  %122 = extractvalue { i32, i32 } %121, 0, !dbg !34
  %123 = extractvalue { i32, i32 } %121, 1, !dbg !34
  %124 = getelementptr inbounds nuw i8, ptr addrspace(3) %118, i32 %92, !dbg !34
  %125 = ptrtoint ptr addrspace(3) %124 to i32, !dbg !34
  %126 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %125) #1, !dbg !34
  %127 = extractvalue { i32, i32 } %126, 0, !dbg !34
  %128 = extractvalue { i32, i32 } %126, 1, !dbg !34
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %98, i32 %99, i32 %100, i32 %101, i32 %113, i32 %114, i32 %115, i32 %116, i32 %122, i32 %123) #1, !dbg !36
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !36
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !36
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !36
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !36
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %102, i32 %103, i32 %104, i32 %105, i32 %113, i32 %114, i32 %115, i32 %116, i32 %127, i32 %128) #1, !dbg !36
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !36
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !36
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !36
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !36
  %139 = add i32 %97, 1, !dbg !35
  %140 = icmp slt i32 %139, 4, !dbg !35
  %141 = select i1 %140, i32 %139, i32 0, !dbg !35
  %142 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %gep33 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %142, !dbg !30
  %143 = shl i32 %141, 11, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %gep = getelementptr i8, ptr addrspace(3) %45, i32 %143, !dbg !31
  %144 = select i1 %106, i32 8, i32 0, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep33, i32 %144) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %gep35 = getelementptr i8, ptr addrspace(1) %invariant.gep34, i64 %142, !dbg !33
  %145 = shl i32 %141, 10, !dbg !34
  %gep12 = getelementptr i8, ptr addrspace(3) %53, i32 %145, !dbg !34
  %146 = select i1 %106, i32 4, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %gep12, ptr addrspace(1) %gep35, i32 %146) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 96, !dbg !35
  br i1 %exitcond.not, label %147, label %95, !dbg !35

147:                                              ; preds = %95
  %148 = or disjoint i32 %29, %31, !dbg !23
  %149 = or disjoint i32 %14, %27, !dbg !19
  %150 = or disjoint i32 %149, 32, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %151 = icmp slt i32 %149, 3600, !dbg !38
  %152 = icmp slt i32 %150, 3600, !dbg !38
  %153 = icmp slt i32 %148, 3072, !dbg !39
  %154 = and i1 %151, %153, !dbg !40
  %155 = and i1 %152, %153, !dbg !40
  %156 = mul i32 %149, 3072, !dbg !41
  %157 = mul i32 %150, 3072, !dbg !41
  %158 = add i32 %156, %148, !dbg !42
  %159 = add i32 %148, %157, !dbg !42
  %160 = sext i32 %158 to i64, !dbg !43
  %161 = getelementptr i32, ptr addrspace(1) %2, i64 %160, !dbg !43
  %162 = sext i32 %159 to i64, !dbg !43
  %163 = getelementptr i32, ptr addrspace(1) %2, i64 %162, !dbg !43
  %164 = and i32 %86, 6, !dbg !44
  %165 = and i32 %35, 736, !dbg !44
  %166 = or disjoint i32 %165, %164, !dbg !44
  %167 = shl nuw nsw i32 %21, 3, !dbg !44
  %168 = or disjoint i32 %166, %167, !dbg !44
  %169 = or disjoint i32 %168, %19, !dbg !44
  %170 = and i32 %30, 1020, !dbg !44
  %171 = lshr i32 %168, 3, !dbg !44
  %172 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %171, !dbg !44
  %173 = getelementptr inbounds nuw i32, ptr addrspace(3) %172, i32 %169, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %173, i32 %130, i32 %131, i1 true) #1, !dbg !44
  %174 = or disjoint i32 %169, 256, !dbg !44
  %175 = lshr i32 %174, 3, !dbg !44
  %176 = and i32 %175, 536870908, !dbg !44
  %177 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %176, !dbg !44
  %178 = getelementptr inbounds nuw i32, ptr addrspace(3) %177, i32 %174, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %178, i32 %132, i32 %133, i1 true) #1, !dbg !44
  %179 = or disjoint i32 %169, 16, !dbg !44
  %180 = getelementptr inbounds nuw i32, ptr addrspace(3) %172, i32 %179, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %180, i32 %135, i32 %136, i1 true) #1, !dbg !44
  %181 = or disjoint i32 %169, 272, !dbg !44
  %182 = lshr i32 %181, 3, !dbg !44
  %183 = and i32 %182, 536870908, !dbg !44
  %184 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %183, !dbg !44
  %185 = getelementptr inbounds nuw i32, ptr addrspace(3) %184, i32 %181, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %185, i32 %137, i32 %138, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %186 = lshr exact i32 %30, 1, !dbg !44
  %187 = and i32 %186, 496, !dbg !44
  %188 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %187, !dbg !44
  %189 = getelementptr inbounds nuw i32, ptr addrspace(3) %188, i32 %170, !dbg !44
  %190 = or disjoint i32 %170, 1024, !dbg !44
  %191 = lshr i32 %190, 3, !dbg !44
  %192 = and i32 %191, 252, !dbg !44
  %193 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %192, !dbg !44
  %194 = getelementptr inbounds nuw i32, ptr addrspace(3) %193, i32 %190, !dbg !44
  %195 = load <4 x i32>, ptr addrspace(3) %194, align 16, !dbg !44
  %.extract = load i32, ptr addrspace(3) %189, align 16, !dbg !44
  %196 = getelementptr inbounds nuw i8, ptr addrspace(3) %189, i32 4, !dbg !44
  %.extract4 = load i32, ptr addrspace(3) %196, align 4, !dbg !44
  %197 = getelementptr inbounds nuw i8, ptr addrspace(3) %189, i32 8, !dbg !44
  %.extract5 = load i32, ptr addrspace(3) %197, align 8, !dbg !44
  %198 = getelementptr inbounds nuw i8, ptr addrspace(3) %189, i32 12, !dbg !44
  %.extract6 = load i32, ptr addrspace(3) %198, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %161, i1 %154) #1, !dbg !44
  %.extract7 = extractelement <4 x i32> %195, i64 0, !dbg !44
  %.extract8 = extractelement <4 x i32> %195, i64 1, !dbg !44
  %.extract9 = extractelement <4 x i32> %195, i64 2, !dbg !44
  %.extract10 = extractelement <4 x i32> %195, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract7, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %163, i1 %155) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbhvlebirrjehm4k3tkkcdsb56rs2ozsqhan3aq4o6vxjm3d5xbl.py", directory: "/tmp/torchinductor_root/bh")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 66, column: 30, scope: !6)
!27 = !DILocation(line: 71, column: 30, scope: !6)
!28 = !DILocation(line: 77, column: 55, scope: !6)
!29 = !DILocation(line: 71, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 25, scope: !6)
!31 = !DILocation(line: 72, column: 20, scope: !6)
!32 = !DILocation(line: 77, column: 50, scope: !6)
!33 = !DILocation(line: 77, column: 25, scope: !6)
!34 = !DILocation(line: 77, column: 20, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
