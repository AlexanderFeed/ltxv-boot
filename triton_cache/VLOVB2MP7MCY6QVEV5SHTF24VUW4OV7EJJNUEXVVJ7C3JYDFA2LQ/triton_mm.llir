; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 640, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 640, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = lshr i32 %15, 2, !dbg !19
  %19 = and i32 %15, 128, !dbg !19
  %20 = lshr exact i32 %19, 2, !dbg !19
  %21 = and i32 %18, 31, !dbg !19
  %22 = or disjoint i32 %21, %20, !dbg !19
  %23 = or disjoint i32 %14, %22, !dbg !20
  %24 = shl nsw i32 %13, 7, !dbg !21
  %25 = shl i32 %15, 3, !dbg !22
  %26 = and i32 %25, 24, !dbg !22
  %27 = or disjoint i32 %24, %22, !dbg !23
  %28 = or disjoint i32 %27, 64, !dbg !23
  %29 = srem i32 %23, 512, !dbg !24
  %30 = srem i32 %27, 10240, !dbg !25
  %31 = srem i32 %28, 10240, !dbg !25
  %32 = shl nsw i32 %29, 12, !dbg !26
  %33 = shl nsw i32 %30, 12, !dbg !27
  %34 = shl nsw i32 %31, 12, !dbg !27
  %35 = or disjoint i32 %32, %26, !dbg !28
  %36 = sext i32 %35 to i64, !dbg !29
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !29
  %38 = xor i32 %25, %15, !dbg !30
  %39 = and i32 %38, 24, !dbg !30
  %40 = shl nuw nsw i32 %22, 5, !dbg !30
  %41 = or disjoint i32 %40, %39, !dbg !30
  %42 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %41, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %42, ptr addrspace(1) %37, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %43 = or disjoint i32 %33, %26, !dbg !31
  %44 = or disjoint i32 %34, %26, !dbg !31
  %45 = sext i32 %43 to i64, !dbg !32
  %46 = getelementptr bfloat, ptr addrspace(1) %1, i64 %45, !dbg !32
  %47 = sext i32 %44 to i64, !dbg !32
  %48 = getelementptr bfloat, ptr addrspace(1) %1, i64 %47, !dbg !32
  %49 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %41, !dbg !33
  %50 = and i32 %18, 31, !dbg !33
  %51 = or disjoint i32 %50, %20, !dbg !33
  %52 = shl nuw nsw i32 %51, 5, !dbg !33
  %53 = or disjoint i32 %52, %39, !dbg !33
  %54 = or disjoint i32 %53, 2048, !dbg !33
  %55 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %54, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %49, ptr addrspace(1) %46, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %55, ptr addrspace(1) %48, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %56 = or disjoint i32 %26, 32, !dbg !34
  %57 = or disjoint i32 %32, %56, !dbg !28
  %58 = sext i32 %57 to i64, !dbg !29
  %59 = getelementptr bfloat, ptr addrspace(1) %0, i64 %58, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %60 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 28672), i32 %41, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %60, ptr addrspace(1) %59, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %61 = or disjoint i32 %33, %56, !dbg !31
  %62 = or disjoint i32 %34, %56, !dbg !31
  %63 = sext i32 %61 to i64, !dbg !32
  %64 = getelementptr bfloat, ptr addrspace(1) %1, i64 %63, !dbg !32
  %65 = sext i32 %62 to i64, !dbg !32
  %66 = getelementptr bfloat, ptr addrspace(1) %1, i64 %65, !dbg !32
  %67 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %41, !dbg !33
  %68 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %54, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %67, ptr addrspace(1) %64, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %68, ptr addrspace(1) %66, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %69 = or disjoint i32 %26, 64, !dbg !34
  %70 = or disjoint i32 %32, %69, !dbg !28
  %71 = sext i32 %70 to i64, !dbg !29
  %72 = getelementptr bfloat, ptr addrspace(1) %0, i64 %71, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %73 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %41, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %73, ptr addrspace(1) %72, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %74 = or disjoint i32 %33, %69, !dbg !31
  %75 = or disjoint i32 %34, %69, !dbg !31
  %76 = sext i32 %74 to i64, !dbg !32
  %77 = getelementptr bfloat, ptr addrspace(1) %1, i64 %76, !dbg !32
  %78 = sext i32 %75 to i64, !dbg !32
  %79 = getelementptr bfloat, ptr addrspace(1) %1, i64 %78, !dbg !32
  %80 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %41, !dbg !33
  %81 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %54, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %80, ptr addrspace(1) %77, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %81, ptr addrspace(1) %79, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %16, 32, !dbg !35
  %invariant.op87 = or disjoint i32 %26, 96, !dbg !35
  %82 = shl i32 %15, 2
  %83 = and i32 %82, 8
  %84 = and i32 %82, 16
  %85 = and i32 %82, 24
  %86 = and i32 %15, 7
  %87 = and i32 %15, 15
  %88 = lshr exact i32 %17, 1
  %89 = xor i32 %85, %88
  %90 = lshr exact i32 %19, 3
  %91 = or disjoint i32 %90, %87
  %92 = shl nuw nsw i32 %91, 5
  %93 = or disjoint i32 %89, %92
  %94 = or disjoint i32 %83, 16
  %95 = or disjoint i32 %88, %84
  %96 = xor i32 %95, %94
  %97 = or disjoint i32 %96, %92
  %.reass = or disjoint i32 %86, %invariant.op
  %98 = or disjoint i32 %.reass, %90
  %99 = shl nuw nsw i32 %98, 5
  %100 = or disjoint i32 %99, %89
  %101 = or disjoint i32 %96, %99
  %102 = xor i32 %82, %15
  %103 = and i32 %102, 24
  %104 = and i32 %18, 24
  %105 = or disjoint i32 %104, %86
  %106 = shl nuw nsw i32 %105, 5
  %107 = or disjoint i32 %106, %103
  %invariant.op85 = and i32 %18, 24
  %108 = or disjoint i32 %invariant.op85, %86
  %109 = shl nuw nsw i32 %108, 5
  %110 = or disjoint i32 %109, %103
  %111 = or disjoint i32 %110, 1024
  %112 = or disjoint i32 %107, 2048
  %113 = or disjoint i32 %107, 3072
  %114 = zext nneg i32 %invariant.op87 to i64, !dbg !35
  %115 = sext i32 %34 to i64, !dbg !35
  %116 = sext i32 %33 to i64, !dbg !35
  %117 = sext i32 %32 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %117, !dbg !35
  %invariant.gep153 = getelementptr bfloat, ptr addrspace(1) %1, i64 %116, !dbg !35
  %invariant.gep155 = getelementptr bfloat, ptr addrspace(1) %1, i64 %115, !dbg !35
  br label %118, !dbg !35

118:                                              ; preds = %4, %118
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %118 ]
  %119 = phi i32 [ -1, %4 ], [ %156, %118 ]
  %120 = phi i32 [ 2, %4 ], [ %297, %118 ]
  %121 = phi float [ 0.000000e+00, %4 ], [ %256, %118 ]
  %122 = phi float [ 0.000000e+00, %4 ], [ %257, %118 ]
  %123 = phi float [ 0.000000e+00, %4 ], [ %258, %118 ]
  %124 = phi float [ 0.000000e+00, %4 ], [ %259, %118 ]
  %125 = phi float [ 0.000000e+00, %4 ], [ %261, %118 ]
  %126 = phi float [ 0.000000e+00, %4 ], [ %262, %118 ]
  %127 = phi float [ 0.000000e+00, %4 ], [ %263, %118 ]
  %128 = phi float [ 0.000000e+00, %4 ], [ %264, %118 ]
  %129 = phi float [ 0.000000e+00, %4 ], [ %266, %118 ]
  %130 = phi float [ 0.000000e+00, %4 ], [ %267, %118 ]
  %131 = phi float [ 0.000000e+00, %4 ], [ %268, %118 ]
  %132 = phi float [ 0.000000e+00, %4 ], [ %269, %118 ]
  %133 = phi float [ 0.000000e+00, %4 ], [ %271, %118 ]
  %134 = phi float [ 0.000000e+00, %4 ], [ %272, %118 ]
  %135 = phi float [ 0.000000e+00, %4 ], [ %273, %118 ]
  %136 = phi float [ 0.000000e+00, %4 ], [ %274, %118 ]
  %137 = phi float [ 0.000000e+00, %4 ], [ %276, %118 ]
  %138 = phi float [ 0.000000e+00, %4 ], [ %277, %118 ]
  %139 = phi float [ 0.000000e+00, %4 ], [ %278, %118 ]
  %140 = phi float [ 0.000000e+00, %4 ], [ %279, %118 ]
  %141 = phi float [ 0.000000e+00, %4 ], [ %281, %118 ]
  %142 = phi float [ 0.000000e+00, %4 ], [ %282, %118 ]
  %143 = phi float [ 0.000000e+00, %4 ], [ %283, %118 ]
  %144 = phi float [ 0.000000e+00, %4 ], [ %284, %118 ]
  %145 = phi float [ 0.000000e+00, %4 ], [ %286, %118 ]
  %146 = phi float [ 0.000000e+00, %4 ], [ %287, %118 ]
  %147 = phi float [ 0.000000e+00, %4 ], [ %288, %118 ]
  %148 = phi float [ 0.000000e+00, %4 ], [ %289, %118 ]
  %149 = phi float [ 0.000000e+00, %4 ], [ %291, %118 ]
  %150 = phi float [ 0.000000e+00, %4 ], [ %292, %118 ]
  %151 = phi float [ 0.000000e+00, %4 ], [ %293, %118 ]
  %152 = phi float [ 0.000000e+00, %4 ], [ %294, %118 ]
  %153 = icmp samesign ult i64 %indvars.iv, 125, !dbg !35
  %154 = add i32 %119, 1, !dbg !35
  %155 = icmp slt i32 %154, 3, !dbg !35
  %156 = select i1 %155, i32 %154, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %.idx = shl i32 %156, 12, !dbg !30
  %157 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %.idx, !dbg !30
  %158 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %157, i32 %93, !dbg !30
  %159 = ptrtoint ptr addrspace(3) %158 to i32, !dbg !30
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %159) #1, !dbg !30
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !30
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !30
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !30
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !30
  %165 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %157, i32 %97, !dbg !30
  %166 = ptrtoint ptr addrspace(3) %165 to i32, !dbg !30
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %166) #1, !dbg !30
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !30
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !30
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !30
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !30
  %172 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %157, i32 %100, !dbg !30
  %173 = ptrtoint ptr addrspace(3) %172 to i32, !dbg !30
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %173) #1, !dbg !30
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !30
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !30
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !30
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !30
  %179 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %157, i32 %101, !dbg !30
  %180 = ptrtoint ptr addrspace(3) %179 to i32, !dbg !30
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %180) #1, !dbg !30
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !30
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !30
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !30
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !30
  %.idx50 = shl i32 %156, 13, !dbg !33
  %186 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx50, !dbg !33
  %187 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %186, i32 %107, !dbg !33
  %188 = ptrtoint ptr addrspace(3) %187 to i32, !dbg !33
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %188) #1, !dbg !33
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !33
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !33
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !33
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !33
  %194 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %186, i32 %111, !dbg !33
  %195 = ptrtoint ptr addrspace(3) %194 to i32, !dbg !33
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %195) #1, !dbg !33
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !33
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !33
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !33
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !33
  %201 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %186, i32 %112, !dbg !33
  %202 = ptrtoint ptr addrspace(3) %201 to i32, !dbg !33
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %202) #1, !dbg !33
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !33
  %205 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !33
  %206 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !33
  %207 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !33
  %208 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %186, i32 %113, !dbg !33
  %209 = ptrtoint ptr addrspace(3) %208 to i32, !dbg !33
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %209) #1, !dbg !33
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !33
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !33
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !33
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !33
  %215 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %121, float %122, float %123, float %124, i32 %161, i32 %162, i32 %163, i32 %164, i32 %190, i32 %191) #1, !dbg !36
  %216 = extractvalue { float, float, float, float } %215, 0, !dbg !36
  %217 = extractvalue { float, float, float, float } %215, 1, !dbg !36
  %218 = extractvalue { float, float, float, float } %215, 2, !dbg !36
  %219 = extractvalue { float, float, float, float } %215, 3, !dbg !36
  %220 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %125, float %126, float %127, float %128, i32 %161, i32 %162, i32 %163, i32 %164, i32 %197, i32 %198) #1, !dbg !36
  %221 = extractvalue { float, float, float, float } %220, 0, !dbg !36
  %222 = extractvalue { float, float, float, float } %220, 1, !dbg !36
  %223 = extractvalue { float, float, float, float } %220, 2, !dbg !36
  %224 = extractvalue { float, float, float, float } %220, 3, !dbg !36
  %225 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %129, float %130, float %131, float %132, i32 %161, i32 %162, i32 %163, i32 %164, i32 %204, i32 %205) #1, !dbg !36
  %226 = extractvalue { float, float, float, float } %225, 0, !dbg !36
  %227 = extractvalue { float, float, float, float } %225, 1, !dbg !36
  %228 = extractvalue { float, float, float, float } %225, 2, !dbg !36
  %229 = extractvalue { float, float, float, float } %225, 3, !dbg !36
  %230 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %133, float %134, float %135, float %136, i32 %161, i32 %162, i32 %163, i32 %164, i32 %211, i32 %212) #1, !dbg !36
  %231 = extractvalue { float, float, float, float } %230, 0, !dbg !36
  %232 = extractvalue { float, float, float, float } %230, 1, !dbg !36
  %233 = extractvalue { float, float, float, float } %230, 2, !dbg !36
  %234 = extractvalue { float, float, float, float } %230, 3, !dbg !36
  %235 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %137, float %138, float %139, float %140, i32 %175, i32 %176, i32 %177, i32 %178, i32 %190, i32 %191) #1, !dbg !36
  %236 = extractvalue { float, float, float, float } %235, 0, !dbg !36
  %237 = extractvalue { float, float, float, float } %235, 1, !dbg !36
  %238 = extractvalue { float, float, float, float } %235, 2, !dbg !36
  %239 = extractvalue { float, float, float, float } %235, 3, !dbg !36
  %240 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %141, float %142, float %143, float %144, i32 %175, i32 %176, i32 %177, i32 %178, i32 %197, i32 %198) #1, !dbg !36
  %241 = extractvalue { float, float, float, float } %240, 0, !dbg !36
  %242 = extractvalue { float, float, float, float } %240, 1, !dbg !36
  %243 = extractvalue { float, float, float, float } %240, 2, !dbg !36
  %244 = extractvalue { float, float, float, float } %240, 3, !dbg !36
  %245 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %145, float %146, float %147, float %148, i32 %175, i32 %176, i32 %177, i32 %178, i32 %204, i32 %205) #1, !dbg !36
  %246 = extractvalue { float, float, float, float } %245, 0, !dbg !36
  %247 = extractvalue { float, float, float, float } %245, 1, !dbg !36
  %248 = extractvalue { float, float, float, float } %245, 2, !dbg !36
  %249 = extractvalue { float, float, float, float } %245, 3, !dbg !36
  %250 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %149, float %150, float %151, float %152, i32 %175, i32 %176, i32 %177, i32 %178, i32 %211, i32 %212) #1, !dbg !36
  %251 = extractvalue { float, float, float, float } %250, 0, !dbg !36
  %252 = extractvalue { float, float, float, float } %250, 1, !dbg !36
  %253 = extractvalue { float, float, float, float } %250, 2, !dbg !36
  %254 = extractvalue { float, float, float, float } %250, 3, !dbg !36
  %255 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %216, float %217, float %218, float %219, i32 %168, i32 %169, i32 %170, i32 %171, i32 %192, i32 %193) #1, !dbg !36
  %256 = extractvalue { float, float, float, float } %255, 0, !dbg !36
  %257 = extractvalue { float, float, float, float } %255, 1, !dbg !36
  %258 = extractvalue { float, float, float, float } %255, 2, !dbg !36
  %259 = extractvalue { float, float, float, float } %255, 3, !dbg !36
  %260 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %221, float %222, float %223, float %224, i32 %168, i32 %169, i32 %170, i32 %171, i32 %199, i32 %200) #1, !dbg !36
  %261 = extractvalue { float, float, float, float } %260, 0, !dbg !36
  %262 = extractvalue { float, float, float, float } %260, 1, !dbg !36
  %263 = extractvalue { float, float, float, float } %260, 2, !dbg !36
  %264 = extractvalue { float, float, float, float } %260, 3, !dbg !36
  %265 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %226, float %227, float %228, float %229, i32 %168, i32 %169, i32 %170, i32 %171, i32 %206, i32 %207) #1, !dbg !36
  %266 = extractvalue { float, float, float, float } %265, 0, !dbg !36
  %267 = extractvalue { float, float, float, float } %265, 1, !dbg !36
  %268 = extractvalue { float, float, float, float } %265, 2, !dbg !36
  %269 = extractvalue { float, float, float, float } %265, 3, !dbg !36
  %270 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %231, float %232, float %233, float %234, i32 %168, i32 %169, i32 %170, i32 %171, i32 %213, i32 %214) #1, !dbg !36
  %271 = extractvalue { float, float, float, float } %270, 0, !dbg !36
  %272 = extractvalue { float, float, float, float } %270, 1, !dbg !36
  %273 = extractvalue { float, float, float, float } %270, 2, !dbg !36
  %274 = extractvalue { float, float, float, float } %270, 3, !dbg !36
  %275 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %236, float %237, float %238, float %239, i32 %182, i32 %183, i32 %184, i32 %185, i32 %192, i32 %193) #1, !dbg !36
  %276 = extractvalue { float, float, float, float } %275, 0, !dbg !36
  %277 = extractvalue { float, float, float, float } %275, 1, !dbg !36
  %278 = extractvalue { float, float, float, float } %275, 2, !dbg !36
  %279 = extractvalue { float, float, float, float } %275, 3, !dbg !36
  %280 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %241, float %242, float %243, float %244, i32 %182, i32 %183, i32 %184, i32 %185, i32 %199, i32 %200) #1, !dbg !36
  %281 = extractvalue { float, float, float, float } %280, 0, !dbg !36
  %282 = extractvalue { float, float, float, float } %280, 1, !dbg !36
  %283 = extractvalue { float, float, float, float } %280, 2, !dbg !36
  %284 = extractvalue { float, float, float, float } %280, 3, !dbg !36
  %285 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %246, float %247, float %248, float %249, i32 %182, i32 %183, i32 %184, i32 %185, i32 %206, i32 %207) #1, !dbg !36
  %286 = extractvalue { float, float, float, float } %285, 0, !dbg !36
  %287 = extractvalue { float, float, float, float } %285, 1, !dbg !36
  %288 = extractvalue { float, float, float, float } %285, 2, !dbg !36
  %289 = extractvalue { float, float, float, float } %285, 3, !dbg !36
  %290 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %251, float %252, float %253, float %254, i32 %182, i32 %183, i32 %184, i32 %185, i32 %213, i32 %214) #1, !dbg !36
  %291 = extractvalue { float, float, float, float } %290, 0, !dbg !36
  %292 = extractvalue { float, float, float, float } %290, 1, !dbg !36
  %293 = extractvalue { float, float, float, float } %290, 2, !dbg !36
  %294 = extractvalue { float, float, float, float } %290, 3, !dbg !36
  %295 = add i32 %120, 1, !dbg !35
  %296 = icmp slt i32 %295, 3, !dbg !35
  %297 = select i1 %296, i32 %295, i32 0, !dbg !35
  %298 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %299 = add nuw nsw i64 %298, %114
  %gep152 = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %299, !dbg !29
  %.idx51 = shl i32 %297, 12, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %gep = getelementptr i8, ptr addrspace(3) %42, i32 %.idx51, !dbg !30
  %300 = select i1 %153, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep152, i32 %300) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep154 = getelementptr bfloat, ptr addrspace(1) %invariant.gep153, i64 %299, !dbg !32
  %gep156 = getelementptr bfloat, ptr addrspace(1) %invariant.gep155, i64 %299, !dbg !32
  %.idx52 = shl i32 %297, 13, !dbg !33
  %301 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx52, !dbg !33
  %302 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %301, i32 %41, !dbg !33
  %303 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %301, i32 %54, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %302, ptr addrspace(1) %gep154, i32 %300) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %303, ptr addrspace(1) %gep156, i32 %300) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 128, !dbg !35
  br i1 %exitcond.not, label %304, label %118, !dbg !35

304:                                              ; preds = %118
  %305 = and i32 %25, 120, !dbg !22
  %306 = or disjoint i32 %24, %305, !dbg !23
  %307 = lshr i32 %15, 4, !dbg !19
  %308 = and i32 %307, 15, !dbg !19
  %309 = or disjoint i32 %308, %14, !dbg !20
  %310 = or disjoint i32 %309, 48, !dbg !20
  %311 = or disjoint i32 %309, 32, !dbg !20
  %312 = or disjoint i32 %309, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %313 = icmp slt i32 %309, 512, !dbg !38
  %314 = icmp slt i32 %312, 512, !dbg !38
  %315 = icmp slt i32 %311, 512, !dbg !38
  %316 = icmp slt i32 %310, 512, !dbg !38
  %317 = icmp slt i32 %306, 10240, !dbg !39
  %318 = and i1 %313, %317, !dbg !40
  %319 = and i1 %314, %317, !dbg !40
  %320 = and i1 %315, %317, !dbg !40
  %321 = and i1 %316, %317, !dbg !40
  %322 = mul i32 %309, 10240, !dbg !41
  %323 = mul i32 %312, 10240, !dbg !41
  %324 = mul i32 %311, 10240, !dbg !41
  %325 = mul i32 %310, 10240, !dbg !41
  %326 = add i32 %322, %306, !dbg !42
  %327 = add i32 %323, %306, !dbg !42
  %328 = add i32 %324, %306, !dbg !42
  %329 = add i32 %325, %306, !dbg !42
  %330 = sext i32 %326 to i64, !dbg !43
  %331 = getelementptr bfloat, ptr addrspace(1) %2, i64 %330, !dbg !43
  %332 = sext i32 %327 to i64, !dbg !43
  %333 = getelementptr bfloat, ptr addrspace(1) %2, i64 %332, !dbg !43
  %334 = sext i32 %328 to i64, !dbg !43
  %335 = getelementptr bfloat, ptr addrspace(1) %2, i64 %334, !dbg !43
  %336 = sext i32 %329 to i64, !dbg !43
  %337 = getelementptr bfloat, ptr addrspace(1) %2, i64 %336, !dbg !43
  %338 = fptrunc float %256 to bfloat, !dbg !44
  %339 = fptrunc float %257 to bfloat, !dbg !44
  %340 = fptrunc float %258 to bfloat, !dbg !44
  %341 = fptrunc float %259 to bfloat, !dbg !44
  %342 = fptrunc float %261 to bfloat, !dbg !44
  %343 = fptrunc float %262 to bfloat, !dbg !44
  %344 = fptrunc float %263 to bfloat, !dbg !44
  %345 = fptrunc float %264 to bfloat, !dbg !44
  %346 = fptrunc float %266 to bfloat, !dbg !44
  %347 = fptrunc float %267 to bfloat, !dbg !44
  %348 = fptrunc float %268 to bfloat, !dbg !44
  %349 = fptrunc float %269 to bfloat, !dbg !44
  %350 = fptrunc float %271 to bfloat, !dbg !44
  %351 = fptrunc float %272 to bfloat, !dbg !44
  %352 = fptrunc float %273 to bfloat, !dbg !44
  %353 = fptrunc float %274 to bfloat, !dbg !44
  %354 = fptrunc float %276 to bfloat, !dbg !44
  %355 = fptrunc float %277 to bfloat, !dbg !44
  %356 = fptrunc float %278 to bfloat, !dbg !44
  %357 = fptrunc float %279 to bfloat, !dbg !44
  %358 = fptrunc float %281 to bfloat, !dbg !44
  %359 = fptrunc float %282 to bfloat, !dbg !44
  %360 = fptrunc float %283 to bfloat, !dbg !44
  %361 = fptrunc float %284 to bfloat, !dbg !44
  %362 = fptrunc float %286 to bfloat, !dbg !44
  %363 = fptrunc float %287 to bfloat, !dbg !44
  %364 = fptrunc float %288 to bfloat, !dbg !44
  %365 = fptrunc float %289 to bfloat, !dbg !44
  %366 = fptrunc float %291 to bfloat, !dbg !44
  %367 = fptrunc float %292 to bfloat, !dbg !44
  %368 = fptrunc float %293 to bfloat, !dbg !44
  %369 = fptrunc float %294 to bfloat, !dbg !44
  %370 = shl i32 %15, 1, !dbg !44
  %371 = and i32 %370, 6, !dbg !44
  %372 = shl i32 %15, 5, !dbg !44
  %373 = and i32 %372, 384, !dbg !44
  %374 = or disjoint i32 %373, %371, !dbg !44
  %375 = shl nuw nsw i32 %17, 5, !dbg !44
  %376 = or disjoint i32 %374, %375, !dbg !44
  %377 = shl nuw nsw i32 %19, 4, !dbg !44
  %378 = or disjoint i32 %376, %377, !dbg !44
  %379 = or disjoint i32 %104, %378, !dbg !44
  %380 = and i32 %25, 2040, !dbg !44
  %381 = lshr i32 %378, 4, !dbg !44
  %382 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %381, !dbg !44
  %383 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %382, i32 %379, !dbg !44
  %384 = bitcast bfloat %338 to i16, !dbg !44
  %385 = bitcast bfloat %339 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %383, i16 %384, i16 %385, i1 true) #1, !dbg !44
  %386 = or disjoint i32 %379, 1024, !dbg !44
  %387 = lshr i32 %386, 4, !dbg !44
  %388 = and i32 %387, 268435448, !dbg !44
  %389 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %388, !dbg !44
  %390 = getelementptr bfloat, ptr addrspace(3) %389, i32 %386, !dbg !44
  %391 = bitcast bfloat %340 to i16, !dbg !44
  %392 = bitcast bfloat %341 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %390, i16 %391, i16 %392, i1 true) #1, !dbg !44
  %393 = or disjoint i32 %379, 32, !dbg !44
  %394 = getelementptr bfloat, ptr addrspace(3) %382, i32 %393, !dbg !44
  %395 = bitcast bfloat %342 to i16, !dbg !44
  %396 = bitcast bfloat %343 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %394, i16 %395, i16 %396, i1 true) #1, !dbg !44
  %397 = or disjoint i32 %379, 1056, !dbg !44
  %398 = lshr i32 %397, 4, !dbg !44
  %399 = and i32 %398, 268435448, !dbg !44
  %400 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %399, !dbg !44
  %401 = getelementptr bfloat, ptr addrspace(3) %400, i32 %397, !dbg !44
  %402 = bitcast bfloat %344 to i16, !dbg !44
  %403 = bitcast bfloat %345 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %401, i16 %402, i16 %403, i1 true) #1, !dbg !44
  %404 = or disjoint i32 %379, 64, !dbg !44
  %405 = getelementptr bfloat, ptr addrspace(3) %382, i32 %404, !dbg !44
  %406 = bitcast bfloat %346 to i16, !dbg !44
  %407 = bitcast bfloat %347 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %405, i16 %406, i16 %407, i1 true) #1, !dbg !44
  %408 = or disjoint i32 %379, 1088, !dbg !44
  %409 = lshr i32 %408, 4, !dbg !44
  %410 = and i32 %409, 268435448, !dbg !44
  %411 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %410, !dbg !44
  %412 = getelementptr bfloat, ptr addrspace(3) %411, i32 %408, !dbg !44
  %413 = bitcast bfloat %348 to i16, !dbg !44
  %414 = bitcast bfloat %349 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %412, i16 %413, i16 %414, i1 true) #1, !dbg !44
  %415 = or disjoint i32 %379, 96, !dbg !44
  %416 = getelementptr bfloat, ptr addrspace(3) %382, i32 %415, !dbg !44
  %417 = bitcast bfloat %350 to i16, !dbg !44
  %418 = bitcast bfloat %351 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %416, i16 %417, i16 %418, i1 true) #1, !dbg !44
  %419 = or disjoint i32 %379, 1120, !dbg !44
  %420 = lshr i32 %419, 4, !dbg !44
  %421 = and i32 %420, 268435448, !dbg !44
  %422 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %421, !dbg !44
  %423 = getelementptr bfloat, ptr addrspace(3) %422, i32 %419, !dbg !44
  %424 = bitcast bfloat %352 to i16, !dbg !44
  %425 = bitcast bfloat %353 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %423, i16 %424, i16 %425, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %426 = lshr i32 %25, 4, !dbg !44
  %427 = and i32 %426, 120, !dbg !44
  %428 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %427, !dbg !44
  %429 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %428, i32 %380, !dbg !44
  %430 = load <4 x i32>, ptr addrspace(3) %429, align 16, !dbg !44
  %431 = or disjoint i32 %380, 2048, !dbg !44
  %432 = lshr i32 %431, 4, !dbg !44
  %433 = and i32 %432, 248, !dbg !44
  %434 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %433, !dbg !44
  %435 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %434, i32 %431, !dbg !44
  %436 = load <4 x i32>, ptr addrspace(3) %435, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %437 = bitcast bfloat %354 to i16, !dbg !44
  %438 = bitcast bfloat %355 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %383, i16 %437, i16 %438, i1 true) #1, !dbg !44
  %439 = bitcast bfloat %356 to i16, !dbg !44
  %440 = bitcast bfloat %357 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %390, i16 %439, i16 %440, i1 true) #1, !dbg !44
  %441 = bitcast bfloat %358 to i16, !dbg !44
  %442 = bitcast bfloat %359 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %394, i16 %441, i16 %442, i1 true) #1, !dbg !44
  %443 = bitcast bfloat %360 to i16, !dbg !44
  %444 = bitcast bfloat %361 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %401, i16 %443, i16 %444, i1 true) #1, !dbg !44
  %445 = bitcast bfloat %362 to i16, !dbg !44
  %446 = bitcast bfloat %363 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %405, i16 %445, i16 %446, i1 true) #1, !dbg !44
  %447 = bitcast bfloat %364 to i16, !dbg !44
  %448 = bitcast bfloat %365 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %412, i16 %447, i16 %448, i1 true) #1, !dbg !44
  %449 = bitcast bfloat %366 to i16, !dbg !44
  %450 = bitcast bfloat %367 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %416, i16 %449, i16 %450, i1 true) #1, !dbg !44
  %451 = bitcast bfloat %368 to i16, !dbg !44
  %452 = bitcast bfloat %369 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %423, i16 %451, i16 %452, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %453 = load <4 x i32>, ptr addrspace(3) %429, align 16, !dbg !44
  %454 = load <4 x i32>, ptr addrspace(3) %435, align 16, !dbg !44
  %.extract = extractelement <4 x i32> %430, i64 0, !dbg !44
  %.extract55 = extractelement <4 x i32> %430, i64 1, !dbg !44
  %.extract57 = extractelement <4 x i32> %430, i64 2, !dbg !44
  %.extract59 = extractelement <4 x i32> %430, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract55, i32 %.extract57, i32 %.extract59, ptr addrspace(1) %331, i1 %318) #1, !dbg !44
  %.extract61 = extractelement <4 x i32> %436, i64 0, !dbg !44
  %.extract63 = extractelement <4 x i32> %436, i64 1, !dbg !44
  %.extract65 = extractelement <4 x i32> %436, i64 2, !dbg !44
  %.extract67 = extractelement <4 x i32> %436, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract61, i32 %.extract63, i32 %.extract65, i32 %.extract67, ptr addrspace(1) %333, i1 %319) #1, !dbg !44
  %.extract69 = extractelement <4 x i32> %453, i64 0, !dbg !44
  %.extract71 = extractelement <4 x i32> %453, i64 1, !dbg !44
  %.extract73 = extractelement <4 x i32> %453, i64 2, !dbg !44
  %.extract75 = extractelement <4 x i32> %453, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract69, i32 %.extract71, i32 %.extract73, i32 %.extract75, ptr addrspace(1) %335, i1 %320) #1, !dbg !44
  %.extract77 = extractelement <4 x i32> %454, i64 0, !dbg !44
  %.extract79 = extractelement <4 x i32> %454, i64 1, !dbg !44
  %.extract81 = extractelement <4 x i32> %454, i64 2, !dbg !44
  %.extract83 = extractelement <4 x i32> %454, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract77, i32 %.extract79, i32 %.extract81, i32 %.extract83, ptr addrspace(1) %337, i1 %321) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "citj3ffg3mn2oj7j3kwd2zrbdqzexf7olzbjl6mzzu3a35q73wdj.py", directory: "/tmp/torchinductor_root/it")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 71, column: 30, scope: !6)
!27 = !DILocation(line: 77, column: 55, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 27, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
