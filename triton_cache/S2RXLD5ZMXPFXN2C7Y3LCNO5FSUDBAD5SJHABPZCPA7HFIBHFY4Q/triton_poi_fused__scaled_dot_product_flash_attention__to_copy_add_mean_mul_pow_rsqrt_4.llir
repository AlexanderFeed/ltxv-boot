; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 10, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 3, !dbg !11
  %13 = and i32 %12, 1016, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = or disjoint i32 %14, 4, !dbg !12
  %16 = sdiv i32 %14, 3072, !dbg !13
  %17 = mul i32 %16, 3072, !dbg !14
  %.decomposed = sub i32 %14, %17, !dbg !14
  %18 = sext i32 %14 to i64, !dbg !15
  %19 = getelementptr i32, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = sext i32 %15 to i64, !dbg !15
  %21 = getelementptr i32, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %19) #1, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %21) #1, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !16
  %32 = sext i32 %16 to i64, !dbg !17
  %33 = getelementptr bfloat, ptr addrspace(1) %1, i64 %32, !dbg !17
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %33) #1, !dbg !18
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %33) #1, !dbg !18
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %33) #1, !dbg !18
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %33) #1, !dbg !18
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %33) #1, !dbg !18
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %33) #1, !dbg !18
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %33) #1, !dbg !18
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %33) #1, !dbg !18
  %42 = getelementptr bfloat, ptr addrspace(1) %2, i64 %32, !dbg !19
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !20
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !20
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !20
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !20
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !20
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !20
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !20
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !20
  %51 = sext i32 %.decomposed to i64, !dbg !21
  %52 = getelementptr bfloat, ptr addrspace(1) %3, i64 %51, !dbg !21
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %52) #1, !dbg !22
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !22
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !22
  %56 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !22
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !22
  %58 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !22
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !22
  %60 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !22
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !22
  %62 = getelementptr bfloat, ptr addrspace(1) %4, i64 %51, !dbg !23
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %62) #1, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !24
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !24
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !24
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !24
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !24
  %72 = insertelement <2 x i16> poison, i16 %34, i64 0, !dbg !18
  %73 = insertelement <2 x i16> %72, i16 %35, i64 1, !dbg !18
  %74 = bitcast <2 x i16> %73 to <2 x bfloat>, !dbg !18
  %75 = fcmp oge <2 x bfloat> %74, zeroinitializer, !dbg !25
  %76 = select <2 x i1> %75, <2 x bfloat> zeroinitializer, <2 x bfloat> %74, !dbg !25
  %77 = insertelement <2 x i16> poison, i16 %36, i64 0, !dbg !18
  %78 = insertelement <2 x i16> %77, i16 %37, i64 1, !dbg !18
  %79 = bitcast <2 x i16> %78 to <2 x bfloat>, !dbg !18
  %80 = fcmp oge <2 x bfloat> %79, zeroinitializer, !dbg !25
  %81 = select <2 x i1> %80, <2 x bfloat> zeroinitializer, <2 x bfloat> %79, !dbg !25
  %82 = insertelement <2 x i16> poison, i16 %38, i64 0, !dbg !18
  %83 = insertelement <2 x i16> %82, i16 %39, i64 1, !dbg !18
  %84 = bitcast <2 x i16> %83 to <2 x bfloat>, !dbg !18
  %85 = fcmp oge <2 x bfloat> %84, zeroinitializer, !dbg !25
  %86 = select <2 x i1> %85, <2 x bfloat> zeroinitializer, <2 x bfloat> %84, !dbg !25
  %87 = insertelement <2 x i16> poison, i16 %40, i64 0, !dbg !18
  %88 = insertelement <2 x i16> %87, i16 %41, i64 1, !dbg !18
  %89 = bitcast <2 x i16> %88 to <2 x bfloat>, !dbg !18
  %90 = fcmp oge <2 x bfloat> %89, zeroinitializer, !dbg !25
  %91 = select <2 x i1> %90, <2 x bfloat> zeroinitializer, <2 x bfloat> %89, !dbg !25
  %92 = insertelement <2 x i16> poison, i16 %43, i64 0, !dbg !20
  %93 = insertelement <2 x i16> %92, i16 %44, i64 1, !dbg !20
  %94 = bitcast <2 x i16> %93 to <2 x bfloat>, !dbg !20
  %95 = fcmp ole <2 x bfloat> %94, zeroinitializer, !dbg !29
  %96 = insertelement <2 x i16> poison, i16 %45, i64 0, !dbg !20
  %97 = insertelement <2 x i16> %96, i16 %46, i64 1, !dbg !20
  %98 = bitcast <2 x i16> %97 to <2 x bfloat>, !dbg !20
  %99 = fcmp ole <2 x bfloat> %98, zeroinitializer, !dbg !29
  %100 = insertelement <2 x i16> poison, i16 %47, i64 0, !dbg !20
  %101 = insertelement <2 x i16> %100, i16 %48, i64 1, !dbg !20
  %102 = bitcast <2 x i16> %101 to <2 x bfloat>, !dbg !20
  %103 = fcmp ole <2 x bfloat> %102, zeroinitializer, !dbg !29
  %104 = insertelement <2 x i16> poison, i16 %49, i64 0, !dbg !20
  %105 = insertelement <2 x i16> %104, i16 %50, i64 1, !dbg !20
  %106 = bitcast <2 x i16> %105 to <2 x bfloat>, !dbg !20
  %107 = fcmp ole <2 x bfloat> %106, zeroinitializer, !dbg !29
  %108 = getelementptr bfloat, ptr addrspace(1) %5, i64 %18, !dbg !31
  %109 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !32
  %110 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !33
  %111 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !34
  %112 = insertelement <2 x i32> %111, i32 %24, i64 1, !dbg !34
  %113 = sitofp <2 x i32> %112 to <2 x float>, !dbg !34
  %114 = fpext <2 x bfloat> %76 to <2 x float>, !dbg !25
  %115 = fsub <2 x float> zeroinitializer, %114, !dbg !35
  %116 = select <2 x i1> %95, <2 x bfloat> zeroinitializer, <2 x bfloat> %94, !dbg !29
  %117 = fpext <2 x bfloat> %116 to <2 x float>, !dbg !29
  %118 = fcmp ogt <2 x float> %115, %117, !dbg !36
  %119 = fcmp uno <2 x float> %115, zeroinitializer, !dbg !38
  %120 = or <2 x i1> %119, %118, !dbg !39
  %121 = select <2 x i1> %120, <2 x float> %115, <2 x float> %117, !dbg !40
  %122 = fmul <2 x float> %121, splat (float 0x3F80204080000000), !dbg !41
  %123 = fcmp ogt <2 x float> %122, splat (float 0x3EE4F8B580000000), !dbg !42
  %124 = fcmp uno <2 x float> %122, zeroinitializer, !dbg !44
  %125 = or <2 x i1> %123, %124, !dbg !45
  %126 = select <2 x i1> %125, <2 x float> %122, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !46
  %127 = fmul <2 x float> %126, %113, !dbg !47
  %128 = fmul <2 x float> %127, %109, !dbg !48
  %129 = fadd <2 x float> %128, %110, !dbg !49
  %130 = fptrunc <2 x float> %129 to <2 x bfloat>, !dbg !50
  %131 = fpext <2 x bfloat> %57 to <2 x float>, !dbg !32
  %132 = fpext <2 x bfloat> %67 to <2 x float>, !dbg !33
  %133 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !34
  %134 = insertelement <2 x i32> %133, i32 %26, i64 1, !dbg !34
  %135 = sitofp <2 x i32> %134 to <2 x float>, !dbg !34
  %136 = fpext <2 x bfloat> %81 to <2 x float>, !dbg !25
  %137 = fsub <2 x float> zeroinitializer, %136, !dbg !35
  %138 = select <2 x i1> %99, <2 x bfloat> zeroinitializer, <2 x bfloat> %98, !dbg !29
  %139 = fpext <2 x bfloat> %138 to <2 x float>, !dbg !29
  %140 = fcmp ogt <2 x float> %137, %139, !dbg !36
  %141 = fcmp uno <2 x float> %137, zeroinitializer, !dbg !38
  %142 = or <2 x i1> %141, %140, !dbg !39
  %143 = select <2 x i1> %142, <2 x float> %137, <2 x float> %139, !dbg !40
  %144 = fmul <2 x float> %143, splat (float 0x3F80204080000000), !dbg !41
  %145 = fcmp ogt <2 x float> %144, splat (float 0x3EE4F8B580000000), !dbg !42
  %146 = fcmp uno <2 x float> %144, zeroinitializer, !dbg !44
  %147 = or <2 x i1> %145, %146, !dbg !45
  %148 = select <2 x i1> %147, <2 x float> %144, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !46
  %149 = fmul <2 x float> %148, %135, !dbg !47
  %150 = fmul <2 x float> %149, %131, !dbg !48
  %151 = fadd <2 x float> %150, %132, !dbg !49
  %152 = fptrunc <2 x float> %151 to <2 x bfloat>, !dbg !50
  %153 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !32
  %154 = fpext <2 x bfloat> %69 to <2 x float>, !dbg !33
  %155 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !34
  %156 = insertelement <2 x i32> %155, i32 %29, i64 1, !dbg !34
  %157 = sitofp <2 x i32> %156 to <2 x float>, !dbg !34
  %158 = fpext <2 x bfloat> %86 to <2 x float>, !dbg !25
  %159 = fsub <2 x float> zeroinitializer, %158, !dbg !35
  %160 = select <2 x i1> %103, <2 x bfloat> zeroinitializer, <2 x bfloat> %102, !dbg !29
  %161 = fpext <2 x bfloat> %160 to <2 x float>, !dbg !29
  %162 = fcmp ogt <2 x float> %159, %161, !dbg !36
  %163 = fcmp uno <2 x float> %159, zeroinitializer, !dbg !38
  %164 = or <2 x i1> %163, %162, !dbg !39
  %165 = select <2 x i1> %164, <2 x float> %159, <2 x float> %161, !dbg !40
  %166 = fmul <2 x float> %165, splat (float 0x3F80204080000000), !dbg !41
  %167 = fcmp ogt <2 x float> %166, splat (float 0x3EE4F8B580000000), !dbg !42
  %168 = fcmp uno <2 x float> %166, zeroinitializer, !dbg !44
  %169 = or <2 x i1> %167, %168, !dbg !45
  %170 = select <2 x i1> %169, <2 x float> %166, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !46
  %171 = fmul <2 x float> %170, %157, !dbg !47
  %172 = fmul <2 x float> %171, %153, !dbg !48
  %173 = fadd <2 x float> %172, %154, !dbg !49
  %174 = fptrunc <2 x float> %173 to <2 x bfloat>, !dbg !50
  %175 = fpext <2 x bfloat> %61 to <2 x float>, !dbg !32
  %176 = fpext <2 x bfloat> %71 to <2 x float>, !dbg !33
  %177 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !34
  %178 = insertelement <2 x i32> %177, i32 %31, i64 1, !dbg !34
  %179 = sitofp <2 x i32> %178 to <2 x float>, !dbg !34
  %180 = fpext <2 x bfloat> %91 to <2 x float>, !dbg !25
  %181 = fsub <2 x float> zeroinitializer, %180, !dbg !35
  %182 = select <2 x i1> %107, <2 x bfloat> zeroinitializer, <2 x bfloat> %106, !dbg !29
  %183 = fpext <2 x bfloat> %182 to <2 x float>, !dbg !29
  %184 = fcmp ogt <2 x float> %181, %183, !dbg !36
  %185 = fcmp uno <2 x float> %181, zeroinitializer, !dbg !38
  %186 = or <2 x i1> %185, %184, !dbg !39
  %187 = select <2 x i1> %186, <2 x float> %181, <2 x float> %183, !dbg !40
  %188 = fmul <2 x float> %187, splat (float 0x3F80204080000000), !dbg !41
  %189 = fcmp ogt <2 x float> %188, splat (float 0x3EE4F8B580000000), !dbg !42
  %190 = fcmp uno <2 x float> %188, zeroinitializer, !dbg !44
  %191 = or <2 x i1> %189, %190, !dbg !45
  %192 = select <2 x i1> %191, <2 x float> %188, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !46
  %193 = fmul <2 x float> %192, %179, !dbg !47
  %194 = fmul <2 x float> %193, %175, !dbg !48
  %195 = fadd <2 x float> %194, %176, !dbg !49
  %196 = fptrunc <2 x float> %195 to <2 x bfloat>, !dbg !50
  %197 = bitcast <2 x bfloat> %130 to i32, !dbg !50
  %198 = bitcast <2 x bfloat> %152 to i32, !dbg !50
  %199 = bitcast <2 x bfloat> %174 to i32, !dbg !50
  %200 = bitcast <2 x bfloat> %196 to i32, !dbg !50
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %197, i32 %198, i32 %199, i32 %200, ptr addrspace(1) %108) #1, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj3uddafanikudmhbsgsjy64tmb4n7dzlojhwgduxm5brnfxazxs.py", directory: "/tmp/torchinductor_root/j3")
!4 = !{ptr @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_4, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_4", linkageName: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_4", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 19, scope: !6)
!14 = !DILocation(line: 25, column: 19, scope: !6)
!15 = !DILocation(line: 26, column: 30, scope: !6)
!16 = !DILocation(line: 26, column: 35, scope: !6)
!17 = !DILocation(line: 27, column: 30, scope: !6)
!18 = !DILocation(line: 27, column: 35, scope: !6)
!19 = !DILocation(line: 28, column: 30, scope: !6)
!20 = !DILocation(line: 28, column: 35, scope: !6)
!21 = !DILocation(line: 29, column: 31, scope: !6)
!22 = !DILocation(line: 29, column: 36, scope: !6)
!23 = !DILocation(line: 30, column: 31, scope: !6)
!24 = !DILocation(line: 30, column: 36, scope: !6)
!25 = !DILocation(line: 97, column: 29, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !6, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 33, column: 40, scope: !6)
!29 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 35, column: 40, scope: !6)
!31 = !DILocation(line: 46, column: 25, scope: !6)
!32 = !DILocation(line: 29, column: 75, scope: !6)
!33 = !DILocation(line: 30, column: 75, scope: !6)
!34 = !DILocation(line: 31, column: 19, scope: !6)
!35 = !DILocation(line: 34, column: 12, scope: !6)
!36 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !37)
!37 = !DILocation(line: 36, column: 40, scope: !6)
!38 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !37)
!39 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !37)
!40 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !37)
!41 = !DILocation(line: 38, column: 19, scope: !6)
!42 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !43)
!43 = !DILocation(line: 41, column: 42, scope: !6)
!44 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !43)
!45 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !43)
!46 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !43)
!47 = !DILocation(line: 43, column: 19, scope: !6)
!48 = !DILocation(line: 44, column: 20, scope: !6)
!49 = !DILocation(line: 45, column: 20, scope: !6)
!50 = !DILocation(line: 46, column: 37, scope: !6)
!51 = !DILocation(line: 46, column: 4, scope: !6)
