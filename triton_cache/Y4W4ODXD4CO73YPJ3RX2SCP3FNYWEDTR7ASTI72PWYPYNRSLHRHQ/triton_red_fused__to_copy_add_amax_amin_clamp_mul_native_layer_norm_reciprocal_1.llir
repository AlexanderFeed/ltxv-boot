; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = icmp slt i32 %19, 4112, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 31, !dbg !11
  %23 = shl i32 %21, 2, !dbg !11
  %24 = and i32 %23, 2044, !dbg !11
  %25 = mul i32 %19, 3072, !dbg !12
  %26 = zext nneg i32 %24 to i64, !dbg !13
  %27 = add i32 %24, %25, !dbg !14
  %28 = sext i32 %27 to i64, !dbg !15
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !15
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 %20) #5, !dbg !16
  %31 = extractvalue { i32, i32 } %30, 1, !dbg !16
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !16
  %33 = extractelement <2 x bfloat> %32, i64 1, !dbg !16
  %34 = fpext bfloat %33 to float, !dbg !17
  %35 = extractelement <2 x bfloat> %32, i64 0, !dbg !16
  %36 = fpext bfloat %35 to float, !dbg !17
  %37 = extractvalue { i32, i32 } %30, 0, !dbg !16
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !16
  %39 = extractelement <2 x bfloat> %38, i64 1, !dbg !16
  %40 = fpext bfloat %39 to float, !dbg !17
  %41 = extractelement <2 x bfloat> %38, i64 0, !dbg !16
  %42 = fpext bfloat %41 to float, !dbg !17
  %43 = select i1 %20, float %42, float 0.000000e+00, !dbg !18
  %44 = select i1 %20, float %40, float 0.000000e+00, !dbg !18
  %45 = select i1 %20, float %36, float 0.000000e+00, !dbg !18
  %46 = select i1 %20, float %34, float 0.000000e+00, !dbg !18
  %47 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %48 = or disjoint i64 %26, 2048, !dbg !20
  %49 = icmp samesign ult i64 %48, 3072, !dbg !21
  %50 = trunc nuw nsw i64 %48 to i32, !dbg !14
  %51 = add i32 %25, %50, !dbg !14
  %52 = sext i32 %51 to i64, !dbg !15
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !15
  %54 = and i1 %20, %49, !dbg !22
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %53, i1 %54) #5, !dbg !16
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !16
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !16
  %58 = extractelement <2 x bfloat> %57, i64 0, !dbg !16
  %59 = fpext bfloat %58 to float, !dbg !17
  %60 = fsub float %59, %43, !dbg !23
  %61 = fadd float %47, 1.000000e+00, !dbg !27
  %62 = tail call float @llvm.nvvm.div.full(float %60, float %61), !dbg !28
  %63 = fadd float %43, %62, !dbg !29
  %64 = fsub float %59, %63, !dbg !30
  %65 = fmul float %60, %64, !dbg !31
  %66 = fadd float %65, 0.000000e+00, !dbg !32
  %67 = extractelement <2 x bfloat> %57, i64 1, !dbg !16
  %68 = fpext bfloat %67 to float, !dbg !17
  %69 = fsub float %68, %44, !dbg !23
  %70 = tail call float @llvm.nvvm.div.full(float %69, float %61), !dbg !28
  %71 = fadd float %44, %70, !dbg !29
  %72 = fsub float %68, %71, !dbg !30
  %73 = fmul float %69, %72, !dbg !31
  %74 = fadd float %73, 0.000000e+00, !dbg !32
  %75 = extractvalue { i32, i32 } %55, 1, !dbg !16
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !16
  %77 = extractelement <2 x bfloat> %76, i64 0, !dbg !16
  %78 = fpext bfloat %77 to float, !dbg !17
  %79 = fsub float %78, %45, !dbg !23
  %80 = tail call float @llvm.nvvm.div.full(float %79, float %61), !dbg !28
  %81 = fadd float %45, %80, !dbg !29
  %82 = fsub float %78, %81, !dbg !30
  %83 = fmul float %79, %82, !dbg !31
  %84 = fadd float %83, 0.000000e+00, !dbg !32
  %85 = extractelement <2 x bfloat> %76, i64 1, !dbg !16
  %86 = fpext bfloat %85 to float, !dbg !17
  %87 = fsub float %86, %46, !dbg !23
  %88 = tail call float @llvm.nvvm.div.full(float %87, float %61), !dbg !28
  %89 = fadd float %46, %88, !dbg !29
  %90 = fsub float %86, %89, !dbg !30
  %91 = fmul float %87, %90, !dbg !31
  %92 = fadd float %91, 0.000000e+00, !dbg !32
  %93 = select i1 %54, float %63, float %43, !dbg !18
  %94 = select i1 %54, float %71, float %44, !dbg !18
  %95 = select i1 %54, float %81, float %45, !dbg !18
  %96 = select i1 %54, float %89, float %46, !dbg !18
  %97 = select i1 %54, float %84, float 0.000000e+00, !dbg !33
  %98 = select i1 %54, float %92, float 0.000000e+00, !dbg !33
  %99 = select i1 %54, float %61, float %47, !dbg !19
  %100 = select i1 %54, float %61, float %47, !dbg !19
  %101 = select i1 %54, float %61, float %47, !dbg !19
  %102 = select i1 %54, float %61, float %47, !dbg !19
  %103 = lshr i32 %21, 5, !dbg !11
  %104 = fsub float %94, %93, !dbg !34
  %105 = fadd float %99, %100, !dbg !37
  %106 = fcmp oeq float %105, 0.000000e+00, !dbg !38
  %107 = tail call float @llvm.nvvm.div.full(float %100, float %105), !dbg !39
  %108 = select i1 %106, float 0.000000e+00, float %107, !dbg !40
  %109 = fmul float %104, %108, !dbg !41
  %110 = fadd float %93, %109, !dbg !42
  %111 = fadd float %66, %74, !dbg !43
  %112 = select i1 %54, float %111, float 0.000000e+00, !dbg !43
  %113 = fmul float %104, %104, !dbg !44
  %114 = fmul float %113, %99, !dbg !45
  %115 = fmul float %114, %108, !dbg !46
  %116 = fadd float %112, %115, !dbg !47
  %117 = fsub float %95, %110, !dbg !34
  %118 = fadd float %101, %105, !dbg !37
  %119 = fcmp oeq float %118, 0.000000e+00, !dbg !38
  %120 = tail call float @llvm.nvvm.div.full(float %101, float %118), !dbg !39
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !40
  %122 = fmul float %121, %117, !dbg !41
  %123 = fadd float %110, %122, !dbg !42
  %124 = fadd float %97, %116, !dbg !43
  %125 = fmul float %117, %117, !dbg !44
  %126 = fmul float %105, %125, !dbg !45
  %127 = fmul float %121, %126, !dbg !46
  %128 = fadd float %124, %127, !dbg !47
  %129 = fsub float %96, %123, !dbg !34
  %130 = fadd float %102, %118, !dbg !37
  %131 = fcmp oeq float %130, 0.000000e+00, !dbg !38
  %132 = tail call float @llvm.nvvm.div.full(float %102, float %130), !dbg !39
  %133 = select i1 %131, float 0.000000e+00, float %132, !dbg !40
  %134 = fmul float %133, %129, !dbg !41
  %135 = fadd float %123, %134, !dbg !42
  %136 = fadd float %98, %128, !dbg !43
  %137 = fmul float %129, %129, !dbg !44
  %138 = fmul float %118, %137, !dbg !45
  %139 = fmul float %133, %138, !dbg !46
  %140 = fadd float %136, %139, !dbg !47
  %141 = bitcast float %135 to i32, !dbg !48
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 16, i32 31), !dbg !48
  %143 = bitcast i32 %142 to float, !dbg !48
  %144 = bitcast float %140 to i32, !dbg !48
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 16, i32 31), !dbg !48
  %146 = bitcast i32 %145 to float, !dbg !48
  %147 = bitcast float %130 to i32, !dbg !48
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 16, i32 31), !dbg !48
  %149 = bitcast i32 %148 to float, !dbg !48
  %150 = fsub float %143, %135, !dbg !34
  %151 = fadd float %130, %149, !dbg !37
  %152 = fcmp oeq float %151, 0.000000e+00, !dbg !38
  %153 = tail call float @llvm.nvvm.div.full(float %149, float %151), !dbg !39
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !40
  %155 = fmul float %154, %150, !dbg !41
  %156 = fadd float %135, %155, !dbg !42
  %157 = fadd float %140, %146, !dbg !43
  %158 = fmul float %150, %150, !dbg !44
  %159 = fmul float %130, %158, !dbg !45
  %160 = fmul float %154, %159, !dbg !46
  %161 = fadd float %157, %160, !dbg !47
  %162 = bitcast float %156 to i32, !dbg !48
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !48
  %164 = bitcast i32 %163 to float, !dbg !48
  %165 = bitcast float %161 to i32, !dbg !48
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 8, i32 31), !dbg !48
  %167 = bitcast i32 %166 to float, !dbg !48
  %168 = bitcast float %151 to i32, !dbg !48
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 8, i32 31), !dbg !48
  %170 = bitcast i32 %169 to float, !dbg !48
  %171 = fsub float %164, %156, !dbg !34
  %172 = fadd float %151, %170, !dbg !37
  %173 = fcmp oeq float %172, 0.000000e+00, !dbg !38
  %174 = tail call float @llvm.nvvm.div.full(float %170, float %172), !dbg !39
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !40
  %176 = fmul float %171, %175, !dbg !41
  %177 = fadd float %156, %176, !dbg !42
  %178 = fadd float %161, %167, !dbg !43
  %179 = fmul float %171, %171, !dbg !44
  %180 = fmul float %151, %179, !dbg !45
  %181 = fmul float %175, %180, !dbg !46
  %182 = fadd float %178, %181, !dbg !47
  %183 = bitcast float %177 to i32, !dbg !48
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 4, i32 31), !dbg !48
  %185 = bitcast i32 %184 to float, !dbg !48
  %186 = bitcast float %182 to i32, !dbg !48
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 4, i32 31), !dbg !48
  %188 = bitcast i32 %187 to float, !dbg !48
  %189 = bitcast float %172 to i32, !dbg !48
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 4, i32 31), !dbg !48
  %191 = bitcast i32 %190 to float, !dbg !48
  %192 = fsub float %185, %177, !dbg !34
  %193 = fadd float %172, %191, !dbg !37
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !38
  %195 = tail call float @llvm.nvvm.div.full(float %191, float %193), !dbg !39
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !40
  %197 = fmul float %192, %196, !dbg !41
  %198 = fadd float %177, %197, !dbg !42
  %199 = fadd float %182, %188, !dbg !43
  %200 = fmul float %192, %192, !dbg !44
  %201 = fmul float %172, %200, !dbg !45
  %202 = fmul float %196, %201, !dbg !46
  %203 = fadd float %199, %202, !dbg !47
  %204 = bitcast float %198 to i32, !dbg !48
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 2, i32 31), !dbg !48
  %206 = bitcast i32 %205 to float, !dbg !48
  %207 = bitcast float %203 to i32, !dbg !48
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !48
  %209 = bitcast i32 %208 to float, !dbg !48
  %210 = bitcast float %193 to i32, !dbg !48
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 2, i32 31), !dbg !48
  %212 = bitcast i32 %211 to float, !dbg !48
  %213 = fsub float %206, %198, !dbg !34
  %214 = fadd float %193, %212, !dbg !37
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !38
  %216 = tail call float @llvm.nvvm.div.full(float %212, float %214), !dbg !39
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !40
  %218 = fmul float %213, %217, !dbg !41
  %219 = fadd float %198, %218, !dbg !42
  %220 = fadd float %203, %209, !dbg !43
  %221 = fmul float %213, %213, !dbg !44
  %222 = fmul float %193, %221, !dbg !45
  %223 = fmul float %217, %222, !dbg !46
  %224 = fadd float %220, %223, !dbg !47
  %225 = bitcast float %219 to i32, !dbg !48
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !48
  %227 = bitcast i32 %226 to float, !dbg !48
  %228 = bitcast float %224 to i32, !dbg !48
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !48
  %230 = bitcast i32 %229 to float, !dbg !48
  %231 = bitcast float %214 to i32, !dbg !48
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !48
  %233 = bitcast i32 %232 to float, !dbg !48
  %234 = fsub float %227, %219, !dbg !34
  %235 = fadd float %214, %233, !dbg !37
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !38
  %237 = tail call float @llvm.nvvm.div.full(float %233, float %235), !dbg !39
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !40
  %239 = fmul float %234, %238, !dbg !41
  %240 = fadd float %219, %239, !dbg !42
  %241 = fadd float %224, %230, !dbg !43
  %242 = fmul float %234, %234, !dbg !44
  %243 = fmul float %214, %242, !dbg !45
  %244 = fmul float %238, %243, !dbg !46
  %245 = fadd float %241, %244, !dbg !47
  %246 = and i32 %103, 15, !dbg !48
  %247 = icmp eq i32 %22, 0, !dbg !48
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !48
  %249 = bitcast float %240 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 %247) #5, !dbg !48
  %250 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %246, !dbg !48
  %251 = bitcast float %245 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 %247) #5, !dbg !48
  %252 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %246, !dbg !48
  %253 = bitcast float %235 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 %247) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %254 = icmp slt i32 %21, 16, !dbg !48
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !48
  %256 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %255, i1 %254) #5, !dbg !48
  %257 = bitcast i32 %256 to float, !dbg !48
  %258 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !48
  %259 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %258, i1 %254) #5, !dbg !48
  %260 = bitcast i32 %259 to float, !dbg !48
  %261 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !48
  %262 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %261, i1 %254) #5, !dbg !48
  %263 = bitcast i32 %262 to float, !dbg !48
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 8, i32 31), !dbg !48
  %265 = bitcast i32 %264 to float, !dbg !48
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 8, i32 31), !dbg !48
  %267 = bitcast i32 %266 to float, !dbg !48
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 8, i32 31), !dbg !48
  %269 = bitcast i32 %268 to float, !dbg !48
  %270 = fsub float %265, %257, !dbg !34
  %271 = fadd float %263, %269, !dbg !37
  %272 = fcmp oeq float %271, 0.000000e+00, !dbg !38
  %273 = tail call float @llvm.nvvm.div.full(float %269, float %271), !dbg !39
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !40
  %275 = fmul float %270, %274, !dbg !41
  %276 = fadd float %275, %257, !dbg !42
  %277 = fadd float %260, %267, !dbg !43
  %278 = fmul float %270, %270, !dbg !44
  %279 = fmul float %278, %263, !dbg !45
  %280 = fmul float %279, %274, !dbg !46
  %281 = fadd float %277, %280, !dbg !47
  %282 = bitcast float %276 to i32, !dbg !48
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 4, i32 31), !dbg !48
  %284 = bitcast i32 %283 to float, !dbg !48
  %285 = bitcast float %281 to i32, !dbg !48
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 4, i32 31), !dbg !48
  %287 = bitcast i32 %286 to float, !dbg !48
  %288 = bitcast float %271 to i32, !dbg !48
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 4, i32 31), !dbg !48
  %290 = bitcast i32 %289 to float, !dbg !48
  %291 = fsub float %284, %276, !dbg !34
  %292 = fadd float %271, %290, !dbg !37
  %293 = fcmp oeq float %292, 0.000000e+00, !dbg !38
  %294 = tail call float @llvm.nvvm.div.full(float %290, float %292), !dbg !39
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !40
  %296 = fmul float %291, %295, !dbg !41
  %297 = fadd float %276, %296, !dbg !42
  %298 = fadd float %281, %287, !dbg !43
  %299 = fmul float %291, %291, !dbg !44
  %300 = fmul float %271, %299, !dbg !45
  %301 = fmul float %295, %300, !dbg !46
  %302 = fadd float %298, %301, !dbg !47
  %303 = bitcast float %297 to i32, !dbg !48
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 2, i32 31), !dbg !48
  %305 = bitcast i32 %304 to float, !dbg !48
  %306 = bitcast float %302 to i32, !dbg !48
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 2, i32 31), !dbg !48
  %308 = bitcast i32 %307 to float, !dbg !48
  %309 = bitcast float %292 to i32, !dbg !48
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 2, i32 31), !dbg !48
  %311 = bitcast i32 %310 to float, !dbg !48
  %312 = fsub float %305, %297, !dbg !34
  %313 = fadd float %292, %311, !dbg !37
  %314 = fcmp oeq float %313, 0.000000e+00, !dbg !38
  %315 = tail call float @llvm.nvvm.div.full(float %311, float %313), !dbg !39
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !40
  %317 = fmul float %312, %316, !dbg !41
  %318 = fadd float %297, %317, !dbg !42
  %319 = fadd float %302, %308, !dbg !43
  %320 = fmul float %312, %312, !dbg !44
  %321 = fmul float %292, %320, !dbg !45
  %322 = fmul float %316, %321, !dbg !46
  %323 = fadd float %319, %322, !dbg !47
  %324 = bitcast float %318 to i32, !dbg !48
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 1, i32 31), !dbg !48
  %326 = bitcast i32 %325 to float, !dbg !48
  %327 = bitcast float %323 to i32, !dbg !48
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 1, i32 31), !dbg !48
  %329 = bitcast i32 %328 to float, !dbg !48
  %330 = bitcast float %313 to i32, !dbg !48
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 1, i32 31), !dbg !48
  %332 = bitcast i32 %331 to float, !dbg !48
  %333 = fsub float %326, %318, !dbg !34
  %334 = fadd float %313, %332, !dbg !37
  %335 = fcmp oeq float %334, 0.000000e+00, !dbg !38
  %336 = tail call float @llvm.nvvm.div.full(float %332, float %334), !dbg !39
  %337 = select i1 %335, float 0.000000e+00, float %336, !dbg !40
  %338 = fmul float %333, %337, !dbg !41
  %339 = fadd float %318, %338, !dbg !42
  %340 = fadd float %323, %329, !dbg !43
  %341 = fmul float %333, %333, !dbg !44
  %342 = fmul float %313, %341, !dbg !45
  %343 = fmul float %337, %342, !dbg !46
  %344 = fadd float %340, %343, !dbg !47
  %345 = and i32 %21, 15, !dbg !48
  %346 = icmp eq i32 %345, 0, !dbg !48
  %347 = and i1 %254, %346, !dbg !48
  %348 = bitcast float %339 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %348, i1 %347) #5, !dbg !48
  %349 = bitcast float %344 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %349, i1 %347) #5, !dbg !48
  %350 = bitcast float %334 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %350, i1 %347) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %351 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %352 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !48
  %353 = tail call float @llvm.nvvm.div.full(float %352, float 3.072000e+03), !dbg !49
  %354 = fadd float %353, 0x3EB0C6F7A0000000, !dbg !50
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i17 = icmp eq i32 %358, 0, !dbg !51
  br i1 %.not.i17, label %361, label %359, !dbg !51

359:                                              ; preds = %__nv_rsqrtf.exit
  %360 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %354), !dbg !51
  br label %__nv_rsqrtf.exit19, !dbg !51

361:                                              ; preds = %__nv_rsqrtf.exit
  %362 = tail call float @llvm.nvvm.rsqrt.approx.f(float %354), !dbg !51
  br label %__nv_rsqrtf.exit19, !dbg !51

__nv_rsqrtf.exit19:                               ; preds = %361, %359
  %.0.i18 = phi float [ %360, %359 ], [ %362, %361 ], !dbg !51
  %363 = insertelement <2 x float> poison, float %351, i64 0, !dbg !52
  %364 = shufflevector <2 x float> %363, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %365 = insertelement <2 x float> poison, float %.0.i18, i64 0, !dbg !53
  %366 = shufflevector <2 x float> %365, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %367 = add i32 %25, %24, !dbg !54
  %368 = sext i32 %367 to i64, !dbg !55
  %369 = getelementptr bfloat, ptr addrspace(1) %0, i64 %368, !dbg !55
  %370 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %369, i1 %20) #5, !dbg !56
  %371 = extractvalue { i32, i32 } %370, 0, !dbg !56
  %372 = bitcast i32 %371 to <2 x bfloat>, !dbg !56
  %373 = extractvalue { i32, i32 } %370, 1, !dbg !56
  %374 = bitcast i32 %373 to <2 x bfloat>, !dbg !56
  %375 = add nuw nsw i64 %26, 3072, !dbg !57
  %376 = getelementptr float, ptr addrspace(1) %1, i64 %375, !dbg !58
  %377 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %376, i1 true) #5, !dbg !59
  %378 = extractvalue { i32, i32, i32, i32 } %377, 0, !dbg !59
  %379 = extractvalue { i32, i32, i32, i32 } %377, 1, !dbg !59
  %380 = extractvalue { i32, i32, i32, i32 } %377, 2, !dbg !59
  %381 = extractvalue { i32, i32, i32, i32 } %377, 3, !dbg !59
  %382 = getelementptr bfloat, ptr addrspace(1) %2, i64 %375, !dbg !60
  %383 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %382, i1 true) #5, !dbg !61
  %384 = extractvalue { i32, i32 } %383, 0, !dbg !61
  %385 = bitcast i32 %384 to <2 x bfloat>, !dbg !61
  %386 = extractvalue { i32, i32 } %383, 1, !dbg !61
  %387 = bitcast i32 %386 to <2 x bfloat>, !dbg !61
  %388 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !62
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %388, i1 true) #5, !dbg !63
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !63
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !63
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !63
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !63
  %394 = getelementptr bfloat, ptr addrspace(1) %2, i64 %26, !dbg !64
  %395 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %394, i1 true) #5, !dbg !65
  %396 = extractvalue { i32, i32 } %395, 0, !dbg !65
  %397 = bitcast i32 %396 to <2 x bfloat>, !dbg !65
  %398 = extractvalue { i32, i32 } %395, 1, !dbg !65
  %399 = bitcast i32 %398 to <2 x bfloat>, !dbg !65
  %400 = fpext <2 x bfloat> %372 to <2 x float>, !dbg !66
  %401 = insertelement <2 x i32> poison, i32 %378, i64 0, !dbg !59
  %402 = insertelement <2 x i32> %401, i32 %379, i64 1, !dbg !59
  %403 = bitcast <2 x i32> %402 to <2 x float>, !dbg !59
  %404 = fpext <2 x bfloat> %385 to <2 x float>, !dbg !67
  %405 = insertelement <2 x i32> poison, i32 %390, i64 0, !dbg !63
  %406 = insertelement <2 x i32> %405, i32 %391, i64 1, !dbg !63
  %407 = bitcast <2 x i32> %406 to <2 x float>, !dbg !63
  %408 = fpext <2 x bfloat> %397 to <2 x float>, !dbg !68
  %409 = fsub <2 x float> %400, %364, !dbg !52
  %410 = fmul <2 x float> %366, %409, !dbg !53
  %411 = fadd <2 x float> %403, %404, !dbg !69
  %412 = fadd <2 x float> %411, splat (float 1.000000e+00), !dbg !70
  %413 = fmul <2 x float> %410, %412, !dbg !71
  %414 = fadd <2 x float> %407, %408, !dbg !72
  %415 = fadd <2 x float> %413, %414, !dbg !73
  %416 = insertelement <2 x i1> poison, i1 %20, i64 0, !dbg !74
  %417 = shufflevector <2 x i1> %416, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !74
  %418 = select <2 x i1> %417, <2 x float> %415, <2 x float> splat (float 0x7FF0000000000000), !dbg !74
  %419 = insertelement <4 x i1> poison, i1 %20, i64 0, !dbg !75
  %420 = shufflevector <4 x i1> %419, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !75
  %421 = getelementptr bfloat, ptr addrspace(1) %3, i64 %368, !dbg !76
  %422 = fptrunc <2 x float> %415 to <2 x bfloat>, !dbg !77
  %423 = fpext <2 x bfloat> %374 to <2 x float>, !dbg !66
  %424 = insertelement <2 x i32> poison, i32 %380, i64 0, !dbg !59
  %425 = insertelement <2 x i32> %424, i32 %381, i64 1, !dbg !59
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !59
  %427 = fpext <2 x bfloat> %387 to <2 x float>, !dbg !67
  %428 = insertelement <2 x i32> poison, i32 %392, i64 0, !dbg !63
  %429 = insertelement <2 x i32> %428, i32 %393, i64 1, !dbg !63
  %430 = bitcast <2 x i32> %429 to <2 x float>, !dbg !63
  %431 = fpext <2 x bfloat> %399 to <2 x float>, !dbg !68
  %432 = fsub <2 x float> %423, %364, !dbg !52
  %433 = fmul <2 x float> %366, %432, !dbg !53
  %434 = fadd <2 x float> %426, %427, !dbg !69
  %435 = fadd <2 x float> %434, splat (float 1.000000e+00), !dbg !70
  %436 = fmul <2 x float> %433, %435, !dbg !71
  %437 = fadd <2 x float> %430, %431, !dbg !72
  %438 = fadd <2 x float> %436, %437, !dbg !73
  %439 = extractelement <2 x float> %438, i64 0, !dbg !78
  %440 = extractelement <2 x float> %438, i64 1, !dbg !78
  %441 = select i1 %20, float %439, float 0x7FF0000000000000, !dbg !74
  %442 = select i1 %20, float %440, float 0x7FF0000000000000, !dbg !74
  %443 = shufflevector <2 x float> %415, <2 x float> %438, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !80
  %444 = select <4 x i1> %420, <4 x float> %443, <4 x float> splat (float 0xFFF0000000000000), !dbg !75
  %445 = fptrunc <2 x float> %438 to <2 x bfloat>, !dbg !77
  %446 = bitcast <2 x bfloat> %422 to i32, !dbg !77
  %447 = bitcast <2 x bfloat> %445 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %446, i32 %447, ptr addrspace(1) %421, i1 %20) #5, !dbg !77
  %448 = or disjoint i64 %26, 2048, !dbg !82
  %449 = icmp samesign ult i64 %448, 3072, !dbg !83
  %450 = trunc nuw nsw i64 %448 to i32, !dbg !54
  %451 = add i32 %25, %450, !dbg !54
  %452 = sext i32 %451 to i64, !dbg !55
  %453 = getelementptr bfloat, ptr addrspace(1) %0, i64 %452, !dbg !55
  %454 = and i1 %20, %449, !dbg !84
  %455 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %453, i1 %454) #5, !dbg !56
  %456 = extractvalue { i32, i32 } %455, 0, !dbg !56
  %457 = bitcast i32 %456 to <2 x bfloat>, !dbg !56
  %458 = extractvalue { i32, i32 } %455, 1, !dbg !56
  %459 = bitcast i32 %458 to <2 x bfloat>, !dbg !56
  %460 = add nuw nsw i64 %26, 5120, !dbg !57
  %461 = getelementptr float, ptr addrspace(1) %1, i64 %460, !dbg !58
  %462 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %461, i1 %449) #5, !dbg !59
  %463 = extractvalue { i32, i32, i32, i32 } %462, 0, !dbg !59
  %464 = extractvalue { i32, i32, i32, i32 } %462, 1, !dbg !59
  %465 = extractvalue { i32, i32, i32, i32 } %462, 2, !dbg !59
  %466 = extractvalue { i32, i32, i32, i32 } %462, 3, !dbg !59
  %467 = getelementptr bfloat, ptr addrspace(1) %2, i64 %460, !dbg !60
  %468 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %467, i1 %449) #5, !dbg !61
  %469 = extractvalue { i32, i32 } %468, 0, !dbg !61
  %470 = bitcast i32 %469 to <2 x bfloat>, !dbg !61
  %471 = extractvalue { i32, i32 } %468, 1, !dbg !61
  %472 = bitcast i32 %471 to <2 x bfloat>, !dbg !61
  %473 = getelementptr float, ptr addrspace(1) %1, i64 %448, !dbg !62
  %474 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %473, i1 %449) #5, !dbg !63
  %475 = extractvalue { i32, i32, i32, i32 } %474, 0, !dbg !63
  %476 = extractvalue { i32, i32, i32, i32 } %474, 1, !dbg !63
  %477 = extractvalue { i32, i32, i32, i32 } %474, 2, !dbg !63
  %478 = extractvalue { i32, i32, i32, i32 } %474, 3, !dbg !63
  %479 = getelementptr bfloat, ptr addrspace(1) %2, i64 %448, !dbg !64
  %480 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %479, i1 %449) #5, !dbg !65
  %481 = extractvalue { i32, i32 } %480, 0, !dbg !65
  %482 = bitcast i32 %481 to <2 x bfloat>, !dbg !65
  %483 = extractvalue { i32, i32 } %480, 1, !dbg !65
  %484 = bitcast i32 %483 to <2 x bfloat>, !dbg !65
  %485 = fcmp uno <2 x float> %418, zeroinitializer, !dbg !85
  %486 = fcmp uno float %441, 0.000000e+00, !dbg !85
  %487 = fcmp uno float %442, 0.000000e+00, !dbg !85
  %488 = fpext <2 x bfloat> %457 to <2 x float>, !dbg !66
  %489 = insertelement <2 x i32> poison, i32 %463, i64 0, !dbg !59
  %490 = insertelement <2 x i32> %489, i32 %464, i64 1, !dbg !59
  %491 = bitcast <2 x i32> %490 to <2 x float>, !dbg !59
  %492 = fpext <2 x bfloat> %470 to <2 x float>, !dbg !67
  %493 = insertelement <2 x i32> poison, i32 %475, i64 0, !dbg !63
  %494 = insertelement <2 x i32> %493, i32 %476, i64 1, !dbg !63
  %495 = bitcast <2 x i32> %494 to <2 x float>, !dbg !63
  %496 = fpext <2 x bfloat> %482 to <2 x float>, !dbg !68
  %497 = fsub <2 x float> %488, %364, !dbg !52
  %498 = fmul <2 x float> %366, %497, !dbg !53
  %499 = fadd <2 x float> %491, %492, !dbg !69
  %500 = fadd <2 x float> %499, splat (float 1.000000e+00), !dbg !70
  %501 = fmul <2 x float> %498, %500, !dbg !71
  %502 = fadd <2 x float> %495, %496, !dbg !72
  %503 = fadd <2 x float> %501, %502, !dbg !73
  %504 = fcmp olt <2 x float> %418, %503, !dbg !86
  %505 = or <2 x i1> %485, %504, !dbg !87
  %506 = select <2 x i1> %505, <2 x float> %418, <2 x float> %503, !dbg !78
  %507 = insertelement <2 x i1> poison, i1 %454, i64 0, !dbg !74
  %508 = shufflevector <2 x i1> %507, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !74
  %509 = select <2 x i1> %508, <2 x float> %506, <2 x float> %418, !dbg !74
  %510 = fcmp uno <4 x float> %444, zeroinitializer, !dbg !88
  %511 = insertelement <4 x i1> poison, i1 %454, i64 0, !dbg !75
  %512 = shufflevector <4 x i1> %511, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !75
  %513 = getelementptr bfloat, ptr addrspace(1) %3, i64 %452, !dbg !76
  %514 = fptrunc <2 x float> %503 to <2 x bfloat>, !dbg !77
  %515 = fpext <2 x bfloat> %459 to <2 x float>, !dbg !66
  %516 = insertelement <2 x i32> poison, i32 %465, i64 0, !dbg !59
  %517 = insertelement <2 x i32> %516, i32 %466, i64 1, !dbg !59
  %518 = bitcast <2 x i32> %517 to <2 x float>, !dbg !59
  %519 = fpext <2 x bfloat> %472 to <2 x float>, !dbg !67
  %520 = insertelement <2 x i32> poison, i32 %477, i64 0, !dbg !63
  %521 = insertelement <2 x i32> %520, i32 %478, i64 1, !dbg !63
  %522 = bitcast <2 x i32> %521 to <2 x float>, !dbg !63
  %523 = fpext <2 x bfloat> %484 to <2 x float>, !dbg !68
  %524 = fsub <2 x float> %515, %364, !dbg !52
  %525 = fmul <2 x float> %366, %524, !dbg !53
  %526 = fadd <2 x float> %518, %519, !dbg !69
  %527 = fadd <2 x float> %526, splat (float 1.000000e+00), !dbg !70
  %528 = fmul <2 x float> %525, %527, !dbg !71
  %529 = fadd <2 x float> %522, %523, !dbg !72
  %530 = fadd <2 x float> %528, %529, !dbg !73
  %531 = extractelement <2 x float> %530, i64 0, !dbg !78
  %532 = fcmp olt float %441, %531, !dbg !86
  %533 = extractelement <2 x float> %530, i64 1, !dbg !78
  %534 = fcmp olt float %442, %533, !dbg !86
  %535 = or i1 %486, %532, !dbg !87
  %536 = or i1 %487, %534, !dbg !87
  %537 = select i1 %535, float %441, float %531, !dbg !78
  %538 = select i1 %536, float %442, float %533, !dbg !78
  %539 = select i1 %454, float %537, float %441, !dbg !74
  %540 = select i1 %454, float %538, float %442, !dbg !74
  %541 = shufflevector <2 x float> %503, <2 x float> %530, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !80
  %542 = fcmp ogt <4 x float> %444, %541, !dbg !80
  %543 = or <4 x i1> %510, %542, !dbg !89
  %544 = select <4 x i1> %543, <4 x float> %444, <4 x float> %541, !dbg !90
  %545 = select <4 x i1> %512, <4 x float> %544, <4 x float> %444, !dbg !75
  %546 = fptrunc <2 x float> %530 to <2 x bfloat>, !dbg !77
  %547 = bitcast <2 x bfloat> %514 to i32, !dbg !77
  %548 = bitcast <2 x bfloat> %546 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %547, i32 %548, ptr addrspace(1) %513, i1 %454) #5, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %549 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %509, <2 x i32> <i32 0, i32 2>, !dbg !93
  %550 = fcmp olt <2 x float> %549, %509, !dbg !93
  %551 = fcmp uno <2 x float> %549, %509, !dbg !93
  %shift = shufflevector <2 x i1> %550, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !94
  %552 = or <2 x i1> %shift, %551, !dbg !94
  %553 = extractelement <2 x i1> %552, i64 0, !dbg !94
  %554 = extractelement <2 x float> %509, i64 0, !dbg !95
  %555 = extractelement <2 x float> %509, i64 1, !dbg !95
  %556 = select i1 %553, float %554, float %555, !dbg !95
  %557 = fcmp olt float %556, %539, !dbg !93
  %558 = fcmp uno float %556, 0.000000e+00, !dbg !96
  %559 = or i1 %557, %558, !dbg !94
  %560 = select i1 %559, float %556, float %539, !dbg !95
  %561 = fcmp olt float %560, %540, !dbg !93
  %562 = fcmp uno float %560, 0.000000e+00, !dbg !96
  %563 = or i1 %561, %562, !dbg !94
  %564 = select i1 %563, float %560, float %540, !dbg !95
  %565 = bitcast float %564 to i32, !dbg !91
  %566 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %565, i32 16, i32 31), !dbg !91
  %567 = bitcast i32 %566 to float, !dbg !91
  %568 = fcmp olt float %564, %567, !dbg !93
  %569 = fcmp uno float %564, 0.000000e+00, !dbg !96
  %570 = or i1 %569, %568, !dbg !94
  %571 = select i1 %570, float %564, float %567, !dbg !95
  %572 = bitcast float %571 to i32, !dbg !91
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 8, i32 31), !dbg !91
  %574 = bitcast i32 %573 to float, !dbg !91
  %575 = fcmp olt float %571, %574, !dbg !93
  %576 = fcmp uno float %571, 0.000000e+00, !dbg !96
  %577 = or i1 %575, %576, !dbg !94
  %578 = select i1 %577, float %571, float %574, !dbg !95
  %579 = bitcast float %578 to i32, !dbg !91
  %580 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %579, i32 4, i32 31), !dbg !91
  %581 = bitcast i32 %580 to float, !dbg !91
  %582 = fcmp olt float %578, %581, !dbg !93
  %583 = fcmp uno float %578, 0.000000e+00, !dbg !96
  %584 = or i1 %582, %583, !dbg !94
  %585 = select i1 %584, float %578, float %581, !dbg !95
  %586 = bitcast float %585 to i32, !dbg !91
  %587 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %586, i32 2, i32 31), !dbg !91
  %588 = bitcast i32 %587 to float, !dbg !91
  %589 = fcmp olt float %585, %588, !dbg !93
  %590 = fcmp uno float %585, 0.000000e+00, !dbg !96
  %591 = or i1 %589, %590, !dbg !94
  %592 = select i1 %591, float %585, float %588, !dbg !95
  %593 = bitcast float %592 to i32, !dbg !91
  %594 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %593, i32 1, i32 31), !dbg !91
  %595 = bitcast i32 %594 to float, !dbg !91
  %596 = fcmp olt float %592, %595, !dbg !93
  %597 = fcmp uno float %592, 0.000000e+00, !dbg !96
  %598 = or i1 %596, %597, !dbg !94
  %599 = select i1 %598, i32 %593, i32 %594, !dbg !95
  %600 = insertelement <1 x i32> poison, i32 %599, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %600, i1 %247) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %601 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %255, i1 %254) #5, !dbg !91
  %602 = bitcast i32 %601 to float, !dbg !91
  %603 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %601, i32 8, i32 31), !dbg !91
  %604 = bitcast i32 %603 to float, !dbg !91
  %605 = fcmp olt float %602, %604, !dbg !93
  %606 = fcmp uno float %602, 0.000000e+00, !dbg !96
  %607 = or i1 %606, %605, !dbg !94
  %608 = select i1 %607, float %602, float %604, !dbg !95
  %609 = bitcast float %608 to i32, !dbg !91
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 4, i32 31), !dbg !91
  %611 = bitcast i32 %610 to float, !dbg !91
  %612 = fcmp olt float %608, %611, !dbg !93
  %613 = fcmp uno float %608, 0.000000e+00, !dbg !96
  %614 = or i1 %612, %613, !dbg !94
  %615 = select i1 %614, float %608, float %611, !dbg !95
  %616 = bitcast float %615 to i32, !dbg !91
  %617 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %616, i32 2, i32 31), !dbg !91
  %618 = bitcast i32 %617 to float, !dbg !91
  %619 = fcmp olt float %615, %618, !dbg !93
  %620 = fcmp uno float %615, 0.000000e+00, !dbg !96
  %621 = or i1 %619, %620, !dbg !94
  %622 = select i1 %621, float %615, float %618, !dbg !95
  %623 = bitcast float %622 to i32, !dbg !91
  %624 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %623, i32 1, i32 31), !dbg !91
  %625 = bitcast i32 %624 to float, !dbg !91
  %626 = fcmp olt float %622, %625, !dbg !93
  %627 = fcmp uno float %622, 0.000000e+00, !dbg !96
  %628 = or i1 %626, %627, !dbg !94
  %629 = select i1 %628, i32 %623, i32 %624, !dbg !95
  %630 = insertelement <1 x i32> poison, i32 %629, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %630, i1 %347) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %631 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %632 = extractelement <4 x float> %545, i64 0, !dbg !99
  %633 = extractelement <4 x float> %545, i64 1, !dbg !99
  %634 = fcmp ogt float %632, %633, !dbg !99
  %635 = fcmp uno float %632, 0.000000e+00, !dbg !100
  %636 = or i1 %634, %635, !dbg !101
  %637 = select i1 %636, float %632, float %633, !dbg !102
  %638 = extractelement <4 x float> %545, i64 2, !dbg !99
  %639 = fcmp ogt float %637, %638, !dbg !99
  %640 = fcmp uno float %637, 0.000000e+00, !dbg !100
  %641 = or i1 %639, %640, !dbg !101
  %642 = select i1 %641, float %637, float %638, !dbg !102
  %643 = extractelement <4 x float> %545, i64 3, !dbg !99
  %644 = fcmp ogt float %642, %643, !dbg !99
  %645 = fcmp uno float %642, 0.000000e+00, !dbg !100
  %646 = or i1 %644, %645, !dbg !101
  %647 = select i1 %646, float %642, float %643, !dbg !102
  %648 = bitcast float %647 to i32, !dbg !97
  %649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %648, i32 16, i32 31), !dbg !97
  %650 = bitcast i32 %649 to float, !dbg !97
  %651 = fcmp ogt float %647, %650, !dbg !99
  %652 = fcmp uno float %647, 0.000000e+00, !dbg !100
  %653 = or i1 %652, %651, !dbg !101
  %654 = select i1 %653, float %647, float %650, !dbg !102
  %655 = bitcast float %654 to i32, !dbg !97
  %656 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %655, i32 8, i32 31), !dbg !97
  %657 = bitcast i32 %656 to float, !dbg !97
  %658 = fcmp ogt float %654, %657, !dbg !99
  %659 = fcmp uno float %654, 0.000000e+00, !dbg !100
  %660 = or i1 %658, %659, !dbg !101
  %661 = select i1 %660, float %654, float %657, !dbg !102
  %662 = bitcast float %661 to i32, !dbg !97
  %663 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %662, i32 4, i32 31), !dbg !97
  %664 = bitcast i32 %663 to float, !dbg !97
  %665 = fcmp ogt float %661, %664, !dbg !99
  %666 = fcmp uno float %661, 0.000000e+00, !dbg !100
  %667 = or i1 %665, %666, !dbg !101
  %668 = select i1 %667, float %661, float %664, !dbg !102
  %669 = bitcast float %668 to i32, !dbg !97
  %670 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %669, i32 2, i32 31), !dbg !97
  %671 = bitcast i32 %670 to float, !dbg !97
  %672 = fcmp ogt float %668, %671, !dbg !99
  %673 = fcmp uno float %668, 0.000000e+00, !dbg !100
  %674 = or i1 %672, %673, !dbg !101
  %675 = select i1 %674, float %668, float %671, !dbg !102
  %676 = bitcast float %675 to i32, !dbg !97
  %677 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %676, i32 1, i32 31), !dbg !97
  %678 = bitcast i32 %677 to float, !dbg !97
  %679 = fcmp ogt float %675, %678, !dbg !99
  %680 = fcmp uno float %675, 0.000000e+00, !dbg !100
  %681 = or i1 %679, %680, !dbg !101
  %682 = select i1 %681, i32 %676, i32 %677, !dbg !102
  %683 = insertelement <1 x i32> poison, i32 %682, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %683, i1 %247) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %684 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %255, i1 %254) #5, !dbg !97
  %685 = bitcast i32 %684 to float, !dbg !97
  %686 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %684, i32 8, i32 31), !dbg !97
  %687 = bitcast i32 %686 to float, !dbg !97
  %688 = fcmp ogt float %685, %687, !dbg !99
  %689 = fcmp uno float %685, 0.000000e+00, !dbg !100
  %690 = or i1 %689, %688, !dbg !101
  %691 = select i1 %690, float %685, float %687, !dbg !102
  %692 = bitcast float %691 to i32, !dbg !97
  %693 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %692, i32 4, i32 31), !dbg !97
  %694 = bitcast i32 %693 to float, !dbg !97
  %695 = fcmp ogt float %691, %694, !dbg !99
  %696 = fcmp uno float %691, 0.000000e+00, !dbg !100
  %697 = or i1 %695, %696, !dbg !101
  %698 = select i1 %697, float %691, float %694, !dbg !102
  %699 = bitcast float %698 to i32, !dbg !97
  %700 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %699, i32 2, i32 31), !dbg !97
  %701 = bitcast i32 %700 to float, !dbg !97
  %702 = fcmp ogt float %698, %701, !dbg !99
  %703 = fcmp uno float %698, 0.000000e+00, !dbg !100
  %704 = or i1 %702, %703, !dbg !101
  %705 = select i1 %704, float %698, float %701, !dbg !102
  %706 = bitcast float %705 to i32, !dbg !97
  %707 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %706, i32 1, i32 31), !dbg !97
  %708 = bitcast i32 %707 to float, !dbg !97
  %709 = fcmp ogt float %705, %708, !dbg !99
  %710 = fcmp uno float %705, 0.000000e+00, !dbg !100
  %711 = or i1 %709, %710, !dbg !101
  %712 = select i1 %711, i32 %706, i32 %707, !dbg !102
  %713 = insertelement <1 x i32> poison, i32 %712, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %713, i1 %347) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %714 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !97
  %715 = sext i32 %19 to i64, !dbg !103
  %716 = getelementptr bfloat, ptr addrspace(1) %4, i64 %715, !dbg !103
  %717 = fptrunc float %631 to bfloat, !dbg !104
  %718 = and i32 %21, 511, !dbg !104
  %719 = icmp eq i32 %718, 0, !dbg !104
  %720 = bitcast bfloat %717 to i16, !dbg !104
  %721 = and i1 %20, %719, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %720, ptr addrspace(1) %716, i1 %721) #5, !dbg !104
  %722 = getelementptr bfloat, ptr addrspace(1) %5, i64 %715, !dbg !105
  %723 = fptrunc float %714 to bfloat, !dbg !106
  %724 = bitcast bfloat %723 to i16, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %724, ptr addrspace(1) %722, i1 %721) #5, !dbg !106
  %725 = getelementptr bfloat, ptr addrspace(1) %6, i64 %715, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %720, ptr addrspace(1) %725, i1 %721) #5, !dbg !108
  %726 = getelementptr bfloat, ptr addrspace(1) %7, i64 %715, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %724, ptr addrspace(1) %726, i1 %721) #5, !dbg !110
  %727 = getelementptr bfloat, ptr addrspace(1) %8, i64 %715, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %720, ptr addrspace(1) %727, i1 %721) #5, !dbg !112
  %728 = getelementptr bfloat, ptr addrspace(1) %9, i64 %715, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %724, ptr addrspace(1) %728, i1 %721) #5, !dbg !114
  %729 = getelementptr bfloat, ptr addrspace(1) %10, i64 %715, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %720, ptr addrspace(1) %729, i1 %721) #5, !dbg !116
  %730 = getelementptr bfloat, ptr addrspace(1) %11, i64 %715, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %724, ptr addrspace(1) %730, i1 %721) #5, !dbg !118
  %.inv = fcmp oge float %631, 0.000000e+00, !dbg !119
  %731 = select i1 %.inv, float 0.000000e+00, float %631, !dbg !119
  %732 = fsub float 0.000000e+00, %731, !dbg !121
  %.inv3 = fcmp ole float %714, 0.000000e+00, !dbg !122
  %733 = select i1 %.inv3, float 0.000000e+00, float %714, !dbg !122
  %734 = fcmp ogt float %732, %733, !dbg !124
  %735 = fcmp uno float %732, 0.000000e+00, !dbg !126
  %736 = or i1 %735, %734, !dbg !127
  %737 = select i1 %736, float %732, float %733, !dbg !128
  %738 = fmul float %737, 0x3F80204080000000, !dbg !129
  %739 = fcmp ogt float %738, 0x3EE4F8B580000000, !dbg !130
  %740 = fcmp uno float %738, 0.000000e+00, !dbg !132
  %741 = or i1 %739, %740, !dbg !133
  %742 = select i1 %741, float %738, float 0x3EE4F8B580000000, !dbg !134
  %743 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %742), !dbg !135
  %744 = getelementptr bfloat, ptr addrspace(1) %3, i64 %28, !dbg !136
  %745 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %744, i1 %20) #5, !dbg !137
  %746 = extractvalue { i32, i32 } %745, 0, !dbg !137
  %747 = bitcast i32 %746 to <2 x bfloat>, !dbg !137
  %748 = extractvalue { i32, i32 } %745, 1, !dbg !137
  %749 = bitcast i32 %748 to <2 x bfloat>, !dbg !137
  %750 = extractelement <2 x bfloat> %747, i64 0, !dbg !137
  %751 = extractelement <2 x bfloat> %747, i64 1, !dbg !137
  %752 = extractelement <2 x bfloat> %749, i64 0, !dbg !137
  %753 = extractelement <2 x bfloat> %749, i64 1, !dbg !137
  %754 = fpext bfloat %750 to float, !dbg !138
  %755 = fpext bfloat %751 to float, !dbg !138
  %756 = fpext bfloat %752 to float, !dbg !138
  %757 = fpext bfloat %753 to float, !dbg !138
  %758 = fmul float %743, %754, !dbg !139
  %759 = fmul float %743, %755, !dbg !139
  %760 = fmul float %743, %756, !dbg !139
  %761 = fmul float %743, %757, !dbg !139
  %762 = tail call float @llvm.nvvm.round.f(float %758) #5, !dbg !140
  %763 = tail call float @llvm.nvvm.round.f(float %759) #5, !dbg !140
  %764 = tail call float @llvm.nvvm.round.f(float %760) #5, !dbg !140
  %765 = tail call float @llvm.nvvm.round.f(float %761) #5, !dbg !140
  %766 = insertelement <4 x float> poison, float %762, i64 0, !dbg !141
  %767 = insertelement <4 x float> %766, float %763, i64 1, !dbg !141
  %768 = insertelement <4 x float> %767, float %764, i64 2, !dbg !141
  %769 = insertelement <4 x float> %768, float %765, i64 3, !dbg !141
  %770 = fcmp ogt <4 x float> %769, splat (float -1.270000e+02), !dbg !141
  %771 = fcmp uno <4 x float> %769, zeroinitializer, !dbg !143
  %772 = or <4 x i1> %770, %771, !dbg !144
  %773 = select <4 x i1> %772, <4 x float> %769, <4 x float> splat (float -1.270000e+02), !dbg !145
  %774 = fcmp olt <4 x float> %773, splat (float 1.270000e+02), !dbg !146
  %775 = fcmp uno <4 x float> %773, zeroinitializer, !dbg !148
  %776 = or <4 x i1> %774, %775, !dbg !149
  %777 = fptosi <4 x float> %773 to <4 x i8>, !dbg !150
  %778 = select <4 x i1> %776, <4 x i8> %777, <4 x i8> splat (i8 127), !dbg !151
  %779 = getelementptr i8, ptr addrspace(1) %12, i64 %28, !dbg !152
  %780 = bitcast <4 x i8> %778 to i32, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %780, ptr addrspace(1) %779, i1 %20) #5, !dbg !153
  %781 = getelementptr i8, ptr addrspace(1) %13, i64 %28, !dbg !154
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %780, ptr addrspace(1) %781, i1 %20) #5, !dbg !155
  %782 = getelementptr i8, ptr addrspace(1) %14, i64 %28, !dbg !156
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %780, ptr addrspace(1) %782, i1 %20) #5, !dbg !157
  %783 = getelementptr i8, ptr addrspace(1) %15, i64 %28, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %780, ptr addrspace(1) %783, i1 %20) #5, !dbg !159
  %784 = getelementptr bfloat, ptr addrspace(1) %3, i64 %52, !dbg !136
  %785 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %784, i1 %54) #5, !dbg !137
  %786 = extractvalue { i32, i32 } %785, 0, !dbg !137
  %787 = bitcast i32 %786 to <2 x bfloat>, !dbg !137
  %788 = extractvalue { i32, i32 } %785, 1, !dbg !137
  %789 = bitcast i32 %788 to <2 x bfloat>, !dbg !137
  %790 = extractelement <2 x bfloat> %787, i64 0, !dbg !137
  %791 = extractelement <2 x bfloat> %787, i64 1, !dbg !137
  %792 = extractelement <2 x bfloat> %789, i64 0, !dbg !137
  %793 = extractelement <2 x bfloat> %789, i64 1, !dbg !137
  %794 = fpext bfloat %790 to float, !dbg !138
  %795 = fpext bfloat %791 to float, !dbg !138
  %796 = fpext bfloat %792 to float, !dbg !138
  %797 = fpext bfloat %793 to float, !dbg !138
  %798 = fmul float %743, %794, !dbg !139
  %799 = fmul float %743, %795, !dbg !139
  %800 = fmul float %743, %796, !dbg !139
  %801 = fmul float %743, %797, !dbg !139
  %802 = tail call float @llvm.nvvm.round.f(float %798) #5, !dbg !140
  %803 = tail call float @llvm.nvvm.round.f(float %799) #5, !dbg !140
  %804 = tail call float @llvm.nvvm.round.f(float %800) #5, !dbg !140
  %805 = tail call float @llvm.nvvm.round.f(float %801) #5, !dbg !140
  %806 = insertelement <4 x float> poison, float %802, i64 0, !dbg !141
  %807 = insertelement <4 x float> %806, float %803, i64 1, !dbg !141
  %808 = insertelement <4 x float> %807, float %804, i64 2, !dbg !141
  %809 = insertelement <4 x float> %808, float %805, i64 3, !dbg !141
  %810 = fcmp ogt <4 x float> %809, splat (float -1.270000e+02), !dbg !141
  %811 = fcmp uno <4 x float> %809, zeroinitializer, !dbg !143
  %812 = or <4 x i1> %810, %811, !dbg !144
  %813 = select <4 x i1> %812, <4 x float> %809, <4 x float> splat (float -1.270000e+02), !dbg !145
  %814 = fcmp olt <4 x float> %813, splat (float 1.270000e+02), !dbg !146
  %815 = fcmp uno <4 x float> %813, zeroinitializer, !dbg !148
  %816 = or <4 x i1> %814, %815, !dbg !149
  %817 = fptosi <4 x float> %813 to <4 x i8>, !dbg !150
  %818 = select <4 x i1> %816, <4 x i8> %817, <4 x i8> splat (i8 127), !dbg !151
  %819 = getelementptr i8, ptr addrspace(1) %12, i64 %52, !dbg !152
  %820 = bitcast <4 x i8> %818 to i32, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %820, ptr addrspace(1) %819, i1 %54) #5, !dbg !153
  %821 = getelementptr i8, ptr addrspace(1) %13, i64 %52, !dbg !154
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %820, ptr addrspace(1) %821, i1 %54) #5, !dbg !155
  %822 = getelementptr i8, ptr addrspace(1) %14, i64 %52, !dbg !156
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %820, ptr addrspace(1) %822, i1 %54) #5, !dbg !157
  %823 = getelementptr i8, ptr addrspace(1) %15, i64 %52, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %820, ptr addrspace(1) %823, i1 %54) #5, !dbg !159
  ret void, !dbg !160
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 32, column: 40, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 51, scope: !6)
!17 = !DILocation(line: 38, column: 112, scope: !6)
!18 = !DILocation(line: 44, column: 62, scope: !6)
!19 = !DILocation(line: 46, column: 66, scope: !6)
!20 = !DILocation(line: 33, column: 31, scope: !6)
!21 = !DILocation(line: 34, column: 29, scope: !6)
!22 = !DILocation(line: 38, column: 61, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = !DILocation(line: 217, column: 21, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!36 = !DILocation(line: 47, column: 79, scope: !6)
!37 = !DILocation(line: 218, column: 28, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 219, column: 39, scope: !35, inlinedAt: !36)
!39 = !DILocation(line: 219, column: 60, scope: !35, inlinedAt: !36)
!40 = !DILocation(line: 219, column: 49, scope: !35, inlinedAt: !36)
!41 = !DILocation(line: 221, column: 25, scope: !35, inlinedAt: !36)
!42 = !DILocation(line: 221, column: 17, scope: !35, inlinedAt: !36)
!43 = !DILocation(line: 222, column: 15, scope: !35, inlinedAt: !36)
!44 = !DILocation(line: 222, column: 30, scope: !35, inlinedAt: !36)
!45 = !DILocation(line: 222, column: 38, scope: !35, inlinedAt: !36)
!46 = !DILocation(line: 222, column: 49, scope: !35, inlinedAt: !36)
!47 = !DILocation(line: 222, column: 22, scope: !35, inlinedAt: !36)
!48 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !36)
!49 = !DILocation(line: 67, column: 24, scope: !6)
!50 = !DILocation(line: 69, column: 24, scope: !6)
!51 = !DILocation(line: 70, column: 32, scope: !6)
!52 = !DILocation(line: 65, column: 24, scope: !6)
!53 = !DILocation(line: 71, column: 24, scope: !6)
!54 = !DILocation(line: 59, column: 41, scope: !6)
!55 = !DILocation(line: 59, column: 34, scope: !6)
!56 = !DILocation(line: 59, column: 51, scope: !6)
!57 = !DILocation(line: 60, column: 42, scope: !6)
!58 = !DILocation(line: 60, column: 35, scope: !6)
!59 = !DILocation(line: 60, column: 49, scope: !6)
!60 = !DILocation(line: 61, column: 35, scope: !6)
!61 = !DILocation(line: 61, column: 49, scope: !6)
!62 = !DILocation(line: 62, column: 35, scope: !6)
!63 = !DILocation(line: 62, column: 42, scope: !6)
!64 = !DILocation(line: 63, column: 35, scope: !6)
!65 = !DILocation(line: 63, column: 42, scope: !6)
!66 = !DILocation(line: 59, column: 113, scope: !6)
!67 = !DILocation(line: 61, column: 102, scope: !6)
!68 = !DILocation(line: 63, column: 95, scope: !6)
!69 = !DILocation(line: 74, column: 24, scope: !6)
!70 = !DILocation(line: 76, column: 24, scope: !6)
!71 = !DILocation(line: 77, column: 24, scope: !6)
!72 = !DILocation(line: 79, column: 24, scope: !6)
!73 = !DILocation(line: 80, column: 24, scope: !6)
!74 = !DILocation(line: 83, column: 50, scope: !6)
!75 = !DILocation(line: 85, column: 50, scope: !6)
!76 = !DILocation(line: 86, column: 29, scope: !6)
!77 = !DILocation(line: 86, column: 53, scope: !6)
!78 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !79)
!79 = !DILocation(line: 82, column: 47, scope: !6)
!80 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !81)
!81 = !DILocation(line: 84, column: 47, scope: !6)
!82 = !DILocation(line: 54, column: 31, scope: !6)
!83 = !DILocation(line: 55, column: 29, scope: !6)
!84 = !DILocation(line: 59, column: 61, scope: !6)
!85 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !79)
!86 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !79)
!87 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !79)
!88 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !81)
!89 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !81)
!90 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !81)
!91 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !92)
!92 = !DILocation(line: 87, column: 40, scope: !6)
!93 = !DILocation(line: 94, column: 15, scope: !35, inlinedAt: !92)
!94 = !DILocation(line: 96, column: 16, scope: !35, inlinedAt: !92)
!95 = !DILocation(line: 97, column: 29, scope: !35, inlinedAt: !92)
!96 = !DILocation(line: 96, column: 21, scope: !35, inlinedAt: !92)
!97 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !98)
!98 = !DILocation(line: 88, column: 40, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !35, inlinedAt: !98)
!100 = !DILocation(line: 104, column: 21, scope: !35, inlinedAt: !98)
!101 = !DILocation(line: 104, column: 16, scope: !35, inlinedAt: !98)
!102 = !DILocation(line: 105, column: 29, scope: !35, inlinedAt: !98)
!103 = !DILocation(line: 89, column: 25, scope: !6)
!104 = !DILocation(line: 89, column: 37, scope: !6)
!105 = !DILocation(line: 90, column: 25, scope: !6)
!106 = !DILocation(line: 90, column: 37, scope: !6)
!107 = !DILocation(line: 91, column: 25, scope: !6)
!108 = !DILocation(line: 91, column: 37, scope: !6)
!109 = !DILocation(line: 92, column: 25, scope: !6)
!110 = !DILocation(line: 92, column: 37, scope: !6)
!111 = !DILocation(line: 93, column: 25, scope: !6)
!112 = !DILocation(line: 93, column: 37, scope: !6)
!113 = !DILocation(line: 94, column: 25, scope: !6)
!114 = !DILocation(line: 94, column: 37, scope: !6)
!115 = !DILocation(line: 95, column: 25, scope: !6)
!116 = !DILocation(line: 95, column: 37, scope: !6)
!117 = !DILocation(line: 96, column: 26, scope: !6)
!118 = !DILocation(line: 96, column: 38, scope: !6)
!119 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !120)
!120 = !DILocation(line: 105, column: 46, scope: !6)
!121 = !DILocation(line: 106, column: 17, scope: !6)
!122 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !123)
!123 = !DILocation(line: 107, column: 46, scope: !6)
!124 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !125)
!125 = !DILocation(line: 108, column: 46, scope: !6)
!126 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !125)
!127 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !125)
!128 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !125)
!129 = !DILocation(line: 110, column: 24, scope: !6)
!130 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !131)
!131 = !DILocation(line: 113, column: 46, scope: !6)
!132 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !131)
!133 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !131)
!134 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !131)
!135 = !DILocation(line: 116, column: 25, scope: !6)
!136 = !DILocation(line: 103, column: 36, scope: !6)
!137 = !DILocation(line: 103, column: 53, scope: !6)
!138 = !DILocation(line: 103, column: 115, scope: !6)
!139 = !DILocation(line: 119, column: 24, scope: !6)
!140 = !DILocation(line: 120, column: 36, scope: !6)
!141 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !142)
!142 = !DILocation(line: 123, column: 46, scope: !6)
!143 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !142)
!144 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !142)
!145 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !142)
!146 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !147)
!147 = !DILocation(line: 125, column: 46, scope: !6)
!148 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !147)
!149 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !147)
!150 = !DILocation(line: 127, column: 25, scope: !6)
!151 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !147)
!152 = !DILocation(line: 128, column: 30, scope: !6)
!153 = !DILocation(line: 128, column: 54, scope: !6)
!154 = !DILocation(line: 129, column: 30, scope: !6)
!155 = !DILocation(line: 129, column: 54, scope: !6)
!156 = !DILocation(line: 130, column: 30, scope: !6)
!157 = !DILocation(line: 130, column: 54, scope: !6)
!158 = !DILocation(line: 131, column: 30, scope: !6)
!159 = !DILocation(line: 131, column: 54, scope: !6)
!160 = !DILocation(line: 97, column: 4, scope: !6)
