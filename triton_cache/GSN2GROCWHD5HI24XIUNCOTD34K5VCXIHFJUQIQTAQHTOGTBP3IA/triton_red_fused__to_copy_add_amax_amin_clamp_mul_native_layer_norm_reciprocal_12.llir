; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 512, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = lshr i32 %18, 5, !dbg !11
  %21 = shl i32 %18, 4, !dbg !11
  %22 = and i32 %21, 4080, !dbg !11
  %23 = or disjoint i32 %22, 8, !dbg !11
  %24 = shl i32 %18, 3, !dbg !11
  %25 = and i32 %24, 2040, !dbg !11
  %26 = or disjoint i32 %25, 2048, !dbg !11
  %27 = sext i32 %16 to i64, !dbg !12
  %28 = getelementptr bfloat, ptr addrspace(1) %4, i64 %27, !dbg !12
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %17) #5, !dbg !13
  %45 = bitcast i16 %44 to bfloat, !dbg !13
  %46 = getelementptr bfloat, ptr addrspace(1) %5, i64 %27, !dbg !14
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %17) #5, !dbg !15
  %63 = bitcast i16 %62 to bfloat, !dbg !15
  %64 = icmp samesign ult i32 %22, 3072, !dbg !16
  %65 = icmp samesign ult i32 %26, 3072, !dbg !16
  %66 = mul i32 %16, 3072, !dbg !17
  %67 = add i32 %22, %66, !dbg !18
  %68 = or disjoint i32 %66, 4, !dbg !11
  %69 = add i32 %68, %22, !dbg !18
  %70 = add i32 %23, %66, !dbg !18
  %71 = or disjoint i32 %66, 12, !dbg !11
  %72 = add i32 %71, %22, !dbg !18
  %73 = add i32 %25, %66, !dbg !18
  %74 = add i32 %26, %66, !dbg !18
  %75 = sext i32 %67 to i64, !dbg !19
  %76 = getelementptr bfloat, ptr addrspace(1) %0, i64 %75, !dbg !19
  %77 = sext i32 %70 to i64, !dbg !19
  %78 = getelementptr bfloat, ptr addrspace(1) %0, i64 %77, !dbg !19
  %79 = and i1 %17, %64, !dbg !20
  %80 = and i1 %17, %65, !dbg !20
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %76, i1 %79) #5, !dbg !21
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !21
  %83 = bitcast i32 %82 to <2 x bfloat>, !dbg !21
  %84 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !21
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !21
  %86 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !21
  %87 = bitcast i32 %86 to <2 x bfloat>, !dbg !21
  %88 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !21
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !21
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %78, i1 %79) #5, !dbg !21
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !21
  %92 = bitcast i32 %91 to <2 x bfloat>, !dbg !21
  %93 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !21
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !21
  %95 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !21
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !21
  %97 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !21
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !21
  %99 = add nuw nsw i32 %22, 6144, !dbg !22
  %100 = add nuw nsw i32 %22, 6152, !dbg !22
  %101 = zext nneg i32 %99 to i64, !dbg !23
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !23
  %103 = zext nneg i32 %22 to i64, !dbg !23
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !23
  %105 = getelementptr i8, ptr addrspace(1) %104, i64 24592, !dbg !23
  %106 = zext nneg i32 %100 to i64, !dbg !23
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !23
  %108 = getelementptr i8, ptr addrspace(1) %104, i64 24624, !dbg !23
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %102, i1 %64) #5, !dbg !24
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !24
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !24
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !24
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !24
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %105, i1 %64) #5, !dbg !24
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !24
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !24
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !24
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %107, i1 %64) #5, !dbg !24
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !24
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !24
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !24
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !24
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %108, i1 %64) #5, !dbg !24
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !24
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !24
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !24
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !24
  %129 = getelementptr bfloat, ptr addrspace(1) %2, i64 %101, !dbg !25
  %130 = getelementptr bfloat, ptr addrspace(1) %2, i64 %106, !dbg !25
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %129, i1 %64) #5, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !26
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !26
  %134 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !26
  %135 = bitcast i32 %134 to <2 x bfloat>, !dbg !26
  %136 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !26
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !26
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !26
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %130, i1 %64) #5, !dbg !26
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !26
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !26
  %143 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !26
  %144 = bitcast i32 %143 to <2 x bfloat>, !dbg !26
  %145 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !26
  %146 = bitcast i32 %145 to <2 x bfloat>, !dbg !26
  %147 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !26
  %148 = bitcast i32 %147 to <2 x bfloat>, !dbg !26
  %149 = getelementptr i32, ptr addrspace(1) %3, i64 %75, !dbg !27
  %150 = sext i32 %69 to i64, !dbg !27
  %151 = getelementptr i32, ptr addrspace(1) %3, i64 %150, !dbg !27
  %152 = getelementptr i32, ptr addrspace(1) %3, i64 %77, !dbg !27
  %153 = sext i32 %72 to i64, !dbg !27
  %154 = getelementptr i32, ptr addrspace(1) %3, i64 %153, !dbg !27
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %149, i1 %79) #5, !dbg !28
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !28
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !28
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !28
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !28
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 %79) #5, !dbg !28
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !28
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !28
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !28
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !28
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %152, i1 %79) #5, !dbg !28
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !28
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !28
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !28
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !28
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 %79) #5, !dbg !28
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !28
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !28
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !28
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !28
  %175 = getelementptr bfloat, ptr addrspace(1) %6, i64 %103, !dbg !29
  %176 = zext nneg i32 %23 to i64, !dbg !29
  %177 = getelementptr bfloat, ptr addrspace(1) %6, i64 %176, !dbg !29
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %175, i1 %64) #5, !dbg !30
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !30
  %180 = bitcast i32 %179 to <2 x bfloat>, !dbg !30
  %181 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !30
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !30
  %183 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !30
  %184 = bitcast i32 %183 to <2 x bfloat>, !dbg !30
  %185 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !30
  %186 = bitcast i32 %185 to <2 x bfloat>, !dbg !30
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %177, i1 %64) #5, !dbg !30
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !30
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !30
  %190 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !30
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !30
  %192 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !30
  %193 = bitcast i32 %192 to <2 x bfloat>, !dbg !30
  %194 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !30
  %195 = bitcast i32 %194 to <2 x bfloat>, !dbg !30
  %196 = getelementptr bfloat, ptr addrspace(1) %7, i64 %103, !dbg !31
  %197 = getelementptr bfloat, ptr addrspace(1) %7, i64 %176, !dbg !31
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %196, i1 %64) #5, !dbg !32
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !32
  %200 = bitcast i32 %199 to <2 x bfloat>, !dbg !32
  %201 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !32
  %202 = bitcast i32 %201 to <2 x bfloat>, !dbg !32
  %203 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !32
  %204 = bitcast i32 %203 to <2 x bfloat>, !dbg !32
  %205 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !32
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !32
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %197, i1 %64) #5, !dbg !32
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !32
  %209 = bitcast i32 %208 to <2 x bfloat>, !dbg !32
  %210 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !32
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !32
  %212 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !32
  %213 = bitcast i32 %212 to <2 x bfloat>, !dbg !32
  %214 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !32
  %215 = bitcast i32 %214 to <2 x bfloat>, !dbg !32
  %.inv = fcmp oge bfloat %45, 0xR0000, !dbg !33
  %216 = select i1 %.inv, bfloat 0xR0000, bfloat %45, !dbg !33
  %217 = fpext bfloat %216 to float, !dbg !33
  %218 = fsub float 0.000000e+00, %217, !dbg !37
  %.inv1 = fcmp ole bfloat %63, 0xR0000, !dbg !38
  %219 = select i1 %.inv1, bfloat 0xR0000, bfloat %63, !dbg !38
  %220 = fpext bfloat %219 to float, !dbg !38
  %221 = fcmp ogt float %218, %220, !dbg !40
  %222 = fcmp uno float %218, 0.000000e+00, !dbg !42
  %223 = or i1 %222, %221, !dbg !43
  %224 = select i1 %223, float %218, float %220, !dbg !44
  %225 = fmul float %224, 0x3F80204080000000, !dbg !45
  %226 = fcmp ogt float %225, 0x3EE4F8B580000000, !dbg !46
  %227 = fcmp uno float %225, 0.000000e+00, !dbg !48
  %228 = or i1 %226, %227, !dbg !49
  %229 = select i1 %228, float %225, float 0x3EE4F8B580000000, !dbg !50
  %230 = select i1 %79, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %231 = sext i32 %73 to i64, !dbg !52
  %232 = getelementptr bfloat, ptr addrspace(1) %8, i64 %231, !dbg !52
  %233 = sext i32 %74 to i64, !dbg !52
  %234 = getelementptr bfloat, ptr addrspace(1) %8, i64 %233, !dbg !52
  %235 = getelementptr bfloat, ptr addrspace(1) %8, i64 %75, !dbg !52
  %236 = getelementptr bfloat, ptr addrspace(1) %8, i64 %77, !dbg !52
  %237 = fpext <2 x bfloat> %83 to <2 x float>, !dbg !53
  %238 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !24
  %239 = insertelement <2 x i32> %238, i32 %111, i64 1, !dbg !24
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !24
  %241 = fpext <2 x bfloat> %133 to <2 x float>, !dbg !54
  %242 = fpext <2 x bfloat> %180 to <2 x float>, !dbg !55
  %243 = fpext <2 x bfloat> %200 to <2 x float>, !dbg !56
  %244 = fadd <2 x float> %240, %241, !dbg !57
  %245 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !58
  %246 = insertelement <2 x i32> %245, i32 %157, i64 1, !dbg !58
  %247 = sitofp <2 x i32> %246 to <2 x float>, !dbg !58
  %248 = insertelement <2 x float> poison, float %229, i64 0, !dbg !59
  %249 = shufflevector <2 x float> %248, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %250 = fmul <2 x float> %249, %247, !dbg !59
  %251 = fmul <2 x float> %250, %242, !dbg !60
  %252 = fadd <2 x float> %251, %243, !dbg !61
  %253 = fmul <2 x float> %244, %252, !dbg !62
  %254 = fadd <2 x float> %253, %237, !dbg !63
  %255 = extractelement <2 x float> %254, i64 0, !dbg !64
  %256 = select i1 %79, float %255, float 0.000000e+00, !dbg !64
  %257 = extractelement <2 x float> %254, i64 1, !dbg !64
  %258 = select i1 %79, float %257, float 0.000000e+00, !dbg !64
  %259 = fptrunc <2 x float> %254 to <2 x bfloat>, !dbg !65
  %260 = fpext <2 x bfloat> %85 to <2 x float>, !dbg !53
  %261 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !24
  %262 = insertelement <2 x i32> %261, i32 %113, i64 1, !dbg !24
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !24
  %264 = fpext <2 x bfloat> %135 to <2 x float>, !dbg !54
  %265 = fpext <2 x bfloat> %182 to <2 x float>, !dbg !55
  %266 = fpext <2 x bfloat> %202 to <2 x float>, !dbg !56
  %267 = fadd <2 x float> %263, %264, !dbg !57
  %268 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !58
  %269 = insertelement <2 x i32> %268, i32 %159, i64 1, !dbg !58
  %270 = sitofp <2 x i32> %269 to <2 x float>, !dbg !58
  %271 = fmul <2 x float> %249, %270, !dbg !59
  %272 = fmul <2 x float> %271, %265, !dbg !60
  %273 = fadd <2 x float> %272, %266, !dbg !61
  %274 = fmul <2 x float> %267, %273, !dbg !62
  %275 = fadd <2 x float> %274, %260, !dbg !63
  %276 = extractelement <2 x float> %275, i64 0, !dbg !64
  %277 = select i1 %79, float %276, float 0.000000e+00, !dbg !64
  %278 = extractelement <2 x float> %275, i64 1, !dbg !64
  %279 = select i1 %79, float %278, float 0.000000e+00, !dbg !64
  %280 = fptrunc <2 x float> %275 to <2 x bfloat>, !dbg !65
  %281 = fpext <2 x bfloat> %87 to <2 x float>, !dbg !53
  %282 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !24
  %283 = insertelement <2 x i32> %282, i32 %116, i64 1, !dbg !24
  %284 = bitcast <2 x i32> %283 to <2 x float>, !dbg !24
  %285 = fpext <2 x bfloat> %137 to <2 x float>, !dbg !54
  %286 = fpext <2 x bfloat> %184 to <2 x float>, !dbg !55
  %287 = fpext <2 x bfloat> %204 to <2 x float>, !dbg !56
  %288 = fadd <2 x float> %284, %285, !dbg !57
  %289 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !58
  %290 = insertelement <2 x i32> %289, i32 %162, i64 1, !dbg !58
  %291 = sitofp <2 x i32> %290 to <2 x float>, !dbg !58
  %292 = fmul <2 x float> %249, %291, !dbg !59
  %293 = fmul <2 x float> %292, %286, !dbg !60
  %294 = fadd <2 x float> %293, %287, !dbg !61
  %295 = fmul <2 x float> %288, %294, !dbg !62
  %296 = fadd <2 x float> %295, %281, !dbg !63
  %297 = extractelement <2 x float> %296, i64 0, !dbg !64
  %298 = select i1 %79, float %297, float 0.000000e+00, !dbg !64
  %299 = extractelement <2 x float> %296, i64 1, !dbg !64
  %300 = select i1 %79, float %299, float 0.000000e+00, !dbg !64
  %301 = fptrunc <2 x float> %296 to <2 x bfloat>, !dbg !65
  %302 = fpext <2 x bfloat> %89 to <2 x float>, !dbg !53
  %303 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !24
  %304 = insertelement <2 x i32> %303, i32 %118, i64 1, !dbg !24
  %305 = bitcast <2 x i32> %304 to <2 x float>, !dbg !24
  %306 = fpext <2 x bfloat> %139 to <2 x float>, !dbg !54
  %307 = fpext <2 x bfloat> %186 to <2 x float>, !dbg !55
  %308 = fpext <2 x bfloat> %206 to <2 x float>, !dbg !56
  %309 = fadd <2 x float> %305, %306, !dbg !57
  %310 = insertelement <2 x i32> poison, i32 %163, i64 0, !dbg !58
  %311 = insertelement <2 x i32> %310, i32 %164, i64 1, !dbg !58
  %312 = sitofp <2 x i32> %311 to <2 x float>, !dbg !58
  %313 = fmul <2 x float> %249, %312, !dbg !59
  %314 = fmul <2 x float> %313, %307, !dbg !60
  %315 = fadd <2 x float> %314, %308, !dbg !61
  %316 = fmul <2 x float> %309, %315, !dbg !62
  %317 = fadd <2 x float> %316, %302, !dbg !63
  %318 = extractelement <2 x float> %317, i64 0, !dbg !64
  %319 = select i1 %79, float %318, float 0.000000e+00, !dbg !64
  %320 = extractelement <2 x float> %317, i64 1, !dbg !64
  %321 = select i1 %79, float %320, float 0.000000e+00, !dbg !64
  %322 = fptrunc <2 x float> %317 to <2 x bfloat>, !dbg !65
  %323 = fpext <2 x bfloat> %92 to <2 x float>, !dbg !53
  %324 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !24
  %325 = insertelement <2 x i32> %324, i32 %121, i64 1, !dbg !24
  %326 = bitcast <2 x i32> %325 to <2 x float>, !dbg !24
  %327 = fpext <2 x bfloat> %142 to <2 x float>, !dbg !54
  %328 = fpext <2 x bfloat> %189 to <2 x float>, !dbg !55
  %329 = fpext <2 x bfloat> %209 to <2 x float>, !dbg !56
  %330 = fadd <2 x float> %326, %327, !dbg !57
  %331 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !58
  %332 = insertelement <2 x i32> %331, i32 %167, i64 1, !dbg !58
  %333 = sitofp <2 x i32> %332 to <2 x float>, !dbg !58
  %334 = fmul <2 x float> %249, %333, !dbg !59
  %335 = fmul <2 x float> %334, %328, !dbg !60
  %336 = fadd <2 x float> %335, %329, !dbg !61
  %337 = fmul <2 x float> %330, %336, !dbg !62
  %338 = fadd <2 x float> %337, %323, !dbg !63
  %339 = extractelement <2 x float> %338, i64 0, !dbg !64
  %340 = select i1 %79, float %339, float 0.000000e+00, !dbg !64
  %341 = extractelement <2 x float> %338, i64 1, !dbg !64
  %342 = select i1 %79, float %341, float 0.000000e+00, !dbg !64
  %343 = fptrunc <2 x float> %338 to <2 x bfloat>, !dbg !65
  %344 = fpext <2 x bfloat> %94 to <2 x float>, !dbg !53
  %345 = insertelement <2 x i32> poison, i32 %122, i64 0, !dbg !24
  %346 = insertelement <2 x i32> %345, i32 %123, i64 1, !dbg !24
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !24
  %348 = fpext <2 x bfloat> %144 to <2 x float>, !dbg !54
  %349 = fpext <2 x bfloat> %191 to <2 x float>, !dbg !55
  %350 = fpext <2 x bfloat> %211 to <2 x float>, !dbg !56
  %351 = fadd <2 x float> %347, %348, !dbg !57
  %352 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !58
  %353 = insertelement <2 x i32> %352, i32 %169, i64 1, !dbg !58
  %354 = sitofp <2 x i32> %353 to <2 x float>, !dbg !58
  %355 = fmul <2 x float> %249, %354, !dbg !59
  %356 = fmul <2 x float> %355, %349, !dbg !60
  %357 = fadd <2 x float> %356, %350, !dbg !61
  %358 = fmul <2 x float> %351, %357, !dbg !62
  %359 = fadd <2 x float> %358, %344, !dbg !63
  %360 = extractelement <2 x float> %359, i64 0, !dbg !64
  %361 = select i1 %79, float %360, float 0.000000e+00, !dbg !64
  %362 = extractelement <2 x float> %359, i64 1, !dbg !64
  %363 = select i1 %79, float %362, float 0.000000e+00, !dbg !64
  %364 = fptrunc <2 x float> %359 to <2 x bfloat>, !dbg !65
  %365 = fpext <2 x bfloat> %96 to <2 x float>, !dbg !53
  %366 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !24
  %367 = insertelement <2 x i32> %366, i32 %126, i64 1, !dbg !24
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !24
  %369 = fpext <2 x bfloat> %146 to <2 x float>, !dbg !54
  %370 = fpext <2 x bfloat> %193 to <2 x float>, !dbg !55
  %371 = fpext <2 x bfloat> %213 to <2 x float>, !dbg !56
  %372 = fadd <2 x float> %368, %369, !dbg !57
  %373 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !58
  %374 = insertelement <2 x i32> %373, i32 %172, i64 1, !dbg !58
  %375 = sitofp <2 x i32> %374 to <2 x float>, !dbg !58
  %376 = fmul <2 x float> %249, %375, !dbg !59
  %377 = fmul <2 x float> %376, %370, !dbg !60
  %378 = fadd <2 x float> %377, %371, !dbg !61
  %379 = fmul <2 x float> %372, %378, !dbg !62
  %380 = fadd <2 x float> %379, %365, !dbg !63
  %381 = extractelement <2 x float> %380, i64 0, !dbg !64
  %382 = select i1 %79, float %381, float 0.000000e+00, !dbg !64
  %383 = extractelement <2 x float> %380, i64 1, !dbg !64
  %384 = select i1 %79, float %383, float 0.000000e+00, !dbg !64
  %385 = fptrunc <2 x float> %380 to <2 x bfloat>, !dbg !65
  %386 = fpext <2 x bfloat> %98 to <2 x float>, !dbg !53
  %387 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !24
  %388 = insertelement <2 x i32> %387, i32 %128, i64 1, !dbg !24
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !24
  %390 = fpext <2 x bfloat> %148 to <2 x float>, !dbg !54
  %391 = fpext <2 x bfloat> %195 to <2 x float>, !dbg !55
  %392 = fpext <2 x bfloat> %215 to <2 x float>, !dbg !56
  %393 = fadd <2 x float> %389, %390, !dbg !57
  %394 = insertelement <2 x i32> poison, i32 %173, i64 0, !dbg !58
  %395 = insertelement <2 x i32> %394, i32 %174, i64 1, !dbg !58
  %396 = sitofp <2 x i32> %395 to <2 x float>, !dbg !58
  %397 = fmul <2 x float> %249, %396, !dbg !59
  %398 = fmul <2 x float> %397, %391, !dbg !60
  %399 = fadd <2 x float> %398, %392, !dbg !61
  %400 = fmul <2 x float> %393, %399, !dbg !62
  %401 = fadd <2 x float> %400, %386, !dbg !63
  %402 = extractelement <2 x float> %401, i64 0, !dbg !64
  %403 = select i1 %79, float %402, float 0.000000e+00, !dbg !64
  %404 = extractelement <2 x float> %401, i64 1, !dbg !64
  %405 = select i1 %79, float %404, float 0.000000e+00, !dbg !64
  %406 = fptrunc <2 x float> %401 to <2 x bfloat>, !dbg !65
  %407 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %22, !dbg !65
  %408 = bitcast <2 x bfloat> %259 to i32, !dbg !65
  %409 = bitcast <2 x bfloat> %280 to i32, !dbg !65
  %410 = bitcast <2 x bfloat> %301 to i32, !dbg !65
  %411 = bitcast <2 x bfloat> %322 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %407, i32 %408, i32 %409, i32 %410, i32 %411, i1 true) #5, !dbg !65
  %412 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %23, !dbg !65
  %413 = bitcast <2 x bfloat> %343 to i32, !dbg !65
  %414 = bitcast <2 x bfloat> %364 to i32, !dbg !65
  %415 = bitcast <2 x bfloat> %385 to i32, !dbg !65
  %416 = bitcast <2 x bfloat> %406 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %412, i32 %413, i32 %414, i32 %415, i32 %416, i1 true) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %417 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %25, !dbg !65
  %418 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26, !dbg !65
  %419 = load <4 x i32>, ptr addrspace(3) %418, align 16, !dbg !65
  %.extract = load i32, ptr addrspace(3) %417, align 16, !dbg !65
  %420 = getelementptr inbounds nuw i8, ptr addrspace(3) %417, i32 4, !dbg !65
  %.extract96 = load i32, ptr addrspace(3) %420, align 4, !dbg !65
  %421 = getelementptr inbounds nuw i8, ptr addrspace(3) %417, i32 8, !dbg !65
  %.extract98 = load i32, ptr addrspace(3) %421, align 8, !dbg !65
  %422 = getelementptr inbounds nuw i8, ptr addrspace(3) %417, i32 12, !dbg !65
  %.extract100 = load i32, ptr addrspace(3) %422, align 4, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract96, i32 %.extract98, i32 %.extract100, ptr addrspace(1) %232, i1 %17) #5, !dbg !65
  %.extract102 = extractelement <4 x i32> %419, i64 0, !dbg !65
  %.extract104 = extractelement <4 x i32> %419, i64 1, !dbg !65
  %.extract106 = extractelement <4 x i32> %419, i64 2, !dbg !65
  %.extract108 = extractelement <4 x i32> %419, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract102, i32 %.extract104, i32 %.extract106, i32 %.extract108, ptr addrspace(1) %234, i1 %80) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %423 = fsub float %258, %256, !dbg !68
  %424 = select i1 %79, float 2.000000e+00, float 0.000000e+00, !dbg !70
  %425 = fcmp oeq float %424, 0.000000e+00, !dbg !71
  %426 = tail call float @llvm.nvvm.div.full(float %230, float %424), !dbg !72
  %427 = select i1 %425, float 0.000000e+00, float %426, !dbg !73
  %428 = fmul float %423, %427, !dbg !74
  %429 = fadd float %256, %428, !dbg !75
  %430 = fmul float %423, %423, !dbg !76
  %431 = fmul float %230, %430, !dbg !77
  %432 = fmul float %431, %427, !dbg !78
  %433 = fadd float %432, 0.000000e+00, !dbg !79
  %434 = fsub float %277, %429, !dbg !68
  %435 = select i1 %79, float 3.000000e+00, float 0.000000e+00, !dbg !70
  %436 = fcmp oeq float %435, 0.000000e+00, !dbg !71
  %437 = tail call float @llvm.nvvm.div.full(float %230, float %435), !dbg !72
  %438 = select i1 %436, float 0.000000e+00, float %437, !dbg !73
  %439 = fmul float %438, %434, !dbg !74
  %440 = fadd float %429, %439, !dbg !75
  %441 = fmul float %434, %434, !dbg !76
  %442 = fmul float %424, %441, !dbg !77
  %443 = fmul float %438, %442, !dbg !78
  %444 = fadd float %433, %443, !dbg !79
  %445 = fsub float %279, %440, !dbg !68
  %446 = select i1 %79, float 4.000000e+00, float 0.000000e+00, !dbg !70
  %447 = fcmp oeq float %446, 0.000000e+00, !dbg !71
  %448 = tail call float @llvm.nvvm.div.full(float %230, float %446), !dbg !72
  %449 = select i1 %447, float 0.000000e+00, float %448, !dbg !73
  %450 = fmul float %449, %445, !dbg !74
  %451 = fadd float %440, %450, !dbg !75
  %452 = fmul float %445, %445, !dbg !76
  %453 = fmul float %435, %452, !dbg !77
  %454 = fmul float %449, %453, !dbg !78
  %455 = fadd float %444, %454, !dbg !79
  %456 = fsub float %298, %451, !dbg !68
  %457 = select i1 %79, float 5.000000e+00, float 0.000000e+00, !dbg !70
  %458 = fcmp oeq float %457, 0.000000e+00, !dbg !71
  %459 = tail call float @llvm.nvvm.div.full(float %230, float %457), !dbg !72
  %460 = select i1 %458, float 0.000000e+00, float %459, !dbg !73
  %461 = fmul float %460, %456, !dbg !74
  %462 = fadd float %451, %461, !dbg !75
  %463 = fmul float %456, %456, !dbg !76
  %464 = fmul float %446, %463, !dbg !77
  %465 = fmul float %460, %464, !dbg !78
  %466 = fadd float %455, %465, !dbg !79
  %467 = fsub float %300, %462, !dbg !68
  %468 = select i1 %79, float 6.000000e+00, float 0.000000e+00, !dbg !70
  %469 = fcmp oeq float %468, 0.000000e+00, !dbg !71
  %470 = tail call float @llvm.nvvm.div.full(float %230, float %468), !dbg !72
  %471 = select i1 %469, float 0.000000e+00, float %470, !dbg !73
  %472 = fmul float %471, %467, !dbg !74
  %473 = fadd float %462, %472, !dbg !75
  %474 = fmul float %467, %467, !dbg !76
  %475 = fmul float %457, %474, !dbg !77
  %476 = fmul float %471, %475, !dbg !78
  %477 = fadd float %466, %476, !dbg !79
  %478 = fsub float %319, %473, !dbg !68
  %479 = select i1 %79, float 7.000000e+00, float 0.000000e+00, !dbg !70
  %480 = fcmp oeq float %479, 0.000000e+00, !dbg !71
  %481 = tail call float @llvm.nvvm.div.full(float %230, float %479), !dbg !72
  %482 = select i1 %480, float 0.000000e+00, float %481, !dbg !73
  %483 = fmul float %482, %478, !dbg !74
  %484 = fadd float %473, %483, !dbg !75
  %485 = fmul float %478, %478, !dbg !76
  %486 = fmul float %468, %485, !dbg !77
  %487 = fmul float %482, %486, !dbg !78
  %488 = fadd float %477, %487, !dbg !79
  %489 = fsub float %321, %484, !dbg !68
  %490 = select i1 %79, float 8.000000e+00, float 0.000000e+00, !dbg !70
  %491 = fcmp oeq float %490, 0.000000e+00, !dbg !71
  %492 = tail call float @llvm.nvvm.div.full(float %230, float %490), !dbg !72
  %493 = select i1 %491, float 0.000000e+00, float %492, !dbg !73
  %494 = fmul float %493, %489, !dbg !74
  %495 = fadd float %484, %494, !dbg !75
  %496 = fmul float %489, %489, !dbg !76
  %497 = fmul float %479, %496, !dbg !77
  %498 = fmul float %493, %497, !dbg !78
  %499 = fadd float %488, %498, !dbg !79
  %500 = fsub float %340, %495, !dbg !68
  %501 = select i1 %79, float 9.000000e+00, float 0.000000e+00, !dbg !70
  %502 = fcmp oeq float %501, 0.000000e+00, !dbg !71
  %503 = tail call float @llvm.nvvm.div.full(float %230, float %501), !dbg !72
  %504 = select i1 %502, float 0.000000e+00, float %503, !dbg !73
  %505 = fmul float %504, %500, !dbg !74
  %506 = fadd float %495, %505, !dbg !75
  %507 = fadd float %499, 0.000000e+00, !dbg !80
  %508 = fmul float %500, %500, !dbg !76
  %509 = fmul float %490, %508, !dbg !77
  %510 = fmul float %504, %509, !dbg !78
  %511 = fadd float %507, %510, !dbg !79
  %512 = fsub float %342, %506, !dbg !68
  %513 = select i1 %79, float 1.000000e+01, float 0.000000e+00, !dbg !70
  %514 = fcmp oeq float %513, 0.000000e+00, !dbg !71
  %515 = tail call float @llvm.nvvm.div.full(float %230, float %513), !dbg !72
  %516 = select i1 %514, float 0.000000e+00, float %515, !dbg !73
  %517 = fmul float %516, %512, !dbg !74
  %518 = fadd float %506, %517, !dbg !75
  %519 = fmul float %512, %512, !dbg !76
  %520 = fmul float %501, %519, !dbg !77
  %521 = fmul float %516, %520, !dbg !78
  %522 = fadd float %511, %521, !dbg !79
  %523 = fsub float %361, %518, !dbg !68
  %524 = select i1 %79, float 1.100000e+01, float 0.000000e+00, !dbg !70
  %525 = fcmp oeq float %524, 0.000000e+00, !dbg !71
  %526 = tail call float @llvm.nvvm.div.full(float %230, float %524), !dbg !72
  %527 = select i1 %525, float 0.000000e+00, float %526, !dbg !73
  %528 = fmul float %527, %523, !dbg !74
  %529 = fadd float %518, %528, !dbg !75
  %530 = fmul float %523, %523, !dbg !76
  %531 = fmul float %513, %530, !dbg !77
  %532 = fmul float %527, %531, !dbg !78
  %533 = fadd float %522, %532, !dbg !79
  %534 = fsub float %363, %529, !dbg !68
  %535 = select i1 %79, float 1.200000e+01, float 0.000000e+00, !dbg !70
  %536 = fcmp oeq float %535, 0.000000e+00, !dbg !71
  %537 = tail call float @llvm.nvvm.div.full(float %230, float %535), !dbg !72
  %538 = select i1 %536, float 0.000000e+00, float %537, !dbg !73
  %539 = fmul float %538, %534, !dbg !74
  %540 = fadd float %529, %539, !dbg !75
  %541 = fmul float %534, %534, !dbg !76
  %542 = fmul float %524, %541, !dbg !77
  %543 = fmul float %538, %542, !dbg !78
  %544 = fadd float %533, %543, !dbg !79
  %545 = fsub float %382, %540, !dbg !68
  %546 = select i1 %79, float 1.300000e+01, float 0.000000e+00, !dbg !70
  %547 = fcmp oeq float %546, 0.000000e+00, !dbg !71
  %548 = tail call float @llvm.nvvm.div.full(float %230, float %546), !dbg !72
  %549 = select i1 %547, float 0.000000e+00, float %548, !dbg !73
  %550 = fmul float %549, %545, !dbg !74
  %551 = fadd float %540, %550, !dbg !75
  %552 = fmul float %545, %545, !dbg !76
  %553 = fmul float %535, %552, !dbg !77
  %554 = fmul float %549, %553, !dbg !78
  %555 = fadd float %544, %554, !dbg !79
  %556 = fsub float %384, %551, !dbg !68
  %557 = select i1 %79, float 1.400000e+01, float 0.000000e+00, !dbg !70
  %558 = fcmp oeq float %557, 0.000000e+00, !dbg !71
  %559 = tail call float @llvm.nvvm.div.full(float %230, float %557), !dbg !72
  %560 = select i1 %558, float 0.000000e+00, float %559, !dbg !73
  %561 = fmul float %560, %556, !dbg !74
  %562 = fadd float %551, %561, !dbg !75
  %563 = fmul float %556, %556, !dbg !76
  %564 = fmul float %546, %563, !dbg !77
  %565 = fmul float %560, %564, !dbg !78
  %566 = fadd float %555, %565, !dbg !79
  %567 = fsub float %403, %562, !dbg !68
  %568 = select i1 %79, float 1.500000e+01, float 0.000000e+00, !dbg !70
  %569 = fcmp oeq float %568, 0.000000e+00, !dbg !71
  %570 = tail call float @llvm.nvvm.div.full(float %230, float %568), !dbg !72
  %571 = select i1 %569, float 0.000000e+00, float %570, !dbg !73
  %572 = fmul float %571, %567, !dbg !74
  %573 = fadd float %562, %572, !dbg !75
  %574 = fadd float %566, 0.000000e+00, !dbg !80
  %575 = fmul float %567, %567, !dbg !76
  %576 = fmul float %557, %575, !dbg !77
  %577 = fmul float %571, %576, !dbg !78
  %578 = fadd float %574, %577, !dbg !79
  %579 = fsub float %405, %573, !dbg !68
  %580 = select i1 %79, float 1.600000e+01, float 0.000000e+00, !dbg !70
  %581 = fcmp oeq float %580, 0.000000e+00, !dbg !71
  %582 = tail call float @llvm.nvvm.div.full(float %230, float %580), !dbg !72
  %583 = select i1 %581, float 0.000000e+00, float %582, !dbg !73
  %584 = fmul float %583, %579, !dbg !74
  %585 = fadd float %573, %584, !dbg !75
  %586 = fmul float %579, %579, !dbg !76
  %587 = fmul float %568, %586, !dbg !77
  %588 = fmul float %583, %587, !dbg !78
  %589 = fadd float %578, %588, !dbg !79
  %590 = bitcast float %585 to i32, !dbg !66
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 16, i32 31), !dbg !66
  %592 = bitcast i32 %591 to float, !dbg !66
  %593 = bitcast float %589 to i32, !dbg !66
  %594 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %593, i32 16, i32 31), !dbg !66
  %595 = bitcast i32 %594 to float, !dbg !66
  %596 = bitcast float %580 to i32, !dbg !66
  %597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 16, i32 31), !dbg !66
  %598 = bitcast i32 %597 to float, !dbg !66
  %599 = fsub float %592, %585, !dbg !68
  %600 = fadd float %580, %598, !dbg !70
  %601 = fcmp oeq float %600, 0.000000e+00, !dbg !71
  %602 = tail call float @llvm.nvvm.div.full(float %598, float %600), !dbg !72
  %603 = select i1 %601, float 0.000000e+00, float %602, !dbg !73
  %604 = fmul float %603, %599, !dbg !74
  %605 = fadd float %585, %604, !dbg !75
  %606 = fadd float %589, %595, !dbg !80
  %607 = fmul float %599, %599, !dbg !76
  %608 = fmul float %580, %607, !dbg !77
  %609 = fmul float %603, %608, !dbg !78
  %610 = fadd float %606, %609, !dbg !79
  %611 = bitcast float %605 to i32, !dbg !66
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 8, i32 31), !dbg !66
  %613 = bitcast i32 %612 to float, !dbg !66
  %614 = bitcast float %610 to i32, !dbg !66
  %615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 8, i32 31), !dbg !66
  %616 = bitcast i32 %615 to float, !dbg !66
  %617 = bitcast float %600 to i32, !dbg !66
  %618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 8, i32 31), !dbg !66
  %619 = bitcast i32 %618 to float, !dbg !66
  %620 = fsub float %613, %605, !dbg !68
  %621 = fadd float %600, %619, !dbg !70
  %622 = fcmp oeq float %621, 0.000000e+00, !dbg !71
  %623 = tail call float @llvm.nvvm.div.full(float %619, float %621), !dbg !72
  %624 = select i1 %622, float 0.000000e+00, float %623, !dbg !73
  %625 = fmul float %624, %620, !dbg !74
  %626 = fadd float %605, %625, !dbg !75
  %627 = fadd float %610, %616, !dbg !80
  %628 = fmul float %620, %620, !dbg !76
  %629 = fmul float %600, %628, !dbg !77
  %630 = fmul float %624, %629, !dbg !78
  %631 = fadd float %627, %630, !dbg !79
  %632 = bitcast float %626 to i32, !dbg !66
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 4, i32 31), !dbg !66
  %634 = bitcast i32 %633 to float, !dbg !66
  %635 = bitcast float %631 to i32, !dbg !66
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 4, i32 31), !dbg !66
  %637 = bitcast i32 %636 to float, !dbg !66
  %638 = bitcast float %621 to i32, !dbg !66
  %639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %638, i32 4, i32 31), !dbg !66
  %640 = bitcast i32 %639 to float, !dbg !66
  %641 = fsub float %634, %626, !dbg !68
  %642 = fadd float %621, %640, !dbg !70
  %643 = fcmp oeq float %642, 0.000000e+00, !dbg !71
  %644 = tail call float @llvm.nvvm.div.full(float %640, float %642), !dbg !72
  %645 = select i1 %643, float 0.000000e+00, float %644, !dbg !73
  %646 = fmul float %645, %641, !dbg !74
  %647 = fadd float %626, %646, !dbg !75
  %648 = fadd float %631, %637, !dbg !80
  %649 = fmul float %641, %641, !dbg !76
  %650 = fmul float %621, %649, !dbg !77
  %651 = fmul float %645, %650, !dbg !78
  %652 = fadd float %648, %651, !dbg !79
  %653 = bitcast float %647 to i32, !dbg !66
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %653, i32 2, i32 31), !dbg !66
  %655 = bitcast i32 %654 to float, !dbg !66
  %656 = bitcast float %652 to i32, !dbg !66
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 2, i32 31), !dbg !66
  %658 = bitcast i32 %657 to float, !dbg !66
  %659 = bitcast float %642 to i32, !dbg !66
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %659, i32 2, i32 31), !dbg !66
  %661 = bitcast i32 %660 to float, !dbg !66
  %662 = fsub float %655, %647, !dbg !68
  %663 = fadd float %642, %661, !dbg !70
  %664 = fcmp oeq float %663, 0.000000e+00, !dbg !71
  %665 = tail call float @llvm.nvvm.div.full(float %661, float %663), !dbg !72
  %666 = select i1 %664, float 0.000000e+00, float %665, !dbg !73
  %667 = fmul float %666, %662, !dbg !74
  %668 = fadd float %647, %667, !dbg !75
  %669 = fadd float %652, %658, !dbg !80
  %670 = fmul float %662, %662, !dbg !76
  %671 = fmul float %642, %670, !dbg !77
  %672 = fmul float %666, %671, !dbg !78
  %673 = fadd float %669, %672, !dbg !79
  %674 = bitcast float %668 to i32, !dbg !66
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 1, i32 31), !dbg !66
  %676 = bitcast i32 %675 to float, !dbg !66
  %677 = bitcast float %673 to i32, !dbg !66
  %678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %677, i32 1, i32 31), !dbg !66
  %679 = bitcast i32 %678 to float, !dbg !66
  %680 = bitcast float %663 to i32, !dbg !66
  %681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %680, i32 1, i32 31), !dbg !66
  %682 = bitcast i32 %681 to float, !dbg !66
  %683 = fsub float %676, %668, !dbg !68
  %684 = fadd float %663, %682, !dbg !70
  %685 = fcmp oeq float %684, 0.000000e+00, !dbg !71
  %686 = tail call float @llvm.nvvm.div.full(float %682, float %684), !dbg !72
  %687 = select i1 %685, float 0.000000e+00, float %686, !dbg !73
  %688 = fmul float %687, %683, !dbg !74
  %689 = fadd float %668, %688, !dbg !75
  %690 = fadd float %673, %679, !dbg !80
  %691 = fmul float %683, %683, !dbg !76
  %692 = fmul float %663, %691, !dbg !77
  %693 = fmul float %687, %692, !dbg !78
  %694 = fadd float %690, %693, !dbg !79
  %695 = and i32 %20, 7, !dbg !66
  %696 = icmp eq i32 %19, 0, !dbg !66
  %697 = getelementptr float, ptr addrspace(3) @global_smem, i32 %695, !dbg !66
  %698 = bitcast float %689 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %697, <1 x i32> %698, i1 %696) #5, !dbg !66
  %699 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %695, !dbg !66
  %700 = bitcast float %694 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %699, <1 x i32> %700, i1 %696) #5, !dbg !66
  %701 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %695, !dbg !66
  %702 = bitcast float %684 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %701, <1 x i32> %702, i1 %696) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %703 = icmp slt i32 %18, 8, !dbg !66
  %704 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !66
  %705 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %704, i1 %703) #5, !dbg !66
  %706 = bitcast i32 %705 to float, !dbg !66
  %707 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %18, !dbg !66
  %708 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %707, i1 %703) #5, !dbg !66
  %709 = bitcast i32 %708 to float, !dbg !66
  %710 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !66
  %711 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %710, i1 %703) #5, !dbg !66
  %712 = bitcast i32 %711 to float, !dbg !66
  %713 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %705, i32 4, i32 31), !dbg !66
  %714 = bitcast i32 %713 to float, !dbg !66
  %715 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %708, i32 4, i32 31), !dbg !66
  %716 = bitcast i32 %715 to float, !dbg !66
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %711, i32 4, i32 31), !dbg !66
  %718 = bitcast i32 %717 to float, !dbg !66
  %719 = fsub float %714, %706, !dbg !68
  %720 = fadd float %712, %718, !dbg !70
  %721 = fcmp oeq float %720, 0.000000e+00, !dbg !71
  %722 = tail call float @llvm.nvvm.div.full(float %718, float %720), !dbg !72
  %723 = select i1 %721, float 0.000000e+00, float %722, !dbg !73
  %724 = fmul float %719, %723, !dbg !74
  %725 = fadd float %724, %706, !dbg !75
  %726 = fadd float %709, %716, !dbg !80
  %727 = fmul float %719, %719, !dbg !76
  %728 = fmul float %727, %712, !dbg !77
  %729 = fmul float %728, %723, !dbg !78
  %730 = fadd float %726, %729, !dbg !79
  %731 = bitcast float %725 to i32, !dbg !66
  %732 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %731, i32 2, i32 31), !dbg !66
  %733 = bitcast i32 %732 to float, !dbg !66
  %734 = bitcast float %730 to i32, !dbg !66
  %735 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %734, i32 2, i32 31), !dbg !66
  %736 = bitcast i32 %735 to float, !dbg !66
  %737 = bitcast float %720 to i32, !dbg !66
  %738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 2, i32 31), !dbg !66
  %739 = bitcast i32 %738 to float, !dbg !66
  %740 = fsub float %733, %725, !dbg !68
  %741 = fadd float %720, %739, !dbg !70
  %742 = fcmp oeq float %741, 0.000000e+00, !dbg !71
  %743 = tail call float @llvm.nvvm.div.full(float %739, float %741), !dbg !72
  %744 = select i1 %742, float 0.000000e+00, float %743, !dbg !73
  %745 = fmul float %740, %744, !dbg !74
  %746 = fadd float %725, %745, !dbg !75
  %747 = fadd float %730, %736, !dbg !80
  %748 = fmul float %740, %740, !dbg !76
  %749 = fmul float %720, %748, !dbg !77
  %750 = fmul float %744, %749, !dbg !78
  %751 = fadd float %747, %750, !dbg !79
  %752 = bitcast float %746 to i32, !dbg !66
  %753 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %752, i32 1, i32 31), !dbg !66
  %754 = bitcast i32 %753 to float, !dbg !66
  %755 = bitcast float %751 to i32, !dbg !66
  %756 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %755, i32 1, i32 31), !dbg !66
  %757 = bitcast i32 %756 to float, !dbg !66
  %758 = bitcast float %741 to i32, !dbg !66
  %759 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %758, i32 1, i32 31), !dbg !66
  %760 = bitcast i32 %759 to float, !dbg !66
  %761 = fsub float %754, %746, !dbg !68
  %762 = fadd float %741, %760, !dbg !70
  %763 = fcmp oeq float %762, 0.000000e+00, !dbg !71
  %764 = tail call float @llvm.nvvm.div.full(float %760, float %762), !dbg !72
  %765 = select i1 %763, float 0.000000e+00, float %764, !dbg !73
  %766 = fmul float %761, %765, !dbg !74
  %767 = fadd float %746, %766, !dbg !75
  %768 = fadd float %751, %757, !dbg !80
  %769 = fmul float %761, %761, !dbg !76
  %770 = fmul float %741, %769, !dbg !77
  %771 = fmul float %765, %770, !dbg !78
  %772 = fadd float %768, %771, !dbg !79
  %773 = and i32 %18, 7, !dbg !66
  %774 = icmp eq i32 %773, 0, !dbg !66
  %775 = and i1 %703, %774, !dbg !66
  %776 = bitcast float %767 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %704, <1 x i32> %776, i1 %775) #5, !dbg !66
  %777 = bitcast float %772 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %707, <1 x i32> %777, i1 %775) #5, !dbg !66
  %778 = bitcast float %762 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %710, <1 x i32> %778, i1 %775) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %779 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !66
  %780 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !66
  %781 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %235, i1 %79) #5, !dbg !81
  %782 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %236, i1 %79) #5, !dbg !81
  %783 = or disjoint i32 %22, 12288, !dbg !82
  %784 = or disjoint i32 %22, 12292, !dbg !82
  %785 = or disjoint i32 %22, 12296, !dbg !82
  %786 = or disjoint i32 %22, 12300, !dbg !82
  %787 = zext nneg i32 %783 to i64, !dbg !83
  %788 = getelementptr float, ptr addrspace(1) %1, i64 %787, !dbg !83
  %789 = zext nneg i32 %784 to i64, !dbg !83
  %790 = getelementptr float, ptr addrspace(1) %1, i64 %789, !dbg !83
  %791 = zext nneg i32 %785 to i64, !dbg !83
  %792 = getelementptr float, ptr addrspace(1) %1, i64 %791, !dbg !83
  %793 = zext nneg i32 %786 to i64, !dbg !83
  %794 = getelementptr float, ptr addrspace(1) %1, i64 %793, !dbg !83
  %795 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %788, i1 %64) #5, !dbg !84
  %796 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %790, i1 %64) #5, !dbg !84
  %797 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %792, i1 %64) #5, !dbg !84
  %798 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %794, i1 %64) #5, !dbg !84
  %799 = getelementptr bfloat, ptr addrspace(1) %2, i64 %787, !dbg !85
  %800 = getelementptr bfloat, ptr addrspace(1) %2, i64 %791, !dbg !85
  %801 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %799, i1 %64) #5, !dbg !86
  %802 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %800, i1 %64) #5, !dbg !86
  %803 = add nuw nsw i32 %22, 9216, !dbg !87
  %804 = add nuw nsw i32 %22, 9224, !dbg !87
  %805 = zext nneg i32 %803 to i64, !dbg !88
  %806 = getelementptr float, ptr addrspace(1) %1, i64 %805, !dbg !88
  %807 = getelementptr i8, ptr addrspace(1) %104, i64 36880, !dbg !88
  %808 = zext nneg i32 %804 to i64, !dbg !88
  %809 = getelementptr float, ptr addrspace(1) %1, i64 %808, !dbg !88
  %810 = getelementptr i8, ptr addrspace(1) %104, i64 36912, !dbg !88
  %811 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %806, i1 %64) #5, !dbg !89
  %812 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %807, i1 %64) #5, !dbg !89
  %813 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %809, i1 %64) #5, !dbg !89
  %814 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %810, i1 %64) #5, !dbg !89
  %815 = getelementptr bfloat, ptr addrspace(1) %2, i64 %805, !dbg !90
  %816 = getelementptr bfloat, ptr addrspace(1) %2, i64 %808, !dbg !90
  %817 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %815, i1 %64) #5, !dbg !91
  %818 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %816, i1 %64) #5, !dbg !91
  %819 = tail call float @llvm.nvvm.div.full(float %780, float 3.072000e+03), !dbg !92
  %820 = fadd float %819, 0x3EB0C6F7A0000000, !dbg !93
  %821 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %822 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %823 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %824 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %825 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %826 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %827 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %828 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %829 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %830 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %831 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %832 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %833 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %834 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %835 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %836 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i92 = icmp eq i32 %836, 0, !dbg !94
  br i1 %.not.i92, label %839, label %837, !dbg !94

837:                                              ; preds = %__nv_rsqrtf.exit
  %838 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %820), !dbg !94
  br label %__nv_rsqrtf.exit94, !dbg !94

839:                                              ; preds = %__nv_rsqrtf.exit
  %840 = tail call float @llvm.nvvm.rsqrt.approx.f(float %820), !dbg !94
  br label %__nv_rsqrtf.exit94, !dbg !94

__nv_rsqrtf.exit94:                               ; preds = %837, %839
  %.0.i93 = phi float [ %838, %837 ], [ %840, %839 ], !dbg !94
  %841 = extractvalue { i32, i32, i32, i32 } %782, 3, !dbg !81
  %842 = bitcast i32 %841 to <2 x bfloat>, !dbg !81
  %843 = extractvalue { i32, i32, i32, i32 } %782, 2, !dbg !81
  %844 = bitcast i32 %843 to <2 x bfloat>, !dbg !81
  %845 = extractvalue { i32, i32, i32, i32 } %782, 1, !dbg !81
  %846 = bitcast i32 %845 to <2 x bfloat>, !dbg !81
  %847 = extractvalue { i32, i32, i32, i32 } %782, 0, !dbg !81
  %848 = bitcast i32 %847 to <2 x bfloat>, !dbg !81
  %849 = extractvalue { i32, i32, i32, i32 } %781, 3, !dbg !81
  %850 = bitcast i32 %849 to <2 x bfloat>, !dbg !81
  %851 = extractvalue { i32, i32, i32, i32 } %781, 2, !dbg !81
  %852 = bitcast i32 %851 to <2 x bfloat>, !dbg !81
  %853 = extractvalue { i32, i32, i32, i32 } %781, 1, !dbg !81
  %854 = bitcast i32 %853 to <2 x bfloat>, !dbg !81
  %855 = extractvalue { i32, i32, i32, i32 } %781, 0, !dbg !81
  %856 = bitcast i32 %855 to <2 x bfloat>, !dbg !81
  %857 = extractvalue { i32, i32, i32, i32 } %818, 3, !dbg !91
  %858 = bitcast i32 %857 to <2 x bfloat>, !dbg !91
  %859 = extractvalue { i32, i32, i32, i32 } %818, 2, !dbg !91
  %860 = bitcast i32 %859 to <2 x bfloat>, !dbg !91
  %861 = extractvalue { i32, i32, i32, i32 } %818, 1, !dbg !91
  %862 = bitcast i32 %861 to <2 x bfloat>, !dbg !91
  %863 = extractvalue { i32, i32, i32, i32 } %818, 0, !dbg !91
  %864 = bitcast i32 %863 to <2 x bfloat>, !dbg !91
  %865 = extractvalue { i32, i32, i32, i32 } %817, 3, !dbg !91
  %866 = bitcast i32 %865 to <2 x bfloat>, !dbg !91
  %867 = extractvalue { i32, i32, i32, i32 } %817, 2, !dbg !91
  %868 = bitcast i32 %867 to <2 x bfloat>, !dbg !91
  %869 = extractvalue { i32, i32, i32, i32 } %817, 1, !dbg !91
  %870 = bitcast i32 %869 to <2 x bfloat>, !dbg !91
  %871 = extractvalue { i32, i32, i32, i32 } %817, 0, !dbg !91
  %872 = bitcast i32 %871 to <2 x bfloat>, !dbg !91
  %873 = extractvalue { i32, i32, i32, i32 } %814, 3, !dbg !89
  %874 = extractvalue { i32, i32, i32, i32 } %814, 2, !dbg !89
  %875 = extractvalue { i32, i32, i32, i32 } %814, 1, !dbg !89
  %876 = extractvalue { i32, i32, i32, i32 } %814, 0, !dbg !89
  %877 = extractvalue { i32, i32, i32, i32 } %813, 3, !dbg !89
  %878 = extractvalue { i32, i32, i32, i32 } %813, 2, !dbg !89
  %879 = extractvalue { i32, i32, i32, i32 } %813, 1, !dbg !89
  %880 = extractvalue { i32, i32, i32, i32 } %813, 0, !dbg !89
  %881 = extractvalue { i32, i32, i32, i32 } %812, 3, !dbg !89
  %882 = extractvalue { i32, i32, i32, i32 } %812, 2, !dbg !89
  %883 = extractvalue { i32, i32, i32, i32 } %812, 1, !dbg !89
  %884 = extractvalue { i32, i32, i32, i32 } %812, 0, !dbg !89
  %885 = extractvalue { i32, i32, i32, i32 } %811, 3, !dbg !89
  %886 = extractvalue { i32, i32, i32, i32 } %811, 2, !dbg !89
  %887 = extractvalue { i32, i32, i32, i32 } %811, 1, !dbg !89
  %888 = extractvalue { i32, i32, i32, i32 } %811, 0, !dbg !89
  %889 = extractvalue { i32, i32, i32, i32 } %802, 3, !dbg !86
  %890 = bitcast i32 %889 to <2 x bfloat>, !dbg !86
  %891 = extractvalue { i32, i32, i32, i32 } %802, 2, !dbg !86
  %892 = bitcast i32 %891 to <2 x bfloat>, !dbg !86
  %893 = extractvalue { i32, i32, i32, i32 } %802, 1, !dbg !86
  %894 = bitcast i32 %893 to <2 x bfloat>, !dbg !86
  %895 = extractvalue { i32, i32, i32, i32 } %802, 0, !dbg !86
  %896 = bitcast i32 %895 to <2 x bfloat>, !dbg !86
  %897 = extractvalue { i32, i32, i32, i32 } %801, 3, !dbg !86
  %898 = bitcast i32 %897 to <2 x bfloat>, !dbg !86
  %899 = extractvalue { i32, i32, i32, i32 } %801, 2, !dbg !86
  %900 = bitcast i32 %899 to <2 x bfloat>, !dbg !86
  %901 = extractvalue { i32, i32, i32, i32 } %801, 1, !dbg !86
  %902 = bitcast i32 %901 to <2 x bfloat>, !dbg !86
  %903 = extractvalue { i32, i32, i32, i32 } %801, 0, !dbg !86
  %904 = bitcast i32 %903 to <2 x bfloat>, !dbg !86
  %905 = extractvalue { i32, i32, i32, i32 } %798, 3, !dbg !84
  %906 = extractvalue { i32, i32, i32, i32 } %798, 2, !dbg !84
  %907 = extractvalue { i32, i32, i32, i32 } %798, 1, !dbg !84
  %908 = extractvalue { i32, i32, i32, i32 } %798, 0, !dbg !84
  %909 = extractvalue { i32, i32, i32, i32 } %797, 3, !dbg !84
  %910 = extractvalue { i32, i32, i32, i32 } %797, 2, !dbg !84
  %911 = extractvalue { i32, i32, i32, i32 } %797, 1, !dbg !84
  %912 = extractvalue { i32, i32, i32, i32 } %797, 0, !dbg !84
  %913 = extractvalue { i32, i32, i32, i32 } %796, 3, !dbg !84
  %914 = extractvalue { i32, i32, i32, i32 } %796, 2, !dbg !84
  %915 = extractvalue { i32, i32, i32, i32 } %796, 1, !dbg !84
  %916 = extractvalue { i32, i32, i32, i32 } %796, 0, !dbg !84
  %917 = extractvalue { i32, i32, i32, i32 } %795, 3, !dbg !84
  %918 = extractvalue { i32, i32, i32, i32 } %795, 2, !dbg !84
  %919 = extractvalue { i32, i32, i32, i32 } %795, 1, !dbg !84
  %920 = extractvalue { i32, i32, i32, i32 } %795, 0, !dbg !84
  %921 = getelementptr bfloat, ptr addrspace(1) %9, i64 %231, !dbg !95
  %922 = getelementptr bfloat, ptr addrspace(1) %9, i64 %233, !dbg !95
  %923 = getelementptr bfloat, ptr addrspace(1) %9, i64 %75, !dbg !95
  %924 = getelementptr bfloat, ptr addrspace(1) %9, i64 %77, !dbg !95
  %925 = fpext <2 x bfloat> %856 to <2 x float>, !dbg !96
  %926 = insertelement <2 x float> poison, float %779, i64 0, !dbg !97
  %927 = shufflevector <2 x float> %926, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !97
  %928 = fsub <2 x float> %925, %927, !dbg !97
  %929 = fpext <2 x bfloat> %872 to <2 x float>, !dbg !98
  %930 = insertelement <2 x i32> poison, i32 %888, i64 0, !dbg !89
  %931 = insertelement <2 x i32> %930, i32 %887, i64 1, !dbg !89
  %932 = bitcast <2 x i32> %931 to <2 x float>, !dbg !89
  %933 = fpext <2 x bfloat> %904 to <2 x float>, !dbg !99
  %934 = insertelement <2 x i32> poison, i32 %920, i64 0, !dbg !84
  %935 = insertelement <2 x i32> %934, i32 %919, i64 1, !dbg !84
  %936 = bitcast <2 x i32> %935 to <2 x float>, !dbg !84
  %937 = insertelement <2 x float> poison, float %.0.i93, i64 0, !dbg !100
  %938 = shufflevector <2 x float> %937, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %939 = fmul <2 x float> %928, %938, !dbg !100
  %940 = fadd <2 x float> %936, %933, !dbg !101
  %941 = fadd <2 x float> %940, splat (float 1.000000e+00), !dbg !102
  %942 = fmul <2 x float> %941, %939, !dbg !103
  %943 = fadd <2 x float> %932, %929, !dbg !104
  %944 = fadd <2 x float> %943, %942, !dbg !105
  %945 = extractelement <2 x float> %944, i64 0, !dbg !106
  %946 = select i1 %79, float %945, float 0x7FF0000000000000, !dbg !107
  %947 = extractelement <2 x float> %944, i64 1, !dbg !106
  %948 = select i1 %79, float %947, float 0x7FF0000000000000, !dbg !107
  %949 = select i1 %79, float %945, float 0xFFF0000000000000, !dbg !106
  %950 = select i1 %79, float %947, float 0xFFF0000000000000, !dbg !106
  %951 = fptrunc <2 x float> %944 to <2 x bfloat>, !dbg !108
  %952 = fpext <2 x bfloat> %854 to <2 x float>, !dbg !96
  %953 = fsub <2 x float> %952, %927, !dbg !97
  %954 = fpext <2 x bfloat> %870 to <2 x float>, !dbg !98
  %955 = insertelement <2 x i32> poison, i32 %886, i64 0, !dbg !89
  %956 = insertelement <2 x i32> %955, i32 %885, i64 1, !dbg !89
  %957 = bitcast <2 x i32> %956 to <2 x float>, !dbg !89
  %958 = fpext <2 x bfloat> %902 to <2 x float>, !dbg !99
  %959 = insertelement <2 x i32> poison, i32 %918, i64 0, !dbg !84
  %960 = insertelement <2 x i32> %959, i32 %917, i64 1, !dbg !84
  %961 = bitcast <2 x i32> %960 to <2 x float>, !dbg !84
  %962 = fmul <2 x float> %953, %938, !dbg !100
  %963 = fadd <2 x float> %961, %958, !dbg !101
  %964 = fadd <2 x float> %963, splat (float 1.000000e+00), !dbg !102
  %965 = fmul <2 x float> %964, %962, !dbg !103
  %966 = fadd <2 x float> %957, %954, !dbg !104
  %967 = fadd <2 x float> %966, %965, !dbg !105
  %968 = extractelement <2 x float> %967, i64 0, !dbg !106
  %969 = select i1 %79, float %968, float 0x7FF0000000000000, !dbg !107
  %970 = extractelement <2 x float> %967, i64 1, !dbg !106
  %971 = select i1 %79, float %970, float 0x7FF0000000000000, !dbg !107
  %972 = select i1 %79, float %968, float 0xFFF0000000000000, !dbg !106
  %973 = select i1 %79, float %970, float 0xFFF0000000000000, !dbg !106
  %974 = fptrunc <2 x float> %967 to <2 x bfloat>, !dbg !108
  %975 = fpext <2 x bfloat> %852 to <2 x float>, !dbg !96
  %976 = fsub <2 x float> %975, %927, !dbg !97
  %977 = fpext <2 x bfloat> %868 to <2 x float>, !dbg !98
  %978 = insertelement <2 x i32> poison, i32 %884, i64 0, !dbg !89
  %979 = insertelement <2 x i32> %978, i32 %883, i64 1, !dbg !89
  %980 = bitcast <2 x i32> %979 to <2 x float>, !dbg !89
  %981 = fpext <2 x bfloat> %900 to <2 x float>, !dbg !99
  %982 = insertelement <2 x i32> poison, i32 %916, i64 0, !dbg !84
  %983 = insertelement <2 x i32> %982, i32 %915, i64 1, !dbg !84
  %984 = bitcast <2 x i32> %983 to <2 x float>, !dbg !84
  %985 = fmul <2 x float> %976, %938, !dbg !100
  %986 = fadd <2 x float> %984, %981, !dbg !101
  %987 = fadd <2 x float> %986, splat (float 1.000000e+00), !dbg !102
  %988 = fmul <2 x float> %987, %985, !dbg !103
  %989 = fadd <2 x float> %980, %977, !dbg !104
  %990 = fadd <2 x float> %989, %988, !dbg !105
  %991 = extractelement <2 x float> %990, i64 0, !dbg !106
  %992 = select i1 %79, float %991, float 0x7FF0000000000000, !dbg !107
  %993 = extractelement <2 x float> %990, i64 1, !dbg !106
  %994 = select i1 %79, float %993, float 0x7FF0000000000000, !dbg !107
  %995 = select i1 %79, float %991, float 0xFFF0000000000000, !dbg !106
  %996 = select i1 %79, float %993, float 0xFFF0000000000000, !dbg !106
  %997 = fptrunc <2 x float> %990 to <2 x bfloat>, !dbg !108
  %998 = fpext <2 x bfloat> %850 to <2 x float>, !dbg !96
  %999 = fsub <2 x float> %998, %927, !dbg !97
  %1000 = fpext <2 x bfloat> %866 to <2 x float>, !dbg !98
  %1001 = insertelement <2 x i32> poison, i32 %882, i64 0, !dbg !89
  %1002 = insertelement <2 x i32> %1001, i32 %881, i64 1, !dbg !89
  %1003 = bitcast <2 x i32> %1002 to <2 x float>, !dbg !89
  %1004 = fpext <2 x bfloat> %898 to <2 x float>, !dbg !99
  %1005 = insertelement <2 x i32> poison, i32 %914, i64 0, !dbg !84
  %1006 = insertelement <2 x i32> %1005, i32 %913, i64 1, !dbg !84
  %1007 = bitcast <2 x i32> %1006 to <2 x float>, !dbg !84
  %1008 = fmul <2 x float> %999, %938, !dbg !100
  %1009 = fadd <2 x float> %1007, %1004, !dbg !101
  %1010 = fadd <2 x float> %1009, splat (float 1.000000e+00), !dbg !102
  %1011 = fmul <2 x float> %1010, %1008, !dbg !103
  %1012 = fadd <2 x float> %1003, %1000, !dbg !104
  %1013 = fadd <2 x float> %1012, %1011, !dbg !105
  %1014 = extractelement <2 x float> %1013, i64 0, !dbg !106
  %1015 = select i1 %79, float %1014, float 0x7FF0000000000000, !dbg !107
  %1016 = extractelement <2 x float> %1013, i64 1, !dbg !106
  %1017 = select i1 %79, float %1016, float 0x7FF0000000000000, !dbg !107
  %1018 = select i1 %79, float %1014, float 0xFFF0000000000000, !dbg !106
  %1019 = select i1 %79, float %1016, float 0xFFF0000000000000, !dbg !106
  %1020 = fptrunc <2 x float> %1013 to <2 x bfloat>, !dbg !108
  %1021 = fpext <2 x bfloat> %848 to <2 x float>, !dbg !96
  %1022 = fsub <2 x float> %1021, %927, !dbg !97
  %1023 = fpext <2 x bfloat> %864 to <2 x float>, !dbg !98
  %1024 = insertelement <2 x i32> poison, i32 %880, i64 0, !dbg !89
  %1025 = insertelement <2 x i32> %1024, i32 %879, i64 1, !dbg !89
  %1026 = bitcast <2 x i32> %1025 to <2 x float>, !dbg !89
  %1027 = fpext <2 x bfloat> %896 to <2 x float>, !dbg !99
  %1028 = insertelement <2 x i32> poison, i32 %912, i64 0, !dbg !84
  %1029 = insertelement <2 x i32> %1028, i32 %911, i64 1, !dbg !84
  %1030 = bitcast <2 x i32> %1029 to <2 x float>, !dbg !84
  %1031 = fmul <2 x float> %1022, %938, !dbg !100
  %1032 = fadd <2 x float> %1030, %1027, !dbg !101
  %1033 = fadd <2 x float> %1032, splat (float 1.000000e+00), !dbg !102
  %1034 = fmul <2 x float> %1033, %1031, !dbg !103
  %1035 = fadd <2 x float> %1026, %1023, !dbg !104
  %1036 = fadd <2 x float> %1035, %1034, !dbg !105
  %1037 = extractelement <2 x float> %1036, i64 0, !dbg !106
  %1038 = select i1 %79, float %1037, float 0x7FF0000000000000, !dbg !107
  %1039 = extractelement <2 x float> %1036, i64 1, !dbg !106
  %1040 = select i1 %79, float %1039, float 0x7FF0000000000000, !dbg !107
  %1041 = select i1 %79, float %1037, float 0xFFF0000000000000, !dbg !106
  %1042 = select i1 %79, float %1039, float 0xFFF0000000000000, !dbg !106
  %1043 = fptrunc <2 x float> %1036 to <2 x bfloat>, !dbg !108
  %1044 = fpext <2 x bfloat> %846 to <2 x float>, !dbg !96
  %1045 = fsub <2 x float> %1044, %927, !dbg !97
  %1046 = fpext <2 x bfloat> %862 to <2 x float>, !dbg !98
  %1047 = insertelement <2 x i32> poison, i32 %878, i64 0, !dbg !89
  %1048 = insertelement <2 x i32> %1047, i32 %877, i64 1, !dbg !89
  %1049 = bitcast <2 x i32> %1048 to <2 x float>, !dbg !89
  %1050 = fpext <2 x bfloat> %894 to <2 x float>, !dbg !99
  %1051 = insertelement <2 x i32> poison, i32 %910, i64 0, !dbg !84
  %1052 = insertelement <2 x i32> %1051, i32 %909, i64 1, !dbg !84
  %1053 = bitcast <2 x i32> %1052 to <2 x float>, !dbg !84
  %1054 = fmul <2 x float> %1045, %938, !dbg !100
  %1055 = fadd <2 x float> %1053, %1050, !dbg !101
  %1056 = fadd <2 x float> %1055, splat (float 1.000000e+00), !dbg !102
  %1057 = fmul <2 x float> %1056, %1054, !dbg !103
  %1058 = fadd <2 x float> %1049, %1046, !dbg !104
  %1059 = fadd <2 x float> %1058, %1057, !dbg !105
  %1060 = extractelement <2 x float> %1059, i64 0, !dbg !106
  %1061 = select i1 %79, float %1060, float 0x7FF0000000000000, !dbg !107
  %1062 = extractelement <2 x float> %1059, i64 1, !dbg !106
  %1063 = select i1 %79, float %1062, float 0x7FF0000000000000, !dbg !107
  %1064 = select i1 %79, float %1060, float 0xFFF0000000000000, !dbg !106
  %1065 = select i1 %79, float %1062, float 0xFFF0000000000000, !dbg !106
  %1066 = fptrunc <2 x float> %1059 to <2 x bfloat>, !dbg !108
  %1067 = fpext <2 x bfloat> %844 to <2 x float>, !dbg !96
  %1068 = fsub <2 x float> %1067, %927, !dbg !97
  %1069 = fpext <2 x bfloat> %860 to <2 x float>, !dbg !98
  %1070 = insertelement <2 x i32> poison, i32 %876, i64 0, !dbg !89
  %1071 = insertelement <2 x i32> %1070, i32 %875, i64 1, !dbg !89
  %1072 = bitcast <2 x i32> %1071 to <2 x float>, !dbg !89
  %1073 = fpext <2 x bfloat> %892 to <2 x float>, !dbg !99
  %1074 = insertelement <2 x i32> poison, i32 %908, i64 0, !dbg !84
  %1075 = insertelement <2 x i32> %1074, i32 %907, i64 1, !dbg !84
  %1076 = bitcast <2 x i32> %1075 to <2 x float>, !dbg !84
  %1077 = fmul <2 x float> %1068, %938, !dbg !100
  %1078 = fadd <2 x float> %1076, %1073, !dbg !101
  %1079 = fadd <2 x float> %1078, splat (float 1.000000e+00), !dbg !102
  %1080 = fmul <2 x float> %1079, %1077, !dbg !103
  %1081 = fadd <2 x float> %1072, %1069, !dbg !104
  %1082 = fadd <2 x float> %1081, %1080, !dbg !105
  %1083 = extractelement <2 x float> %1082, i64 0, !dbg !106
  %1084 = select i1 %79, float %1083, float 0x7FF0000000000000, !dbg !107
  %1085 = extractelement <2 x float> %1082, i64 1, !dbg !106
  %1086 = select i1 %79, float %1085, float 0x7FF0000000000000, !dbg !107
  %1087 = select i1 %79, float %1083, float 0xFFF0000000000000, !dbg !106
  %1088 = select i1 %79, float %1085, float 0xFFF0000000000000, !dbg !106
  %1089 = fptrunc <2 x float> %1082 to <2 x bfloat>, !dbg !108
  %1090 = fpext <2 x bfloat> %842 to <2 x float>, !dbg !96
  %1091 = fsub <2 x float> %1090, %927, !dbg !97
  %1092 = fpext <2 x bfloat> %858 to <2 x float>, !dbg !98
  %1093 = insertelement <2 x i32> poison, i32 %874, i64 0, !dbg !89
  %1094 = insertelement <2 x i32> %1093, i32 %873, i64 1, !dbg !89
  %1095 = bitcast <2 x i32> %1094 to <2 x float>, !dbg !89
  %1096 = fpext <2 x bfloat> %890 to <2 x float>, !dbg !99
  %1097 = insertelement <2 x i32> poison, i32 %906, i64 0, !dbg !84
  %1098 = insertelement <2 x i32> %1097, i32 %905, i64 1, !dbg !84
  %1099 = bitcast <2 x i32> %1098 to <2 x float>, !dbg !84
  %1100 = fmul <2 x float> %1091, %938, !dbg !100
  %1101 = fadd <2 x float> %1099, %1096, !dbg !101
  %1102 = fadd <2 x float> %1101, splat (float 1.000000e+00), !dbg !102
  %1103 = fmul <2 x float> %1102, %1100, !dbg !103
  %1104 = fadd <2 x float> %1095, %1092, !dbg !104
  %1105 = fadd <2 x float> %1104, %1103, !dbg !105
  %1106 = extractelement <2 x float> %1105, i64 0, !dbg !106
  %1107 = select i1 %79, float %1106, float 0x7FF0000000000000, !dbg !107
  %1108 = extractelement <2 x float> %1105, i64 1, !dbg !106
  %1109 = select i1 %79, float %1108, float 0x7FF0000000000000, !dbg !107
  %1110 = select i1 %79, float %1106, float 0xFFF0000000000000, !dbg !106
  %1111 = select i1 %79, float %1108, float 0xFFF0000000000000, !dbg !106
  %1112 = fptrunc <2 x float> %1105 to <2 x bfloat>, !dbg !108
  tail call void @llvm.nvvm.barrier0(), !dbg !108
  %1113 = bitcast <2 x bfloat> %951 to i32, !dbg !108
  %1114 = bitcast <2 x bfloat> %974 to i32, !dbg !108
  %1115 = bitcast <2 x bfloat> %997 to i32, !dbg !108
  %1116 = bitcast <2 x bfloat> %1020 to i32, !dbg !108
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %407, i32 %1113, i32 %1114, i32 %1115, i32 %1116, i1 true) #5, !dbg !108
  %1117 = bitcast <2 x bfloat> %1043 to i32, !dbg !108
  %1118 = bitcast <2 x bfloat> %1066 to i32, !dbg !108
  %1119 = bitcast <2 x bfloat> %1089 to i32, !dbg !108
  %1120 = bitcast <2 x bfloat> %1112 to i32, !dbg !108
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %412, i32 %1117, i32 %1118, i32 %1119, i32 %1120, i1 true) #5, !dbg !108
  tail call void @llvm.nvvm.barrier0(), !dbg !108
  %1121 = load <4 x i32>, ptr addrspace(3) %418, align 16, !dbg !108
  %.extract110 = load i32, ptr addrspace(3) %417, align 16, !dbg !108
  %1122 = getelementptr inbounds nuw i8, ptr addrspace(3) %417, i32 4, !dbg !108
  %.extract112 = load i32, ptr addrspace(3) %1122, align 4, !dbg !108
  %1123 = getelementptr inbounds nuw i8, ptr addrspace(3) %417, i32 8, !dbg !108
  %.extract114 = load i32, ptr addrspace(3) %1123, align 8, !dbg !108
  %1124 = getelementptr inbounds nuw i8, ptr addrspace(3) %417, i32 12, !dbg !108
  %.extract116 = load i32, ptr addrspace(3) %1124, align 4, !dbg !108
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract110, i32 %.extract112, i32 %.extract114, i32 %.extract116, ptr addrspace(1) %921, i1 %17) #5, !dbg !108
  %.extract118 = extractelement <4 x i32> %1121, i64 0, !dbg !108
  %.extract120 = extractelement <4 x i32> %1121, i64 1, !dbg !108
  %.extract122 = extractelement <4 x i32> %1121, i64 2, !dbg !108
  %.extract124 = extractelement <4 x i32> %1121, i64 3, !dbg !108
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract118, i32 %.extract120, i32 %.extract122, i32 %.extract124, ptr addrspace(1) %922, i1 %80) #5, !dbg !108
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %1125 = fcmp olt float %946, %948, !dbg !111
  %1126 = fcmp uno float %946, 0.000000e+00, !dbg !112
  %1127 = or i1 %1125, %1126, !dbg !113
  %1128 = select i1 %1127, float %946, float %948, !dbg !114
  %1129 = fcmp olt float %1128, %969, !dbg !111
  %1130 = fcmp uno float %1128, 0.000000e+00, !dbg !112
  %1131 = or i1 %1129, %1130, !dbg !113
  %1132 = select i1 %1131, float %1128, float %969, !dbg !114
  %1133 = fcmp olt float %1132, %971, !dbg !111
  %1134 = fcmp uno float %1132, 0.000000e+00, !dbg !112
  %1135 = or i1 %1133, %1134, !dbg !113
  %1136 = select i1 %1135, float %1132, float %971, !dbg !114
  %1137 = fcmp olt float %1136, %992, !dbg !111
  %1138 = fcmp uno float %1136, 0.000000e+00, !dbg !112
  %1139 = or i1 %1137, %1138, !dbg !113
  %1140 = select i1 %1139, float %1136, float %992, !dbg !114
  %1141 = fcmp olt float %1140, %994, !dbg !111
  %1142 = fcmp uno float %1140, 0.000000e+00, !dbg !112
  %1143 = or i1 %1141, %1142, !dbg !113
  %1144 = select i1 %1143, float %1140, float %994, !dbg !114
  %1145 = fcmp olt float %1144, %1015, !dbg !111
  %1146 = fcmp uno float %1144, 0.000000e+00, !dbg !112
  %1147 = or i1 %1145, %1146, !dbg !113
  %1148 = select i1 %1147, float %1144, float %1015, !dbg !114
  %1149 = fcmp olt float %1148, %1017, !dbg !111
  %1150 = fcmp uno float %1148, 0.000000e+00, !dbg !112
  %1151 = or i1 %1149, %1150, !dbg !113
  %1152 = select i1 %1151, float %1148, float %1017, !dbg !114
  %1153 = fcmp olt float %1152, %1038, !dbg !111
  %1154 = fcmp uno float %1152, 0.000000e+00, !dbg !112
  %1155 = or i1 %1153, %1154, !dbg !113
  %1156 = select i1 %1155, float %1152, float %1038, !dbg !114
  %1157 = fcmp olt float %1156, %1040, !dbg !111
  %1158 = fcmp uno float %1156, 0.000000e+00, !dbg !112
  %1159 = or i1 %1157, %1158, !dbg !113
  %1160 = select i1 %1159, float %1156, float %1040, !dbg !114
  %1161 = fcmp olt float %1160, %1061, !dbg !111
  %1162 = fcmp uno float %1160, 0.000000e+00, !dbg !112
  %1163 = or i1 %1161, %1162, !dbg !113
  %1164 = select i1 %1163, float %1160, float %1061, !dbg !114
  %1165 = fcmp olt float %1164, %1063, !dbg !111
  %1166 = fcmp uno float %1164, 0.000000e+00, !dbg !112
  %1167 = or i1 %1165, %1166, !dbg !113
  %1168 = select i1 %1167, float %1164, float %1063, !dbg !114
  %1169 = fcmp olt float %1168, %1084, !dbg !111
  %1170 = fcmp uno float %1168, 0.000000e+00, !dbg !112
  %1171 = or i1 %1169, %1170, !dbg !113
  %1172 = select i1 %1171, float %1168, float %1084, !dbg !114
  %1173 = fcmp olt float %1172, %1086, !dbg !111
  %1174 = fcmp uno float %1172, 0.000000e+00, !dbg !112
  %1175 = or i1 %1173, %1174, !dbg !113
  %1176 = select i1 %1175, float %1172, float %1086, !dbg !114
  %1177 = fcmp olt float %1176, %1107, !dbg !111
  %1178 = fcmp uno float %1176, 0.000000e+00, !dbg !112
  %1179 = or i1 %1177, %1178, !dbg !113
  %1180 = select i1 %1179, float %1176, float %1107, !dbg !114
  %1181 = fcmp olt float %1180, %1109, !dbg !111
  %1182 = fcmp uno float %1180, 0.000000e+00, !dbg !112
  %1183 = or i1 %1181, %1182, !dbg !113
  %1184 = select i1 %1183, float %1180, float %1109, !dbg !114
  %1185 = bitcast float %1184 to i32, !dbg !109
  %1186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1185, i32 16, i32 31), !dbg !109
  %1187 = bitcast i32 %1186 to float, !dbg !109
  %1188 = fcmp olt float %1184, %1187, !dbg !111
  %1189 = fcmp uno float %1184, 0.000000e+00, !dbg !112
  %1190 = or i1 %1188, %1189, !dbg !113
  %1191 = select i1 %1190, float %1184, float %1187, !dbg !114
  %1192 = bitcast float %1191 to i32, !dbg !109
  %1193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1192, i32 8, i32 31), !dbg !109
  %1194 = bitcast i32 %1193 to float, !dbg !109
  %1195 = fcmp olt float %1191, %1194, !dbg !111
  %1196 = fcmp uno float %1191, 0.000000e+00, !dbg !112
  %1197 = or i1 %1195, %1196, !dbg !113
  %1198 = select i1 %1197, float %1191, float %1194, !dbg !114
  %1199 = bitcast float %1198 to i32, !dbg !109
  %1200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1199, i32 4, i32 31), !dbg !109
  %1201 = bitcast i32 %1200 to float, !dbg !109
  %1202 = fcmp olt float %1198, %1201, !dbg !111
  %1203 = fcmp uno float %1198, 0.000000e+00, !dbg !112
  %1204 = or i1 %1202, %1203, !dbg !113
  %1205 = select i1 %1204, float %1198, float %1201, !dbg !114
  %1206 = bitcast float %1205 to i32, !dbg !109
  %1207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1206, i32 2, i32 31), !dbg !109
  %1208 = bitcast i32 %1207 to float, !dbg !109
  %1209 = fcmp olt float %1205, %1208, !dbg !111
  %1210 = fcmp uno float %1205, 0.000000e+00, !dbg !112
  %1211 = or i1 %1209, %1210, !dbg !113
  %1212 = select i1 %1211, float %1205, float %1208, !dbg !114
  %1213 = bitcast float %1212 to i32, !dbg !109
  %1214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1213, i32 1, i32 31), !dbg !109
  %1215 = bitcast i32 %1214 to float, !dbg !109
  %1216 = fcmp olt float %1212, %1215, !dbg !111
  %1217 = fcmp uno float %1212, 0.000000e+00, !dbg !112
  %1218 = or i1 %1216, %1217, !dbg !113
  %1219 = select i1 %1218, i32 %1213, i32 %1214, !dbg !114
  %1220 = insertelement <1 x i32> poison, i32 %1219, i64 0, !dbg !109
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %697, <1 x i32> %1220, i1 %696) #5, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %1221 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %704, i1 %703) #5, !dbg !109
  %1222 = bitcast i32 %1221 to float, !dbg !109
  %1223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1221, i32 4, i32 31), !dbg !109
  %1224 = bitcast i32 %1223 to float, !dbg !109
  %1225 = fcmp olt float %1222, %1224, !dbg !111
  %1226 = fcmp uno float %1222, 0.000000e+00, !dbg !112
  %1227 = or i1 %1226, %1225, !dbg !113
  %1228 = select i1 %1227, float %1222, float %1224, !dbg !114
  %1229 = bitcast float %1228 to i32, !dbg !109
  %1230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1229, i32 2, i32 31), !dbg !109
  %1231 = bitcast i32 %1230 to float, !dbg !109
  %1232 = fcmp olt float %1228, %1231, !dbg !111
  %1233 = fcmp uno float %1228, 0.000000e+00, !dbg !112
  %1234 = or i1 %1232, %1233, !dbg !113
  %1235 = select i1 %1234, float %1228, float %1231, !dbg !114
  %1236 = bitcast float %1235 to i32, !dbg !109
  %1237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1236, i32 1, i32 31), !dbg !109
  %1238 = bitcast i32 %1237 to float, !dbg !109
  %1239 = fcmp olt float %1235, %1238, !dbg !111
  %1240 = fcmp uno float %1235, 0.000000e+00, !dbg !112
  %1241 = or i1 %1239, %1240, !dbg !113
  %1242 = select i1 %1241, i32 %1236, i32 %1237, !dbg !114
  %1243 = insertelement <1 x i32> poison, i32 %1242, i64 0, !dbg !109
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %704, <1 x i32> %1243, i1 %775) #5, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %1244 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %1245 = fcmp ogt float %949, %950, !dbg !117
  %1246 = fcmp uno float %949, 0.000000e+00, !dbg !118
  %1247 = or i1 %1245, %1246, !dbg !119
  %1248 = select i1 %1247, float %949, float %950, !dbg !120
  %1249 = fcmp ogt float %1248, %972, !dbg !117
  %1250 = fcmp uno float %1248, 0.000000e+00, !dbg !118
  %1251 = or i1 %1249, %1250, !dbg !119
  %1252 = select i1 %1251, float %1248, float %972, !dbg !120
  %1253 = fcmp ogt float %1252, %973, !dbg !117
  %1254 = fcmp uno float %1252, 0.000000e+00, !dbg !118
  %1255 = or i1 %1253, %1254, !dbg !119
  %1256 = select i1 %1255, float %1252, float %973, !dbg !120
  %1257 = fcmp ogt float %1256, %995, !dbg !117
  %1258 = fcmp uno float %1256, 0.000000e+00, !dbg !118
  %1259 = or i1 %1257, %1258, !dbg !119
  %1260 = select i1 %1259, float %1256, float %995, !dbg !120
  %1261 = fcmp ogt float %1260, %996, !dbg !117
  %1262 = fcmp uno float %1260, 0.000000e+00, !dbg !118
  %1263 = or i1 %1261, %1262, !dbg !119
  %1264 = select i1 %1263, float %1260, float %996, !dbg !120
  %1265 = fcmp ogt float %1264, %1018, !dbg !117
  %1266 = fcmp uno float %1264, 0.000000e+00, !dbg !118
  %1267 = or i1 %1265, %1266, !dbg !119
  %1268 = select i1 %1267, float %1264, float %1018, !dbg !120
  %1269 = fcmp ogt float %1268, %1019, !dbg !117
  %1270 = fcmp uno float %1268, 0.000000e+00, !dbg !118
  %1271 = or i1 %1269, %1270, !dbg !119
  %1272 = select i1 %1271, float %1268, float %1019, !dbg !120
  %1273 = fcmp ogt float %1272, %1041, !dbg !117
  %1274 = fcmp uno float %1272, 0.000000e+00, !dbg !118
  %1275 = or i1 %1273, %1274, !dbg !119
  %1276 = select i1 %1275, float %1272, float %1041, !dbg !120
  %1277 = fcmp ogt float %1276, %1042, !dbg !117
  %1278 = fcmp uno float %1276, 0.000000e+00, !dbg !118
  %1279 = or i1 %1277, %1278, !dbg !119
  %1280 = select i1 %1279, float %1276, float %1042, !dbg !120
  %1281 = fcmp ogt float %1280, %1064, !dbg !117
  %1282 = fcmp uno float %1280, 0.000000e+00, !dbg !118
  %1283 = or i1 %1281, %1282, !dbg !119
  %1284 = select i1 %1283, float %1280, float %1064, !dbg !120
  %1285 = fcmp ogt float %1284, %1065, !dbg !117
  %1286 = fcmp uno float %1284, 0.000000e+00, !dbg !118
  %1287 = or i1 %1285, %1286, !dbg !119
  %1288 = select i1 %1287, float %1284, float %1065, !dbg !120
  %1289 = fcmp ogt float %1288, %1087, !dbg !117
  %1290 = fcmp uno float %1288, 0.000000e+00, !dbg !118
  %1291 = or i1 %1289, %1290, !dbg !119
  %1292 = select i1 %1291, float %1288, float %1087, !dbg !120
  %1293 = fcmp ogt float %1292, %1088, !dbg !117
  %1294 = fcmp uno float %1292, 0.000000e+00, !dbg !118
  %1295 = or i1 %1293, %1294, !dbg !119
  %1296 = select i1 %1295, float %1292, float %1088, !dbg !120
  %1297 = fcmp ogt float %1296, %1110, !dbg !117
  %1298 = fcmp uno float %1296, 0.000000e+00, !dbg !118
  %1299 = or i1 %1297, %1298, !dbg !119
  %1300 = select i1 %1299, float %1296, float %1110, !dbg !120
  %1301 = fcmp ogt float %1300, %1111, !dbg !117
  %1302 = fcmp uno float %1300, 0.000000e+00, !dbg !118
  %1303 = or i1 %1301, %1302, !dbg !119
  %1304 = select i1 %1303, float %1300, float %1111, !dbg !120
  %1305 = bitcast float %1304 to i32, !dbg !115
  %1306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1305, i32 16, i32 31), !dbg !115
  %1307 = bitcast i32 %1306 to float, !dbg !115
  %1308 = fcmp ogt float %1304, %1307, !dbg !117
  %1309 = fcmp uno float %1304, 0.000000e+00, !dbg !118
  %1310 = or i1 %1308, %1309, !dbg !119
  %1311 = select i1 %1310, float %1304, float %1307, !dbg !120
  %1312 = bitcast float %1311 to i32, !dbg !115
  %1313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1312, i32 8, i32 31), !dbg !115
  %1314 = bitcast i32 %1313 to float, !dbg !115
  %1315 = fcmp ogt float %1311, %1314, !dbg !117
  %1316 = fcmp uno float %1311, 0.000000e+00, !dbg !118
  %1317 = or i1 %1315, %1316, !dbg !119
  %1318 = select i1 %1317, float %1311, float %1314, !dbg !120
  %1319 = bitcast float %1318 to i32, !dbg !115
  %1320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1319, i32 4, i32 31), !dbg !115
  %1321 = bitcast i32 %1320 to float, !dbg !115
  %1322 = fcmp ogt float %1318, %1321, !dbg !117
  %1323 = fcmp uno float %1318, 0.000000e+00, !dbg !118
  %1324 = or i1 %1322, %1323, !dbg !119
  %1325 = select i1 %1324, float %1318, float %1321, !dbg !120
  %1326 = bitcast float %1325 to i32, !dbg !115
  %1327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1326, i32 2, i32 31), !dbg !115
  %1328 = bitcast i32 %1327 to float, !dbg !115
  %1329 = fcmp ogt float %1325, %1328, !dbg !117
  %1330 = fcmp uno float %1325, 0.000000e+00, !dbg !118
  %1331 = or i1 %1329, %1330, !dbg !119
  %1332 = select i1 %1331, float %1325, float %1328, !dbg !120
  %1333 = bitcast float %1332 to i32, !dbg !115
  %1334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1333, i32 1, i32 31), !dbg !115
  %1335 = bitcast i32 %1334 to float, !dbg !115
  %1336 = fcmp ogt float %1332, %1335, !dbg !117
  %1337 = fcmp uno float %1332, 0.000000e+00, !dbg !118
  %1338 = or i1 %1336, %1337, !dbg !119
  %1339 = select i1 %1338, i32 %1333, i32 %1334, !dbg !120
  %1340 = insertelement <1 x i32> poison, i32 %1339, i64 0, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %697, <1 x i32> %1340, i1 %696) #5, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %1341 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %704, i1 %703) #5, !dbg !115
  %1342 = bitcast i32 %1341 to float, !dbg !115
  %1343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1341, i32 4, i32 31), !dbg !115
  %1344 = bitcast i32 %1343 to float, !dbg !115
  %1345 = fcmp ogt float %1342, %1344, !dbg !117
  %1346 = fcmp uno float %1342, 0.000000e+00, !dbg !118
  %1347 = or i1 %1346, %1345, !dbg !119
  %1348 = select i1 %1347, float %1342, float %1344, !dbg !120
  %1349 = bitcast float %1348 to i32, !dbg !115
  %1350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1349, i32 2, i32 31), !dbg !115
  %1351 = bitcast i32 %1350 to float, !dbg !115
  %1352 = fcmp ogt float %1348, %1351, !dbg !117
  %1353 = fcmp uno float %1348, 0.000000e+00, !dbg !118
  %1354 = or i1 %1352, %1353, !dbg !119
  %1355 = select i1 %1354, float %1348, float %1351, !dbg !120
  %1356 = bitcast float %1355 to i32, !dbg !115
  %1357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1356, i32 1, i32 31), !dbg !115
  %1358 = bitcast i32 %1357 to float, !dbg !115
  %1359 = fcmp ogt float %1355, %1358, !dbg !117
  %1360 = fcmp uno float %1355, 0.000000e+00, !dbg !118
  %1361 = or i1 %1359, %1360, !dbg !119
  %1362 = select i1 %1361, i32 %1356, i32 %1357, !dbg !120
  %1363 = insertelement <1 x i32> poison, i32 %1362, i64 0, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %704, <1 x i32> %1363, i1 %775) #5, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %1364 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !115
  %1365 = getelementptr bfloat, ptr addrspace(1) %10, i64 %27, !dbg !121
  %1366 = fptrunc float %1244 to bfloat, !dbg !122
  %1367 = and i32 %18, 255, !dbg !122
  %1368 = icmp eq i32 %1367, 0, !dbg !122
  %1369 = bitcast bfloat %1366 to i16, !dbg !122
  %1370 = and i1 %17, %1368, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1369, ptr addrspace(1) %1365, i1 %1370) #5, !dbg !122
  %1371 = getelementptr bfloat, ptr addrspace(1) %11, i64 %27, !dbg !123
  %1372 = fptrunc float %1364 to bfloat, !dbg !124
  %1373 = bitcast bfloat %1372 to i16, !dbg !124
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1373, ptr addrspace(1) %1371, i1 %1370) #5, !dbg !124
  %1374 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %923, i1 %79) #5, !dbg !125
  %1375 = extractvalue { i32, i32, i32, i32 } %1374, 0, !dbg !125
  %1376 = bitcast i32 %1375 to <2 x bfloat>, !dbg !125
  %1377 = extractvalue { i32, i32, i32, i32 } %1374, 1, !dbg !125
  %1378 = bitcast i32 %1377 to <2 x bfloat>, !dbg !125
  %1379 = extractvalue { i32, i32, i32, i32 } %1374, 2, !dbg !125
  %1380 = bitcast i32 %1379 to <2 x bfloat>, !dbg !125
  %1381 = extractvalue { i32, i32, i32, i32 } %1374, 3, !dbg !125
  %1382 = bitcast i32 %1381 to <2 x bfloat>, !dbg !125
  %1383 = extractelement <2 x bfloat> %1376, i64 0, !dbg !125
  %1384 = extractelement <2 x bfloat> %1376, i64 1, !dbg !125
  %1385 = extractelement <2 x bfloat> %1378, i64 0, !dbg !125
  %1386 = extractelement <2 x bfloat> %1378, i64 1, !dbg !125
  %1387 = extractelement <2 x bfloat> %1380, i64 0, !dbg !125
  %1388 = extractelement <2 x bfloat> %1380, i64 1, !dbg !125
  %1389 = extractelement <2 x bfloat> %1382, i64 0, !dbg !125
  %1390 = extractelement <2 x bfloat> %1382, i64 1, !dbg !125
  %1391 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %924, i1 %79) #5, !dbg !125
  %1392 = extractvalue { i32, i32, i32, i32 } %1391, 0, !dbg !125
  %1393 = bitcast i32 %1392 to <2 x bfloat>, !dbg !125
  %1394 = extractvalue { i32, i32, i32, i32 } %1391, 1, !dbg !125
  %1395 = bitcast i32 %1394 to <2 x bfloat>, !dbg !125
  %1396 = extractvalue { i32, i32, i32, i32 } %1391, 2, !dbg !125
  %1397 = bitcast i32 %1396 to <2 x bfloat>, !dbg !125
  %1398 = extractvalue { i32, i32, i32, i32 } %1391, 3, !dbg !125
  %1399 = bitcast i32 %1398 to <2 x bfloat>, !dbg !125
  %1400 = extractelement <2 x bfloat> %1393, i64 0, !dbg !125
  %1401 = extractelement <2 x bfloat> %1393, i64 1, !dbg !125
  %1402 = extractelement <2 x bfloat> %1395, i64 0, !dbg !125
  %1403 = extractelement <2 x bfloat> %1395, i64 1, !dbg !125
  %1404 = extractelement <2 x bfloat> %1397, i64 0, !dbg !125
  %1405 = extractelement <2 x bfloat> %1397, i64 1, !dbg !125
  %1406 = extractelement <2 x bfloat> %1399, i64 0, !dbg !125
  %1407 = extractelement <2 x bfloat> %1399, i64 1, !dbg !125
  %1408 = fpext bfloat %1383 to float, !dbg !126
  %1409 = fpext bfloat %1384 to float, !dbg !126
  %1410 = fpext bfloat %1385 to float, !dbg !126
  %1411 = fpext bfloat %1386 to float, !dbg !126
  %1412 = fpext bfloat %1387 to float, !dbg !126
  %1413 = fpext bfloat %1388 to float, !dbg !126
  %1414 = fpext bfloat %1389 to float, !dbg !126
  %1415 = fpext bfloat %1390 to float, !dbg !126
  %1416 = fpext bfloat %1400 to float, !dbg !126
  %1417 = fpext bfloat %1401 to float, !dbg !126
  %1418 = fpext bfloat %1402 to float, !dbg !126
  %1419 = fpext bfloat %1403 to float, !dbg !126
  %1420 = fpext bfloat %1404 to float, !dbg !126
  %1421 = fpext bfloat %1405 to float, !dbg !126
  %1422 = fpext bfloat %1406 to float, !dbg !126
  %1423 = fpext bfloat %1407 to float, !dbg !126
  %.inv48 = fcmp oge float %1244, 0.000000e+00, !dbg !127
  %1424 = select i1 %.inv48, float 0.000000e+00, float %1244, !dbg !127
  %1425 = fsub float 0.000000e+00, %1424, !dbg !129
  %.inv49 = fcmp ole float %1364, 0.000000e+00, !dbg !130
  %1426 = select i1 %.inv49, float 0.000000e+00, float %1364, !dbg !130
  %1427 = fcmp ogt float %1425, %1426, !dbg !132
  %1428 = fcmp uno float %1425, 0.000000e+00, !dbg !134
  %1429 = or i1 %1428, %1427, !dbg !135
  %1430 = select i1 %1429, float %1425, float %1426, !dbg !136
  %1431 = fmul float %1430, 0x3F80204080000000, !dbg !137
  %1432 = fcmp ogt float %1431, 0x3EE4F8B580000000, !dbg !138
  %1433 = fcmp uno float %1431, 0.000000e+00, !dbg !140
  %1434 = or i1 %1432, %1433, !dbg !141
  %1435 = select i1 %1434, float %1431, float 0x3EE4F8B580000000, !dbg !142
  %1436 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1435), !dbg !143
  %1437 = fmul float %1436, %1408, !dbg !144
  %1438 = fmul float %1436, %1409, !dbg !144
  %1439 = fmul float %1436, %1410, !dbg !144
  %1440 = fmul float %1436, %1411, !dbg !144
  %1441 = fmul float %1436, %1412, !dbg !144
  %1442 = fmul float %1436, %1413, !dbg !144
  %1443 = fmul float %1436, %1414, !dbg !144
  %1444 = fmul float %1436, %1415, !dbg !144
  %1445 = fmul float %1436, %1416, !dbg !144
  %1446 = fmul float %1436, %1417, !dbg !144
  %1447 = fmul float %1436, %1418, !dbg !144
  %1448 = fmul float %1436, %1419, !dbg !144
  %1449 = fmul float %1436, %1420, !dbg !144
  %1450 = fmul float %1436, %1421, !dbg !144
  %1451 = fmul float %1436, %1422, !dbg !144
  %1452 = fmul float %1436, %1423, !dbg !144
  %1453 = tail call float @llvm.nvvm.round.f(float %1437) #5, !dbg !145
  %1454 = tail call float @llvm.nvvm.round.f(float %1438) #5, !dbg !145
  %1455 = tail call float @llvm.nvvm.round.f(float %1439) #5, !dbg !145
  %1456 = tail call float @llvm.nvvm.round.f(float %1440) #5, !dbg !145
  %1457 = tail call float @llvm.nvvm.round.f(float %1441) #5, !dbg !145
  %1458 = tail call float @llvm.nvvm.round.f(float %1442) #5, !dbg !145
  %1459 = tail call float @llvm.nvvm.round.f(float %1443) #5, !dbg !145
  %1460 = tail call float @llvm.nvvm.round.f(float %1444) #5, !dbg !145
  %1461 = tail call float @llvm.nvvm.round.f(float %1445) #5, !dbg !145
  %1462 = tail call float @llvm.nvvm.round.f(float %1446) #5, !dbg !145
  %1463 = tail call float @llvm.nvvm.round.f(float %1447) #5, !dbg !145
  %1464 = tail call float @llvm.nvvm.round.f(float %1448) #5, !dbg !145
  %1465 = tail call float @llvm.nvvm.round.f(float %1449) #5, !dbg !145
  %1466 = tail call float @llvm.nvvm.round.f(float %1450) #5, !dbg !145
  %1467 = tail call float @llvm.nvvm.round.f(float %1451) #5, !dbg !145
  %1468 = tail call float @llvm.nvvm.round.f(float %1452) #5, !dbg !145
  %1469 = insertelement <4 x float> poison, float %1453, i64 0, !dbg !146
  %1470 = insertelement <4 x float> %1469, float %1454, i64 1, !dbg !146
  %1471 = insertelement <4 x float> %1470, float %1455, i64 2, !dbg !146
  %1472 = insertelement <4 x float> %1471, float %1456, i64 3, !dbg !146
  %1473 = fcmp ogt <4 x float> %1472, splat (float -1.270000e+02), !dbg !146
  %1474 = fcmp uno <4 x float> %1472, zeroinitializer, !dbg !148
  %1475 = or <4 x i1> %1473, %1474, !dbg !149
  %1476 = select <4 x i1> %1475, <4 x float> %1472, <4 x float> splat (float -1.270000e+02), !dbg !150
  %1477 = fcmp olt <4 x float> %1476, splat (float 1.270000e+02), !dbg !151
  %1478 = fcmp uno <4 x float> %1476, zeroinitializer, !dbg !153
  %1479 = or <4 x i1> %1477, %1478, !dbg !154
  %1480 = fptosi <4 x float> %1476 to <4 x i8>, !dbg !155
  %1481 = select <4 x i1> %1479, <4 x i8> %1480, <4 x i8> splat (i8 127), !dbg !156
  %1482 = insertelement <4 x float> poison, float %1457, i64 0, !dbg !146
  %1483 = insertelement <4 x float> %1482, float %1458, i64 1, !dbg !146
  %1484 = insertelement <4 x float> %1483, float %1459, i64 2, !dbg !146
  %1485 = insertelement <4 x float> %1484, float %1460, i64 3, !dbg !146
  %1486 = fcmp ogt <4 x float> %1485, splat (float -1.270000e+02), !dbg !146
  %1487 = fcmp uno <4 x float> %1485, zeroinitializer, !dbg !148
  %1488 = or <4 x i1> %1486, %1487, !dbg !149
  %1489 = select <4 x i1> %1488, <4 x float> %1485, <4 x float> splat (float -1.270000e+02), !dbg !150
  %1490 = fcmp olt <4 x float> %1489, splat (float 1.270000e+02), !dbg !151
  %1491 = fcmp uno <4 x float> %1489, zeroinitializer, !dbg !153
  %1492 = or <4 x i1> %1490, %1491, !dbg !154
  %1493 = fptosi <4 x float> %1489 to <4 x i8>, !dbg !155
  %1494 = select <4 x i1> %1492, <4 x i8> %1493, <4 x i8> splat (i8 127), !dbg !156
  %1495 = insertelement <4 x float> poison, float %1461, i64 0, !dbg !146
  %1496 = insertelement <4 x float> %1495, float %1462, i64 1, !dbg !146
  %1497 = insertelement <4 x float> %1496, float %1463, i64 2, !dbg !146
  %1498 = insertelement <4 x float> %1497, float %1464, i64 3, !dbg !146
  %1499 = fcmp ogt <4 x float> %1498, splat (float -1.270000e+02), !dbg !146
  %1500 = fcmp uno <4 x float> %1498, zeroinitializer, !dbg !148
  %1501 = or <4 x i1> %1499, %1500, !dbg !149
  %1502 = select <4 x i1> %1501, <4 x float> %1498, <4 x float> splat (float -1.270000e+02), !dbg !150
  %1503 = fcmp olt <4 x float> %1502, splat (float 1.270000e+02), !dbg !151
  %1504 = fcmp uno <4 x float> %1502, zeroinitializer, !dbg !153
  %1505 = or <4 x i1> %1503, %1504, !dbg !154
  %1506 = fptosi <4 x float> %1502 to <4 x i8>, !dbg !155
  %1507 = select <4 x i1> %1505, <4 x i8> %1506, <4 x i8> splat (i8 127), !dbg !156
  %1508 = insertelement <4 x float> poison, float %1465, i64 0, !dbg !146
  %1509 = insertelement <4 x float> %1508, float %1466, i64 1, !dbg !146
  %1510 = insertelement <4 x float> %1509, float %1467, i64 2, !dbg !146
  %1511 = insertelement <4 x float> %1510, float %1468, i64 3, !dbg !146
  %1512 = fcmp ogt <4 x float> %1511, splat (float -1.270000e+02), !dbg !146
  %1513 = fcmp uno <4 x float> %1511, zeroinitializer, !dbg !148
  %1514 = or <4 x i1> %1512, %1513, !dbg !149
  %1515 = select <4 x i1> %1514, <4 x float> %1511, <4 x float> splat (float -1.270000e+02), !dbg !150
  %1516 = fcmp olt <4 x float> %1515, splat (float 1.270000e+02), !dbg !151
  %1517 = fcmp uno <4 x float> %1515, zeroinitializer, !dbg !153
  %1518 = or <4 x i1> %1516, %1517, !dbg !154
  %1519 = fptosi <4 x float> %1515 to <4 x i8>, !dbg !155
  %1520 = select <4 x i1> %1518, <4 x i8> %1519, <4 x i8> splat (i8 127), !dbg !156
  %1521 = getelementptr i8, ptr addrspace(1) %12, i64 %75, !dbg !157
  %1522 = bitcast <4 x i8> %1481 to i32, !dbg !158
  %1523 = bitcast <4 x i8> %1494 to i32, !dbg !158
  %1524 = bitcast <4 x i8> %1507 to i32, !dbg !158
  %1525 = bitcast <4 x i8> %1520 to i32, !dbg !158
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1522, i32 %1523, i32 %1524, i32 %1525, ptr addrspace(1) %1521, i1 %79) #5, !dbg !158
  ret void, !dbg !159
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 36, column: 29, scope: !6)
!17 = !DILocation(line: 40, column: 46, scope: !6)
!18 = !DILocation(line: 40, column: 41, scope: !6)
!19 = !DILocation(line: 40, column: 34, scope: !6)
!20 = !DILocation(line: 40, column: 59, scope: !6)
!21 = !DILocation(line: 40, column: 51, scope: !6)
!22 = !DILocation(line: 41, column: 41, scope: !6)
!23 = !DILocation(line: 41, column: 34, scope: !6)
!24 = !DILocation(line: 41, column: 48, scope: !6)
!25 = !DILocation(line: 42, column: 34, scope: !6)
!26 = !DILocation(line: 42, column: 48, scope: !6)
!27 = !DILocation(line: 43, column: 34, scope: !6)
!28 = !DILocation(line: 43, column: 51, scope: !6)
!29 = !DILocation(line: 44, column: 35, scope: !6)
!30 = !DILocation(line: 44, column: 42, scope: !6)
!31 = !DILocation(line: 45, column: 35, scope: !6)
!32 = !DILocation(line: 45, column: 42, scope: !6)
!33 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !6, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 50, column: 44, scope: !6)
!37 = !DILocation(line: 51, column: 17, scope: !6)
!38 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !39)
!39 = !DILocation(line: 52, column: 46, scope: !6)
!40 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 53, column: 46, scope: !6)
!42 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !41)
!43 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !41)
!44 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !41)
!45 = !DILocation(line: 55, column: 24, scope: !6)
!46 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !47)
!47 = !DILocation(line: 58, column: 46, scope: !6)
!48 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !47)
!49 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !47)
!50 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !47)
!51 = !DILocation(line: 72, column: 68, scope: !6)
!52 = !DILocation(line: 73, column: 29, scope: !6)
!53 = !DILocation(line: 40, column: 113, scope: !6)
!54 = !DILocation(line: 42, column: 101, scope: !6)
!55 = !DILocation(line: 44, column: 95, scope: !6)
!56 = !DILocation(line: 45, column: 95, scope: !6)
!57 = !DILocation(line: 47, column: 22, scope: !6)
!58 = !DILocation(line: 48, column: 23, scope: !6)
!59 = !DILocation(line: 60, column: 23, scope: !6)
!60 = !DILocation(line: 61, column: 24, scope: !6)
!61 = !DILocation(line: 62, column: 24, scope: !6)
!62 = !DILocation(line: 63, column: 23, scope: !6)
!63 = !DILocation(line: 64, column: 23, scope: !6)
!64 = !DILocation(line: 70, column: 64, scope: !6)
!65 = !DILocation(line: 73, column: 53, scope: !6)
!66 = !DILocation(line: 229, column: 46, scope: !34, inlinedAt: !67)
!67 = !DILocation(line: 74, column: 85, scope: !6)
!68 = !DILocation(line: 217, column: 21, scope: !69, inlinedAt: !67)
!69 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!70 = !DILocation(line: 218, column: 28, scope: !69, inlinedAt: !67)
!71 = !DILocation(line: 219, column: 39, scope: !69, inlinedAt: !67)
!72 = !DILocation(line: 219, column: 60, scope: !69, inlinedAt: !67)
!73 = !DILocation(line: 219, column: 49, scope: !69, inlinedAt: !67)
!74 = !DILocation(line: 221, column: 25, scope: !69, inlinedAt: !67)
!75 = !DILocation(line: 221, column: 17, scope: !69, inlinedAt: !67)
!76 = !DILocation(line: 222, column: 30, scope: !69, inlinedAt: !67)
!77 = !DILocation(line: 222, column: 38, scope: !69, inlinedAt: !67)
!78 = !DILocation(line: 222, column: 49, scope: !69, inlinedAt: !67)
!79 = !DILocation(line: 222, column: 22, scope: !69, inlinedAt: !67)
!80 = !DILocation(line: 222, column: 15, scope: !69, inlinedAt: !67)
!81 = !DILocation(line: 86, column: 53, scope: !6)
!82 = !DILocation(line: 87, column: 43, scope: !6)
!83 = !DILocation(line: 87, column: 35, scope: !6)
!84 = !DILocation(line: 87, column: 50, scope: !6)
!85 = !DILocation(line: 88, column: 35, scope: !6)
!86 = !DILocation(line: 88, column: 50, scope: !6)
!87 = !DILocation(line: 89, column: 42, scope: !6)
!88 = !DILocation(line: 89, column: 35, scope: !6)
!89 = !DILocation(line: 89, column: 49, scope: !6)
!90 = !DILocation(line: 90, column: 35, scope: !6)
!91 = !DILocation(line: 90, column: 49, scope: !6)
!92 = !DILocation(line: 94, column: 25, scope: !6)
!93 = !DILocation(line: 96, column: 24, scope: !6)
!94 = !DILocation(line: 97, column: 32, scope: !6)
!95 = !DILocation(line: 113, column: 29, scope: !6)
!96 = !DILocation(line: 86, column: 115, scope: !6)
!97 = !DILocation(line: 92, column: 24, scope: !6)
!98 = !DILocation(line: 90, column: 102, scope: !6)
!99 = !DILocation(line: 88, column: 103, scope: !6)
!100 = !DILocation(line: 98, column: 24, scope: !6)
!101 = !DILocation(line: 101, column: 24, scope: !6)
!102 = !DILocation(line: 103, column: 24, scope: !6)
!103 = !DILocation(line: 104, column: 24, scope: !6)
!104 = !DILocation(line: 106, column: 24, scope: !6)
!105 = !DILocation(line: 107, column: 24, scope: !6)
!106 = !DILocation(line: 112, column: 50, scope: !6)
!107 = !DILocation(line: 110, column: 50, scope: !6)
!108 = !DILocation(line: 113, column: 53, scope: !6)
!109 = !DILocation(line: 110, column: 29, scope: !34, inlinedAt: !110)
!110 = !DILocation(line: 114, column: 40, scope: !6)
!111 = !DILocation(line: 94, column: 15, scope: !69, inlinedAt: !110)
!112 = !DILocation(line: 96, column: 21, scope: !69, inlinedAt: !110)
!113 = !DILocation(line: 96, column: 16, scope: !69, inlinedAt: !110)
!114 = !DILocation(line: 97, column: 29, scope: !69, inlinedAt: !110)
!115 = !DILocation(line: 115, column: 29, scope: !34, inlinedAt: !116)
!116 = !DILocation(line: 115, column: 40, scope: !6)
!117 = !DILocation(line: 102, column: 15, scope: !69, inlinedAt: !116)
!118 = !DILocation(line: 104, column: 21, scope: !69, inlinedAt: !116)
!119 = !DILocation(line: 104, column: 16, scope: !69, inlinedAt: !116)
!120 = !DILocation(line: 105, column: 29, scope: !69, inlinedAt: !116)
!121 = !DILocation(line: 116, column: 25, scope: !6)
!122 = !DILocation(line: 116, column: 37, scope: !6)
!123 = !DILocation(line: 117, column: 25, scope: !6)
!124 = !DILocation(line: 117, column: 37, scope: !6)
!125 = !DILocation(line: 124, column: 53, scope: !6)
!126 = !DILocation(line: 124, column: 115, scope: !6)
!127 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !128)
!128 = !DILocation(line: 126, column: 46, scope: !6)
!129 = !DILocation(line: 127, column: 17, scope: !6)
!130 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !131)
!131 = !DILocation(line: 128, column: 46, scope: !6)
!132 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !133)
!133 = !DILocation(line: 129, column: 46, scope: !6)
!134 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !133)
!135 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !133)
!136 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !133)
!137 = !DILocation(line: 131, column: 24, scope: !6)
!138 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !139)
!139 = !DILocation(line: 134, column: 46, scope: !6)
!140 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !139)
!141 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !139)
!142 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !139)
!143 = !DILocation(line: 137, column: 25, scope: !6)
!144 = !DILocation(line: 140, column: 24, scope: !6)
!145 = !DILocation(line: 141, column: 36, scope: !6)
!146 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !147)
!147 = !DILocation(line: 144, column: 46, scope: !6)
!148 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !147)
!149 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !147)
!150 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !147)
!151 = !DILocation(line: 94, column: 15, scope: !34, inlinedAt: !152)
!152 = !DILocation(line: 146, column: 46, scope: !6)
!153 = !DILocation(line: 96, column: 21, scope: !34, inlinedAt: !152)
!154 = !DILocation(line: 96, column: 16, scope: !34, inlinedAt: !152)
!155 = !DILocation(line: 148, column: 25, scope: !6)
!156 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !152)
!157 = !DILocation(line: 149, column: 29, scope: !6)
!158 = !DILocation(line: 149, column: 53, scope: !6)
!159 = !DILocation(line: 118, column: 4, scope: !6)
