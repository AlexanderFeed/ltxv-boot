; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused__to_copy_add_mean_pow_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 3, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 5, !dbg !11
  %15 = and i32 %14, 7, !dbg !11
  %16 = and i32 %13, 7, !dbg !11
  %17 = or disjoint i32 %15, %12, !dbg !12
  %18 = or disjoint i32 %12, %16, !dbg !12
  %19 = icmp slt i32 %17, 86400, !dbg !13
  %20 = icmp slt i32 %18, 86400, !dbg !13
  %21 = shl i32 %13, 2, !dbg !14
  %22 = and i32 %21, 124, !dbg !14
  %23 = sdiv i32 %17, 24, !dbg !15
  %24 = mul i32 %23, 24, !dbg !16
  %.decomposed = sub i32 %17, %24, !dbg !16
  %25 = shl i32 %17, 7, !dbg !17
  %26 = or disjoint i32 %25, %22, !dbg !18
  %27 = sext i32 %26 to i64, !dbg !19
  %28 = getelementptr i32, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %19) #3, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %34 = sext i32 %23 to i64, !dbg !21
  %35 = getelementptr bfloat, ptr addrspace(1) %1, i64 %34, !dbg !21
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %19) #3, !dbg !22
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %19) #3, !dbg !22
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %19) #3, !dbg !22
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %19) #3, !dbg !22
  %40 = bitcast i16 %39 to bfloat, !dbg !22
  %41 = getelementptr bfloat, ptr addrspace(1) %2, i64 %34, !dbg !23
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %19) #3, !dbg !24
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %19) #3, !dbg !24
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %19) #3, !dbg !24
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %19) #3, !dbg !24
  %46 = bitcast i16 %45 to bfloat, !dbg !24
  %47 = shl nsw i32 %.decomposed, 7, !dbg !25
  %48 = or disjoint i32 %47, %22, !dbg !26
  %49 = sext i32 %48 to i64, !dbg !27
  %50 = getelementptr bfloat, ptr addrspace(1) %3, i64 %49, !dbg !27
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %50, i1 %19) #3, !dbg !28
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !28
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !28
  %54 = extractvalue { i32, i32 } %51, 1, !dbg !28
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !28
  %56 = getelementptr bfloat, ptr addrspace(1) %4, i64 %49, !dbg !29
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %56, i1 %19) #3, !dbg !30
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !30
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !30
  %60 = extractvalue { i32, i32 } %57, 1, !dbg !30
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !30
  %.inv = fcmp oge bfloat %40, 0xR0000, !dbg !31
  %62 = select i1 %.inv, bfloat 0xR0000, bfloat %40, !dbg !31
  %63 = fpext bfloat %62 to float, !dbg !31
  %64 = fsub float 0.000000e+00, %63, !dbg !35
  %.inv1 = fcmp ole bfloat %46, 0xR0000, !dbg !36
  %65 = select i1 %.inv1, bfloat 0xR0000, bfloat %46, !dbg !36
  %66 = fpext bfloat %65 to float, !dbg !36
  %67 = fcmp ogt float %64, %66, !dbg !38
  %68 = fcmp uno float %64, 0.000000e+00, !dbg !40
  %69 = or i1 %68, %67, !dbg !41
  %70 = select i1 %69, float %64, float %66, !dbg !42
  %71 = fmul float %70, 0x3F80204080000000, !dbg !43
  %72 = fcmp ogt float %71, 0x3EE4F8B580000000, !dbg !44
  %73 = fcmp uno float %71, 0.000000e+00, !dbg !46
  %74 = or i1 %72, %73, !dbg !47
  %75 = select i1 %74, float %71, float 0x3EE4F8B580000000, !dbg !48
  %76 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !49
  %77 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !50
  %78 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !51
  %79 = insertelement <2 x i32> %78, i32 %31, i64 1, !dbg !51
  %80 = sitofp <2 x i32> %79 to <2 x float>, !dbg !51
  %81 = insertelement <2 x float> poison, float %75, i64 0, !dbg !52
  %82 = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %83 = fmul <2 x float> %82, %80, !dbg !52
  %84 = fmul <2 x float> %83, %76, !dbg !53
  %85 = fadd <2 x float> %84, %77, !dbg !54
  %86 = fmul <2 x float> %85, %85, !dbg !55
  %87 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !49
  %88 = fpext <2 x bfloat> %61 to <2 x float>, !dbg !50
  %89 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !51
  %90 = insertelement <2 x i32> %89, i32 %33, i64 1, !dbg !51
  %91 = sitofp <2 x i32> %90 to <2 x float>, !dbg !51
  %92 = fmul <2 x float> %82, %91, !dbg !52
  %93 = fmul <2 x float> %92, %87, !dbg !53
  %94 = fadd <2 x float> %93, %88, !dbg !54
  %95 = fmul <2 x float> %94, %94, !dbg !55
  %shift = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %96 = fadd <2 x float> %86, %shift, !dbg !56
  %97 = fadd <2 x float> %95, %96, !dbg !56
  %shift2 = shufflevector <2 x float> %95, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %98 = fadd <2 x float> %shift2, %97, !dbg !56
  %99 = extractelement <2 x float> %98, i64 0, !dbg !56
  %100 = select i1 %19, float %99, float 0.000000e+00, !dbg !56
  %101 = bitcast float %100 to i32, !dbg !61
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 16, i32 31), !dbg !61
  %103 = bitcast i32 %102 to float, !dbg !61
  %104 = fadd float %100, %103, !dbg !56
  %105 = bitcast float %104 to i32, !dbg !61
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 8, i32 31), !dbg !61
  %107 = bitcast i32 %106 to float, !dbg !61
  %108 = fadd float %104, %107, !dbg !56
  %109 = bitcast float %108 to i32, !dbg !61
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 4, i32 31), !dbg !61
  %111 = bitcast i32 %110 to float, !dbg !61
  %112 = fadd float %108, %111, !dbg !56
  %113 = bitcast float %112 to i32, !dbg !61
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 2, i32 31), !dbg !61
  %115 = bitcast i32 %114 to float, !dbg !61
  %116 = fadd float %112, %115, !dbg !56
  %117 = bitcast float %116 to i32, !dbg !61
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !61
  %119 = bitcast i32 %118 to float, !dbg !61
  %120 = fadd float %116, %119, !dbg !56
  %121 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !62
  %122 = bitcast float %120 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #3, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %123 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !62
  %124 = load i32, ptr addrspace(3) %123, align 4, !dbg !62
  %125 = getelementptr bfloat, ptr addrspace(1) %5, i64 %27, !dbg !63
  %126 = fptrunc <2 x float> %85 to <2 x bfloat>, !dbg !64
  %127 = fptrunc <2 x float> %94 to <2 x bfloat>, !dbg !64
  %128 = bitcast <2 x bfloat> %126 to i32, !dbg !64
  %129 = bitcast <2 x bfloat> %127 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %128, i32 %129, ptr addrspace(1) %125, i1 %19) #3, !dbg !64
  %130 = sext i32 %18 to i64, !dbg !65
  %131 = getelementptr float, ptr addrspace(1) %6, i64 %130, !dbg !65
  %132 = and i32 %13, 248, !dbg !66
  %133 = icmp eq i32 %132, 0, !dbg !66
  %134 = and i1 %133, %20, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %131, i1 %134) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6l4nhxfwkm35it64df37pcj5fh6uxgbsrmcpdepbvu2smp5xxll.py", directory: "/tmp/torchinductor_root/6l")
!4 = !{ptr @triton_per_fused__to_copy_add_mean_pow_4, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_mean_pow_4", linkageName: "triton_per_fused__to_copy_add_mean_pow_4", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 44, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 21, scope: !6)
!14 = !DILocation(line: 27, column: 38, scope: !6)
!15 = !DILocation(line: 34, column: 19, scope: !6)
!16 = !DILocation(line: 35, column: 19, scope: !6)
!17 = !DILocation(line: 36, column: 41, scope: !6)
!18 = !DILocation(line: 36, column: 37, scope: !6)
!19 = !DILocation(line: 36, column: 30, scope: !6)
!20 = !DILocation(line: 36, column: 46, scope: !6)
!21 = !DILocation(line: 37, column: 30, scope: !6)
!22 = !DILocation(line: 37, column: 35, scope: !6)
!23 = !DILocation(line: 38, column: 30, scope: !6)
!24 = !DILocation(line: 38, column: 35, scope: !6)
!25 = !DILocation(line: 39, column: 42, scope: !6)
!26 = !DILocation(line: 39, column: 38, scope: !6)
!27 = !DILocation(line: 39, column: 31, scope: !6)
!28 = !DILocation(line: 39, column: 47, scope: !6)
!29 = !DILocation(line: 40, column: 31, scope: !6)
!30 = !DILocation(line: 40, column: 47, scope: !6)
!31 = !DILocation(line: 97, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 43, column: 40, scope: !6)
!35 = !DILocation(line: 44, column: 12, scope: !6)
!36 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !37)
!37 = !DILocation(line: 45, column: 40, scope: !6)
!38 = !DILocation(line: 102, column: 15, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 46, column: 40, scope: !6)
!40 = !DILocation(line: 104, column: 21, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 104, column: 16, scope: !32, inlinedAt: !39)
!42 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !39)
!43 = !DILocation(line: 48, column: 19, scope: !6)
!44 = !DILocation(line: 102, column: 15, scope: !32, inlinedAt: !45)
!45 = !DILocation(line: 51, column: 42, scope: !6)
!46 = !DILocation(line: 104, column: 21, scope: !32, inlinedAt: !45)
!47 = !DILocation(line: 104, column: 16, scope: !32, inlinedAt: !45)
!48 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !45)
!49 = !DILocation(line: 39, column: 98, scope: !6)
!50 = !DILocation(line: 40, column: 98, scope: !6)
!51 = !DILocation(line: 41, column: 19, scope: !6)
!52 = !DILocation(line: 53, column: 19, scope: !6)
!53 = !DILocation(line: 54, column: 20, scope: !6)
!54 = !DILocation(line: 55, column: 20, scope: !6)
!55 = !DILocation(line: 57, column: 20, scope: !6)
!56 = !DILocation(line: 256, column: 15, scope: !57, inlinedAt: !60)
!57 = distinct !DILexicalBlockFile(scope: !59, file: !58, discriminator: 0)
!58 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!59 = distinct !DILexicalBlockFile(scope: !6, file: !58, discriminator: 0)
!60 = !DILocation(line: 60, column: 26, scope: !6)
!61 = !DILocation(line: 286, column: 36, scope: !59, inlinedAt: !60)
!62 = !DILocation(line: 60, column: 29, scope: !6)
!63 = !DILocation(line: 61, column: 25, scope: !6)
!64 = !DILocation(line: 61, column: 48, scope: !6)
!65 = !DILocation(line: 62, column: 25, scope: !6)
!66 = !DILocation(line: 62, column: 37, scope: !6)
!67 = !DILocation(line: 62, column: 4, scope: !6)
