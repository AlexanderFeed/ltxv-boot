; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 1, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 1, !dbg !11
  %21 = or disjoint i32 %18, 1, !dbg !12
  %22 = or disjoint i32 %18, %20, !dbg !12
  %23 = icmp slt i32 %18, 3600, !dbg !13
  %24 = icmp slt i32 %22, 3600, !dbg !13
  %25 = shl i32 %19, 4, !dbg !14
  %26 = and i32 %25, 2032, !dbg !14
  %27 = or disjoint i32 %26, 8, !dbg !14
  %28 = shl i32 %19, 3, !dbg !14
  %29 = and i32 %28, 1016, !dbg !14
  %30 = or disjoint i32 %29, 1024, !dbg !14
  %31 = mul i32 %17, 6144, !dbg !15
  %32 = mul i32 %21, 3072, !dbg !15
  %33 = zext nneg i32 %26 to i64, !dbg !16
  br label %34, !dbg !16

34:                                               ; preds = %16, %._crit_edge
  %35 = phi i1 [ true, %16 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %16 ], [ 2048, %._crit_edge ]
  %36 = phi float [ 0.000000e+00, %16 ], [ %603, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %16 ], [ %604, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %16 ], [ %605, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %16 ], [ %606, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %16 ], [ %607, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %16 ], [ %608, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %16 ], [ %609, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %16 ], [ %610, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %16 ], [ %611, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %16 ], [ %612, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %16 ], [ %613, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %16 ], [ %614, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %16 ], [ %615, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %16 ], [ %616, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %16 ], [ %617, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %16 ], [ %618, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %16 ], [ %619, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %16 ], [ %620, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %16 ], [ %621, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %16 ], [ %622, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %16 ], [ %623, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %16 ], [ %624, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %16 ], [ %625, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %16 ], [ %626, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %16 ], [ %627, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %16 ], [ %628, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %16 ], [ %629, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %16 ], [ %630, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %16 ], [ %631, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %16 ], [ %632, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %16 ], [ %633, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %16 ], [ %634, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %16 ], [ %571, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %16 ], [ %572, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %16 ], [ %573, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %16 ], [ %574, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %16 ], [ %575, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %16 ], [ %576, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %16 ], [ %577, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %16 ], [ %578, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %16 ], [ %579, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %16 ], [ %580, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %16 ], [ %581, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %16 ], [ %582, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %16 ], [ %583, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %16 ], [ %584, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %16 ], [ %585, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %16 ], [ %586, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %16 ], [ %587, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %16 ], [ %588, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %16 ], [ %589, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %16 ], [ %590, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %16 ], [ %591, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %16 ], [ %592, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %16 ], [ %593, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %16 ], [ %594, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %16 ], [ %595, %._crit_edge ]
  %93 = phi float [ 0.000000e+00, %16 ], [ %596, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %16 ], [ %597, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %16 ], [ %598, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %16 ], [ %599, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %16 ], [ %600, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %16 ], [ %601, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %16 ], [ %602, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %16 ], [ %539, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %16 ], [ %540, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %16 ], [ %541, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %16 ], [ %542, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %16 ], [ %543, %._crit_edge ]
  %105 = phi float [ 0.000000e+00, %16 ], [ %544, %._crit_edge ]
  %106 = phi float [ 0.000000e+00, %16 ], [ %545, %._crit_edge ]
  %107 = phi float [ 0.000000e+00, %16 ], [ %546, %._crit_edge ]
  %108 = phi float [ 0.000000e+00, %16 ], [ %547, %._crit_edge ]
  %109 = phi float [ 0.000000e+00, %16 ], [ %548, %._crit_edge ]
  %110 = phi float [ 0.000000e+00, %16 ], [ %549, %._crit_edge ]
  %111 = phi float [ 0.000000e+00, %16 ], [ %550, %._crit_edge ]
  %112 = phi float [ 0.000000e+00, %16 ], [ %551, %._crit_edge ]
  %113 = phi float [ 0.000000e+00, %16 ], [ %552, %._crit_edge ]
  %114 = phi float [ 0.000000e+00, %16 ], [ %553, %._crit_edge ]
  %115 = phi float [ 0.000000e+00, %16 ], [ %554, %._crit_edge ]
  %116 = phi float [ 0.000000e+00, %16 ], [ %555, %._crit_edge ]
  %117 = phi float [ 0.000000e+00, %16 ], [ %556, %._crit_edge ]
  %118 = phi float [ 0.000000e+00, %16 ], [ %557, %._crit_edge ]
  %119 = phi float [ 0.000000e+00, %16 ], [ %558, %._crit_edge ]
  %120 = phi float [ 0.000000e+00, %16 ], [ %559, %._crit_edge ]
  %121 = phi float [ 0.000000e+00, %16 ], [ %560, %._crit_edge ]
  %122 = phi float [ 0.000000e+00, %16 ], [ %561, %._crit_edge ]
  %123 = phi float [ 0.000000e+00, %16 ], [ %562, %._crit_edge ]
  %124 = phi float [ 0.000000e+00, %16 ], [ %563, %._crit_edge ]
  %125 = phi float [ 0.000000e+00, %16 ], [ %564, %._crit_edge ]
  %126 = phi float [ 0.000000e+00, %16 ], [ %565, %._crit_edge ]
  %127 = phi float [ 0.000000e+00, %16 ], [ %566, %._crit_edge ]
  %128 = phi float [ 0.000000e+00, %16 ], [ %567, %._crit_edge ]
  %129 = phi float [ 0.000000e+00, %16 ], [ %568, %._crit_edge ]
  %130 = phi float [ 0.000000e+00, %16 ], [ %569, %._crit_edge ]
  %131 = phi float [ 0.000000e+00, %16 ], [ %570, %._crit_edge ]
  %132 = or disjoint i64 %indvars.iv, %33, !dbg !17
  %133 = icmp samesign ult i64 %132, 3072, !dbg !18
  %134 = trunc nuw nsw i64 %132 to i32, !dbg !19
  %135 = add i32 %31, %134, !dbg !19
  %136 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %137 = or disjoint i32 %27, %136, !dbg !19
  %138 = add i32 %137, %31, !dbg !19
  %139 = add i32 %32, %134, !dbg !19
  %140 = add i32 %137, %32, !dbg !19
  %141 = sext i32 %135 to i64, !dbg !20
  %142 = getelementptr bfloat, ptr addrspace(1) %0, i64 %141, !dbg !20
  %143 = sext i32 %138 to i64, !dbg !20
  %144 = getelementptr bfloat, ptr addrspace(1) %0, i64 %143, !dbg !20
  %145 = sext i32 %139 to i64, !dbg !20
  %146 = getelementptr bfloat, ptr addrspace(1) %0, i64 %145, !dbg !20
  %147 = sext i32 %140 to i64, !dbg !20
  %148 = getelementptr bfloat, ptr addrspace(1) %0, i64 %147, !dbg !20
  %149 = and i1 %23, %133, !dbg !21
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %142, i1 %149) #5, !dbg !22
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !22
  %152 = bitcast i32 %151 to <2 x bfloat>, !dbg !22
  %153 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !22
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !22
  %155 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !22
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !22
  %157 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !22
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !22
  %159 = extractelement <2 x bfloat> %152, i64 0, !dbg !22
  %160 = extractelement <2 x bfloat> %152, i64 1, !dbg !22
  %161 = extractelement <2 x bfloat> %154, i64 0, !dbg !22
  %162 = extractelement <2 x bfloat> %154, i64 1, !dbg !22
  %163 = extractelement <2 x bfloat> %156, i64 0, !dbg !22
  %164 = extractelement <2 x bfloat> %156, i64 1, !dbg !22
  %165 = extractelement <2 x bfloat> %158, i64 0, !dbg !22
  %166 = extractelement <2 x bfloat> %158, i64 1, !dbg !22
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %144, i1 %149) #5, !dbg !22
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !22
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !22
  %170 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !22
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !22
  %172 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !22
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !22
  %174 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !22
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !22
  %176 = extractelement <2 x bfloat> %169, i64 0, !dbg !22
  %177 = extractelement <2 x bfloat> %169, i64 1, !dbg !22
  %178 = extractelement <2 x bfloat> %171, i64 0, !dbg !22
  %179 = extractelement <2 x bfloat> %171, i64 1, !dbg !22
  %180 = extractelement <2 x bfloat> %173, i64 0, !dbg !22
  %181 = extractelement <2 x bfloat> %173, i64 1, !dbg !22
  %182 = extractelement <2 x bfloat> %175, i64 0, !dbg !22
  %183 = extractelement <2 x bfloat> %175, i64 1, !dbg !22
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %146, i1 %149) #5, !dbg !22
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !22
  %186 = bitcast i32 %185 to <2 x bfloat>, !dbg !22
  %187 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !22
  %188 = bitcast i32 %187 to <2 x bfloat>, !dbg !22
  %189 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !22
  %190 = bitcast i32 %189 to <2 x bfloat>, !dbg !22
  %191 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !22
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !22
  %193 = extractelement <2 x bfloat> %186, i64 0, !dbg !22
  %194 = extractelement <2 x bfloat> %186, i64 1, !dbg !22
  %195 = extractelement <2 x bfloat> %188, i64 0, !dbg !22
  %196 = extractelement <2 x bfloat> %188, i64 1, !dbg !22
  %197 = extractelement <2 x bfloat> %190, i64 0, !dbg !22
  %198 = extractelement <2 x bfloat> %190, i64 1, !dbg !22
  %199 = extractelement <2 x bfloat> %192, i64 0, !dbg !22
  %200 = extractelement <2 x bfloat> %192, i64 1, !dbg !22
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %148, i1 %149) #5, !dbg !22
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !22
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !22
  %204 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !22
  %205 = bitcast i32 %204 to <2 x bfloat>, !dbg !22
  %206 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !22
  %207 = bitcast i32 %206 to <2 x bfloat>, !dbg !22
  %208 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !22
  %209 = bitcast i32 %208 to <2 x bfloat>, !dbg !22
  %210 = extractelement <2 x bfloat> %203, i64 0, !dbg !22
  %211 = extractelement <2 x bfloat> %203, i64 1, !dbg !22
  %212 = extractelement <2 x bfloat> %205, i64 0, !dbg !22
  %213 = extractelement <2 x bfloat> %205, i64 1, !dbg !22
  %214 = extractelement <2 x bfloat> %207, i64 0, !dbg !22
  %215 = extractelement <2 x bfloat> %207, i64 1, !dbg !22
  %216 = extractelement <2 x bfloat> %209, i64 0, !dbg !22
  %217 = extractelement <2 x bfloat> %209, i64 1, !dbg !22
  %218 = fpext bfloat %159 to float, !dbg !23
  %219 = fpext bfloat %160 to float, !dbg !23
  %220 = fpext bfloat %161 to float, !dbg !23
  %221 = fpext bfloat %162 to float, !dbg !23
  %222 = fpext bfloat %163 to float, !dbg !23
  %223 = fpext bfloat %164 to float, !dbg !23
  %224 = fpext bfloat %165 to float, !dbg !23
  %225 = fpext bfloat %166 to float, !dbg !23
  %226 = fpext bfloat %176 to float, !dbg !23
  %227 = fpext bfloat %177 to float, !dbg !23
  %228 = fpext bfloat %178 to float, !dbg !23
  %229 = fpext bfloat %179 to float, !dbg !23
  %230 = fpext bfloat %180 to float, !dbg !23
  %231 = fpext bfloat %181 to float, !dbg !23
  %232 = fpext bfloat %182 to float, !dbg !23
  %233 = fpext bfloat %183 to float, !dbg !23
  %234 = fpext bfloat %193 to float, !dbg !23
  %235 = fpext bfloat %194 to float, !dbg !23
  %236 = fpext bfloat %195 to float, !dbg !23
  %237 = fpext bfloat %196 to float, !dbg !23
  %238 = fpext bfloat %197 to float, !dbg !23
  %239 = fpext bfloat %198 to float, !dbg !23
  %240 = fpext bfloat %199 to float, !dbg !23
  %241 = fpext bfloat %200 to float, !dbg !23
  %242 = fpext bfloat %210 to float, !dbg !23
  %243 = fpext bfloat %211 to float, !dbg !23
  %244 = fpext bfloat %212 to float, !dbg !23
  %245 = fpext bfloat %213 to float, !dbg !23
  %246 = fpext bfloat %214 to float, !dbg !23
  %247 = fpext bfloat %215 to float, !dbg !23
  %248 = fpext bfloat %216 to float, !dbg !23
  %249 = fpext bfloat %217 to float, !dbg !23
  br i1 %35, label %._crit_edge, label %250, !dbg !24

250:                                              ; preds = %34
  %251 = fsub float %218, %100, !dbg !28
  %252 = fsub float %219, %101, !dbg !28
  %253 = fsub float %220, %102, !dbg !28
  %254 = fsub float %221, %103, !dbg !28
  %255 = fsub float %222, %104, !dbg !28
  %256 = fsub float %223, %105, !dbg !28
  %257 = fsub float %224, %106, !dbg !28
  %258 = fsub float %225, %107, !dbg !28
  %259 = fsub float %226, %108, !dbg !28
  %260 = fsub float %227, %109, !dbg !28
  %261 = fsub float %228, %110, !dbg !28
  %262 = fsub float %229, %111, !dbg !28
  %263 = fsub float %230, %112, !dbg !28
  %264 = fsub float %231, %113, !dbg !28
  %265 = fsub float %232, %114, !dbg !28
  %266 = fsub float %233, %115, !dbg !28
  %267 = fsub float %234, %116, !dbg !28
  %268 = fsub float %235, %117, !dbg !28
  %269 = fsub float %236, %118, !dbg !28
  %270 = fsub float %237, %119, !dbg !28
  %271 = fsub float %238, %120, !dbg !28
  %272 = fsub float %239, %121, !dbg !28
  %273 = fsub float %240, %122, !dbg !28
  %274 = fsub float %241, %123, !dbg !28
  %275 = fsub float %242, %124, !dbg !28
  %276 = fsub float %243, %125, !dbg !28
  %277 = fsub float %244, %126, !dbg !28
  %278 = fsub float %245, %127, !dbg !28
  %279 = fsub float %246, %128, !dbg !28
  %280 = fsub float %247, %129, !dbg !28
  %281 = fsub float %248, %130, !dbg !28
  %282 = fsub float %249, %131, !dbg !28
  %283 = fadd float %36, 1.000000e+00, !dbg !29
  %284 = fadd float %37, 1.000000e+00, !dbg !29
  %285 = fadd float %38, 1.000000e+00, !dbg !29
  %286 = fadd float %39, 1.000000e+00, !dbg !29
  %287 = fadd float %40, 1.000000e+00, !dbg !29
  %288 = fadd float %41, 1.000000e+00, !dbg !29
  %289 = fadd float %42, 1.000000e+00, !dbg !29
  %290 = fadd float %43, 1.000000e+00, !dbg !29
  %291 = fadd float %44, 1.000000e+00, !dbg !29
  %292 = fadd float %45, 1.000000e+00, !dbg !29
  %293 = fadd float %46, 1.000000e+00, !dbg !29
  %294 = fadd float %47, 1.000000e+00, !dbg !29
  %295 = fadd float %48, 1.000000e+00, !dbg !29
  %296 = fadd float %49, 1.000000e+00, !dbg !29
  %297 = fadd float %50, 1.000000e+00, !dbg !29
  %298 = fadd float %51, 1.000000e+00, !dbg !29
  %299 = fadd float %52, 1.000000e+00, !dbg !29
  %300 = fadd float %53, 1.000000e+00, !dbg !29
  %301 = fadd float %54, 1.000000e+00, !dbg !29
  %302 = fadd float %55, 1.000000e+00, !dbg !29
  %303 = fadd float %56, 1.000000e+00, !dbg !29
  %304 = fadd float %57, 1.000000e+00, !dbg !29
  %305 = fadd float %58, 1.000000e+00, !dbg !29
  %306 = fadd float %59, 1.000000e+00, !dbg !29
  %307 = fadd float %60, 1.000000e+00, !dbg !29
  %308 = fadd float %61, 1.000000e+00, !dbg !29
  %309 = fadd float %62, 1.000000e+00, !dbg !29
  %310 = fadd float %63, 1.000000e+00, !dbg !29
  %311 = fadd float %64, 1.000000e+00, !dbg !29
  %312 = fadd float %65, 1.000000e+00, !dbg !29
  %313 = fadd float %66, 1.000000e+00, !dbg !29
  %314 = fadd float %67, 1.000000e+00, !dbg !29
  %315 = tail call float @llvm.nvvm.div.full(float %251, float %283), !dbg !30
  %316 = tail call float @llvm.nvvm.div.full(float %252, float %284), !dbg !30
  %317 = tail call float @llvm.nvvm.div.full(float %253, float %285), !dbg !30
  %318 = tail call float @llvm.nvvm.div.full(float %254, float %286), !dbg !30
  %319 = tail call float @llvm.nvvm.div.full(float %255, float %287), !dbg !30
  %320 = tail call float @llvm.nvvm.div.full(float %256, float %288), !dbg !30
  %321 = tail call float @llvm.nvvm.div.full(float %257, float %289), !dbg !30
  %322 = tail call float @llvm.nvvm.div.full(float %258, float %290), !dbg !30
  %323 = tail call float @llvm.nvvm.div.full(float %259, float %291), !dbg !30
  %324 = tail call float @llvm.nvvm.div.full(float %260, float %292), !dbg !30
  %325 = tail call float @llvm.nvvm.div.full(float %261, float %293), !dbg !30
  %326 = tail call float @llvm.nvvm.div.full(float %262, float %294), !dbg !30
  %327 = tail call float @llvm.nvvm.div.full(float %263, float %295), !dbg !30
  %328 = tail call float @llvm.nvvm.div.full(float %264, float %296), !dbg !30
  %329 = tail call float @llvm.nvvm.div.full(float %265, float %297), !dbg !30
  %330 = tail call float @llvm.nvvm.div.full(float %266, float %298), !dbg !30
  %331 = tail call float @llvm.nvvm.div.full(float %267, float %299), !dbg !30
  %332 = tail call float @llvm.nvvm.div.full(float %268, float %300), !dbg !30
  %333 = tail call float @llvm.nvvm.div.full(float %269, float %301), !dbg !30
  %334 = tail call float @llvm.nvvm.div.full(float %270, float %302), !dbg !30
  %335 = tail call float @llvm.nvvm.div.full(float %271, float %303), !dbg !30
  %336 = tail call float @llvm.nvvm.div.full(float %272, float %304), !dbg !30
  %337 = tail call float @llvm.nvvm.div.full(float %273, float %305), !dbg !30
  %338 = tail call float @llvm.nvvm.div.full(float %274, float %306), !dbg !30
  %339 = tail call float @llvm.nvvm.div.full(float %275, float %307), !dbg !30
  %340 = tail call float @llvm.nvvm.div.full(float %276, float %308), !dbg !30
  %341 = tail call float @llvm.nvvm.div.full(float %277, float %309), !dbg !30
  %342 = tail call float @llvm.nvvm.div.full(float %278, float %310), !dbg !30
  %343 = tail call float @llvm.nvvm.div.full(float %279, float %311), !dbg !30
  %344 = tail call float @llvm.nvvm.div.full(float %280, float %312), !dbg !30
  %345 = tail call float @llvm.nvvm.div.full(float %281, float %313), !dbg !30
  %346 = tail call float @llvm.nvvm.div.full(float %282, float %314), !dbg !30
  %347 = fadd float %100, %315, !dbg !31
  %348 = fadd float %101, %316, !dbg !31
  %349 = fadd float %102, %317, !dbg !31
  %350 = fadd float %103, %318, !dbg !31
  %351 = fadd float %104, %319, !dbg !31
  %352 = fadd float %105, %320, !dbg !31
  %353 = fadd float %106, %321, !dbg !31
  %354 = fadd float %107, %322, !dbg !31
  %355 = fadd float %108, %323, !dbg !31
  %356 = fadd float %109, %324, !dbg !31
  %357 = fadd float %110, %325, !dbg !31
  %358 = fadd float %111, %326, !dbg !31
  %359 = fadd float %112, %327, !dbg !31
  %360 = fadd float %113, %328, !dbg !31
  %361 = fadd float %114, %329, !dbg !31
  %362 = fadd float %115, %330, !dbg !31
  %363 = fadd float %116, %331, !dbg !31
  %364 = fadd float %117, %332, !dbg !31
  %365 = fadd float %118, %333, !dbg !31
  %366 = fadd float %119, %334, !dbg !31
  %367 = fadd float %120, %335, !dbg !31
  %368 = fadd float %121, %336, !dbg !31
  %369 = fadd float %122, %337, !dbg !31
  %370 = fadd float %123, %338, !dbg !31
  %371 = fadd float %124, %339, !dbg !31
  %372 = fadd float %125, %340, !dbg !31
  %373 = fadd float %126, %341, !dbg !31
  %374 = fadd float %127, %342, !dbg !31
  %375 = fadd float %128, %343, !dbg !31
  %376 = fadd float %129, %344, !dbg !31
  %377 = fadd float %130, %345, !dbg !31
  %378 = fadd float %131, %346, !dbg !31
  %379 = fsub float %218, %347, !dbg !32
  %380 = fsub float %219, %348, !dbg !32
  %381 = fsub float %220, %349, !dbg !32
  %382 = fsub float %221, %350, !dbg !32
  %383 = fsub float %222, %351, !dbg !32
  %384 = fsub float %223, %352, !dbg !32
  %385 = fsub float %224, %353, !dbg !32
  %386 = fsub float %225, %354, !dbg !32
  %387 = fsub float %226, %355, !dbg !32
  %388 = fsub float %227, %356, !dbg !32
  %389 = fsub float %228, %357, !dbg !32
  %390 = fsub float %229, %358, !dbg !32
  %391 = fsub float %230, %359, !dbg !32
  %392 = fsub float %231, %360, !dbg !32
  %393 = fsub float %232, %361, !dbg !32
  %394 = fsub float %233, %362, !dbg !32
  %395 = fsub float %234, %363, !dbg !32
  %396 = fsub float %235, %364, !dbg !32
  %397 = fsub float %236, %365, !dbg !32
  %398 = fsub float %237, %366, !dbg !32
  %399 = fsub float %238, %367, !dbg !32
  %400 = fsub float %239, %368, !dbg !32
  %401 = fsub float %240, %369, !dbg !32
  %402 = fsub float %241, %370, !dbg !32
  %403 = fsub float %242, %371, !dbg !32
  %404 = fsub float %243, %372, !dbg !32
  %405 = fsub float %244, %373, !dbg !32
  %406 = fsub float %245, %374, !dbg !32
  %407 = fsub float %246, %375, !dbg !32
  %408 = fsub float %247, %376, !dbg !32
  %409 = fsub float %248, %377, !dbg !32
  %410 = fsub float %249, %378, !dbg !32
  %411 = fmul float %251, %379, !dbg !33
  %412 = fmul float %252, %380, !dbg !33
  %413 = fmul float %253, %381, !dbg !33
  %414 = fmul float %254, %382, !dbg !33
  %415 = fmul float %255, %383, !dbg !33
  %416 = fmul float %256, %384, !dbg !33
  %417 = fmul float %257, %385, !dbg !33
  %418 = fmul float %258, %386, !dbg !33
  %419 = fmul float %259, %387, !dbg !33
  %420 = fmul float %260, %388, !dbg !33
  %421 = fmul float %261, %389, !dbg !33
  %422 = fmul float %262, %390, !dbg !33
  %423 = fmul float %263, %391, !dbg !33
  %424 = fmul float %264, %392, !dbg !33
  %425 = fmul float %265, %393, !dbg !33
  %426 = fmul float %266, %394, !dbg !33
  %427 = fmul float %267, %395, !dbg !33
  %428 = fmul float %268, %396, !dbg !33
  %429 = fmul float %269, %397, !dbg !33
  %430 = fmul float %270, %398, !dbg !33
  %431 = fmul float %271, %399, !dbg !33
  %432 = fmul float %272, %400, !dbg !33
  %433 = fmul float %273, %401, !dbg !33
  %434 = fmul float %274, %402, !dbg !33
  %435 = fmul float %275, %403, !dbg !33
  %436 = fmul float %276, %404, !dbg !33
  %437 = fmul float %277, %405, !dbg !33
  %438 = fmul float %278, %406, !dbg !33
  %439 = fmul float %279, %407, !dbg !33
  %440 = fmul float %280, %408, !dbg !33
  %441 = fmul float %281, %409, !dbg !33
  %442 = fmul float %282, %410, !dbg !33
  %443 = fadd float %68, %411, !dbg !34
  %444 = fadd float %69, %412, !dbg !34
  %445 = fadd float %70, %413, !dbg !34
  %446 = fadd float %71, %414, !dbg !34
  %447 = fadd float %72, %415, !dbg !34
  %448 = fadd float %73, %416, !dbg !34
  %449 = fadd float %74, %417, !dbg !34
  %450 = fadd float %75, %418, !dbg !34
  %451 = fadd float %76, %419, !dbg !34
  %452 = fadd float %77, %420, !dbg !34
  %453 = fadd float %78, %421, !dbg !34
  %454 = fadd float %79, %422, !dbg !34
  %455 = fadd float %80, %423, !dbg !34
  %456 = fadd float %81, %424, !dbg !34
  %457 = fadd float %82, %425, !dbg !34
  %458 = fadd float %83, %426, !dbg !34
  %459 = fadd float %84, %427, !dbg !34
  %460 = fadd float %85, %428, !dbg !34
  %461 = fadd float %86, %429, !dbg !34
  %462 = fadd float %87, %430, !dbg !34
  %463 = fadd float %88, %431, !dbg !34
  %464 = fadd float %89, %432, !dbg !34
  %465 = fadd float %90, %433, !dbg !34
  %466 = fadd float %91, %434, !dbg !34
  %467 = fadd float %92, %435, !dbg !34
  %468 = fadd float %93, %436, !dbg !34
  %469 = fadd float %94, %437, !dbg !34
  %470 = fadd float %95, %438, !dbg !34
  %471 = fadd float %96, %439, !dbg !34
  %472 = fadd float %97, %440, !dbg !34
  %473 = fadd float %98, %441, !dbg !34
  %474 = fadd float %99, %442, !dbg !34
  br label %._crit_edge, !dbg !24

._crit_edge:                                      ; preds = %34, %250
  %475 = phi float [ %443, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %476 = phi float [ %444, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %477 = phi float [ %445, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %478 = phi float [ %446, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %479 = phi float [ %447, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %480 = phi float [ %448, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %481 = phi float [ %449, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %482 = phi float [ %450, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %483 = phi float [ %451, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %484 = phi float [ %452, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %485 = phi float [ %453, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %486 = phi float [ %454, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %487 = phi float [ %455, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %488 = phi float [ %456, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %489 = phi float [ %457, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %490 = phi float [ %458, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %491 = phi float [ %459, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %492 = phi float [ %460, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %493 = phi float [ %461, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %494 = phi float [ %462, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %495 = phi float [ %463, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %496 = phi float [ %464, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %497 = phi float [ %465, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %498 = phi float [ %466, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %499 = phi float [ %467, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %500 = phi float [ %468, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %501 = phi float [ %469, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %502 = phi float [ %470, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %503 = phi float [ %471, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %504 = phi float [ %472, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %505 = phi float [ %473, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %506 = phi float [ %474, %250 ], [ 0.000000e+00, %34 ], !dbg !27
  %.pn99 = phi float [ %347, %250 ], [ %218, %34 ]
  %.pn97 = phi float [ %348, %250 ], [ %219, %34 ]
  %.pn95 = phi float [ %349, %250 ], [ %220, %34 ]
  %.pn93 = phi float [ %350, %250 ], [ %221, %34 ]
  %.pn91 = phi float [ %351, %250 ], [ %222, %34 ]
  %.pn89 = phi float [ %352, %250 ], [ %223, %34 ]
  %.pn87 = phi float [ %353, %250 ], [ %224, %34 ]
  %.pn85 = phi float [ %354, %250 ], [ %225, %34 ]
  %.pn83 = phi float [ %355, %250 ], [ %226, %34 ]
  %.pn81 = phi float [ %356, %250 ], [ %227, %34 ]
  %.pn79 = phi float [ %357, %250 ], [ %228, %34 ]
  %.pn77 = phi float [ %358, %250 ], [ %229, %34 ]
  %.pn75 = phi float [ %359, %250 ], [ %230, %34 ]
  %.pn73 = phi float [ %360, %250 ], [ %231, %34 ]
  %.pn71 = phi float [ %361, %250 ], [ %232, %34 ]
  %.pn69 = phi float [ %362, %250 ], [ %233, %34 ]
  %.pn67 = phi float [ %363, %250 ], [ %234, %34 ]
  %.pn65 = phi float [ %364, %250 ], [ %235, %34 ]
  %.pn63 = phi float [ %365, %250 ], [ %236, %34 ]
  %.pn61 = phi float [ %366, %250 ], [ %237, %34 ]
  %.pn59 = phi float [ %367, %250 ], [ %238, %34 ]
  %.pn57 = phi float [ %368, %250 ], [ %239, %34 ]
  %.pn55 = phi float [ %369, %250 ], [ %240, %34 ]
  %.pn53 = phi float [ %370, %250 ], [ %241, %34 ]
  %.pn51 = phi float [ %371, %250 ], [ %242, %34 ]
  %.pn49 = phi float [ %372, %250 ], [ %243, %34 ]
  %.pn47 = phi float [ %373, %250 ], [ %244, %34 ]
  %.pn45 = phi float [ %374, %250 ], [ %245, %34 ]
  %.pn43 = phi float [ %375, %250 ], [ %246, %34 ]
  %.pn41 = phi float [ %376, %250 ], [ %247, %34 ]
  %.pn39 = phi float [ %377, %250 ], [ %248, %34 ]
  %.pn37 = phi float [ %378, %250 ], [ %249, %34 ]
  %507 = phi float [ %283, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %508 = phi float [ %284, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %509 = phi float [ %285, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %510 = phi float [ %286, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %511 = phi float [ %287, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %512 = phi float [ %288, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %513 = phi float [ %289, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %514 = phi float [ %290, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %515 = phi float [ %291, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %516 = phi float [ %292, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %517 = phi float [ %293, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %518 = phi float [ %294, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %519 = phi float [ %295, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %520 = phi float [ %296, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %521 = phi float [ %297, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %522 = phi float [ %298, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %523 = phi float [ %299, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %524 = phi float [ %300, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %525 = phi float [ %301, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %526 = phi float [ %302, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %527 = phi float [ %303, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %528 = phi float [ %304, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %529 = phi float [ %305, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %530 = phi float [ %306, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %531 = phi float [ %307, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %532 = phi float [ %308, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %533 = phi float [ %309, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %534 = phi float [ %310, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %535 = phi float [ %311, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %536 = phi float [ %312, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %537 = phi float [ %313, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %538 = phi float [ %314, %250 ], [ 1.000000e+00, %34 ], !dbg !27
  %539 = select i1 %149, float %.pn99, float %100, !dbg !35
  %540 = select i1 %149, float %.pn97, float %101, !dbg !35
  %541 = select i1 %149, float %.pn95, float %102, !dbg !35
  %542 = select i1 %149, float %.pn93, float %103, !dbg !35
  %543 = select i1 %149, float %.pn91, float %104, !dbg !35
  %544 = select i1 %149, float %.pn89, float %105, !dbg !35
  %545 = select i1 %149, float %.pn87, float %106, !dbg !35
  %546 = select i1 %149, float %.pn85, float %107, !dbg !35
  %547 = select i1 %149, float %.pn83, float %108, !dbg !35
  %548 = select i1 %149, float %.pn81, float %109, !dbg !35
  %549 = select i1 %149, float %.pn79, float %110, !dbg !35
  %550 = select i1 %149, float %.pn77, float %111, !dbg !35
  %551 = select i1 %149, float %.pn75, float %112, !dbg !35
  %552 = select i1 %149, float %.pn73, float %113, !dbg !35
  %553 = select i1 %149, float %.pn71, float %114, !dbg !35
  %554 = select i1 %149, float %.pn69, float %115, !dbg !35
  %555 = select i1 %149, float %.pn67, float %116, !dbg !35
  %556 = select i1 %149, float %.pn65, float %117, !dbg !35
  %557 = select i1 %149, float %.pn63, float %118, !dbg !35
  %558 = select i1 %149, float %.pn61, float %119, !dbg !35
  %559 = select i1 %149, float %.pn59, float %120, !dbg !35
  %560 = select i1 %149, float %.pn57, float %121, !dbg !35
  %561 = select i1 %149, float %.pn55, float %122, !dbg !35
  %562 = select i1 %149, float %.pn53, float %123, !dbg !35
  %563 = select i1 %149, float %.pn51, float %124, !dbg !35
  %564 = select i1 %149, float %.pn49, float %125, !dbg !35
  %565 = select i1 %149, float %.pn47, float %126, !dbg !35
  %566 = select i1 %149, float %.pn45, float %127, !dbg !35
  %567 = select i1 %149, float %.pn43, float %128, !dbg !35
  %568 = select i1 %149, float %.pn41, float %129, !dbg !35
  %569 = select i1 %149, float %.pn39, float %130, !dbg !35
  %570 = select i1 %149, float %.pn37, float %131, !dbg !35
  %571 = select i1 %149, float %475, float %68, !dbg !36
  %572 = select i1 %149, float %476, float %69, !dbg !36
  %573 = select i1 %149, float %477, float %70, !dbg !36
  %574 = select i1 %149, float %478, float %71, !dbg !36
  %575 = select i1 %149, float %479, float %72, !dbg !36
  %576 = select i1 %149, float %480, float %73, !dbg !36
  %577 = select i1 %149, float %481, float %74, !dbg !36
  %578 = select i1 %149, float %482, float %75, !dbg !36
  %579 = select i1 %149, float %483, float %76, !dbg !36
  %580 = select i1 %149, float %484, float %77, !dbg !36
  %581 = select i1 %149, float %485, float %78, !dbg !36
  %582 = select i1 %149, float %486, float %79, !dbg !36
  %583 = select i1 %149, float %487, float %80, !dbg !36
  %584 = select i1 %149, float %488, float %81, !dbg !36
  %585 = select i1 %149, float %489, float %82, !dbg !36
  %586 = select i1 %149, float %490, float %83, !dbg !36
  %587 = select i1 %149, float %491, float %84, !dbg !36
  %588 = select i1 %149, float %492, float %85, !dbg !36
  %589 = select i1 %149, float %493, float %86, !dbg !36
  %590 = select i1 %149, float %494, float %87, !dbg !36
  %591 = select i1 %149, float %495, float %88, !dbg !36
  %592 = select i1 %149, float %496, float %89, !dbg !36
  %593 = select i1 %149, float %497, float %90, !dbg !36
  %594 = select i1 %149, float %498, float %91, !dbg !36
  %595 = select i1 %149, float %499, float %92, !dbg !36
  %596 = select i1 %149, float %500, float %93, !dbg !36
  %597 = select i1 %149, float %501, float %94, !dbg !36
  %598 = select i1 %149, float %502, float %95, !dbg !36
  %599 = select i1 %149, float %503, float %96, !dbg !36
  %600 = select i1 %149, float %504, float %97, !dbg !36
  %601 = select i1 %149, float %505, float %98, !dbg !36
  %602 = select i1 %149, float %506, float %99, !dbg !36
  %603 = select i1 %149, float %507, float %36, !dbg !37
  %604 = select i1 %149, float %508, float %37, !dbg !37
  %605 = select i1 %149, float %509, float %38, !dbg !37
  %606 = select i1 %149, float %510, float %39, !dbg !37
  %607 = select i1 %149, float %511, float %40, !dbg !37
  %608 = select i1 %149, float %512, float %41, !dbg !37
  %609 = select i1 %149, float %513, float %42, !dbg !37
  %610 = select i1 %149, float %514, float %43, !dbg !37
  %611 = select i1 %149, float %515, float %44, !dbg !37
  %612 = select i1 %149, float %516, float %45, !dbg !37
  %613 = select i1 %149, float %517, float %46, !dbg !37
  %614 = select i1 %149, float %518, float %47, !dbg !37
  %615 = select i1 %149, float %519, float %48, !dbg !37
  %616 = select i1 %149, float %520, float %49, !dbg !37
  %617 = select i1 %149, float %521, float %50, !dbg !37
  %618 = select i1 %149, float %522, float %51, !dbg !37
  %619 = select i1 %149, float %523, float %52, !dbg !37
  %620 = select i1 %149, float %524, float %53, !dbg !37
  %621 = select i1 %149, float %525, float %54, !dbg !37
  %622 = select i1 %149, float %526, float %55, !dbg !37
  %623 = select i1 %149, float %527, float %56, !dbg !37
  %624 = select i1 %149, float %528, float %57, !dbg !37
  %625 = select i1 %149, float %529, float %58, !dbg !37
  %626 = select i1 %149, float %530, float %59, !dbg !37
  %627 = select i1 %149, float %531, float %60, !dbg !37
  %628 = select i1 %149, float %532, float %61, !dbg !37
  %629 = select i1 %149, float %533, float %62, !dbg !37
  %630 = select i1 %149, float %534, float %63, !dbg !37
  %631 = select i1 %149, float %535, float %64, !dbg !37
  %632 = select i1 %149, float %536, float %65, !dbg !37
  %633 = select i1 %149, float %537, float %66, !dbg !37
  %634 = select i1 %149, float %538, float %67, !dbg !37
  br i1 %35, label %34, label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %635 = and i32 %19, 31, !dbg !11
  %636 = icmp slt i32 %21, 3600, !dbg !13
  %637 = lshr i32 %19, 5, !dbg !14
  %638 = or disjoint i32 %29, 4, !dbg !14
  %639 = or disjoint i32 %29, 1028, !dbg !14
  %640 = fsub float %540, %539, !dbg !38
  %641 = fadd float %603, %604, !dbg !41
  %642 = fcmp oeq float %641, 0.000000e+00, !dbg !42
  %643 = tail call float @llvm.nvvm.div.full(float %604, float %641), !dbg !43
  %644 = select i1 %642, float 0.000000e+00, float %643, !dbg !44
  %645 = fmul float %640, %644, !dbg !45
  %646 = fadd float %539, %645, !dbg !46
  %647 = fadd float %571, %572, !dbg !47
  %648 = fmul float %640, %640, !dbg !48
  %649 = fmul float %648, %603, !dbg !49
  %650 = fmul float %649, %644, !dbg !50
  %651 = fadd float %647, %650, !dbg !51
  %652 = fsub float %541, %646, !dbg !38
  %653 = fadd float %605, %641, !dbg !41
  %654 = fcmp oeq float %653, 0.000000e+00, !dbg !42
  %655 = tail call float @llvm.nvvm.div.full(float %605, float %653), !dbg !43
  %656 = select i1 %654, float 0.000000e+00, float %655, !dbg !44
  %657 = fmul float %656, %652, !dbg !45
  %658 = fadd float %646, %657, !dbg !46
  %659 = fadd float %573, %651, !dbg !47
  %660 = fmul float %652, %652, !dbg !48
  %661 = fmul float %641, %660, !dbg !49
  %662 = fmul float %656, %661, !dbg !50
  %663 = fadd float %659, %662, !dbg !51
  %664 = fsub float %542, %658, !dbg !38
  %665 = fadd float %606, %653, !dbg !41
  %666 = fcmp oeq float %665, 0.000000e+00, !dbg !42
  %667 = tail call float @llvm.nvvm.div.full(float %606, float %665), !dbg !43
  %668 = select i1 %666, float 0.000000e+00, float %667, !dbg !44
  %669 = fmul float %668, %664, !dbg !45
  %670 = fadd float %658, %669, !dbg !46
  %671 = fadd float %574, %663, !dbg !47
  %672 = fmul float %664, %664, !dbg !48
  %673 = fmul float %653, %672, !dbg !49
  %674 = fmul float %668, %673, !dbg !50
  %675 = fadd float %671, %674, !dbg !51
  %676 = fsub float %543, %670, !dbg !38
  %677 = fadd float %607, %665, !dbg !41
  %678 = fcmp oeq float %677, 0.000000e+00, !dbg !42
  %679 = tail call float @llvm.nvvm.div.full(float %607, float %677), !dbg !43
  %680 = select i1 %678, float 0.000000e+00, float %679, !dbg !44
  %681 = fmul float %680, %676, !dbg !45
  %682 = fadd float %670, %681, !dbg !46
  %683 = fadd float %575, %675, !dbg !47
  %684 = fmul float %676, %676, !dbg !48
  %685 = fmul float %665, %684, !dbg !49
  %686 = fmul float %680, %685, !dbg !50
  %687 = fadd float %683, %686, !dbg !51
  %688 = fsub float %544, %682, !dbg !38
  %689 = fadd float %608, %677, !dbg !41
  %690 = fcmp oeq float %689, 0.000000e+00, !dbg !42
  %691 = tail call float @llvm.nvvm.div.full(float %608, float %689), !dbg !43
  %692 = select i1 %690, float 0.000000e+00, float %691, !dbg !44
  %693 = fmul float %692, %688, !dbg !45
  %694 = fadd float %682, %693, !dbg !46
  %695 = fadd float %576, %687, !dbg !47
  %696 = fmul float %688, %688, !dbg !48
  %697 = fmul float %677, %696, !dbg !49
  %698 = fmul float %692, %697, !dbg !50
  %699 = fadd float %695, %698, !dbg !51
  %700 = fsub float %545, %694, !dbg !38
  %701 = fadd float %609, %689, !dbg !41
  %702 = fcmp oeq float %701, 0.000000e+00, !dbg !42
  %703 = tail call float @llvm.nvvm.div.full(float %609, float %701), !dbg !43
  %704 = select i1 %702, float 0.000000e+00, float %703, !dbg !44
  %705 = fmul float %704, %700, !dbg !45
  %706 = fadd float %694, %705, !dbg !46
  %707 = fadd float %577, %699, !dbg !47
  %708 = fmul float %700, %700, !dbg !48
  %709 = fmul float %689, %708, !dbg !49
  %710 = fmul float %704, %709, !dbg !50
  %711 = fadd float %707, %710, !dbg !51
  %712 = fsub float %546, %706, !dbg !38
  %713 = fadd float %610, %701, !dbg !41
  %714 = fcmp oeq float %713, 0.000000e+00, !dbg !42
  %715 = tail call float @llvm.nvvm.div.full(float %610, float %713), !dbg !43
  %716 = select i1 %714, float 0.000000e+00, float %715, !dbg !44
  %717 = fmul float %716, %712, !dbg !45
  %718 = fadd float %706, %717, !dbg !46
  %719 = fadd float %578, %711, !dbg !47
  %720 = fmul float %712, %712, !dbg !48
  %721 = fmul float %701, %720, !dbg !49
  %722 = fmul float %716, %721, !dbg !50
  %723 = fadd float %719, %722, !dbg !51
  %724 = fsub float %547, %718, !dbg !38
  %725 = fadd float %611, %713, !dbg !41
  %726 = fcmp oeq float %725, 0.000000e+00, !dbg !42
  %727 = tail call float @llvm.nvvm.div.full(float %611, float %725), !dbg !43
  %728 = select i1 %726, float 0.000000e+00, float %727, !dbg !44
  %729 = fmul float %728, %724, !dbg !45
  %730 = fadd float %718, %729, !dbg !46
  %731 = fadd float %579, %723, !dbg !47
  %732 = fmul float %724, %724, !dbg !48
  %733 = fmul float %713, %732, !dbg !49
  %734 = fmul float %728, %733, !dbg !50
  %735 = fadd float %731, %734, !dbg !51
  %736 = fsub float %548, %730, !dbg !38
  %737 = fadd float %612, %725, !dbg !41
  %738 = fcmp oeq float %737, 0.000000e+00, !dbg !42
  %739 = tail call float @llvm.nvvm.div.full(float %612, float %737), !dbg !43
  %740 = select i1 %738, float 0.000000e+00, float %739, !dbg !44
  %741 = fmul float %740, %736, !dbg !45
  %742 = fadd float %730, %741, !dbg !46
  %743 = fadd float %580, %735, !dbg !47
  %744 = fmul float %736, %736, !dbg !48
  %745 = fmul float %725, %744, !dbg !49
  %746 = fmul float %740, %745, !dbg !50
  %747 = fadd float %743, %746, !dbg !51
  %748 = fsub float %549, %742, !dbg !38
  %749 = fadd float %613, %737, !dbg !41
  %750 = fcmp oeq float %749, 0.000000e+00, !dbg !42
  %751 = tail call float @llvm.nvvm.div.full(float %613, float %749), !dbg !43
  %752 = select i1 %750, float 0.000000e+00, float %751, !dbg !44
  %753 = fmul float %752, %748, !dbg !45
  %754 = fadd float %742, %753, !dbg !46
  %755 = fadd float %581, %747, !dbg !47
  %756 = fmul float %748, %748, !dbg !48
  %757 = fmul float %737, %756, !dbg !49
  %758 = fmul float %752, %757, !dbg !50
  %759 = fadd float %755, %758, !dbg !51
  %760 = fsub float %550, %754, !dbg !38
  %761 = fadd float %614, %749, !dbg !41
  %762 = fcmp oeq float %761, 0.000000e+00, !dbg !42
  %763 = tail call float @llvm.nvvm.div.full(float %614, float %761), !dbg !43
  %764 = select i1 %762, float 0.000000e+00, float %763, !dbg !44
  %765 = fmul float %764, %760, !dbg !45
  %766 = fadd float %754, %765, !dbg !46
  %767 = fadd float %582, %759, !dbg !47
  %768 = fmul float %760, %760, !dbg !48
  %769 = fmul float %749, %768, !dbg !49
  %770 = fmul float %764, %769, !dbg !50
  %771 = fadd float %767, %770, !dbg !51
  %772 = fsub float %551, %766, !dbg !38
  %773 = fadd float %615, %761, !dbg !41
  %774 = fcmp oeq float %773, 0.000000e+00, !dbg !42
  %775 = tail call float @llvm.nvvm.div.full(float %615, float %773), !dbg !43
  %776 = select i1 %774, float 0.000000e+00, float %775, !dbg !44
  %777 = fmul float %776, %772, !dbg !45
  %778 = fadd float %766, %777, !dbg !46
  %779 = fadd float %583, %771, !dbg !47
  %780 = fmul float %772, %772, !dbg !48
  %781 = fmul float %761, %780, !dbg !49
  %782 = fmul float %776, %781, !dbg !50
  %783 = fadd float %779, %782, !dbg !51
  %784 = fsub float %552, %778, !dbg !38
  %785 = fadd float %616, %773, !dbg !41
  %786 = fcmp oeq float %785, 0.000000e+00, !dbg !42
  %787 = tail call float @llvm.nvvm.div.full(float %616, float %785), !dbg !43
  %788 = select i1 %786, float 0.000000e+00, float %787, !dbg !44
  %789 = fmul float %788, %784, !dbg !45
  %790 = fadd float %778, %789, !dbg !46
  %791 = fadd float %584, %783, !dbg !47
  %792 = fmul float %784, %784, !dbg !48
  %793 = fmul float %773, %792, !dbg !49
  %794 = fmul float %788, %793, !dbg !50
  %795 = fadd float %791, %794, !dbg !51
  %796 = fsub float %553, %790, !dbg !38
  %797 = fadd float %617, %785, !dbg !41
  %798 = fcmp oeq float %797, 0.000000e+00, !dbg !42
  %799 = tail call float @llvm.nvvm.div.full(float %617, float %797), !dbg !43
  %800 = select i1 %798, float 0.000000e+00, float %799, !dbg !44
  %801 = fmul float %800, %796, !dbg !45
  %802 = fadd float %790, %801, !dbg !46
  %803 = fadd float %585, %795, !dbg !47
  %804 = fmul float %796, %796, !dbg !48
  %805 = fmul float %785, %804, !dbg !49
  %806 = fmul float %800, %805, !dbg !50
  %807 = fadd float %803, %806, !dbg !51
  %808 = fsub float %554, %802, !dbg !38
  %809 = fadd float %618, %797, !dbg !41
  %810 = fcmp oeq float %809, 0.000000e+00, !dbg !42
  %811 = tail call float @llvm.nvvm.div.full(float %618, float %809), !dbg !43
  %812 = select i1 %810, float 0.000000e+00, float %811, !dbg !44
  %813 = fmul float %812, %808, !dbg !45
  %814 = fadd float %802, %813, !dbg !46
  %815 = fadd float %586, %807, !dbg !47
  %816 = fmul float %808, %808, !dbg !48
  %817 = fmul float %797, %816, !dbg !49
  %818 = fmul float %812, %817, !dbg !50
  %819 = fadd float %815, %818, !dbg !51
  %820 = fsub float %556, %555, !dbg !38
  %821 = fadd float %619, %620, !dbg !41
  %822 = fcmp oeq float %821, 0.000000e+00, !dbg !42
  %823 = tail call float @llvm.nvvm.div.full(float %620, float %821), !dbg !43
  %824 = select i1 %822, float 0.000000e+00, float %823, !dbg !44
  %825 = fmul float %820, %824, !dbg !45
  %826 = fadd float %555, %825, !dbg !46
  %827 = fadd float %587, %588, !dbg !47
  %828 = fmul float %820, %820, !dbg !48
  %829 = fmul float %828, %619, !dbg !49
  %830 = fmul float %829, %824, !dbg !50
  %831 = fadd float %827, %830, !dbg !51
  %832 = fsub float %557, %826, !dbg !38
  %833 = fadd float %621, %821, !dbg !41
  %834 = fcmp oeq float %833, 0.000000e+00, !dbg !42
  %835 = tail call float @llvm.nvvm.div.full(float %621, float %833), !dbg !43
  %836 = select i1 %834, float 0.000000e+00, float %835, !dbg !44
  %837 = fmul float %836, %832, !dbg !45
  %838 = fadd float %826, %837, !dbg !46
  %839 = fadd float %589, %831, !dbg !47
  %840 = fmul float %832, %832, !dbg !48
  %841 = fmul float %821, %840, !dbg !49
  %842 = fmul float %836, %841, !dbg !50
  %843 = fadd float %839, %842, !dbg !51
  %844 = fsub float %558, %838, !dbg !38
  %845 = fadd float %622, %833, !dbg !41
  %846 = fcmp oeq float %845, 0.000000e+00, !dbg !42
  %847 = tail call float @llvm.nvvm.div.full(float %622, float %845), !dbg !43
  %848 = select i1 %846, float 0.000000e+00, float %847, !dbg !44
  %849 = fmul float %848, %844, !dbg !45
  %850 = fadd float %838, %849, !dbg !46
  %851 = fadd float %590, %843, !dbg !47
  %852 = fmul float %844, %844, !dbg !48
  %853 = fmul float %833, %852, !dbg !49
  %854 = fmul float %848, %853, !dbg !50
  %855 = fadd float %851, %854, !dbg !51
  %856 = fsub float %559, %850, !dbg !38
  %857 = fadd float %623, %845, !dbg !41
  %858 = fcmp oeq float %857, 0.000000e+00, !dbg !42
  %859 = tail call float @llvm.nvvm.div.full(float %623, float %857), !dbg !43
  %860 = select i1 %858, float 0.000000e+00, float %859, !dbg !44
  %861 = fmul float %860, %856, !dbg !45
  %862 = fadd float %850, %861, !dbg !46
  %863 = fadd float %591, %855, !dbg !47
  %864 = fmul float %856, %856, !dbg !48
  %865 = fmul float %845, %864, !dbg !49
  %866 = fmul float %860, %865, !dbg !50
  %867 = fadd float %863, %866, !dbg !51
  %868 = fsub float %560, %862, !dbg !38
  %869 = fadd float %624, %857, !dbg !41
  %870 = fcmp oeq float %869, 0.000000e+00, !dbg !42
  %871 = tail call float @llvm.nvvm.div.full(float %624, float %869), !dbg !43
  %872 = select i1 %870, float 0.000000e+00, float %871, !dbg !44
  %873 = fmul float %872, %868, !dbg !45
  %874 = fadd float %862, %873, !dbg !46
  %875 = fadd float %592, %867, !dbg !47
  %876 = fmul float %868, %868, !dbg !48
  %877 = fmul float %857, %876, !dbg !49
  %878 = fmul float %872, %877, !dbg !50
  %879 = fadd float %875, %878, !dbg !51
  %880 = fsub float %561, %874, !dbg !38
  %881 = fadd float %625, %869, !dbg !41
  %882 = fcmp oeq float %881, 0.000000e+00, !dbg !42
  %883 = tail call float @llvm.nvvm.div.full(float %625, float %881), !dbg !43
  %884 = select i1 %882, float 0.000000e+00, float %883, !dbg !44
  %885 = fmul float %884, %880, !dbg !45
  %886 = fadd float %874, %885, !dbg !46
  %887 = fadd float %593, %879, !dbg !47
  %888 = fmul float %880, %880, !dbg !48
  %889 = fmul float %869, %888, !dbg !49
  %890 = fmul float %884, %889, !dbg !50
  %891 = fadd float %887, %890, !dbg !51
  %892 = fsub float %562, %886, !dbg !38
  %893 = fadd float %626, %881, !dbg !41
  %894 = fcmp oeq float %893, 0.000000e+00, !dbg !42
  %895 = tail call float @llvm.nvvm.div.full(float %626, float %893), !dbg !43
  %896 = select i1 %894, float 0.000000e+00, float %895, !dbg !44
  %897 = fmul float %896, %892, !dbg !45
  %898 = fadd float %886, %897, !dbg !46
  %899 = fadd float %594, %891, !dbg !47
  %900 = fmul float %892, %892, !dbg !48
  %901 = fmul float %881, %900, !dbg !49
  %902 = fmul float %896, %901, !dbg !50
  %903 = fadd float %899, %902, !dbg !51
  %904 = fsub float %563, %898, !dbg !38
  %905 = fadd float %627, %893, !dbg !41
  %906 = fcmp oeq float %905, 0.000000e+00, !dbg !42
  %907 = tail call float @llvm.nvvm.div.full(float %627, float %905), !dbg !43
  %908 = select i1 %906, float 0.000000e+00, float %907, !dbg !44
  %909 = fmul float %908, %904, !dbg !45
  %910 = fadd float %898, %909, !dbg !46
  %911 = fadd float %595, %903, !dbg !47
  %912 = fmul float %904, %904, !dbg !48
  %913 = fmul float %893, %912, !dbg !49
  %914 = fmul float %908, %913, !dbg !50
  %915 = fadd float %911, %914, !dbg !51
  %916 = fsub float %564, %910, !dbg !38
  %917 = fadd float %628, %905, !dbg !41
  %918 = fcmp oeq float %917, 0.000000e+00, !dbg !42
  %919 = tail call float @llvm.nvvm.div.full(float %628, float %917), !dbg !43
  %920 = select i1 %918, float 0.000000e+00, float %919, !dbg !44
  %921 = fmul float %920, %916, !dbg !45
  %922 = fadd float %910, %921, !dbg !46
  %923 = fadd float %596, %915, !dbg !47
  %924 = fmul float %916, %916, !dbg !48
  %925 = fmul float %905, %924, !dbg !49
  %926 = fmul float %920, %925, !dbg !50
  %927 = fadd float %923, %926, !dbg !51
  %928 = fsub float %565, %922, !dbg !38
  %929 = fadd float %629, %917, !dbg !41
  %930 = fcmp oeq float %929, 0.000000e+00, !dbg !42
  %931 = tail call float @llvm.nvvm.div.full(float %629, float %929), !dbg !43
  %932 = select i1 %930, float 0.000000e+00, float %931, !dbg !44
  %933 = fmul float %932, %928, !dbg !45
  %934 = fadd float %922, %933, !dbg !46
  %935 = fadd float %597, %927, !dbg !47
  %936 = fmul float %928, %928, !dbg !48
  %937 = fmul float %917, %936, !dbg !49
  %938 = fmul float %932, %937, !dbg !50
  %939 = fadd float %935, %938, !dbg !51
  %940 = fsub float %566, %934, !dbg !38
  %941 = fadd float %630, %929, !dbg !41
  %942 = fcmp oeq float %941, 0.000000e+00, !dbg !42
  %943 = tail call float @llvm.nvvm.div.full(float %630, float %941), !dbg !43
  %944 = select i1 %942, float 0.000000e+00, float %943, !dbg !44
  %945 = fmul float %944, %940, !dbg !45
  %946 = fadd float %934, %945, !dbg !46
  %947 = fadd float %598, %939, !dbg !47
  %948 = fmul float %940, %940, !dbg !48
  %949 = fmul float %929, %948, !dbg !49
  %950 = fmul float %944, %949, !dbg !50
  %951 = fadd float %947, %950, !dbg !51
  %952 = fsub float %567, %946, !dbg !38
  %953 = fadd float %631, %941, !dbg !41
  %954 = fcmp oeq float %953, 0.000000e+00, !dbg !42
  %955 = tail call float @llvm.nvvm.div.full(float %631, float %953), !dbg !43
  %956 = select i1 %954, float 0.000000e+00, float %955, !dbg !44
  %957 = fmul float %956, %952, !dbg !45
  %958 = fadd float %946, %957, !dbg !46
  %959 = fadd float %599, %951, !dbg !47
  %960 = fmul float %952, %952, !dbg !48
  %961 = fmul float %941, %960, !dbg !49
  %962 = fmul float %956, %961, !dbg !50
  %963 = fadd float %959, %962, !dbg !51
  %964 = fsub float %568, %958, !dbg !38
  %965 = fadd float %632, %953, !dbg !41
  %966 = fcmp oeq float %965, 0.000000e+00, !dbg !42
  %967 = tail call float @llvm.nvvm.div.full(float %632, float %965), !dbg !43
  %968 = select i1 %966, float 0.000000e+00, float %967, !dbg !44
  %969 = fmul float %968, %964, !dbg !45
  %970 = fadd float %958, %969, !dbg !46
  %971 = fadd float %600, %963, !dbg !47
  %972 = fmul float %964, %964, !dbg !48
  %973 = fmul float %953, %972, !dbg !49
  %974 = fmul float %968, %973, !dbg !50
  %975 = fadd float %971, %974, !dbg !51
  %976 = fsub float %569, %970, !dbg !38
  %977 = fadd float %633, %965, !dbg !41
  %978 = fcmp oeq float %977, 0.000000e+00, !dbg !42
  %979 = tail call float @llvm.nvvm.div.full(float %633, float %977), !dbg !43
  %980 = select i1 %978, float 0.000000e+00, float %979, !dbg !44
  %981 = fmul float %980, %976, !dbg !45
  %982 = fadd float %970, %981, !dbg !46
  %983 = fadd float %601, %975, !dbg !47
  %984 = fmul float %976, %976, !dbg !48
  %985 = fmul float %965, %984, !dbg !49
  %986 = fmul float %980, %985, !dbg !50
  %987 = fadd float %983, %986, !dbg !51
  %988 = fsub float %570, %982, !dbg !38
  %989 = fadd float %634, %977, !dbg !41
  %990 = fcmp oeq float %989, 0.000000e+00, !dbg !42
  %991 = tail call float @llvm.nvvm.div.full(float %634, float %989), !dbg !43
  %992 = select i1 %990, float 0.000000e+00, float %991, !dbg !44
  %993 = fmul float %992, %988, !dbg !45
  %994 = fadd float %982, %993, !dbg !46
  %995 = fadd float %602, %987, !dbg !47
  %996 = fmul float %988, %988, !dbg !48
  %997 = fmul float %977, %996, !dbg !49
  %998 = fmul float %992, %997, !dbg !50
  %999 = fadd float %995, %998, !dbg !51
  %1000 = bitcast float %814 to i32, !dbg !52
  %1001 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1000, i32 16, i32 31), !dbg !52
  %1002 = bitcast i32 %1001 to float, !dbg !52
  %1003 = bitcast float %819 to i32, !dbg !52
  %1004 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1003, i32 16, i32 31), !dbg !52
  %1005 = bitcast i32 %1004 to float, !dbg !52
  %1006 = bitcast float %809 to i32, !dbg !52
  %1007 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1006, i32 16, i32 31), !dbg !52
  %1008 = bitcast i32 %1007 to float, !dbg !52
  %1009 = fsub float %1002, %814, !dbg !38
  %1010 = fadd float %809, %1008, !dbg !41
  %1011 = fcmp oeq float %1010, 0.000000e+00, !dbg !42
  %1012 = tail call float @llvm.nvvm.div.full(float %1008, float %1010), !dbg !43
  %1013 = select i1 %1011, float 0.000000e+00, float %1012, !dbg !44
  %1014 = fmul float %1013, %1009, !dbg !45
  %1015 = fadd float %814, %1014, !dbg !46
  %1016 = fadd float %819, %1005, !dbg !47
  %1017 = fmul float %1009, %1009, !dbg !48
  %1018 = fmul float %809, %1017, !dbg !49
  %1019 = fmul float %1013, %1018, !dbg !50
  %1020 = fadd float %1016, %1019, !dbg !51
  %1021 = bitcast float %1015 to i32, !dbg !52
  %1022 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1021, i32 8, i32 31), !dbg !52
  %1023 = bitcast i32 %1022 to float, !dbg !52
  %1024 = bitcast float %1020 to i32, !dbg !52
  %1025 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1024, i32 8, i32 31), !dbg !52
  %1026 = bitcast i32 %1025 to float, !dbg !52
  %1027 = bitcast float %1010 to i32, !dbg !52
  %1028 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1027, i32 8, i32 31), !dbg !52
  %1029 = bitcast i32 %1028 to float, !dbg !52
  %1030 = fsub float %1023, %1015, !dbg !38
  %1031 = fadd float %1010, %1029, !dbg !41
  %1032 = fcmp oeq float %1031, 0.000000e+00, !dbg !42
  %1033 = tail call float @llvm.nvvm.div.full(float %1029, float %1031), !dbg !43
  %1034 = select i1 %1032, float 0.000000e+00, float %1033, !dbg !44
  %1035 = fmul float %1034, %1030, !dbg !45
  %1036 = fadd float %1015, %1035, !dbg !46
  %1037 = fadd float %1020, %1026, !dbg !47
  %1038 = fmul float %1030, %1030, !dbg !48
  %1039 = fmul float %1010, %1038, !dbg !49
  %1040 = fmul float %1034, %1039, !dbg !50
  %1041 = fadd float %1037, %1040, !dbg !51
  %1042 = bitcast float %1036 to i32, !dbg !52
  %1043 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1042, i32 4, i32 31), !dbg !52
  %1044 = bitcast i32 %1043 to float, !dbg !52
  %1045 = bitcast float %1041 to i32, !dbg !52
  %1046 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1045, i32 4, i32 31), !dbg !52
  %1047 = bitcast i32 %1046 to float, !dbg !52
  %1048 = bitcast float %1031 to i32, !dbg !52
  %1049 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1048, i32 4, i32 31), !dbg !52
  %1050 = bitcast i32 %1049 to float, !dbg !52
  %1051 = fsub float %1044, %1036, !dbg !38
  %1052 = fadd float %1031, %1050, !dbg !41
  %1053 = fcmp oeq float %1052, 0.000000e+00, !dbg !42
  %1054 = tail call float @llvm.nvvm.div.full(float %1050, float %1052), !dbg !43
  %1055 = select i1 %1053, float 0.000000e+00, float %1054, !dbg !44
  %1056 = fmul float %1055, %1051, !dbg !45
  %1057 = fadd float %1036, %1056, !dbg !46
  %1058 = fadd float %1041, %1047, !dbg !47
  %1059 = fmul float %1051, %1051, !dbg !48
  %1060 = fmul float %1031, %1059, !dbg !49
  %1061 = fmul float %1055, %1060, !dbg !50
  %1062 = fadd float %1058, %1061, !dbg !51
  %1063 = bitcast float %1057 to i32, !dbg !52
  %1064 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1063, i32 2, i32 31), !dbg !52
  %1065 = bitcast i32 %1064 to float, !dbg !52
  %1066 = bitcast float %1062 to i32, !dbg !52
  %1067 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1066, i32 2, i32 31), !dbg !52
  %1068 = bitcast i32 %1067 to float, !dbg !52
  %1069 = bitcast float %1052 to i32, !dbg !52
  %1070 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1069, i32 2, i32 31), !dbg !52
  %1071 = bitcast i32 %1070 to float, !dbg !52
  %1072 = fsub float %1065, %1057, !dbg !38
  %1073 = fadd float %1052, %1071, !dbg !41
  %1074 = fcmp oeq float %1073, 0.000000e+00, !dbg !42
  %1075 = tail call float @llvm.nvvm.div.full(float %1071, float %1073), !dbg !43
  %1076 = select i1 %1074, float 0.000000e+00, float %1075, !dbg !44
  %1077 = fmul float %1076, %1072, !dbg !45
  %1078 = fadd float %1057, %1077, !dbg !46
  %1079 = fadd float %1062, %1068, !dbg !47
  %1080 = fmul float %1072, %1072, !dbg !48
  %1081 = fmul float %1052, %1080, !dbg !49
  %1082 = fmul float %1076, %1081, !dbg !50
  %1083 = fadd float %1079, %1082, !dbg !51
  %1084 = bitcast float %1078 to i32, !dbg !52
  %1085 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1084, i32 1, i32 31), !dbg !52
  %1086 = bitcast i32 %1085 to float, !dbg !52
  %1087 = bitcast float %1083 to i32, !dbg !52
  %1088 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1087, i32 1, i32 31), !dbg !52
  %1089 = bitcast i32 %1088 to float, !dbg !52
  %1090 = bitcast float %1073 to i32, !dbg !52
  %1091 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1090, i32 1, i32 31), !dbg !52
  %1092 = bitcast i32 %1091 to float, !dbg !52
  %1093 = fsub float %1086, %1078, !dbg !38
  %1094 = fadd float %1073, %1092, !dbg !41
  %1095 = fcmp oeq float %1094, 0.000000e+00, !dbg !42
  %1096 = tail call float @llvm.nvvm.div.full(float %1092, float %1094), !dbg !43
  %1097 = select i1 %1095, float 0.000000e+00, float %1096, !dbg !44
  %1098 = fmul float %1097, %1093, !dbg !45
  %1099 = fadd float %1078, %1098, !dbg !46
  %1100 = fadd float %1083, %1089, !dbg !47
  %1101 = fmul float %1093, %1093, !dbg !48
  %1102 = fmul float %1073, %1101, !dbg !49
  %1103 = fmul float %1097, %1102, !dbg !50
  %1104 = fadd float %1100, %1103, !dbg !51
  %1105 = bitcast float %994 to i32, !dbg !52
  %1106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1105, i32 16, i32 31), !dbg !52
  %1107 = bitcast i32 %1106 to float, !dbg !52
  %1108 = bitcast float %999 to i32, !dbg !52
  %1109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1108, i32 16, i32 31), !dbg !52
  %1110 = bitcast i32 %1109 to float, !dbg !52
  %1111 = bitcast float %989 to i32, !dbg !52
  %1112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1111, i32 16, i32 31), !dbg !52
  %1113 = bitcast i32 %1112 to float, !dbg !52
  %1114 = fsub float %1107, %994, !dbg !38
  %1115 = fadd float %989, %1113, !dbg !41
  %1116 = fcmp oeq float %1115, 0.000000e+00, !dbg !42
  %1117 = tail call float @llvm.nvvm.div.full(float %1113, float %1115), !dbg !43
  %1118 = select i1 %1116, float 0.000000e+00, float %1117, !dbg !44
  %1119 = fmul float %1118, %1114, !dbg !45
  %1120 = fadd float %994, %1119, !dbg !46
  %1121 = fadd float %999, %1110, !dbg !47
  %1122 = fmul float %1114, %1114, !dbg !48
  %1123 = fmul float %989, %1122, !dbg !49
  %1124 = fmul float %1118, %1123, !dbg !50
  %1125 = fadd float %1121, %1124, !dbg !51
  %1126 = bitcast float %1120 to i32, !dbg !52
  %1127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1126, i32 8, i32 31), !dbg !52
  %1128 = bitcast i32 %1127 to float, !dbg !52
  %1129 = bitcast float %1125 to i32, !dbg !52
  %1130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1129, i32 8, i32 31), !dbg !52
  %1131 = bitcast i32 %1130 to float, !dbg !52
  %1132 = bitcast float %1115 to i32, !dbg !52
  %1133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1132, i32 8, i32 31), !dbg !52
  %1134 = bitcast i32 %1133 to float, !dbg !52
  %1135 = fsub float %1128, %1120, !dbg !38
  %1136 = fadd float %1115, %1134, !dbg !41
  %1137 = fcmp oeq float %1136, 0.000000e+00, !dbg !42
  %1138 = tail call float @llvm.nvvm.div.full(float %1134, float %1136), !dbg !43
  %1139 = select i1 %1137, float 0.000000e+00, float %1138, !dbg !44
  %1140 = fmul float %1139, %1135, !dbg !45
  %1141 = fadd float %1120, %1140, !dbg !46
  %1142 = fadd float %1125, %1131, !dbg !47
  %1143 = fmul float %1135, %1135, !dbg !48
  %1144 = fmul float %1115, %1143, !dbg !49
  %1145 = fmul float %1139, %1144, !dbg !50
  %1146 = fadd float %1142, %1145, !dbg !51
  %1147 = bitcast float %1141 to i32, !dbg !52
  %1148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1147, i32 4, i32 31), !dbg !52
  %1149 = bitcast i32 %1148 to float, !dbg !52
  %1150 = bitcast float %1146 to i32, !dbg !52
  %1151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1150, i32 4, i32 31), !dbg !52
  %1152 = bitcast i32 %1151 to float, !dbg !52
  %1153 = bitcast float %1136 to i32, !dbg !52
  %1154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1153, i32 4, i32 31), !dbg !52
  %1155 = bitcast i32 %1154 to float, !dbg !52
  %1156 = fsub float %1149, %1141, !dbg !38
  %1157 = fadd float %1136, %1155, !dbg !41
  %1158 = fcmp oeq float %1157, 0.000000e+00, !dbg !42
  %1159 = tail call float @llvm.nvvm.div.full(float %1155, float %1157), !dbg !43
  %1160 = select i1 %1158, float 0.000000e+00, float %1159, !dbg !44
  %1161 = fmul float %1160, %1156, !dbg !45
  %1162 = fadd float %1141, %1161, !dbg !46
  %1163 = fadd float %1146, %1152, !dbg !47
  %1164 = fmul float %1156, %1156, !dbg !48
  %1165 = fmul float %1136, %1164, !dbg !49
  %1166 = fmul float %1160, %1165, !dbg !50
  %1167 = fadd float %1163, %1166, !dbg !51
  %1168 = bitcast float %1162 to i32, !dbg !52
  %1169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1168, i32 2, i32 31), !dbg !52
  %1170 = bitcast i32 %1169 to float, !dbg !52
  %1171 = bitcast float %1167 to i32, !dbg !52
  %1172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1171, i32 2, i32 31), !dbg !52
  %1173 = bitcast i32 %1172 to float, !dbg !52
  %1174 = bitcast float %1157 to i32, !dbg !52
  %1175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1174, i32 2, i32 31), !dbg !52
  %1176 = bitcast i32 %1175 to float, !dbg !52
  %1177 = fsub float %1170, %1162, !dbg !38
  %1178 = fadd float %1157, %1176, !dbg !41
  %1179 = fcmp oeq float %1178, 0.000000e+00, !dbg !42
  %1180 = tail call float @llvm.nvvm.div.full(float %1176, float %1178), !dbg !43
  %1181 = select i1 %1179, float 0.000000e+00, float %1180, !dbg !44
  %1182 = fmul float %1181, %1177, !dbg !45
  %1183 = fadd float %1162, %1182, !dbg !46
  %1184 = fadd float %1167, %1173, !dbg !47
  %1185 = fmul float %1177, %1177, !dbg !48
  %1186 = fmul float %1157, %1185, !dbg !49
  %1187 = fmul float %1181, %1186, !dbg !50
  %1188 = fadd float %1184, %1187, !dbg !51
  %1189 = bitcast float %1183 to i32, !dbg !52
  %1190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1189, i32 1, i32 31), !dbg !52
  %1191 = bitcast i32 %1190 to float, !dbg !52
  %1192 = bitcast float %1188 to i32, !dbg !52
  %1193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1192, i32 1, i32 31), !dbg !52
  %1194 = bitcast i32 %1193 to float, !dbg !52
  %1195 = bitcast float %1178 to i32, !dbg !52
  %1196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1195, i32 1, i32 31), !dbg !52
  %1197 = bitcast i32 %1196 to float, !dbg !52
  %1198 = fsub float %1191, %1183, !dbg !38
  %1199 = fadd float %1178, %1197, !dbg !41
  %1200 = fcmp oeq float %1199, 0.000000e+00, !dbg !42
  %1201 = tail call float @llvm.nvvm.div.full(float %1197, float %1199), !dbg !43
  %1202 = select i1 %1200, float 0.000000e+00, float %1201, !dbg !44
  %1203 = fmul float %1202, %1198, !dbg !45
  %1204 = fadd float %1183, %1203, !dbg !46
  %1205 = fadd float %1188, %1194, !dbg !47
  %1206 = fmul float %1198, %1198, !dbg !48
  %1207 = fmul float %1178, %1206, !dbg !49
  %1208 = fmul float %1202, %1207, !dbg !50
  %1209 = fadd float %1205, %1208, !dbg !51
  %1210 = and i32 %637, 3, !dbg !52
  %1211 = icmp eq i32 %635, 0, !dbg !52
  %1212 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1210, !dbg !52
  %1213 = bitcast float %1099 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1212, <1 x i32> %1213, i1 %1211) #5, !dbg !52
  %1214 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1210, !dbg !52
  %1215 = bitcast float %1104 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1214, <1 x i32> %1215, i1 %1211) #5, !dbg !52
  %1216 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1210, !dbg !52
  %1217 = bitcast float %1094 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1216, <1 x i32> %1217, i1 %1211) #5, !dbg !52
  %1218 = or disjoint i32 %1210, 4, !dbg !52
  %1219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1218, !dbg !52
  %1220 = bitcast float %1204 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1219, <1 x i32> %1220, i1 %1211) #5, !dbg !52
  %1221 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1218, !dbg !52
  %1222 = bitcast float %1209 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1221, <1 x i32> %1222, i1 %1211) #5, !dbg !52
  %1223 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1218, !dbg !52
  %1224 = bitcast float %1199 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1223, <1 x i32> %1224, i1 %1211) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %1225 = icmp slt i32 %19, 8, !dbg !52
  %1226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !52
  %1227 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1226, i1 %1225) #5, !dbg !52
  %1228 = bitcast i32 %1227 to float, !dbg !52
  %1229 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %19, !dbg !52
  %1230 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1229, i1 %1225) #5, !dbg !52
  %1231 = bitcast i32 %1230 to float, !dbg !52
  %1232 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %19, !dbg !52
  %1233 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1232, i1 %1225) #5, !dbg !52
  %1234 = bitcast i32 %1233 to float, !dbg !52
  %1235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1227, i32 2, i32 31), !dbg !52
  %1236 = bitcast i32 %1235 to float, !dbg !52
  %1237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1230, i32 2, i32 31), !dbg !52
  %1238 = bitcast i32 %1237 to float, !dbg !52
  %1239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1233, i32 2, i32 31), !dbg !52
  %1240 = bitcast i32 %1239 to float, !dbg !52
  %1241 = fsub float %1236, %1228, !dbg !38
  %1242 = fadd float %1234, %1240, !dbg !41
  %1243 = fcmp oeq float %1242, 0.000000e+00, !dbg !42
  %1244 = tail call float @llvm.nvvm.div.full(float %1240, float %1242), !dbg !43
  %1245 = select i1 %1243, float 0.000000e+00, float %1244, !dbg !44
  %1246 = fmul float %1241, %1245, !dbg !45
  %1247 = fadd float %1246, %1228, !dbg !46
  %1248 = fadd float %1231, %1238, !dbg !47
  %1249 = fmul float %1241, %1241, !dbg !48
  %1250 = fmul float %1249, %1234, !dbg !49
  %1251 = fmul float %1250, %1245, !dbg !50
  %1252 = fadd float %1248, %1251, !dbg !51
  %1253 = bitcast float %1247 to i32, !dbg !52
  %1254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1253, i32 1, i32 31), !dbg !52
  %1255 = bitcast i32 %1254 to float, !dbg !52
  %1256 = bitcast float %1252 to i32, !dbg !52
  %1257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1256, i32 1, i32 31), !dbg !52
  %1258 = bitcast i32 %1257 to float, !dbg !52
  %1259 = bitcast float %1242 to i32, !dbg !52
  %1260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1259, i32 1, i32 31), !dbg !52
  %1261 = bitcast i32 %1260 to float, !dbg !52
  %1262 = fsub float %1255, %1247, !dbg !38
  %1263 = fadd float %1242, %1261, !dbg !41
  %1264 = fcmp oeq float %1263, 0.000000e+00, !dbg !42
  %1265 = tail call float @llvm.nvvm.div.full(float %1261, float %1263), !dbg !43
  %1266 = select i1 %1264, float 0.000000e+00, float %1265, !dbg !44
  %1267 = fmul float %1262, %1266, !dbg !45
  %1268 = fadd float %1247, %1267, !dbg !46
  %1269 = fadd float %1252, %1258, !dbg !47
  %1270 = fmul float %1262, %1262, !dbg !48
  %1271 = fmul float %1242, %1270, !dbg !49
  %1272 = fmul float %1266, %1271, !dbg !50
  %1273 = fadd float %1269, %1272, !dbg !51
  %1274 = and i32 %19, 3, !dbg !52
  %1275 = icmp eq i32 %1274, 0, !dbg !52
  %1276 = and i1 %1225, %1275, !dbg !52
  %1277 = bitcast float %1268 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1226, <1 x i32> %1277, i1 %1276) #5, !dbg !52
  %1278 = bitcast float %1273 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1229, <1 x i32> %1278, i1 %1276) #5, !dbg !52
  %1279 = bitcast float %1263 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1232, <1 x i32> %1279, i1 %1276) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %1280 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !52
  %1281 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !52
  %1282 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !52
  %1283 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !52
  %1284 = tail call float @llvm.nvvm.div.full(float %1282, float 3.072000e+03), !dbg !53
  %1285 = tail call float @llvm.nvvm.div.full(float %1283, float 3.072000e+03), !dbg !53
  %1286 = fadd float %1284, 0x3EB0C6F7A0000000, !dbg !54
  %1287 = fadd float %1285, 0x3EB0C6F7A0000000, !dbg !54
  %1288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %.not.i142 = icmp eq i32 %1303, 0, !dbg !55
  br i1 %.not.i142, label %1306, label %1304, !dbg !55

1304:                                             ; preds = %__nv_rsqrtf.exit
  %1305 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1286), !dbg !55
  br label %__nv_rsqrtf.exit144, !dbg !55

1306:                                             ; preds = %__nv_rsqrtf.exit
  %1307 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1286), !dbg !55
  br label %__nv_rsqrtf.exit144, !dbg !55

__nv_rsqrtf.exit144:                              ; preds = %1304, %1306
  %.0.i143 = phi float [ %1305, %1304 ], [ %1307, %1306 ], !dbg !55
  %1308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %.not.i190 = icmp eq i32 %1323, 0, !dbg !55
  br i1 %.not.i190, label %1326, label %1324, !dbg !55

1324:                                             ; preds = %__nv_rsqrtf.exit144
  %1325 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1287), !dbg !55
  br label %__nv_rsqrtf.exit192, !dbg !55

1326:                                             ; preds = %__nv_rsqrtf.exit144
  %1327 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1287), !dbg !55
  br label %__nv_rsqrtf.exit192, !dbg !55

__nv_rsqrtf.exit192:                              ; preds = %1324, %1326
  %.0.i191 = phi float [ %1325, %1324 ], [ %1327, %1326 ], !dbg !55
  %1328 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26
  %1329 = or disjoint i32 %26, 4
  %1330 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1329
  %1331 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %27
  %1332 = or disjoint i32 %26, 12
  %1333 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1332
  %1334 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %29
  %1335 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %638
  %1336 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %30
  %1337 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %639
  %1338 = zext nneg i32 %639 to i64, !dbg !56
  %1339 = zext nneg i32 %30 to i64, !dbg !56
  %1340 = zext nneg i32 %638 to i64, !dbg !56
  %1341 = zext nneg i32 %29 to i64, !dbg !56
  %1342 = getelementptr inbounds nuw i8, ptr addrspace(3) %1334, i32 8
  %1343 = getelementptr inbounds nuw i8, ptr addrspace(3) %1335, i32 8
  %1344 = getelementptr inbounds nuw i8, ptr addrspace(3) %1336, i32 8
  %1345 = getelementptr inbounds nuw i8, ptr addrspace(3) %1337, i32 8
  %1346 = insertelement <2 x i1> poison, i1 %636, i64 0, !dbg !57
  %1347 = shufflevector <2 x i1> %1346, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !57
  %1348 = insertelement <32 x i1> poison, i1 %23, i64 0, !dbg !57
  %1349 = insertelement <16 x i1> poison, i1 %636, i64 0, !dbg !58
  br label %1350, !dbg !56

1350:                                             ; preds = %__nv_rsqrtf.exit192, %1350
  %1351 = phi i1 [ true, %__nv_rsqrtf.exit192 ], [ false, %1350 ]
  %indvars.iv356 = phi i64 [ 0, %__nv_rsqrtf.exit192 ], [ 2048, %1350 ]
  %1352 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit192 ], [ %1859, %1350 ]
  %1353 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit192 ], [ %1860, %1350 ]
  %1354 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit192 ], [ %1861, %1350 ]
  %1355 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit192 ], [ %1862, %1350 ]
  %1356 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit192 ], [ %1863, %1350 ]
  %1357 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit192 ], [ %1864, %1350 ]
  %1358 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit192 ], [ %1889, %1350 ]
  %1359 = phi <32 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit192 ], [ %1894, %1350 ]
  %1360 = phi <16 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit192 ], [ %1885, %1350 ]
  %1361 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit192 ], [ %1867, %1350 ]
  %1362 = or disjoint i64 %indvars.iv356, %1341, !dbg !59
  %1363 = or disjoint i64 %indvars.iv356, %1340, !dbg !59
  %1364 = or disjoint i64 %indvars.iv356, %1339, !dbg !59
  %1365 = or disjoint i64 %indvars.iv356, %1338, !dbg !59
  %1366 = or disjoint i64 %indvars.iv356, %33, !dbg !59
  %1367 = icmp samesign ult i64 %1364, 3072, !dbg !60
  %1368 = icmp samesign ult i64 %1366, 3072, !dbg !60
  %1369 = trunc nuw nsw i64 %1366 to i32, !dbg !61
  %1370 = add i32 %31, %1369, !dbg !61
  %1371 = trunc nuw nsw i64 %indvars.iv356 to i32, !dbg !61
  %1372 = or disjoint i32 %27, %1371, !dbg !61
  %1373 = add i32 %1372, %31, !dbg !61
  %1374 = add i32 %32, %1369, !dbg !61
  %1375 = add i32 %1372, %32, !dbg !61
  %1376 = trunc nuw nsw i64 %1362 to i32, !dbg !61
  %1377 = add i32 %31, %1376, !dbg !61
  %1378 = trunc nuw nsw i64 %1364 to i32, !dbg !61
  %1379 = add i32 %31, %1378, !dbg !61
  %1380 = add i32 %32, %1376, !dbg !61
  %1381 = add i32 %32, %1378, !dbg !61
  %1382 = sext i32 %1370 to i64, !dbg !62
  %1383 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1382, !dbg !62
  %1384 = sext i32 %1373 to i64, !dbg !62
  %1385 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1384, !dbg !62
  %1386 = sext i32 %1374 to i64, !dbg !62
  %1387 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1386, !dbg !62
  %1388 = sext i32 %1375 to i64, !dbg !62
  %1389 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1388, !dbg !62
  %1390 = and i1 %23, %1367, !dbg !63
  %1391 = and i1 %636, %1367, !dbg !63
  %1392 = and i1 %23, %1368, !dbg !63
  %1393 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1383, i1 %1392) #5, !dbg !64
  %1394 = extractvalue { i32, i32, i32, i32 } %1393, 0, !dbg !64
  %1395 = bitcast i32 %1394 to <2 x bfloat>, !dbg !64
  %1396 = extractvalue { i32, i32, i32, i32 } %1393, 1, !dbg !64
  %1397 = bitcast i32 %1396 to <2 x bfloat>, !dbg !64
  %1398 = extractvalue { i32, i32, i32, i32 } %1393, 2, !dbg !64
  %1399 = bitcast i32 %1398 to <2 x bfloat>, !dbg !64
  %1400 = extractvalue { i32, i32, i32, i32 } %1393, 3, !dbg !64
  %1401 = bitcast i32 %1400 to <2 x bfloat>, !dbg !64
  %1402 = extractelement <2 x bfloat> %1395, i64 0, !dbg !64
  %1403 = extractelement <2 x bfloat> %1395, i64 1, !dbg !64
  %1404 = extractelement <2 x bfloat> %1397, i64 0, !dbg !64
  %1405 = extractelement <2 x bfloat> %1397, i64 1, !dbg !64
  %1406 = extractelement <2 x bfloat> %1399, i64 0, !dbg !64
  %1407 = extractelement <2 x bfloat> %1399, i64 1, !dbg !64
  %1408 = extractelement <2 x bfloat> %1401, i64 0, !dbg !64
  %1409 = extractelement <2 x bfloat> %1401, i64 1, !dbg !64
  %1410 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1385, i1 %1392) #5, !dbg !64
  %1411 = extractvalue { i32, i32, i32, i32 } %1410, 0, !dbg !64
  %1412 = bitcast i32 %1411 to <2 x bfloat>, !dbg !64
  %1413 = extractvalue { i32, i32, i32, i32 } %1410, 1, !dbg !64
  %1414 = bitcast i32 %1413 to <2 x bfloat>, !dbg !64
  %1415 = extractvalue { i32, i32, i32, i32 } %1410, 2, !dbg !64
  %1416 = bitcast i32 %1415 to <2 x bfloat>, !dbg !64
  %1417 = extractvalue { i32, i32, i32, i32 } %1410, 3, !dbg !64
  %1418 = bitcast i32 %1417 to <2 x bfloat>, !dbg !64
  %1419 = extractelement <2 x bfloat> %1412, i64 0, !dbg !64
  %1420 = extractelement <2 x bfloat> %1412, i64 1, !dbg !64
  %1421 = extractelement <2 x bfloat> %1414, i64 0, !dbg !64
  %1422 = extractelement <2 x bfloat> %1414, i64 1, !dbg !64
  %1423 = extractelement <2 x bfloat> %1416, i64 0, !dbg !64
  %1424 = extractelement <2 x bfloat> %1416, i64 1, !dbg !64
  %1425 = extractelement <2 x bfloat> %1418, i64 0, !dbg !64
  %1426 = extractelement <2 x bfloat> %1418, i64 1, !dbg !64
  %1427 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1387, i1 %1392) #5, !dbg !64
  %1428 = extractvalue { i32, i32, i32, i32 } %1427, 0, !dbg !64
  %1429 = bitcast i32 %1428 to <2 x bfloat>, !dbg !64
  %1430 = extractvalue { i32, i32, i32, i32 } %1427, 1, !dbg !64
  %1431 = bitcast i32 %1430 to <2 x bfloat>, !dbg !64
  %1432 = extractvalue { i32, i32, i32, i32 } %1427, 2, !dbg !64
  %1433 = bitcast i32 %1432 to <2 x bfloat>, !dbg !64
  %1434 = extractvalue { i32, i32, i32, i32 } %1427, 3, !dbg !64
  %1435 = bitcast i32 %1434 to <2 x bfloat>, !dbg !64
  %1436 = extractelement <2 x bfloat> %1429, i64 0, !dbg !64
  %1437 = extractelement <2 x bfloat> %1429, i64 1, !dbg !64
  %1438 = extractelement <2 x bfloat> %1431, i64 0, !dbg !64
  %1439 = extractelement <2 x bfloat> %1431, i64 1, !dbg !64
  %1440 = extractelement <2 x bfloat> %1433, i64 0, !dbg !64
  %1441 = extractelement <2 x bfloat> %1433, i64 1, !dbg !64
  %1442 = extractelement <2 x bfloat> %1435, i64 0, !dbg !64
  %1443 = extractelement <2 x bfloat> %1435, i64 1, !dbg !64
  %1444 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1389, i1 %1392) #5, !dbg !64
  %1445 = extractvalue { i32, i32, i32, i32 } %1444, 0, !dbg !64
  %1446 = bitcast i32 %1445 to <2 x bfloat>, !dbg !64
  %1447 = extractvalue { i32, i32, i32, i32 } %1444, 1, !dbg !64
  %1448 = bitcast i32 %1447 to <2 x bfloat>, !dbg !64
  %1449 = extractvalue { i32, i32, i32, i32 } %1444, 2, !dbg !64
  %1450 = bitcast i32 %1449 to <2 x bfloat>, !dbg !64
  %1451 = extractvalue { i32, i32, i32, i32 } %1444, 3, !dbg !64
  %1452 = bitcast i32 %1451 to <2 x bfloat>, !dbg !64
  %1453 = extractelement <2 x bfloat> %1446, i64 0, !dbg !64
  %1454 = extractelement <2 x bfloat> %1446, i64 1, !dbg !64
  %1455 = extractelement <2 x bfloat> %1448, i64 0, !dbg !64
  %1456 = extractelement <2 x bfloat> %1448, i64 1, !dbg !64
  %1457 = extractelement <2 x bfloat> %1450, i64 0, !dbg !64
  %1458 = extractelement <2 x bfloat> %1450, i64 1, !dbg !64
  %1459 = extractelement <2 x bfloat> %1452, i64 0, !dbg !64
  %1460 = extractelement <2 x bfloat> %1452, i64 1, !dbg !64
  %1461 = fpext bfloat %1402 to float, !dbg !65
  %1462 = fpext bfloat %1403 to float, !dbg !65
  %1463 = fpext bfloat %1404 to float, !dbg !65
  %1464 = fpext bfloat %1405 to float, !dbg !65
  %1465 = fpext bfloat %1406 to float, !dbg !65
  %1466 = fpext bfloat %1407 to float, !dbg !65
  %1467 = fpext bfloat %1408 to float, !dbg !65
  %1468 = fpext bfloat %1409 to float, !dbg !65
  %1469 = fpext bfloat %1419 to float, !dbg !65
  %1470 = fpext bfloat %1420 to float, !dbg !65
  %1471 = fpext bfloat %1421 to float, !dbg !65
  %1472 = fpext bfloat %1422 to float, !dbg !65
  %1473 = fpext bfloat %1423 to float, !dbg !65
  %1474 = fpext bfloat %1424 to float, !dbg !65
  %1475 = fpext bfloat %1425 to float, !dbg !65
  %1476 = fpext bfloat %1426 to float, !dbg !65
  %1477 = fpext bfloat %1436 to float, !dbg !65
  %1478 = fpext bfloat %1437 to float, !dbg !65
  %1479 = fpext bfloat %1438 to float, !dbg !65
  %1480 = fpext bfloat %1439 to float, !dbg !65
  %1481 = fpext bfloat %1440 to float, !dbg !65
  %1482 = fpext bfloat %1441 to float, !dbg !65
  %1483 = fpext bfloat %1442 to float, !dbg !65
  %1484 = fpext bfloat %1443 to float, !dbg !65
  %1485 = fpext bfloat %1453 to float, !dbg !65
  %1486 = fpext bfloat %1454 to float, !dbg !65
  %1487 = fpext bfloat %1455 to float, !dbg !65
  %1488 = fpext bfloat %1456 to float, !dbg !65
  %1489 = fpext bfloat %1457 to float, !dbg !65
  %1490 = fpext bfloat %1458 to float, !dbg !65
  %1491 = fpext bfloat %1459 to float, !dbg !65
  %1492 = fpext bfloat %1460 to float, !dbg !65
  %1493 = add nuw nsw i64 %1362, 3072, !dbg !66
  %1494 = add nuw nsw i64 %1364, 3072, !dbg !66
  %1495 = getelementptr float, ptr addrspace(1) %1, i64 %1493, !dbg !67
  %1496 = getelementptr float, ptr addrspace(1) %1, i64 %1363, !dbg !67
  %1497 = getelementptr i8, ptr addrspace(1) %1496, i64 12288, !dbg !67
  %1498 = getelementptr float, ptr addrspace(1) %1, i64 %1494, !dbg !67
  %1499 = getelementptr float, ptr addrspace(1) %1, i64 %1365, !dbg !67
  %1500 = getelementptr i8, ptr addrspace(1) %1499, i64 12288, !dbg !67
  %1501 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1495, i1 true) #5, !dbg !68
  %1502 = extractvalue { i32, i32, i32, i32 } %1501, 0, !dbg !68
  %1503 = extractvalue { i32, i32, i32, i32 } %1501, 1, !dbg !68
  %1504 = extractvalue { i32, i32, i32, i32 } %1501, 2, !dbg !68
  %1505 = extractvalue { i32, i32, i32, i32 } %1501, 3, !dbg !68
  %1506 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1497, i1 true) #5, !dbg !68
  %1507 = extractvalue { i32, i32, i32, i32 } %1506, 0, !dbg !68
  %1508 = extractvalue { i32, i32, i32, i32 } %1506, 1, !dbg !68
  %1509 = extractvalue { i32, i32, i32, i32 } %1506, 2, !dbg !68
  %1510 = extractvalue { i32, i32, i32, i32 } %1506, 3, !dbg !68
  %1511 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1498, i1 %1367) #5, !dbg !68
  %1512 = extractvalue { i32, i32, i32, i32 } %1511, 0, !dbg !68
  %1513 = extractvalue { i32, i32, i32, i32 } %1511, 1, !dbg !68
  %1514 = extractvalue { i32, i32, i32, i32 } %1511, 2, !dbg !68
  %1515 = extractvalue { i32, i32, i32, i32 } %1511, 3, !dbg !68
  %1516 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1500, i1 %1367) #5, !dbg !68
  %1517 = extractvalue { i32, i32, i32, i32 } %1516, 0, !dbg !68
  %1518 = extractvalue { i32, i32, i32, i32 } %1516, 1, !dbg !68
  %1519 = extractvalue { i32, i32, i32, i32 } %1516, 2, !dbg !68
  %1520 = extractvalue { i32, i32, i32, i32 } %1516, 3, !dbg !68
  %1521 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1493, !dbg !69
  %1522 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1494, !dbg !69
  %1523 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1521, i1 true) #5, !dbg !70
  %1524 = extractvalue { i32, i32, i32, i32 } %1523, 0, !dbg !70
  %1525 = bitcast i32 %1524 to <2 x bfloat>, !dbg !70
  %1526 = extractvalue { i32, i32, i32, i32 } %1523, 1, !dbg !70
  %1527 = bitcast i32 %1526 to <2 x bfloat>, !dbg !70
  %1528 = extractvalue { i32, i32, i32, i32 } %1523, 2, !dbg !70
  %1529 = bitcast i32 %1528 to <2 x bfloat>, !dbg !70
  %1530 = extractvalue { i32, i32, i32, i32 } %1523, 3, !dbg !70
  %1531 = bitcast i32 %1530 to <2 x bfloat>, !dbg !70
  %1532 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1522, i1 %1367) #5, !dbg !70
  %1533 = extractvalue { i32, i32, i32, i32 } %1532, 0, !dbg !70
  %1534 = bitcast i32 %1533 to <2 x bfloat>, !dbg !70
  %1535 = extractvalue { i32, i32, i32, i32 } %1532, 1, !dbg !70
  %1536 = bitcast i32 %1535 to <2 x bfloat>, !dbg !70
  %1537 = extractvalue { i32, i32, i32, i32 } %1532, 2, !dbg !70
  %1538 = bitcast i32 %1537 to <2 x bfloat>, !dbg !70
  %1539 = extractvalue { i32, i32, i32, i32 } %1532, 3, !dbg !70
  %1540 = bitcast i32 %1539 to <2 x bfloat>, !dbg !70
  %1541 = getelementptr float, ptr addrspace(1) %1, i64 %1362, !dbg !71
  %1542 = getelementptr float, ptr addrspace(1) %1, i64 %1364, !dbg !71
  %1543 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1541, i1 true) #5, !dbg !72
  %1544 = extractvalue { i32, i32, i32, i32 } %1543, 0, !dbg !72
  %1545 = extractvalue { i32, i32, i32, i32 } %1543, 1, !dbg !72
  %1546 = extractvalue { i32, i32, i32, i32 } %1543, 2, !dbg !72
  %1547 = extractvalue { i32, i32, i32, i32 } %1543, 3, !dbg !72
  %1548 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1496, i1 true) #5, !dbg !72
  %1549 = extractvalue { i32, i32, i32, i32 } %1548, 0, !dbg !72
  %1550 = extractvalue { i32, i32, i32, i32 } %1548, 1, !dbg !72
  %1551 = extractvalue { i32, i32, i32, i32 } %1548, 2, !dbg !72
  %1552 = extractvalue { i32, i32, i32, i32 } %1548, 3, !dbg !72
  %1553 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1542, i1 %1367) #5, !dbg !72
  %1554 = extractvalue { i32, i32, i32, i32 } %1553, 0, !dbg !72
  %1555 = extractvalue { i32, i32, i32, i32 } %1553, 1, !dbg !72
  %1556 = extractvalue { i32, i32, i32, i32 } %1553, 2, !dbg !72
  %1557 = extractvalue { i32, i32, i32, i32 } %1553, 3, !dbg !72
  %1558 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1499, i1 %1367) #5, !dbg !72
  %1559 = extractvalue { i32, i32, i32, i32 } %1558, 0, !dbg !72
  %1560 = extractvalue { i32, i32, i32, i32 } %1558, 1, !dbg !72
  %1561 = extractvalue { i32, i32, i32, i32 } %1558, 2, !dbg !72
  %1562 = extractvalue { i32, i32, i32, i32 } %1558, 3, !dbg !72
  %1563 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1362, !dbg !73
  %1564 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1364, !dbg !73
  %1565 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1563, i1 true) #5, !dbg !74
  %1566 = extractvalue { i32, i32, i32, i32 } %1565, 0, !dbg !74
  %1567 = bitcast i32 %1566 to <2 x bfloat>, !dbg !74
  %1568 = extractvalue { i32, i32, i32, i32 } %1565, 1, !dbg !74
  %1569 = bitcast i32 %1568 to <2 x bfloat>, !dbg !74
  %1570 = extractvalue { i32, i32, i32, i32 } %1565, 2, !dbg !74
  %1571 = bitcast i32 %1570 to <2 x bfloat>, !dbg !74
  %1572 = extractvalue { i32, i32, i32, i32 } %1565, 3, !dbg !74
  %1573 = bitcast i32 %1572 to <2 x bfloat>, !dbg !74
  %1574 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1564, i1 %1367) #5, !dbg !74
  %1575 = extractvalue { i32, i32, i32, i32 } %1574, 0, !dbg !74
  %1576 = bitcast i32 %1575 to <2 x bfloat>, !dbg !74
  %1577 = extractvalue { i32, i32, i32, i32 } %1574, 1, !dbg !74
  %1578 = bitcast i32 %1577 to <2 x bfloat>, !dbg !74
  %1579 = extractvalue { i32, i32, i32, i32 } %1574, 2, !dbg !74
  %1580 = bitcast i32 %1579 to <2 x bfloat>, !dbg !74
  %1581 = extractvalue { i32, i32, i32, i32 } %1574, 3, !dbg !74
  %1582 = bitcast i32 %1581 to <2 x bfloat>, !dbg !74
  %1583 = fsub float %1461, %1280, !dbg !75
  %1584 = fsub float %1462, %1280, !dbg !75
  %1585 = fsub float %1463, %1280, !dbg !75
  %1586 = fsub float %1464, %1280, !dbg !75
  %1587 = fsub float %1465, %1280, !dbg !75
  %1588 = fsub float %1466, %1280, !dbg !75
  %1589 = fsub float %1467, %1280, !dbg !75
  %1590 = fsub float %1468, %1280, !dbg !75
  %1591 = fsub float %1469, %1280, !dbg !75
  %1592 = fsub float %1470, %1280, !dbg !75
  %1593 = fsub float %1471, %1280, !dbg !75
  %1594 = fsub float %1472, %1280, !dbg !75
  %1595 = fsub float %1473, %1280, !dbg !75
  %1596 = fsub float %1474, %1280, !dbg !75
  %1597 = fsub float %1475, %1280, !dbg !75
  %1598 = fsub float %1476, %1280, !dbg !75
  %1599 = fsub float %1477, %1281, !dbg !75
  %1600 = fsub float %1478, %1281, !dbg !75
  %1601 = fsub float %1479, %1281, !dbg !75
  %1602 = fsub float %1480, %1281, !dbg !75
  %1603 = fsub float %1481, %1281, !dbg !75
  %1604 = fsub float %1482, %1281, !dbg !75
  %1605 = fsub float %1483, %1281, !dbg !75
  %1606 = fsub float %1484, %1281, !dbg !75
  %1607 = fsub float %1485, %1281, !dbg !75
  %1608 = fsub float %1486, %1281, !dbg !75
  %1609 = fsub float %1487, %1281, !dbg !75
  %1610 = fsub float %1488, %1281, !dbg !75
  %1611 = fsub float %1489, %1281, !dbg !75
  %1612 = fsub float %1490, %1281, !dbg !75
  %1613 = fsub float %1491, %1281, !dbg !75
  %1614 = fsub float %1492, %1281, !dbg !75
  %1615 = fmul float %.0.i143, %1583, !dbg !76
  %1616 = fmul float %.0.i143, %1584, !dbg !76
  %1617 = fmul float %.0.i143, %1585, !dbg !76
  %1618 = fmul float %.0.i143, %1586, !dbg !76
  %1619 = fmul float %.0.i143, %1587, !dbg !76
  %1620 = fmul float %.0.i143, %1588, !dbg !76
  %1621 = fmul float %.0.i143, %1589, !dbg !76
  %1622 = fmul float %.0.i143, %1590, !dbg !76
  %1623 = fmul float %.0.i143, %1591, !dbg !76
  %1624 = fmul float %.0.i143, %1592, !dbg !76
  %1625 = fmul float %.0.i143, %1593, !dbg !76
  %1626 = fmul float %.0.i143, %1594, !dbg !76
  %1627 = fmul float %.0.i143, %1595, !dbg !76
  %1628 = fmul float %.0.i143, %1596, !dbg !76
  %1629 = fmul float %.0.i143, %1597, !dbg !76
  %1630 = fmul float %.0.i143, %1598, !dbg !76
  %1631 = fmul float %.0.i191, %1599, !dbg !76
  %1632 = fmul float %.0.i191, %1600, !dbg !76
  %1633 = fmul float %.0.i191, %1601, !dbg !76
  %1634 = fmul float %.0.i191, %1602, !dbg !76
  %1635 = fmul float %.0.i191, %1603, !dbg !76
  %1636 = fmul float %.0.i191, %1604, !dbg !76
  %1637 = fmul float %.0.i191, %1605, !dbg !76
  %1638 = fmul float %.0.i191, %1606, !dbg !76
  %1639 = fmul float %.0.i191, %1607, !dbg !76
  %1640 = fmul float %.0.i191, %1608, !dbg !76
  %1641 = fmul float %.0.i191, %1609, !dbg !76
  %1642 = fmul float %.0.i191, %1610, !dbg !76
  %1643 = fmul float %.0.i191, %1611, !dbg !76
  %1644 = fmul float %.0.i191, %1612, !dbg !76
  %1645 = fmul float %.0.i191, %1613, !dbg !76
  %1646 = fmul float %.0.i191, %1614, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %1647 = bitcast float %1615 to i32, !dbg !76
  %1648 = bitcast float %1616 to i32, !dbg !76
  %1649 = bitcast float %1617 to i32, !dbg !76
  %1650 = bitcast float %1618 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1328, i32 %1647, i32 %1648, i32 %1649, i32 %1650, i1 true) #5, !dbg !76
  %1651 = bitcast float %1619 to i32, !dbg !76
  %1652 = bitcast float %1620 to i32, !dbg !76
  %1653 = bitcast float %1621 to i32, !dbg !76
  %1654 = bitcast float %1622 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1330, i32 %1651, i32 %1652, i32 %1653, i32 %1654, i1 true) #5, !dbg !76
  %1655 = bitcast float %1623 to i32, !dbg !76
  %1656 = bitcast float %1624 to i32, !dbg !76
  %1657 = bitcast float %1625 to i32, !dbg !76
  %1658 = bitcast float %1626 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1331, i32 %1655, i32 %1656, i32 %1657, i32 %1658, i1 true) #5, !dbg !76
  %1659 = bitcast float %1627 to i32, !dbg !76
  %1660 = bitcast float %1628 to i32, !dbg !76
  %1661 = bitcast float %1629 to i32, !dbg !76
  %1662 = bitcast float %1630 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1333, i32 %1659, i32 %1660, i32 %1661, i32 %1662, i1 true) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %1663 = bitcast float %1631 to i32, !dbg !76
  %1664 = bitcast float %1632 to i32, !dbg !76
  %1665 = bitcast float %1633 to i32, !dbg !76
  %1666 = bitcast float %1634 to i32, !dbg !76
  %1667 = bitcast float %1635 to i32, !dbg !76
  %1668 = bitcast float %1636 to i32, !dbg !76
  %1669 = bitcast float %1637 to i32, !dbg !76
  %1670 = bitcast float %1638 to i32, !dbg !76
  %1671 = bitcast float %1639 to i32, !dbg !76
  %1672 = bitcast float %1640 to i32, !dbg !76
  %1673 = bitcast float %1641 to i32, !dbg !76
  %1674 = bitcast float %1642 to i32, !dbg !76
  %1675 = bitcast float %1643 to i32, !dbg !76
  %1676 = bitcast float %1644 to i32, !dbg !76
  %1677 = bitcast float %1645 to i32, !dbg !76
  %1678 = bitcast float %1646 to i32, !dbg !76
  %1679 = fcmp uno <32 x float> %1359, zeroinitializer, !dbg !77
  %1680 = fcmp uno float %1352, 0.000000e+00, !dbg !79
  %1681 = fcmp uno float %1353, 0.000000e+00, !dbg !79
  %1682 = fcmp uno float %1354, 0.000000e+00, !dbg !79
  %1683 = fcmp uno float %1355, 0.000000e+00, !dbg !79
  %1684 = fcmp uno float %1356, 0.000000e+00, !dbg !79
  %1685 = fcmp uno float %1357, 0.000000e+00, !dbg !79
  %1686 = fcmp uno <8 x float> %1361, zeroinitializer, !dbg !79
  %1687 = fcmp uno <16 x float> %1360, zeroinitializer, !dbg !79
  %1688 = fcmp uno <2 x float> %1358, zeroinitializer, !dbg !77
  %1689 = insertelement <2 x i32> poison, i32 %1502, i64 0, !dbg !68
  %1690 = insertelement <2 x i32> %1689, i32 %1503, i64 1, !dbg !68
  %1691 = bitcast <2 x i32> %1690 to <2 x float>, !dbg !68
  %1692 = fpext <2 x bfloat> %1525 to <2 x float>, !dbg !81
  %1693 = insertelement <2 x i32> poison, i32 %1544, i64 0, !dbg !72
  %1694 = insertelement <2 x i32> %1693, i32 %1545, i64 1, !dbg !72
  %1695 = bitcast <2 x i32> %1694 to <2 x float>, !dbg !72
  %1696 = fpext <2 x bfloat> %1567 to <2 x float>, !dbg !82
  %1697 = fadd <2 x float> %1691, %1692, !dbg !83
  %1698 = fadd <2 x float> %1697, splat (float 1.000000e+00), !dbg !84
  %1699 = fadd <2 x float> %1695, %1696, !dbg !85
  %1700 = insertelement <2 x i32> poison, i32 %1504, i64 0, !dbg !68
  %1701 = insertelement <2 x i32> %1700, i32 %1505, i64 1, !dbg !68
  %1702 = bitcast <2 x i32> %1701 to <2 x float>, !dbg !68
  %1703 = insertelement <4 x i32> poison, i32 %1507, i64 0, !dbg !68
  %1704 = insertelement <4 x i32> %1703, i32 %1508, i64 1, !dbg !68
  %1705 = insertelement <4 x i32> %1704, i32 %1509, i64 2, !dbg !68
  %1706 = insertelement <4 x i32> %1705, i32 %1510, i64 3, !dbg !68
  %1707 = bitcast <4 x i32> %1706 to <4 x float>, !dbg !68
  %1708 = insertelement <8 x i32> poison, i32 %1512, i64 0, !dbg !68
  %1709 = insertelement <8 x i32> %1708, i32 %1513, i64 1, !dbg !68
  %1710 = insertelement <8 x i32> %1709, i32 %1514, i64 2, !dbg !68
  %1711 = insertelement <8 x i32> %1710, i32 %1515, i64 3, !dbg !68
  %1712 = insertelement <8 x i32> %1711, i32 %1517, i64 4, !dbg !68
  %1713 = insertelement <8 x i32> %1712, i32 %1518, i64 5, !dbg !68
  %1714 = insertelement <8 x i32> %1713, i32 %1519, i64 6, !dbg !68
  %1715 = insertelement <8 x i32> %1714, i32 %1520, i64 7, !dbg !68
  %1716 = bitcast <8 x i32> %1715 to <8 x float>, !dbg !68
  %1717 = fpext <2 x bfloat> %1527 to <2 x float>, !dbg !81
  %1718 = shufflevector <2 x bfloat> %1529, <2 x bfloat> %1531, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !81
  %1719 = fpext <4 x bfloat> %1718 to <4 x float>, !dbg !81
  %1720 = shufflevector <2 x bfloat> %1534, <2 x bfloat> %1536, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1721 = shufflevector <2 x bfloat> %1538, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1722 = shufflevector <8 x bfloat> %1720, <8 x bfloat> %1721, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1723 = shufflevector <2 x bfloat> %1538, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1724 = shufflevector <8 x bfloat> %1722, <8 x bfloat> %1723, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !81
  %1725 = shufflevector <2 x bfloat> %1540, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1726 = shufflevector <8 x bfloat> %1724, <8 x bfloat> %1725, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !81
  %1727 = shufflevector <2 x bfloat> %1540, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1728 = shufflevector <8 x bfloat> %1726, <8 x bfloat> %1727, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !81
  %1729 = fpext <8 x bfloat> %1728 to <8 x float>, !dbg !81
  %1730 = insertelement <2 x i32> poison, i32 %1546, i64 0, !dbg !72
  %1731 = insertelement <2 x i32> %1730, i32 %1547, i64 1, !dbg !72
  %1732 = bitcast <2 x i32> %1731 to <2 x float>, !dbg !72
  %1733 = insertelement <4 x i32> poison, i32 %1549, i64 0, !dbg !72
  %1734 = insertelement <4 x i32> %1733, i32 %1550, i64 1, !dbg !72
  %1735 = insertelement <4 x i32> %1734, i32 %1551, i64 2, !dbg !72
  %1736 = insertelement <4 x i32> %1735, i32 %1552, i64 3, !dbg !72
  %1737 = bitcast <4 x i32> %1736 to <4 x float>, !dbg !72
  %1738 = insertelement <8 x i32> poison, i32 %1554, i64 0, !dbg !72
  %1739 = insertelement <8 x i32> %1738, i32 %1555, i64 1, !dbg !72
  %1740 = insertelement <8 x i32> %1739, i32 %1556, i64 2, !dbg !72
  %1741 = insertelement <8 x i32> %1740, i32 %1557, i64 3, !dbg !72
  %1742 = insertelement <8 x i32> %1741, i32 %1559, i64 4, !dbg !72
  %1743 = insertelement <8 x i32> %1742, i32 %1560, i64 5, !dbg !72
  %1744 = insertelement <8 x i32> %1743, i32 %1561, i64 6, !dbg !72
  %1745 = insertelement <8 x i32> %1744, i32 %1562, i64 7, !dbg !72
  %1746 = bitcast <8 x i32> %1745 to <8 x float>, !dbg !72
  %1747 = fpext <2 x bfloat> %1569 to <2 x float>, !dbg !82
  %1748 = shufflevector <2 x bfloat> %1571, <2 x bfloat> %1573, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !82
  %1749 = fpext <4 x bfloat> %1748 to <4 x float>, !dbg !82
  %1750 = shufflevector <2 x bfloat> %1576, <2 x bfloat> %1578, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1751 = shufflevector <2 x bfloat> %1580, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1752 = shufflevector <8 x bfloat> %1750, <8 x bfloat> %1751, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1753 = shufflevector <2 x bfloat> %1580, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1754 = shufflevector <8 x bfloat> %1752, <8 x bfloat> %1753, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !82
  %1755 = shufflevector <2 x bfloat> %1582, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1756 = shufflevector <8 x bfloat> %1754, <8 x bfloat> %1755, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !82
  %1757 = shufflevector <2 x bfloat> %1582, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1758 = shufflevector <8 x bfloat> %1756, <8 x bfloat> %1757, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !82
  %1759 = fpext <8 x bfloat> %1758 to <8 x float>, !dbg !82
  %1760 = load <8 x float>, ptr addrspace(3) %1334, align 16, !dbg !76
  %1761 = load <8 x float>, ptr addrspace(3) %1336, align 16, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1328, i32 %1663, i32 %1664, i32 %1665, i32 %1666, i1 true) #5, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1330, i32 %1667, i32 %1668, i32 %1669, i32 %1670, i1 true) #5, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1331, i32 %1671, i32 %1672, i32 %1673, i32 %1674, i1 true) #5, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1333, i32 %1675, i32 %1676, i32 %1677, i32 %1678, i1 true) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %1762 = load <4 x float>, ptr addrspace(3) %1342, align 8, !dbg !76
  %1763 = load <2 x float>, ptr addrspace(3) %1343, align 8, !dbg !76
  %1764 = load <2 x float>, ptr addrspace(3) %1336, align 16, !dbg !76
  %1765 = load <4 x float>, ptr addrspace(3) %1344, align 8, !dbg !76
  %1766 = load <2 x float>, ptr addrspace(3) %1345, align 8, !dbg !76
  %1767 = fadd <2 x float> %1702, %1717, !dbg !83
  %1768 = fadd <4 x float> %1707, %1719, !dbg !83
  %1769 = fadd <8 x float> %1716, %1729, !dbg !83
  %1770 = fadd <2 x float> %1767, splat (float 1.000000e+00), !dbg !84
  %1771 = fadd <4 x float> %1768, splat (float 1.000000e+00), !dbg !84
  %1772 = fadd <8 x float> %1769, splat (float 1.000000e+00), !dbg !84
  %1773 = fadd <2 x float> %1732, %1747, !dbg !85
  %1774 = fadd <4 x float> %1737, %1749, !dbg !85
  %1775 = fadd <8 x float> %1746, %1759, !dbg !85
  %1776 = shufflevector <2 x float> %1698, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1777 = shufflevector <8 x float> %1772, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1778 = shufflevector <16 x float> %1776, <16 x float> %1777, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !86
  %1779 = shufflevector <4 x float> %1771, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1780 = shufflevector <16 x float> %1778, <16 x float> %1779, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !86
  %1781 = shufflevector <2 x float> %1770, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1782 = shufflevector <16 x float> %1780, <16 x float> %1781, <16 x i32> <i32 0, i32 1, i32 16, i32 17, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !86
  %1783 = shufflevector <16 x float> %1782, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1>, !dbg !86
  %1784 = shufflevector <8 x float> %1760, <8 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !86
  %1785 = shufflevector <8 x float> %1760, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1786 = shufflevector <32 x float> %1785, <32 x float> %1784, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 62, i32 63>, !dbg !86
  %1787 = shufflevector <8 x float> %1761, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1788 = shufflevector <32 x float> %1786, <32 x float> %1787, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !86
  %1789 = shufflevector <4 x float> %1762, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1790 = shufflevector <32 x float> %1788, <32 x float> %1789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !86
  %1791 = shufflevector <4 x float> %1765, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1792 = shufflevector <32 x float> %1790, <32 x float> %1791, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 30, i32 31>, !dbg !86
  %1793 = shufflevector <2 x float> %1763, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1794 = shufflevector <32 x float> %1792, <32 x float> %1793, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 32, i32 33, i32 poison, i32 poison, i32 24, i32 25, i32 26, i32 27, i32 poison, i32 poison, i32 30, i32 31>, !dbg !86
  %1795 = shufflevector <2 x float> %1764, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1796 = shufflevector <32 x float> %1794, <32 x float> %1795, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 32, i32 33, i32 24, i32 25, i32 26, i32 27, i32 poison, i32 poison, i32 30, i32 31>, !dbg !86
  %1797 = shufflevector <2 x float> %1766, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1798 = shufflevector <32 x float> %1796, <32 x float> %1797, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 32, i32 33, i32 30, i32 31>, !dbg !86
  %1799 = fmul <32 x float> %1783, %1798, !dbg !86
  %1800 = shufflevector <2 x float> %1699, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !87
  %1801 = shufflevector <8 x float> %1775, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !87
  %1802 = shufflevector <16 x float> %1800, <16 x float> %1801, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !87
  %1803 = shufflevector <4 x float> %1774, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !87
  %1804 = shufflevector <16 x float> %1802, <16 x float> %1803, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !87
  %1805 = shufflevector <2 x float> %1773, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !87
  %1806 = shufflevector <16 x float> %1804, <16 x float> %1805, <16 x i32> <i32 0, i32 1, i32 16, i32 17, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !87
  %1807 = shufflevector <16 x float> %1806, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1>, !dbg !87
  %1808 = fadd <32 x float> %1807, %1799, !dbg !87
  %1809 = extractelement <32 x float> %1808, i64 2, !dbg !88
  %1810 = fcmp olt float %1352, %1809, !dbg !89
  %1811 = extractelement <32 x float> %1808, i64 3, !dbg !88
  %1812 = fcmp olt float %1353, %1811, !dbg !89
  %1813 = extractelement <32 x float> %1808, i64 4, !dbg !88
  %1814 = fcmp olt float %1354, %1813, !dbg !89
  %1815 = extractelement <32 x float> %1808, i64 5, !dbg !88
  %1816 = fcmp olt float %1355, %1815, !dbg !89
  %1817 = extractelement <32 x float> %1808, i64 6, !dbg !88
  %1818 = fcmp olt float %1356, %1817, !dbg !89
  %1819 = extractelement <32 x float> %1808, i64 7, !dbg !88
  %1820 = fcmp olt float %1357, %1819, !dbg !89
  %1821 = extractelement <32 x float> %1808, i64 8, !dbg !88
  %1822 = extractelement <32 x float> %1808, i64 9, !dbg !88
  %1823 = extractelement <32 x float> %1808, i64 10, !dbg !88
  %1824 = extractelement <32 x float> %1808, i64 11, !dbg !88
  %1825 = extractelement <32 x float> %1808, i64 12, !dbg !88
  %1826 = extractelement <32 x float> %1808, i64 13, !dbg !88
  %1827 = extractelement <32 x float> %1808, i64 14, !dbg !88
  %1828 = extractelement <32 x float> %1808, i64 15, !dbg !88
  %1829 = extractelement <32 x float> %1808, i64 16, !dbg !88
  %1830 = extractelement <32 x float> %1808, i64 17, !dbg !88
  %1831 = extractelement <32 x float> %1808, i64 18, !dbg !88
  %1832 = extractelement <32 x float> %1808, i64 19, !dbg !88
  %1833 = extractelement <32 x float> %1808, i64 20, !dbg !88
  %1834 = extractelement <32 x float> %1808, i64 21, !dbg !88
  %1835 = extractelement <32 x float> %1808, i64 22, !dbg !88
  %1836 = extractelement <32 x float> %1808, i64 23, !dbg !88
  %1837 = extractelement <32 x float> %1808, i64 24, !dbg !88
  %1838 = extractelement <32 x float> %1808, i64 25, !dbg !88
  %1839 = extractelement <32 x float> %1808, i64 26, !dbg !88
  %1840 = extractelement <32 x float> %1808, i64 27, !dbg !88
  %1841 = extractelement <32 x float> %1808, i64 28, !dbg !88
  %1842 = extractelement <32 x float> %1808, i64 29, !dbg !88
  %1843 = or i1 %1680, %1810, !dbg !90
  %1844 = or i1 %1681, %1812, !dbg !90
  %1845 = or i1 %1682, %1814, !dbg !90
  %1846 = or i1 %1683, %1816, !dbg !90
  %1847 = or i1 %1684, %1818, !dbg !90
  %1848 = or i1 %1685, %1820, !dbg !90
  %1849 = select i1 %1843, float %1352, float %1809, !dbg !91
  %1850 = select i1 %1844, float %1353, float %1811, !dbg !91
  %1851 = select i1 %1845, float %1354, float %1813, !dbg !91
  %1852 = select i1 %1846, float %1355, float %1815, !dbg !91
  %1853 = select i1 %1847, float %1356, float %1817, !dbg !91
  %1854 = select i1 %1848, float %1357, float %1819, !dbg !91
  %1855 = shufflevector <32 x float> %1808, <32 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !89
  %1856 = fcmp olt <8 x float> %1361, %1855, !dbg !89
  %1857 = or <8 x i1> %1686, %1856, !dbg !90
  %1858 = select <8 x i1> %1857, <8 x float> %1361, <8 x float> %1855, !dbg !91
  %1859 = select i1 %23, float %1849, float %1352, !dbg !58
  %1860 = select i1 %23, float %1850, float %1353, !dbg !58
  %1861 = select i1 %23, float %1851, float %1354, !dbg !58
  %1862 = select i1 %23, float %1852, float %1355, !dbg !58
  %1863 = select i1 %23, float %1853, float %1356, !dbg !58
  %1864 = select i1 %23, float %1854, float %1357, !dbg !58
  %1865 = insertelement <8 x i1> poison, i1 %1390, i64 0, !dbg !58
  %1866 = shufflevector <8 x i1> %1865, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !58
  %1867 = select <8 x i1> %1866, <8 x float> %1858, <8 x float> %1361, !dbg !58
  %1868 = load <2 x float>, ptr addrspace(3) %1334, align 16, !dbg !76
  %1869 = fmul <2 x float> %1698, %1868, !dbg !86
  %1870 = fadd <2 x float> %1699, %1869, !dbg !87
  %1871 = extractelement <2 x float> %1870, i64 0, !dbg !88
  %1872 = extractelement <2 x float> %1870, i64 1, !dbg !88
  %1873 = shufflevector <2 x float> %1870, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !89
  %1874 = shufflevector <32 x float> %1873, <32 x float> %1808, <16 x i32> <i32 1, i32 0, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48>, !dbg !89
  %1875 = fcmp olt <16 x float> %1360, %1874, !dbg !89
  %1876 = or <16 x i1> %1687, %1875, !dbg !90
  %1877 = select <16 x i1> %1876, <16 x float> %1360, <16 x float> %1874, !dbg !91
  %1878 = fcmp ogt <32 x float> %1359, %1808, !dbg !92
  %1879 = fcmp olt <32 x float> %1359, %1808, !dbg !92
  %1880 = shufflevector <32 x i1> %1878, <32 x i1> %1879, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 62, i32 63>, !dbg !92
  %1881 = or <32 x i1> %1679, %1880, !dbg !93
  %1882 = select <32 x i1> %1881, <32 x float> %1359, <32 x float> %1808, !dbg !94
  %1883 = insertelement <16 x i1> %1349, i1 %1391, i64 1, !dbg !58
  %1884 = shufflevector <16 x i1> %1883, <16 x i1> poison, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, !dbg !58
  %1885 = select <16 x i1> %1884, <16 x float> %1877, <16 x float> %1360, !dbg !58
  %1886 = fcmp ogt <2 x float> %1358, %1870, !dbg !92
  %1887 = or <2 x i1> %1688, %1886, !dbg !93
  %1888 = select <2 x i1> %1887, <2 x float> %1358, <2 x float> %1870, !dbg !94
  %1889 = select <2 x i1> %1347, <2 x float> %1888, <2 x float> %1358, !dbg !57
  %1890 = insertelement <32 x i1> %1348, i1 %1390, i64 1, !dbg !57
  %1891 = insertelement <32 x i1> %1890, i1 %636, i64 2, !dbg !57
  %1892 = insertelement <32 x i1> %1891, i1 %1391, i64 3, !dbg !57
  %1893 = shufflevector <32 x i1> %1892, <32 x i1> poison, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 0, i32 0>, !dbg !57
  %1894 = select <32 x i1> %1893, <32 x float> %1882, <32 x float> %1359, !dbg !57
  %1895 = sext i32 %1377 to i64, !dbg !95
  %1896 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1895, !dbg !95
  %1897 = sext i32 %1379 to i64, !dbg !95
  %1898 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1897, !dbg !95
  %1899 = sext i32 %1380 to i64, !dbg !95
  %1900 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1899, !dbg !95
  %1901 = sext i32 %1381 to i64, !dbg !95
  %1902 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1901, !dbg !95
  %1903 = extractelement <32 x float> %1808, i64 0, !dbg !88
  %1904 = fptrunc float %1903 to bfloat, !dbg !88
  %1905 = extractelement <32 x float> %1808, i64 1, !dbg !88
  %1906 = fptrunc float %1905 to bfloat, !dbg !88
  %1907 = fptrunc float %1809 to bfloat, !dbg !88
  %1908 = fptrunc float %1811 to bfloat, !dbg !88
  %1909 = fptrunc float %1813 to bfloat, !dbg !88
  %1910 = fptrunc float %1815 to bfloat, !dbg !88
  %1911 = fptrunc float %1817 to bfloat, !dbg !88
  %1912 = fptrunc float %1819 to bfloat, !dbg !88
  %1913 = fptrunc float %1821 to bfloat, !dbg !88
  %1914 = fptrunc float %1822 to bfloat, !dbg !88
  %1915 = fptrunc float %1823 to bfloat, !dbg !88
  %1916 = fptrunc float %1824 to bfloat, !dbg !88
  %1917 = fptrunc float %1825 to bfloat, !dbg !88
  %1918 = fptrunc float %1826 to bfloat, !dbg !88
  %1919 = fptrunc float %1827 to bfloat, !dbg !88
  %1920 = fptrunc float %1828 to bfloat, !dbg !88
  %1921 = fptrunc float %1871 to bfloat, !dbg !88
  %1922 = fptrunc float %1872 to bfloat, !dbg !88
  %1923 = fptrunc float %1829 to bfloat, !dbg !88
  %1924 = fptrunc float %1830 to bfloat, !dbg !88
  %1925 = fptrunc float %1831 to bfloat, !dbg !88
  %1926 = fptrunc float %1832 to bfloat, !dbg !88
  %1927 = fptrunc float %1833 to bfloat, !dbg !88
  %1928 = fptrunc float %1834 to bfloat, !dbg !88
  %1929 = fptrunc float %1835 to bfloat, !dbg !88
  %1930 = fptrunc float %1836 to bfloat, !dbg !88
  %1931 = fptrunc float %1837 to bfloat, !dbg !88
  %1932 = fptrunc float %1838 to bfloat, !dbg !88
  %1933 = fptrunc float %1839 to bfloat, !dbg !88
  %1934 = fptrunc float %1840 to bfloat, !dbg !88
  %1935 = fptrunc float %1841 to bfloat, !dbg !88
  %1936 = fptrunc float %1842 to bfloat, !dbg !88
  %1937 = insertelement <2 x bfloat> poison, bfloat %1904, i64 0, !dbg !88
  %1938 = insertelement <2 x bfloat> %1937, bfloat %1906, i64 1, !dbg !88
  %1939 = bitcast <2 x bfloat> %1938 to i32, !dbg !88
  %1940 = insertelement <2 x bfloat> poison, bfloat %1907, i64 0, !dbg !88
  %1941 = insertelement <2 x bfloat> %1940, bfloat %1908, i64 1, !dbg !88
  %1942 = bitcast <2 x bfloat> %1941 to i32, !dbg !88
  %1943 = insertelement <2 x bfloat> poison, bfloat %1909, i64 0, !dbg !88
  %1944 = insertelement <2 x bfloat> %1943, bfloat %1910, i64 1, !dbg !88
  %1945 = bitcast <2 x bfloat> %1944 to i32, !dbg !88
  %1946 = insertelement <2 x bfloat> poison, bfloat %1911, i64 0, !dbg !88
  %1947 = insertelement <2 x bfloat> %1946, bfloat %1912, i64 1, !dbg !88
  %1948 = bitcast <2 x bfloat> %1947 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1939, i32 %1942, i32 %1945, i32 %1948, ptr addrspace(1) %1896, i1 %23) #5, !dbg !88
  %1949 = insertelement <2 x bfloat> poison, bfloat %1913, i64 0, !dbg !88
  %1950 = insertelement <2 x bfloat> %1949, bfloat %1914, i64 1, !dbg !88
  %1951 = bitcast <2 x bfloat> %1950 to i32, !dbg !88
  %1952 = insertelement <2 x bfloat> poison, bfloat %1915, i64 0, !dbg !88
  %1953 = insertelement <2 x bfloat> %1952, bfloat %1916, i64 1, !dbg !88
  %1954 = bitcast <2 x bfloat> %1953 to i32, !dbg !88
  %1955 = insertelement <2 x bfloat> poison, bfloat %1917, i64 0, !dbg !88
  %1956 = insertelement <2 x bfloat> %1955, bfloat %1918, i64 1, !dbg !88
  %1957 = bitcast <2 x bfloat> %1956 to i32, !dbg !88
  %1958 = insertelement <2 x bfloat> poison, bfloat %1919, i64 0, !dbg !88
  %1959 = insertelement <2 x bfloat> %1958, bfloat %1920, i64 1, !dbg !88
  %1960 = bitcast <2 x bfloat> %1959 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1951, i32 %1954, i32 %1957, i32 %1960, ptr addrspace(1) %1898, i1 %1390) #5, !dbg !88
  %1961 = insertelement <2 x bfloat> poison, bfloat %1921, i64 0, !dbg !88
  %1962 = insertelement <2 x bfloat> %1961, bfloat %1922, i64 1, !dbg !88
  %1963 = bitcast <2 x bfloat> %1962 to i32, !dbg !88
  %1964 = insertelement <2 x bfloat> poison, bfloat %1923, i64 0, !dbg !88
  %1965 = insertelement <2 x bfloat> %1964, bfloat %1924, i64 1, !dbg !88
  %1966 = bitcast <2 x bfloat> %1965 to i32, !dbg !88
  %1967 = insertelement <2 x bfloat> poison, bfloat %1925, i64 0, !dbg !88
  %1968 = insertelement <2 x bfloat> %1967, bfloat %1926, i64 1, !dbg !88
  %1969 = bitcast <2 x bfloat> %1968 to i32, !dbg !88
  %1970 = insertelement <2 x bfloat> poison, bfloat %1927, i64 0, !dbg !88
  %1971 = insertelement <2 x bfloat> %1970, bfloat %1928, i64 1, !dbg !88
  %1972 = bitcast <2 x bfloat> %1971 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1963, i32 %1966, i32 %1969, i32 %1972, ptr addrspace(1) %1900, i1 %636) #5, !dbg !88
  %1973 = insertelement <2 x bfloat> poison, bfloat %1929, i64 0, !dbg !88
  %1974 = insertelement <2 x bfloat> %1973, bfloat %1930, i64 1, !dbg !88
  %1975 = bitcast <2 x bfloat> %1974 to i32, !dbg !88
  %1976 = insertelement <2 x bfloat> poison, bfloat %1931, i64 0, !dbg !88
  %1977 = insertelement <2 x bfloat> %1976, bfloat %1932, i64 1, !dbg !88
  %1978 = bitcast <2 x bfloat> %1977 to i32, !dbg !88
  %1979 = insertelement <2 x bfloat> poison, bfloat %1933, i64 0, !dbg !88
  %1980 = insertelement <2 x bfloat> %1979, bfloat %1934, i64 1, !dbg !88
  %1981 = bitcast <2 x bfloat> %1980 to i32, !dbg !88
  %1982 = insertelement <2 x bfloat> poison, bfloat %1935, i64 0, !dbg !88
  %1983 = insertelement <2 x bfloat> %1982, bfloat %1936, i64 1, !dbg !88
  %1984 = bitcast <2 x bfloat> %1983 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1975, i32 %1978, i32 %1981, i32 %1984, ptr addrspace(1) %1902, i1 %1391) #5, !dbg !88
  br i1 %1351, label %1350, label %1985, !dbg !56

1985:                                             ; preds = %1350
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %1986 = extractelement <32 x float> %1894, i64 30, !dbg !98
  %1987 = extractelement <32 x float> %1894, i64 31, !dbg !98
  %1988 = fcmp olt float %1986, %1987, !dbg !98
  %1989 = fcmp uno float %1986, 0.000000e+00, !dbg !99
  %1990 = or i1 %1988, %1989, !dbg !100
  %1991 = select i1 %1990, float %1986, float %1987, !dbg !101
  %1992 = fcmp olt float %1991, %1859, !dbg !98
  %1993 = fcmp uno float %1991, 0.000000e+00, !dbg !99
  %1994 = or i1 %1992, %1993, !dbg !100
  %1995 = select i1 %1994, float %1991, float %1859, !dbg !101
  %1996 = fcmp olt float %1995, %1860, !dbg !98
  %1997 = fcmp uno float %1995, 0.000000e+00, !dbg !99
  %1998 = or i1 %1996, %1997, !dbg !100
  %1999 = select i1 %1998, float %1995, float %1860, !dbg !101
  %2000 = fcmp olt float %1999, %1861, !dbg !98
  %2001 = fcmp uno float %1999, 0.000000e+00, !dbg !99
  %2002 = or i1 %2000, %2001, !dbg !100
  %2003 = select i1 %2002, float %1999, float %1861, !dbg !101
  %2004 = fcmp olt float %2003, %1862, !dbg !98
  %2005 = fcmp uno float %2003, 0.000000e+00, !dbg !99
  %2006 = or i1 %2004, %2005, !dbg !100
  %2007 = select i1 %2006, float %2003, float %1862, !dbg !101
  %2008 = fcmp olt float %2007, %1863, !dbg !98
  %2009 = fcmp uno float %2007, 0.000000e+00, !dbg !99
  %2010 = or i1 %2008, %2009, !dbg !100
  %2011 = select i1 %2010, float %2007, float %1863, !dbg !101
  %2012 = fcmp olt float %2011, %1864, !dbg !98
  %2013 = fcmp uno float %2011, 0.000000e+00, !dbg !99
  %2014 = or i1 %2012, %2013, !dbg !100
  %2015 = select i1 %2014, float %2011, float %1864, !dbg !101
  %2016 = extractelement <8 x float> %1867, i64 0, !dbg !98
  %2017 = fcmp olt float %2015, %2016, !dbg !98
  %2018 = fcmp uno float %2015, 0.000000e+00, !dbg !99
  %2019 = or i1 %2017, %2018, !dbg !100
  %2020 = select i1 %2019, float %2015, float %2016, !dbg !101
  %2021 = extractelement <8 x float> %1867, i64 1, !dbg !98
  %2022 = fcmp olt float %2020, %2021, !dbg !98
  %2023 = fcmp uno float %2020, 0.000000e+00, !dbg !99
  %2024 = or i1 %2022, %2023, !dbg !100
  %2025 = select i1 %2024, float %2020, float %2021, !dbg !101
  %2026 = extractelement <8 x float> %1867, i64 2, !dbg !98
  %2027 = fcmp olt float %2025, %2026, !dbg !98
  %2028 = fcmp uno float %2025, 0.000000e+00, !dbg !99
  %2029 = or i1 %2027, %2028, !dbg !100
  %2030 = select i1 %2029, float %2025, float %2026, !dbg !101
  %2031 = extractelement <8 x float> %1867, i64 3, !dbg !98
  %2032 = fcmp olt float %2030, %2031, !dbg !98
  %2033 = fcmp uno float %2030, 0.000000e+00, !dbg !99
  %2034 = or i1 %2032, %2033, !dbg !100
  %2035 = select i1 %2034, float %2030, float %2031, !dbg !101
  %2036 = extractelement <8 x float> %1867, i64 4, !dbg !98
  %2037 = fcmp olt float %2035, %2036, !dbg !98
  %2038 = fcmp uno float %2035, 0.000000e+00, !dbg !99
  %2039 = or i1 %2037, %2038, !dbg !100
  %2040 = select i1 %2039, float %2035, float %2036, !dbg !101
  %2041 = extractelement <8 x float> %1867, i64 5, !dbg !98
  %2042 = fcmp olt float %2040, %2041, !dbg !98
  %2043 = fcmp uno float %2040, 0.000000e+00, !dbg !99
  %2044 = or i1 %2042, %2043, !dbg !100
  %2045 = select i1 %2044, float %2040, float %2041, !dbg !101
  %2046 = extractelement <8 x float> %1867, i64 6, !dbg !98
  %2047 = fcmp olt float %2045, %2046, !dbg !98
  %2048 = fcmp uno float %2045, 0.000000e+00, !dbg !99
  %2049 = or i1 %2047, %2048, !dbg !100
  %2050 = select i1 %2049, float %2045, float %2046, !dbg !101
  %2051 = extractelement <8 x float> %1867, i64 7, !dbg !98
  %2052 = fcmp olt float %2050, %2051, !dbg !98
  %2053 = fcmp uno float %2050, 0.000000e+00, !dbg !99
  %2054 = or i1 %2052, %2053, !dbg !100
  %2055 = select i1 %2054, float %2050, float %2051, !dbg !101
  %2056 = extractelement <16 x float> %1885, i64 0, !dbg !98
  %2057 = extractelement <16 x float> %1885, i64 1, !dbg !98
  %2058 = fcmp olt float %2057, %2056, !dbg !98
  %2059 = fcmp uno float %2057, 0.000000e+00, !dbg !99
  %2060 = or i1 %2058, %2059, !dbg !100
  %2061 = select i1 %2060, float %2057, float %2056, !dbg !101
  %2062 = extractelement <16 x float> %1885, i64 15, !dbg !98
  %2063 = fcmp olt float %2061, %2062, !dbg !98
  %2064 = fcmp uno float %2061, 0.000000e+00, !dbg !99
  %2065 = or i1 %2063, %2064, !dbg !100
  %2066 = select i1 %2065, float %2061, float %2062, !dbg !101
  %2067 = extractelement <16 x float> %1885, i64 14, !dbg !98
  %2068 = fcmp olt float %2066, %2067, !dbg !98
  %2069 = fcmp uno float %2066, 0.000000e+00, !dbg !99
  %2070 = or i1 %2068, %2069, !dbg !100
  %2071 = select i1 %2070, float %2066, float %2067, !dbg !101
  %2072 = extractelement <16 x float> %1885, i64 13, !dbg !98
  %2073 = fcmp olt float %2071, %2072, !dbg !98
  %2074 = fcmp uno float %2071, 0.000000e+00, !dbg !99
  %2075 = or i1 %2073, %2074, !dbg !100
  %2076 = select i1 %2075, float %2071, float %2072, !dbg !101
  %2077 = extractelement <16 x float> %1885, i64 12, !dbg !98
  %2078 = fcmp olt float %2076, %2077, !dbg !98
  %2079 = fcmp uno float %2076, 0.000000e+00, !dbg !99
  %2080 = or i1 %2078, %2079, !dbg !100
  %2081 = select i1 %2080, float %2076, float %2077, !dbg !101
  %2082 = extractelement <16 x float> %1885, i64 11, !dbg !98
  %2083 = fcmp olt float %2081, %2082, !dbg !98
  %2084 = fcmp uno float %2081, 0.000000e+00, !dbg !99
  %2085 = or i1 %2083, %2084, !dbg !100
  %2086 = select i1 %2085, float %2081, float %2082, !dbg !101
  %2087 = extractelement <16 x float> %1885, i64 10, !dbg !98
  %2088 = fcmp olt float %2086, %2087, !dbg !98
  %2089 = fcmp uno float %2086, 0.000000e+00, !dbg !99
  %2090 = or i1 %2088, %2089, !dbg !100
  %2091 = select i1 %2090, float %2086, float %2087, !dbg !101
  %2092 = extractelement <16 x float> %1885, i64 9, !dbg !98
  %2093 = fcmp olt float %2091, %2092, !dbg !98
  %2094 = fcmp uno float %2091, 0.000000e+00, !dbg !99
  %2095 = or i1 %2093, %2094, !dbg !100
  %2096 = select i1 %2095, float %2091, float %2092, !dbg !101
  %2097 = extractelement <16 x float> %1885, i64 8, !dbg !98
  %2098 = fcmp olt float %2096, %2097, !dbg !98
  %2099 = fcmp uno float %2096, 0.000000e+00, !dbg !99
  %2100 = or i1 %2098, %2099, !dbg !100
  %2101 = select i1 %2100, float %2096, float %2097, !dbg !101
  %2102 = extractelement <16 x float> %1885, i64 7, !dbg !98
  %2103 = fcmp olt float %2101, %2102, !dbg !98
  %2104 = fcmp uno float %2101, 0.000000e+00, !dbg !99
  %2105 = or i1 %2103, %2104, !dbg !100
  %2106 = select i1 %2105, float %2101, float %2102, !dbg !101
  %2107 = extractelement <16 x float> %1885, i64 6, !dbg !98
  %2108 = fcmp olt float %2106, %2107, !dbg !98
  %2109 = fcmp uno float %2106, 0.000000e+00, !dbg !99
  %2110 = or i1 %2108, %2109, !dbg !100
  %2111 = select i1 %2110, float %2106, float %2107, !dbg !101
  %2112 = extractelement <16 x float> %1885, i64 5, !dbg !98
  %2113 = fcmp olt float %2111, %2112, !dbg !98
  %2114 = fcmp uno float %2111, 0.000000e+00, !dbg !99
  %2115 = or i1 %2113, %2114, !dbg !100
  %2116 = select i1 %2115, float %2111, float %2112, !dbg !101
  %2117 = extractelement <16 x float> %1885, i64 4, !dbg !98
  %2118 = fcmp olt float %2116, %2117, !dbg !98
  %2119 = fcmp uno float %2116, 0.000000e+00, !dbg !99
  %2120 = or i1 %2118, %2119, !dbg !100
  %2121 = select i1 %2120, float %2116, float %2117, !dbg !101
  %2122 = extractelement <16 x float> %1885, i64 3, !dbg !98
  %2123 = fcmp olt float %2121, %2122, !dbg !98
  %2124 = fcmp uno float %2121, 0.000000e+00, !dbg !99
  %2125 = or i1 %2123, %2124, !dbg !100
  %2126 = select i1 %2125, float %2121, float %2122, !dbg !101
  %2127 = extractelement <16 x float> %1885, i64 2, !dbg !98
  %2128 = fcmp olt float %2126, %2127, !dbg !98
  %2129 = fcmp uno float %2126, 0.000000e+00, !dbg !99
  %2130 = or i1 %2128, %2129, !dbg !100
  %2131 = select i1 %2130, float %2126, float %2127, !dbg !101
  %2132 = bitcast float %2055 to i32, !dbg !96
  %2133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2132, i32 16, i32 31), !dbg !96
  %2134 = bitcast i32 %2133 to float, !dbg !96
  %2135 = fcmp olt float %2055, %2134, !dbg !98
  %2136 = fcmp uno float %2055, 0.000000e+00, !dbg !99
  %2137 = or i1 %2136, %2135, !dbg !100
  %2138 = select i1 %2137, float %2055, float %2134, !dbg !101
  %2139 = bitcast float %2138 to i32, !dbg !96
  %2140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2139, i32 8, i32 31), !dbg !96
  %2141 = bitcast i32 %2140 to float, !dbg !96
  %2142 = fcmp olt float %2138, %2141, !dbg !98
  %2143 = fcmp uno float %2138, 0.000000e+00, !dbg !99
  %2144 = or i1 %2142, %2143, !dbg !100
  %2145 = select i1 %2144, float %2138, float %2141, !dbg !101
  %2146 = bitcast float %2145 to i32, !dbg !96
  %2147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2146, i32 4, i32 31), !dbg !96
  %2148 = bitcast i32 %2147 to float, !dbg !96
  %2149 = fcmp olt float %2145, %2148, !dbg !98
  %2150 = fcmp uno float %2145, 0.000000e+00, !dbg !99
  %2151 = or i1 %2149, %2150, !dbg !100
  %2152 = select i1 %2151, float %2145, float %2148, !dbg !101
  %2153 = bitcast float %2152 to i32, !dbg !96
  %2154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2153, i32 2, i32 31), !dbg !96
  %2155 = bitcast i32 %2154 to float, !dbg !96
  %2156 = fcmp olt float %2152, %2155, !dbg !98
  %2157 = fcmp uno float %2152, 0.000000e+00, !dbg !99
  %2158 = or i1 %2156, %2157, !dbg !100
  %2159 = select i1 %2158, float %2152, float %2155, !dbg !101
  %2160 = bitcast float %2159 to i32, !dbg !96
  %2161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2160, i32 1, i32 31), !dbg !96
  %2162 = bitcast i32 %2161 to float, !dbg !96
  %2163 = fcmp olt float %2159, %2162, !dbg !98
  %2164 = fcmp uno float %2159, 0.000000e+00, !dbg !99
  %2165 = or i1 %2163, %2164, !dbg !100
  %2166 = bitcast float %2131 to i32, !dbg !96
  %2167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2166, i32 16, i32 31), !dbg !96
  %2168 = bitcast i32 %2167 to float, !dbg !96
  %2169 = fcmp olt float %2131, %2168, !dbg !98
  %2170 = fcmp uno float %2131, 0.000000e+00, !dbg !99
  %2171 = or i1 %2170, %2169, !dbg !100
  %2172 = select i1 %2171, float %2131, float %2168, !dbg !101
  %2173 = bitcast float %2172 to i32, !dbg !96
  %2174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2173, i32 8, i32 31), !dbg !96
  %2175 = bitcast i32 %2174 to float, !dbg !96
  %2176 = fcmp olt float %2172, %2175, !dbg !98
  %2177 = fcmp uno float %2172, 0.000000e+00, !dbg !99
  %2178 = or i1 %2176, %2177, !dbg !100
  %2179 = select i1 %2178, float %2172, float %2175, !dbg !101
  %2180 = bitcast float %2179 to i32, !dbg !96
  %2181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2180, i32 4, i32 31), !dbg !96
  %2182 = bitcast i32 %2181 to float, !dbg !96
  %2183 = fcmp olt float %2179, %2182, !dbg !98
  %2184 = fcmp uno float %2179, 0.000000e+00, !dbg !99
  %2185 = or i1 %2183, %2184, !dbg !100
  %2186 = select i1 %2185, float %2179, float %2182, !dbg !101
  %2187 = bitcast float %2186 to i32, !dbg !96
  %2188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2187, i32 2, i32 31), !dbg !96
  %2189 = bitcast i32 %2188 to float, !dbg !96
  %2190 = fcmp olt float %2186, %2189, !dbg !98
  %2191 = fcmp uno float %2186, 0.000000e+00, !dbg !99
  %2192 = or i1 %2190, %2191, !dbg !100
  %2193 = select i1 %2192, float %2186, float %2189, !dbg !101
  %2194 = bitcast float %2193 to i32, !dbg !96
  %2195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2194, i32 1, i32 31), !dbg !96
  %2196 = bitcast i32 %2195 to float, !dbg !96
  %2197 = fcmp olt float %2193, %2196, !dbg !98
  %2198 = fcmp uno float %2193, 0.000000e+00, !dbg !99
  %2199 = or i1 %2197, %2198, !dbg !100
  %2200 = select i1 %2165, i32 %2160, i32 %2161, !dbg !101
  %2201 = insertelement <1 x i32> poison, i32 %2200, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1212, <1 x i32> %2201, i1 %1211) #5, !dbg !96
  %2202 = select i1 %2199, i32 %2194, i32 %2195, !dbg !101
  %2203 = insertelement <1 x i32> poison, i32 %2202, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1219, <1 x i32> %2203, i1 %1211) #5, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %2204 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1226, i1 %1225) #5, !dbg !96
  %2205 = bitcast i32 %2204 to float, !dbg !96
  %2206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2204, i32 2, i32 31), !dbg !96
  %2207 = bitcast i32 %2206 to float, !dbg !96
  %2208 = fcmp olt float %2205, %2207, !dbg !98
  %2209 = fcmp uno float %2205, 0.000000e+00, !dbg !99
  %2210 = or i1 %2209, %2208, !dbg !100
  %2211 = select i1 %2210, float %2205, float %2207, !dbg !101
  %2212 = bitcast float %2211 to i32, !dbg !96
  %2213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2212, i32 1, i32 31), !dbg !96
  %2214 = bitcast i32 %2213 to float, !dbg !96
  %2215 = fcmp olt float %2211, %2214, !dbg !98
  %2216 = fcmp uno float %2211, 0.000000e+00, !dbg !99
  %2217 = or i1 %2215, %2216, !dbg !100
  %2218 = select i1 %2217, i32 %2212, i32 %2213, !dbg !101
  %2219 = insertelement <1 x i32> poison, i32 %2218, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1226, <1 x i32> %2219, i1 %1276) #5, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %2220 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !96
  %2221 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %2222 = bitcast float %2220 to i32, !dbg !102
  %2223 = bitcast float %2221 to i32, !dbg !102
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2222, i32 %2223, i1 true) #5, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %2224 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %20, !dbg !102
  %2225 = load float, ptr addrspace(3) %2224, align 4, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %2226 = extractelement <32 x float> %1894, i64 0, !dbg !105
  %2227 = extractelement <32 x float> %1894, i64 1, !dbg !105
  %2228 = fcmp ogt float %2226, %2227, !dbg !105
  %2229 = fcmp uno float %2226, 0.000000e+00, !dbg !106
  %2230 = or i1 %2228, %2229, !dbg !107
  %2231 = select i1 %2230, float %2226, float %2227, !dbg !108
  %2232 = extractelement <32 x float> %1894, i64 2, !dbg !105
  %2233 = fcmp ogt float %2231, %2232, !dbg !105
  %2234 = fcmp uno float %2231, 0.000000e+00, !dbg !106
  %2235 = or i1 %2233, %2234, !dbg !107
  %2236 = select i1 %2235, float %2231, float %2232, !dbg !108
  %2237 = extractelement <32 x float> %1894, i64 3, !dbg !105
  %2238 = fcmp ogt float %2236, %2237, !dbg !105
  %2239 = fcmp uno float %2236, 0.000000e+00, !dbg !106
  %2240 = or i1 %2238, %2239, !dbg !107
  %2241 = select i1 %2240, float %2236, float %2237, !dbg !108
  %2242 = extractelement <32 x float> %1894, i64 4, !dbg !105
  %2243 = fcmp ogt float %2241, %2242, !dbg !105
  %2244 = fcmp uno float %2241, 0.000000e+00, !dbg !106
  %2245 = or i1 %2243, %2244, !dbg !107
  %2246 = select i1 %2245, float %2241, float %2242, !dbg !108
  %2247 = extractelement <32 x float> %1894, i64 5, !dbg !105
  %2248 = fcmp ogt float %2246, %2247, !dbg !105
  %2249 = fcmp uno float %2246, 0.000000e+00, !dbg !106
  %2250 = or i1 %2248, %2249, !dbg !107
  %2251 = select i1 %2250, float %2246, float %2247, !dbg !108
  %2252 = extractelement <32 x float> %1894, i64 6, !dbg !105
  %2253 = fcmp ogt float %2251, %2252, !dbg !105
  %2254 = fcmp uno float %2251, 0.000000e+00, !dbg !106
  %2255 = or i1 %2253, %2254, !dbg !107
  %2256 = select i1 %2255, float %2251, float %2252, !dbg !108
  %2257 = extractelement <32 x float> %1894, i64 7, !dbg !105
  %2258 = fcmp ogt float %2256, %2257, !dbg !105
  %2259 = fcmp uno float %2256, 0.000000e+00, !dbg !106
  %2260 = or i1 %2258, %2259, !dbg !107
  %2261 = select i1 %2260, float %2256, float %2257, !dbg !108
  %2262 = extractelement <32 x float> %1894, i64 8, !dbg !105
  %2263 = fcmp ogt float %2261, %2262, !dbg !105
  %2264 = fcmp uno float %2261, 0.000000e+00, !dbg !106
  %2265 = or i1 %2263, %2264, !dbg !107
  %2266 = select i1 %2265, float %2261, float %2262, !dbg !108
  %2267 = extractelement <32 x float> %1894, i64 9, !dbg !105
  %2268 = fcmp ogt float %2266, %2267, !dbg !105
  %2269 = fcmp uno float %2266, 0.000000e+00, !dbg !106
  %2270 = or i1 %2268, %2269, !dbg !107
  %2271 = select i1 %2270, float %2266, float %2267, !dbg !108
  %2272 = extractelement <32 x float> %1894, i64 10, !dbg !105
  %2273 = fcmp ogt float %2271, %2272, !dbg !105
  %2274 = fcmp uno float %2271, 0.000000e+00, !dbg !106
  %2275 = or i1 %2273, %2274, !dbg !107
  %2276 = select i1 %2275, float %2271, float %2272, !dbg !108
  %2277 = extractelement <32 x float> %1894, i64 11, !dbg !105
  %2278 = fcmp ogt float %2276, %2277, !dbg !105
  %2279 = fcmp uno float %2276, 0.000000e+00, !dbg !106
  %2280 = or i1 %2278, %2279, !dbg !107
  %2281 = select i1 %2280, float %2276, float %2277, !dbg !108
  %2282 = extractelement <32 x float> %1894, i64 12, !dbg !105
  %2283 = fcmp ogt float %2281, %2282, !dbg !105
  %2284 = fcmp uno float %2281, 0.000000e+00, !dbg !106
  %2285 = or i1 %2283, %2284, !dbg !107
  %2286 = select i1 %2285, float %2281, float %2282, !dbg !108
  %2287 = extractelement <32 x float> %1894, i64 13, !dbg !105
  %2288 = fcmp ogt float %2286, %2287, !dbg !105
  %2289 = fcmp uno float %2286, 0.000000e+00, !dbg !106
  %2290 = or i1 %2288, %2289, !dbg !107
  %2291 = select i1 %2290, float %2286, float %2287, !dbg !108
  %2292 = extractelement <32 x float> %1894, i64 14, !dbg !105
  %2293 = fcmp ogt float %2291, %2292, !dbg !105
  %2294 = fcmp uno float %2291, 0.000000e+00, !dbg !106
  %2295 = or i1 %2293, %2294, !dbg !107
  %2296 = select i1 %2295, float %2291, float %2292, !dbg !108
  %2297 = extractelement <32 x float> %1894, i64 15, !dbg !105
  %2298 = fcmp ogt float %2296, %2297, !dbg !105
  %2299 = fcmp uno float %2296, 0.000000e+00, !dbg !106
  %2300 = or i1 %2298, %2299, !dbg !107
  %2301 = select i1 %2300, float %2296, float %2297, !dbg !108
  %2302 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1889, <2 x i32> <i32 0, i32 2>, !dbg !105
  %2303 = fcmp ogt <2 x float> %2302, %1889, !dbg !105
  %2304 = fcmp uno <2 x float> %2302, %1889, !dbg !105
  %shift = shufflevector <2 x i1> %2303, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !107
  %2305 = or <2 x i1> %shift, %2304, !dbg !107
  %2306 = extractelement <2 x i1> %2305, i64 0, !dbg !107
  %2307 = extractelement <2 x float> %1889, i64 0, !dbg !108
  %2308 = extractelement <2 x float> %1889, i64 1, !dbg !108
  %2309 = select i1 %2306, float %2307, float %2308, !dbg !108
  %2310 = extractelement <32 x float> %1894, i64 16, !dbg !105
  %2311 = fcmp ogt float %2309, %2310, !dbg !105
  %2312 = fcmp uno float %2309, 0.000000e+00, !dbg !106
  %2313 = or i1 %2311, %2312, !dbg !107
  %2314 = select i1 %2313, float %2309, float %2310, !dbg !108
  %2315 = extractelement <32 x float> %1894, i64 17, !dbg !105
  %2316 = fcmp ogt float %2314, %2315, !dbg !105
  %2317 = fcmp uno float %2314, 0.000000e+00, !dbg !106
  %2318 = or i1 %2316, %2317, !dbg !107
  %2319 = select i1 %2318, float %2314, float %2315, !dbg !108
  %2320 = extractelement <32 x float> %1894, i64 18, !dbg !105
  %2321 = fcmp ogt float %2319, %2320, !dbg !105
  %2322 = fcmp uno float %2319, 0.000000e+00, !dbg !106
  %2323 = or i1 %2321, %2322, !dbg !107
  %2324 = select i1 %2323, float %2319, float %2320, !dbg !108
  %2325 = extractelement <32 x float> %1894, i64 19, !dbg !105
  %2326 = fcmp ogt float %2324, %2325, !dbg !105
  %2327 = fcmp uno float %2324, 0.000000e+00, !dbg !106
  %2328 = or i1 %2326, %2327, !dbg !107
  %2329 = select i1 %2328, float %2324, float %2325, !dbg !108
  %2330 = extractelement <32 x float> %1894, i64 20, !dbg !105
  %2331 = fcmp ogt float %2329, %2330, !dbg !105
  %2332 = fcmp uno float %2329, 0.000000e+00, !dbg !106
  %2333 = or i1 %2331, %2332, !dbg !107
  %2334 = select i1 %2333, float %2329, float %2330, !dbg !108
  %2335 = extractelement <32 x float> %1894, i64 21, !dbg !105
  %2336 = fcmp ogt float %2334, %2335, !dbg !105
  %2337 = fcmp uno float %2334, 0.000000e+00, !dbg !106
  %2338 = or i1 %2336, %2337, !dbg !107
  %2339 = select i1 %2338, float %2334, float %2335, !dbg !108
  %2340 = extractelement <32 x float> %1894, i64 22, !dbg !105
  %2341 = fcmp ogt float %2339, %2340, !dbg !105
  %2342 = fcmp uno float %2339, 0.000000e+00, !dbg !106
  %2343 = or i1 %2341, %2342, !dbg !107
  %2344 = select i1 %2343, float %2339, float %2340, !dbg !108
  %2345 = extractelement <32 x float> %1894, i64 23, !dbg !105
  %2346 = fcmp ogt float %2344, %2345, !dbg !105
  %2347 = fcmp uno float %2344, 0.000000e+00, !dbg !106
  %2348 = or i1 %2346, %2347, !dbg !107
  %2349 = select i1 %2348, float %2344, float %2345, !dbg !108
  %2350 = extractelement <32 x float> %1894, i64 24, !dbg !105
  %2351 = fcmp ogt float %2349, %2350, !dbg !105
  %2352 = fcmp uno float %2349, 0.000000e+00, !dbg !106
  %2353 = or i1 %2351, %2352, !dbg !107
  %2354 = select i1 %2353, float %2349, float %2350, !dbg !108
  %2355 = extractelement <32 x float> %1894, i64 25, !dbg !105
  %2356 = fcmp ogt float %2354, %2355, !dbg !105
  %2357 = fcmp uno float %2354, 0.000000e+00, !dbg !106
  %2358 = or i1 %2356, %2357, !dbg !107
  %2359 = select i1 %2358, float %2354, float %2355, !dbg !108
  %2360 = extractelement <32 x float> %1894, i64 26, !dbg !105
  %2361 = fcmp ogt float %2359, %2360, !dbg !105
  %2362 = fcmp uno float %2359, 0.000000e+00, !dbg !106
  %2363 = or i1 %2361, %2362, !dbg !107
  %2364 = select i1 %2363, float %2359, float %2360, !dbg !108
  %2365 = extractelement <32 x float> %1894, i64 27, !dbg !105
  %2366 = fcmp ogt float %2364, %2365, !dbg !105
  %2367 = fcmp uno float %2364, 0.000000e+00, !dbg !106
  %2368 = or i1 %2366, %2367, !dbg !107
  %2369 = select i1 %2368, float %2364, float %2365, !dbg !108
  %2370 = extractelement <32 x float> %1894, i64 28, !dbg !105
  %2371 = fcmp ogt float %2369, %2370, !dbg !105
  %2372 = fcmp uno float %2369, 0.000000e+00, !dbg !106
  %2373 = or i1 %2371, %2372, !dbg !107
  %2374 = select i1 %2373, float %2369, float %2370, !dbg !108
  %2375 = extractelement <32 x float> %1894, i64 29, !dbg !105
  %2376 = fcmp ogt float %2374, %2375, !dbg !105
  %2377 = fcmp uno float %2374, 0.000000e+00, !dbg !106
  %2378 = or i1 %2376, %2377, !dbg !107
  %2379 = select i1 %2378, float %2374, float %2375, !dbg !108
  %2380 = bitcast float %2301 to i32, !dbg !103
  %2381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2380, i32 16, i32 31), !dbg !103
  %2382 = bitcast i32 %2381 to float, !dbg !103
  %2383 = fcmp ogt float %2301, %2382, !dbg !105
  %2384 = fcmp uno float %2301, 0.000000e+00, !dbg !106
  %2385 = or i1 %2384, %2383, !dbg !107
  %2386 = select i1 %2385, float %2301, float %2382, !dbg !108
  %2387 = bitcast float %2386 to i32, !dbg !103
  %2388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2387, i32 8, i32 31), !dbg !103
  %2389 = bitcast i32 %2388 to float, !dbg !103
  %2390 = fcmp ogt float %2386, %2389, !dbg !105
  %2391 = fcmp uno float %2386, 0.000000e+00, !dbg !106
  %2392 = or i1 %2390, %2391, !dbg !107
  %2393 = select i1 %2392, float %2386, float %2389, !dbg !108
  %2394 = bitcast float %2393 to i32, !dbg !103
  %2395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2394, i32 4, i32 31), !dbg !103
  %2396 = bitcast i32 %2395 to float, !dbg !103
  %2397 = fcmp ogt float %2393, %2396, !dbg !105
  %2398 = fcmp uno float %2393, 0.000000e+00, !dbg !106
  %2399 = or i1 %2397, %2398, !dbg !107
  %2400 = select i1 %2399, float %2393, float %2396, !dbg !108
  %2401 = bitcast float %2400 to i32, !dbg !103
  %2402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2401, i32 2, i32 31), !dbg !103
  %2403 = bitcast i32 %2402 to float, !dbg !103
  %2404 = fcmp ogt float %2400, %2403, !dbg !105
  %2405 = fcmp uno float %2400, 0.000000e+00, !dbg !106
  %2406 = or i1 %2404, %2405, !dbg !107
  %2407 = select i1 %2406, float %2400, float %2403, !dbg !108
  %2408 = bitcast float %2407 to i32, !dbg !103
  %2409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2408, i32 1, i32 31), !dbg !103
  %2410 = bitcast i32 %2409 to float, !dbg !103
  %2411 = fcmp ogt float %2407, %2410, !dbg !105
  %2412 = fcmp uno float %2407, 0.000000e+00, !dbg !106
  %2413 = or i1 %2411, %2412, !dbg !107
  %2414 = bitcast float %2379 to i32, !dbg !103
  %2415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2414, i32 16, i32 31), !dbg !103
  %2416 = bitcast i32 %2415 to float, !dbg !103
  %2417 = fcmp ogt float %2379, %2416, !dbg !105
  %2418 = fcmp uno float %2379, 0.000000e+00, !dbg !106
  %2419 = or i1 %2418, %2417, !dbg !107
  %2420 = select i1 %2419, float %2379, float %2416, !dbg !108
  %2421 = bitcast float %2420 to i32, !dbg !103
  %2422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2421, i32 8, i32 31), !dbg !103
  %2423 = bitcast i32 %2422 to float, !dbg !103
  %2424 = fcmp ogt float %2420, %2423, !dbg !105
  %2425 = fcmp uno float %2420, 0.000000e+00, !dbg !106
  %2426 = or i1 %2424, %2425, !dbg !107
  %2427 = select i1 %2426, float %2420, float %2423, !dbg !108
  %2428 = bitcast float %2427 to i32, !dbg !103
  %2429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2428, i32 4, i32 31), !dbg !103
  %2430 = bitcast i32 %2429 to float, !dbg !103
  %2431 = fcmp ogt float %2427, %2430, !dbg !105
  %2432 = fcmp uno float %2427, 0.000000e+00, !dbg !106
  %2433 = or i1 %2431, %2432, !dbg !107
  %2434 = select i1 %2433, float %2427, float %2430, !dbg !108
  %2435 = bitcast float %2434 to i32, !dbg !103
  %2436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2435, i32 2, i32 31), !dbg !103
  %2437 = bitcast i32 %2436 to float, !dbg !103
  %2438 = fcmp ogt float %2434, %2437, !dbg !105
  %2439 = fcmp uno float %2434, 0.000000e+00, !dbg !106
  %2440 = or i1 %2438, %2439, !dbg !107
  %2441 = select i1 %2440, float %2434, float %2437, !dbg !108
  %2442 = bitcast float %2441 to i32, !dbg !103
  %2443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2442, i32 1, i32 31), !dbg !103
  %2444 = bitcast i32 %2443 to float, !dbg !103
  %2445 = fcmp ogt float %2441, %2444, !dbg !105
  %2446 = fcmp uno float %2441, 0.000000e+00, !dbg !106
  %2447 = or i1 %2445, %2446, !dbg !107
  %2448 = select i1 %2413, i32 %2408, i32 %2409, !dbg !108
  %2449 = insertelement <1 x i32> poison, i32 %2448, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1212, <1 x i32> %2449, i1 %1211) #5, !dbg !103
  %2450 = select i1 %2447, i32 %2442, i32 %2443, !dbg !108
  %2451 = insertelement <1 x i32> poison, i32 %2450, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1219, <1 x i32> %2451, i1 %1211) #5, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %2452 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1226, i1 %1225) #5, !dbg !103
  %2453 = bitcast i32 %2452 to float, !dbg !103
  %2454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2452, i32 2, i32 31), !dbg !103
  %2455 = bitcast i32 %2454 to float, !dbg !103
  %2456 = fcmp ogt float %2453, %2455, !dbg !105
  %2457 = fcmp uno float %2453, 0.000000e+00, !dbg !106
  %2458 = or i1 %2457, %2456, !dbg !107
  %2459 = select i1 %2458, float %2453, float %2455, !dbg !108
  %2460 = bitcast float %2459 to i32, !dbg !103
  %2461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2460, i32 1, i32 31), !dbg !103
  %2462 = bitcast i32 %2461 to float, !dbg !103
  %2463 = fcmp ogt float %2459, %2462, !dbg !105
  %2464 = fcmp uno float %2459, 0.000000e+00, !dbg !106
  %2465 = or i1 %2463, %2464, !dbg !107
  %2466 = select i1 %2465, i32 %2460, i32 %2461, !dbg !108
  %2467 = insertelement <1 x i32> poison, i32 %2466, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1226, <1 x i32> %2467, i1 %1276) #5, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %2468 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !103
  %2469 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %2470 = bitcast float %2468 to i32, !dbg !109
  %2471 = bitcast float %2469 to i32, !dbg !109
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2470, i32 %2471, i1 true) #5, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %2472 = load float, ptr addrspace(3) %2224, align 4, !dbg !109
  %2473 = sext i32 %22 to i64, !dbg !110
  %2474 = getelementptr bfloat, ptr addrspace(1) %4, i64 %2473, !dbg !110
  %2475 = fptrunc float %2225 to bfloat, !dbg !102
  %2476 = and i32 %19, 126, !dbg !102
  %2477 = icmp eq i32 %2476, 0, !dbg !102
  %2478 = bitcast bfloat %2475 to i16, !dbg !102
  %2479 = and i1 %2477, %24, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2478, ptr addrspace(1) %2474, i1 %2479) #5, !dbg !102
  %2480 = getelementptr bfloat, ptr addrspace(1) %5, i64 %2473, !dbg !111
  %2481 = fptrunc float %2472 to bfloat, !dbg !109
  %2482 = bitcast bfloat %2481 to i16, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2482, ptr addrspace(1) %2480, i1 %2479) #5, !dbg !109
  %2483 = getelementptr bfloat, ptr addrspace(1) %6, i64 %2473, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2478, ptr addrspace(1) %2483, i1 %2479) #5, !dbg !113
  %2484 = getelementptr bfloat, ptr addrspace(1) %7, i64 %2473, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2482, ptr addrspace(1) %2484, i1 %2479) #5, !dbg !115
  %2485 = getelementptr bfloat, ptr addrspace(1) %8, i64 %2473, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2478, ptr addrspace(1) %2485, i1 %2479) #5, !dbg !117
  %2486 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2473, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2482, ptr addrspace(1) %2486, i1 %2479) #5, !dbg !119
  %.inv = fcmp oge float %2220, 0.000000e+00, !dbg !120
  %2487 = select i1 %.inv, float 0.000000e+00, float %2220, !dbg !120
  %.inv3 = fcmp oge float %2221, 0.000000e+00, !dbg !120
  %2488 = select i1 %.inv3, float 0.000000e+00, float %2221, !dbg !120
  %2489 = fsub float 0.000000e+00, %2487, !dbg !122
  %2490 = fsub float 0.000000e+00, %2488, !dbg !122
  %.inv4 = fcmp ole float %2468, 0.000000e+00, !dbg !123
  %2491 = select i1 %.inv4, float 0.000000e+00, float %2468, !dbg !123
  %.inv5 = fcmp ole float %2469, 0.000000e+00, !dbg !123
  %2492 = select i1 %.inv5, float 0.000000e+00, float %2469, !dbg !123
  %2493 = fcmp ogt float %2489, %2491, !dbg !125
  %2494 = fcmp ogt float %2490, %2492, !dbg !125
  %2495 = fcmp uno float %2489, 0.000000e+00, !dbg !127
  %2496 = fcmp uno float %2490, 0.000000e+00, !dbg !127
  %2497 = or i1 %2495, %2493, !dbg !128
  %2498 = or i1 %2496, %2494, !dbg !128
  %2499 = select i1 %2497, float %2489, float %2491, !dbg !129
  %2500 = select i1 %2498, float %2490, float %2492, !dbg !129
  %2501 = fmul float %2499, 0x3F80204080000000, !dbg !130
  %2502 = fmul float %2500, 0x3F80204080000000, !dbg !130
  %2503 = fcmp ogt float %2501, 0x3EE4F8B580000000, !dbg !131
  %2504 = fcmp ogt float %2502, 0x3EE4F8B580000000, !dbg !131
  %2505 = fcmp uno float %2501, 0.000000e+00, !dbg !133
  %2506 = fcmp uno float %2502, 0.000000e+00, !dbg !133
  %2507 = or i1 %2503, %2505, !dbg !134
  %2508 = or i1 %2504, %2506, !dbg !134
  %2509 = select i1 %2507, float %2501, float 0x3EE4F8B580000000, !dbg !135
  %2510 = select i1 %2508, float %2502, float 0x3EE4F8B580000000, !dbg !135
  %2511 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2509), !dbg !136
  %2512 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2510), !dbg !136
  br label %2513, !dbg !137

2513:                                             ; preds = %1985, %2513
  %2514 = phi i1 [ true, %1985 ], [ false, %2513 ]
  %indvars.iv358 = phi i64 [ 0, %1985 ], [ 2048, %2513 ]
  %2515 = or disjoint i64 %indvars.iv358, %33, !dbg !138
  %2516 = icmp samesign ult i64 %2515, 3072, !dbg !139
  %2517 = trunc nuw nsw i64 %2515 to i32, !dbg !140
  %2518 = add i32 %31, %2517, !dbg !140
  %2519 = trunc nuw nsw i64 %indvars.iv358 to i32, !dbg !140
  %2520 = or disjoint i32 %27, %2519, !dbg !140
  %2521 = add i32 %2520, %31, !dbg !140
  %2522 = add i32 %32, %2517, !dbg !140
  %2523 = add i32 %2520, %32, !dbg !140
  %2524 = sext i32 %2518 to i64, !dbg !141
  %2525 = getelementptr bfloat, ptr addrspace(1) %3, i64 %2524, !dbg !141
  %2526 = sext i32 %2521 to i64, !dbg !141
  %2527 = getelementptr bfloat, ptr addrspace(1) %3, i64 %2526, !dbg !141
  %2528 = sext i32 %2522 to i64, !dbg !141
  %2529 = getelementptr bfloat, ptr addrspace(1) %3, i64 %2528, !dbg !141
  %2530 = sext i32 %2523 to i64, !dbg !141
  %2531 = getelementptr bfloat, ptr addrspace(1) %3, i64 %2530, !dbg !141
  %2532 = and i1 %23, %2516, !dbg !142
  %2533 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2525, i1 %2532) #5, !dbg !143
  %2534 = extractvalue { i32, i32, i32, i32 } %2533, 0, !dbg !143
  %2535 = bitcast i32 %2534 to <2 x bfloat>, !dbg !143
  %2536 = extractvalue { i32, i32, i32, i32 } %2533, 1, !dbg !143
  %2537 = bitcast i32 %2536 to <2 x bfloat>, !dbg !143
  %2538 = extractvalue { i32, i32, i32, i32 } %2533, 2, !dbg !143
  %2539 = bitcast i32 %2538 to <2 x bfloat>, !dbg !143
  %2540 = extractvalue { i32, i32, i32, i32 } %2533, 3, !dbg !143
  %2541 = bitcast i32 %2540 to <2 x bfloat>, !dbg !143
  %2542 = extractelement <2 x bfloat> %2535, i64 0, !dbg !143
  %2543 = extractelement <2 x bfloat> %2535, i64 1, !dbg !143
  %2544 = extractelement <2 x bfloat> %2537, i64 0, !dbg !143
  %2545 = extractelement <2 x bfloat> %2537, i64 1, !dbg !143
  %2546 = extractelement <2 x bfloat> %2539, i64 0, !dbg !143
  %2547 = extractelement <2 x bfloat> %2539, i64 1, !dbg !143
  %2548 = extractelement <2 x bfloat> %2541, i64 0, !dbg !143
  %2549 = extractelement <2 x bfloat> %2541, i64 1, !dbg !143
  %2550 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2527, i1 %2532) #5, !dbg !143
  %2551 = extractvalue { i32, i32, i32, i32 } %2550, 0, !dbg !143
  %2552 = bitcast i32 %2551 to <2 x bfloat>, !dbg !143
  %2553 = extractvalue { i32, i32, i32, i32 } %2550, 1, !dbg !143
  %2554 = bitcast i32 %2553 to <2 x bfloat>, !dbg !143
  %2555 = extractvalue { i32, i32, i32, i32 } %2550, 2, !dbg !143
  %2556 = bitcast i32 %2555 to <2 x bfloat>, !dbg !143
  %2557 = extractvalue { i32, i32, i32, i32 } %2550, 3, !dbg !143
  %2558 = bitcast i32 %2557 to <2 x bfloat>, !dbg !143
  %2559 = extractelement <2 x bfloat> %2552, i64 0, !dbg !143
  %2560 = extractelement <2 x bfloat> %2552, i64 1, !dbg !143
  %2561 = extractelement <2 x bfloat> %2554, i64 0, !dbg !143
  %2562 = extractelement <2 x bfloat> %2554, i64 1, !dbg !143
  %2563 = extractelement <2 x bfloat> %2556, i64 0, !dbg !143
  %2564 = extractelement <2 x bfloat> %2556, i64 1, !dbg !143
  %2565 = extractelement <2 x bfloat> %2558, i64 0, !dbg !143
  %2566 = extractelement <2 x bfloat> %2558, i64 1, !dbg !143
  %2567 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2529, i1 %2532) #5, !dbg !143
  %2568 = extractvalue { i32, i32, i32, i32 } %2567, 0, !dbg !143
  %2569 = bitcast i32 %2568 to <2 x bfloat>, !dbg !143
  %2570 = extractvalue { i32, i32, i32, i32 } %2567, 1, !dbg !143
  %2571 = bitcast i32 %2570 to <2 x bfloat>, !dbg !143
  %2572 = extractvalue { i32, i32, i32, i32 } %2567, 2, !dbg !143
  %2573 = bitcast i32 %2572 to <2 x bfloat>, !dbg !143
  %2574 = extractvalue { i32, i32, i32, i32 } %2567, 3, !dbg !143
  %2575 = bitcast i32 %2574 to <2 x bfloat>, !dbg !143
  %2576 = extractelement <2 x bfloat> %2569, i64 0, !dbg !143
  %2577 = extractelement <2 x bfloat> %2569, i64 1, !dbg !143
  %2578 = extractelement <2 x bfloat> %2571, i64 0, !dbg !143
  %2579 = extractelement <2 x bfloat> %2571, i64 1, !dbg !143
  %2580 = extractelement <2 x bfloat> %2573, i64 0, !dbg !143
  %2581 = extractelement <2 x bfloat> %2573, i64 1, !dbg !143
  %2582 = extractelement <2 x bfloat> %2575, i64 0, !dbg !143
  %2583 = extractelement <2 x bfloat> %2575, i64 1, !dbg !143
  %2584 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2531, i1 %2532) #5, !dbg !143
  %2585 = extractvalue { i32, i32, i32, i32 } %2584, 0, !dbg !143
  %2586 = bitcast i32 %2585 to <2 x bfloat>, !dbg !143
  %2587 = extractvalue { i32, i32, i32, i32 } %2584, 1, !dbg !143
  %2588 = bitcast i32 %2587 to <2 x bfloat>, !dbg !143
  %2589 = extractvalue { i32, i32, i32, i32 } %2584, 2, !dbg !143
  %2590 = bitcast i32 %2589 to <2 x bfloat>, !dbg !143
  %2591 = extractvalue { i32, i32, i32, i32 } %2584, 3, !dbg !143
  %2592 = bitcast i32 %2591 to <2 x bfloat>, !dbg !143
  %2593 = extractelement <2 x bfloat> %2586, i64 0, !dbg !143
  %2594 = extractelement <2 x bfloat> %2586, i64 1, !dbg !143
  %2595 = extractelement <2 x bfloat> %2588, i64 0, !dbg !143
  %2596 = extractelement <2 x bfloat> %2588, i64 1, !dbg !143
  %2597 = extractelement <2 x bfloat> %2590, i64 0, !dbg !143
  %2598 = extractelement <2 x bfloat> %2590, i64 1, !dbg !143
  %2599 = extractelement <2 x bfloat> %2592, i64 0, !dbg !143
  %2600 = extractelement <2 x bfloat> %2592, i64 1, !dbg !143
  %2601 = fpext bfloat %2542 to float, !dbg !144
  %2602 = fpext bfloat %2543 to float, !dbg !144
  %2603 = fpext bfloat %2544 to float, !dbg !144
  %2604 = fpext bfloat %2545 to float, !dbg !144
  %2605 = fpext bfloat %2546 to float, !dbg !144
  %2606 = fpext bfloat %2547 to float, !dbg !144
  %2607 = fpext bfloat %2548 to float, !dbg !144
  %2608 = fpext bfloat %2549 to float, !dbg !144
  %2609 = fpext bfloat %2559 to float, !dbg !144
  %2610 = fpext bfloat %2560 to float, !dbg !144
  %2611 = fpext bfloat %2561 to float, !dbg !144
  %2612 = fpext bfloat %2562 to float, !dbg !144
  %2613 = fpext bfloat %2563 to float, !dbg !144
  %2614 = fpext bfloat %2564 to float, !dbg !144
  %2615 = fpext bfloat %2565 to float, !dbg !144
  %2616 = fpext bfloat %2566 to float, !dbg !144
  %2617 = fpext bfloat %2576 to float, !dbg !144
  %2618 = fpext bfloat %2577 to float, !dbg !144
  %2619 = fpext bfloat %2578 to float, !dbg !144
  %2620 = fpext bfloat %2579 to float, !dbg !144
  %2621 = fpext bfloat %2580 to float, !dbg !144
  %2622 = fpext bfloat %2581 to float, !dbg !144
  %2623 = fpext bfloat %2582 to float, !dbg !144
  %2624 = fpext bfloat %2583 to float, !dbg !144
  %2625 = fpext bfloat %2593 to float, !dbg !144
  %2626 = fpext bfloat %2594 to float, !dbg !144
  %2627 = fpext bfloat %2595 to float, !dbg !144
  %2628 = fpext bfloat %2596 to float, !dbg !144
  %2629 = fpext bfloat %2597 to float, !dbg !144
  %2630 = fpext bfloat %2598 to float, !dbg !144
  %2631 = fpext bfloat %2599 to float, !dbg !144
  %2632 = fpext bfloat %2600 to float, !dbg !144
  %2633 = fmul float %2511, %2601, !dbg !145
  %2634 = fmul float %2511, %2602, !dbg !145
  %2635 = fmul float %2511, %2603, !dbg !145
  %2636 = fmul float %2511, %2604, !dbg !145
  %2637 = fmul float %2511, %2605, !dbg !145
  %2638 = fmul float %2511, %2606, !dbg !145
  %2639 = fmul float %2511, %2607, !dbg !145
  %2640 = fmul float %2511, %2608, !dbg !145
  %2641 = fmul float %2511, %2609, !dbg !145
  %2642 = fmul float %2511, %2610, !dbg !145
  %2643 = fmul float %2511, %2611, !dbg !145
  %2644 = fmul float %2511, %2612, !dbg !145
  %2645 = fmul float %2511, %2613, !dbg !145
  %2646 = fmul float %2511, %2614, !dbg !145
  %2647 = fmul float %2511, %2615, !dbg !145
  %2648 = fmul float %2511, %2616, !dbg !145
  %2649 = fmul float %2512, %2617, !dbg !145
  %2650 = fmul float %2512, %2618, !dbg !145
  %2651 = fmul float %2512, %2619, !dbg !145
  %2652 = fmul float %2512, %2620, !dbg !145
  %2653 = fmul float %2512, %2621, !dbg !145
  %2654 = fmul float %2512, %2622, !dbg !145
  %2655 = fmul float %2512, %2623, !dbg !145
  %2656 = fmul float %2512, %2624, !dbg !145
  %2657 = fmul float %2512, %2625, !dbg !145
  %2658 = fmul float %2512, %2626, !dbg !145
  %2659 = fmul float %2512, %2627, !dbg !145
  %2660 = fmul float %2512, %2628, !dbg !145
  %2661 = fmul float %2512, %2629, !dbg !145
  %2662 = fmul float %2512, %2630, !dbg !145
  %2663 = fmul float %2512, %2631, !dbg !145
  %2664 = fmul float %2512, %2632, !dbg !145
  %2665 = tail call float @llvm.nvvm.round.f(float %2633) #5, !dbg !146
  %2666 = tail call float @llvm.nvvm.round.f(float %2634) #5, !dbg !146
  %2667 = tail call float @llvm.nvvm.round.f(float %2635) #5, !dbg !146
  %2668 = tail call float @llvm.nvvm.round.f(float %2636) #5, !dbg !146
  %2669 = tail call float @llvm.nvvm.round.f(float %2637) #5, !dbg !146
  %2670 = tail call float @llvm.nvvm.round.f(float %2638) #5, !dbg !146
  %2671 = tail call float @llvm.nvvm.round.f(float %2639) #5, !dbg !146
  %2672 = tail call float @llvm.nvvm.round.f(float %2640) #5, !dbg !146
  %2673 = tail call float @llvm.nvvm.round.f(float %2641) #5, !dbg !146
  %2674 = tail call float @llvm.nvvm.round.f(float %2642) #5, !dbg !146
  %2675 = tail call float @llvm.nvvm.round.f(float %2643) #5, !dbg !146
  %2676 = tail call float @llvm.nvvm.round.f(float %2644) #5, !dbg !146
  %2677 = tail call float @llvm.nvvm.round.f(float %2645) #5, !dbg !146
  %2678 = tail call float @llvm.nvvm.round.f(float %2646) #5, !dbg !146
  %2679 = tail call float @llvm.nvvm.round.f(float %2647) #5, !dbg !146
  %2680 = tail call float @llvm.nvvm.round.f(float %2648) #5, !dbg !146
  %2681 = tail call float @llvm.nvvm.round.f(float %2649) #5, !dbg !146
  %2682 = tail call float @llvm.nvvm.round.f(float %2650) #5, !dbg !146
  %2683 = tail call float @llvm.nvvm.round.f(float %2651) #5, !dbg !146
  %2684 = tail call float @llvm.nvvm.round.f(float %2652) #5, !dbg !146
  %2685 = tail call float @llvm.nvvm.round.f(float %2653) #5, !dbg !146
  %2686 = tail call float @llvm.nvvm.round.f(float %2654) #5, !dbg !146
  %2687 = tail call float @llvm.nvvm.round.f(float %2655) #5, !dbg !146
  %2688 = tail call float @llvm.nvvm.round.f(float %2656) #5, !dbg !146
  %2689 = tail call float @llvm.nvvm.round.f(float %2657) #5, !dbg !146
  %2690 = tail call float @llvm.nvvm.round.f(float %2658) #5, !dbg !146
  %2691 = tail call float @llvm.nvvm.round.f(float %2659) #5, !dbg !146
  %2692 = tail call float @llvm.nvvm.round.f(float %2660) #5, !dbg !146
  %2693 = tail call float @llvm.nvvm.round.f(float %2661) #5, !dbg !146
  %2694 = tail call float @llvm.nvvm.round.f(float %2662) #5, !dbg !146
  %2695 = tail call float @llvm.nvvm.round.f(float %2663) #5, !dbg !146
  %2696 = tail call float @llvm.nvvm.round.f(float %2664) #5, !dbg !146
  %2697 = insertelement <4 x float> poison, float %2665, i64 0, !dbg !147
  %2698 = insertelement <4 x float> %2697, float %2666, i64 1, !dbg !147
  %2699 = insertelement <4 x float> %2698, float %2667, i64 2, !dbg !147
  %2700 = insertelement <4 x float> %2699, float %2668, i64 3, !dbg !147
  %2701 = fcmp ogt <4 x float> %2700, splat (float -1.270000e+02), !dbg !147
  %2702 = fcmp uno <4 x float> %2700, zeroinitializer, !dbg !149
  %2703 = or <4 x i1> %2701, %2702, !dbg !150
  %2704 = select <4 x i1> %2703, <4 x float> %2700, <4 x float> splat (float -1.270000e+02), !dbg !151
  %2705 = fcmp olt <4 x float> %2704, splat (float 1.270000e+02), !dbg !152
  %2706 = fcmp uno <4 x float> %2704, zeroinitializer, !dbg !154
  %2707 = or <4 x i1> %2705, %2706, !dbg !155
  %2708 = fptosi <4 x float> %2704 to <4 x i8>, !dbg !156
  %2709 = select <4 x i1> %2707, <4 x i8> %2708, <4 x i8> splat (i8 127), !dbg !157
  %2710 = insertelement <4 x float> poison, float %2669, i64 0, !dbg !147
  %2711 = insertelement <4 x float> %2710, float %2670, i64 1, !dbg !147
  %2712 = insertelement <4 x float> %2711, float %2671, i64 2, !dbg !147
  %2713 = insertelement <4 x float> %2712, float %2672, i64 3, !dbg !147
  %2714 = fcmp ogt <4 x float> %2713, splat (float -1.270000e+02), !dbg !147
  %2715 = fcmp uno <4 x float> %2713, zeroinitializer, !dbg !149
  %2716 = or <4 x i1> %2714, %2715, !dbg !150
  %2717 = select <4 x i1> %2716, <4 x float> %2713, <4 x float> splat (float -1.270000e+02), !dbg !151
  %2718 = fcmp olt <4 x float> %2717, splat (float 1.270000e+02), !dbg !152
  %2719 = fcmp uno <4 x float> %2717, zeroinitializer, !dbg !154
  %2720 = or <4 x i1> %2718, %2719, !dbg !155
  %2721 = fptosi <4 x float> %2717 to <4 x i8>, !dbg !156
  %2722 = select <4 x i1> %2720, <4 x i8> %2721, <4 x i8> splat (i8 127), !dbg !157
  %2723 = insertelement <4 x float> poison, float %2673, i64 0, !dbg !147
  %2724 = insertelement <4 x float> %2723, float %2674, i64 1, !dbg !147
  %2725 = insertelement <4 x float> %2724, float %2675, i64 2, !dbg !147
  %2726 = insertelement <4 x float> %2725, float %2676, i64 3, !dbg !147
  %2727 = fcmp ogt <4 x float> %2726, splat (float -1.270000e+02), !dbg !147
  %2728 = fcmp uno <4 x float> %2726, zeroinitializer, !dbg !149
  %2729 = or <4 x i1> %2727, %2728, !dbg !150
  %2730 = select <4 x i1> %2729, <4 x float> %2726, <4 x float> splat (float -1.270000e+02), !dbg !151
  %2731 = fcmp olt <4 x float> %2730, splat (float 1.270000e+02), !dbg !152
  %2732 = fcmp uno <4 x float> %2730, zeroinitializer, !dbg !154
  %2733 = or <4 x i1> %2731, %2732, !dbg !155
  %2734 = fptosi <4 x float> %2730 to <4 x i8>, !dbg !156
  %2735 = select <4 x i1> %2733, <4 x i8> %2734, <4 x i8> splat (i8 127), !dbg !157
  %2736 = insertelement <4 x float> poison, float %2677, i64 0, !dbg !147
  %2737 = insertelement <4 x float> %2736, float %2678, i64 1, !dbg !147
  %2738 = insertelement <4 x float> %2737, float %2679, i64 2, !dbg !147
  %2739 = insertelement <4 x float> %2738, float %2680, i64 3, !dbg !147
  %2740 = fcmp ogt <4 x float> %2739, splat (float -1.270000e+02), !dbg !147
  %2741 = fcmp uno <4 x float> %2739, zeroinitializer, !dbg !149
  %2742 = or <4 x i1> %2740, %2741, !dbg !150
  %2743 = select <4 x i1> %2742, <4 x float> %2739, <4 x float> splat (float -1.270000e+02), !dbg !151
  %2744 = fcmp olt <4 x float> %2743, splat (float 1.270000e+02), !dbg !152
  %2745 = fcmp uno <4 x float> %2743, zeroinitializer, !dbg !154
  %2746 = or <4 x i1> %2744, %2745, !dbg !155
  %2747 = fptosi <4 x float> %2743 to <4 x i8>, !dbg !156
  %2748 = select <4 x i1> %2746, <4 x i8> %2747, <4 x i8> splat (i8 127), !dbg !157
  %2749 = insertelement <4 x float> poison, float %2681, i64 0, !dbg !147
  %2750 = insertelement <4 x float> %2749, float %2682, i64 1, !dbg !147
  %2751 = insertelement <4 x float> %2750, float %2683, i64 2, !dbg !147
  %2752 = insertelement <4 x float> %2751, float %2684, i64 3, !dbg !147
  %2753 = fcmp ogt <4 x float> %2752, splat (float -1.270000e+02), !dbg !147
  %2754 = fcmp uno <4 x float> %2752, zeroinitializer, !dbg !149
  %2755 = or <4 x i1> %2753, %2754, !dbg !150
  %2756 = select <4 x i1> %2755, <4 x float> %2752, <4 x float> splat (float -1.270000e+02), !dbg !151
  %2757 = fcmp olt <4 x float> %2756, splat (float 1.270000e+02), !dbg !152
  %2758 = fcmp uno <4 x float> %2756, zeroinitializer, !dbg !154
  %2759 = or <4 x i1> %2757, %2758, !dbg !155
  %2760 = fptosi <4 x float> %2756 to <4 x i8>, !dbg !156
  %2761 = select <4 x i1> %2759, <4 x i8> %2760, <4 x i8> splat (i8 127), !dbg !157
  %2762 = insertelement <4 x float> poison, float %2685, i64 0, !dbg !147
  %2763 = insertelement <4 x float> %2762, float %2686, i64 1, !dbg !147
  %2764 = insertelement <4 x float> %2763, float %2687, i64 2, !dbg !147
  %2765 = insertelement <4 x float> %2764, float %2688, i64 3, !dbg !147
  %2766 = fcmp ogt <4 x float> %2765, splat (float -1.270000e+02), !dbg !147
  %2767 = fcmp uno <4 x float> %2765, zeroinitializer, !dbg !149
  %2768 = or <4 x i1> %2766, %2767, !dbg !150
  %2769 = select <4 x i1> %2768, <4 x float> %2765, <4 x float> splat (float -1.270000e+02), !dbg !151
  %2770 = fcmp olt <4 x float> %2769, splat (float 1.270000e+02), !dbg !152
  %2771 = fcmp uno <4 x float> %2769, zeroinitializer, !dbg !154
  %2772 = or <4 x i1> %2770, %2771, !dbg !155
  %2773 = fptosi <4 x float> %2769 to <4 x i8>, !dbg !156
  %2774 = select <4 x i1> %2772, <4 x i8> %2773, <4 x i8> splat (i8 127), !dbg !157
  %2775 = insertelement <4 x float> poison, float %2689, i64 0, !dbg !147
  %2776 = insertelement <4 x float> %2775, float %2690, i64 1, !dbg !147
  %2777 = insertelement <4 x float> %2776, float %2691, i64 2, !dbg !147
  %2778 = insertelement <4 x float> %2777, float %2692, i64 3, !dbg !147
  %2779 = fcmp ogt <4 x float> %2778, splat (float -1.270000e+02), !dbg !147
  %2780 = fcmp uno <4 x float> %2778, zeroinitializer, !dbg !149
  %2781 = or <4 x i1> %2779, %2780, !dbg !150
  %2782 = select <4 x i1> %2781, <4 x float> %2778, <4 x float> splat (float -1.270000e+02), !dbg !151
  %2783 = fcmp olt <4 x float> %2782, splat (float 1.270000e+02), !dbg !152
  %2784 = fcmp uno <4 x float> %2782, zeroinitializer, !dbg !154
  %2785 = or <4 x i1> %2783, %2784, !dbg !155
  %2786 = fptosi <4 x float> %2782 to <4 x i8>, !dbg !156
  %2787 = select <4 x i1> %2785, <4 x i8> %2786, <4 x i8> splat (i8 127), !dbg !157
  %2788 = insertelement <4 x float> poison, float %2693, i64 0, !dbg !147
  %2789 = insertelement <4 x float> %2788, float %2694, i64 1, !dbg !147
  %2790 = insertelement <4 x float> %2789, float %2695, i64 2, !dbg !147
  %2791 = insertelement <4 x float> %2790, float %2696, i64 3, !dbg !147
  %2792 = fcmp ogt <4 x float> %2791, splat (float -1.270000e+02), !dbg !147
  %2793 = fcmp uno <4 x float> %2791, zeroinitializer, !dbg !149
  %2794 = or <4 x i1> %2792, %2793, !dbg !150
  %2795 = select <4 x i1> %2794, <4 x float> %2791, <4 x float> splat (float -1.270000e+02), !dbg !151
  %2796 = fcmp olt <4 x float> %2795, splat (float 1.270000e+02), !dbg !152
  %2797 = fcmp uno <4 x float> %2795, zeroinitializer, !dbg !154
  %2798 = or <4 x i1> %2796, %2797, !dbg !155
  %2799 = fptosi <4 x float> %2795 to <4 x i8>, !dbg !156
  %2800 = select <4 x i1> %2798, <4 x i8> %2799, <4 x i8> splat (i8 127), !dbg !157
  %2801 = getelementptr i8, ptr addrspace(1) %10, i64 %2524, !dbg !158
  %2802 = getelementptr i8, ptr addrspace(1) %10, i64 %2528, !dbg !158
  %2803 = bitcast <4 x i8> %2709 to i32, !dbg !159
  %2804 = bitcast <4 x i8> %2722 to i32, !dbg !159
  %2805 = bitcast <4 x i8> %2735 to i32, !dbg !159
  %2806 = bitcast <4 x i8> %2748 to i32, !dbg !159
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2803, i32 %2804, i32 %2805, i32 %2806, ptr addrspace(1) %2801, i1 %2532) #5, !dbg !159
  %2807 = bitcast <4 x i8> %2761 to i32, !dbg !159
  %2808 = bitcast <4 x i8> %2774 to i32, !dbg !159
  %2809 = bitcast <4 x i8> %2787 to i32, !dbg !159
  %2810 = bitcast <4 x i8> %2800 to i32, !dbg !159
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2807, i32 %2808, i32 %2809, i32 %2810, ptr addrspace(1) %2802, i1 %2532) #5, !dbg !159
  %2811 = getelementptr i8, ptr addrspace(1) %11, i64 %2524, !dbg !160
  %2812 = getelementptr i8, ptr addrspace(1) %11, i64 %2528, !dbg !160
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2803, i32 %2804, i32 %2805, i32 %2806, ptr addrspace(1) %2811, i1 %2532) #5, !dbg !161
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2807, i32 %2808, i32 %2809, i32 %2810, ptr addrspace(1) %2812, i1 %2532) #5, !dbg !161
  %2813 = getelementptr i8, ptr addrspace(1) %12, i64 %2524, !dbg !162
  %2814 = getelementptr i8, ptr addrspace(1) %12, i64 %2528, !dbg !162
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2803, i32 %2804, i32 %2805, i32 %2806, ptr addrspace(1) %2813, i1 %2532) #5, !dbg !163
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2807, i32 %2808, i32 %2809, i32 %2810, ptr addrspace(1) %2814, i1 %2532) #5, !dbg !163
  br i1 %2514, label %2513, label %2815, !dbg !137

2815:                                             ; preds = %2513
  ret void, !dbg !164
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 32, column: 40, scope: !6)
!17 = !DILocation(line: 33, column: 31, scope: !6)
!18 = !DILocation(line: 34, column: 29, scope: !6)
!19 = !DILocation(line: 38, column: 41, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 59, scope: !6)
!22 = !DILocation(line: 38, column: 51, scope: !6)
!23 = !DILocation(line: 38, column: 112, scope: !6)
!24 = !DILocation(line: 203, column: 7, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 42, column: 51, scope: !6)
!28 = !DILocation(line: 208, column: 24, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 209, column: 30, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 210, column: 34, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 210, column: 26, scope: !25, inlinedAt: !27)
!32 = !DILocation(line: 211, column: 39, scope: !25, inlinedAt: !27)
!33 = !DILocation(line: 211, column: 31, scope: !25, inlinedAt: !27)
!34 = !DILocation(line: 211, column: 22, scope: !25, inlinedAt: !27)
!35 = !DILocation(line: 44, column: 62, scope: !6)
!36 = !DILocation(line: 45, column: 58, scope: !6)
!37 = !DILocation(line: 46, column: 66, scope: !6)
!38 = !DILocation(line: 217, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!40 = !DILocation(line: 47, column: 79, scope: !6)
!41 = !DILocation(line: 218, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 219, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 219, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 219, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 221, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 221, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 222, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 222, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 222, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 222, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 222, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 229, column: 46, scope: !25, inlinedAt: !40)
!53 = !DILocation(line: 67, column: 24, scope: !6)
!54 = !DILocation(line: 69, column: 24, scope: !6)
!55 = !DILocation(line: 70, column: 32, scope: !6)
!56 = !DILocation(line: 53, column: 40, scope: !6)
!57 = !DILocation(line: 85, column: 50, scope: !6)
!58 = !DILocation(line: 83, column: 50, scope: !6)
!59 = !DILocation(line: 54, column: 31, scope: !6)
!60 = !DILocation(line: 55, column: 29, scope: !6)
!61 = !DILocation(line: 59, column: 41, scope: !6)
!62 = !DILocation(line: 59, column: 34, scope: !6)
!63 = !DILocation(line: 59, column: 59, scope: !6)
!64 = !DILocation(line: 59, column: 51, scope: !6)
!65 = !DILocation(line: 59, column: 113, scope: !6)
!66 = !DILocation(line: 60, column: 42, scope: !6)
!67 = !DILocation(line: 60, column: 35, scope: !6)
!68 = !DILocation(line: 60, column: 49, scope: !6)
!69 = !DILocation(line: 61, column: 35, scope: !6)
!70 = !DILocation(line: 61, column: 49, scope: !6)
!71 = !DILocation(line: 62, column: 35, scope: !6)
!72 = !DILocation(line: 62, column: 42, scope: !6)
!73 = !DILocation(line: 63, column: 35, scope: !6)
!74 = !DILocation(line: 63, column: 42, scope: !6)
!75 = !DILocation(line: 65, column: 24, scope: !6)
!76 = !DILocation(line: 71, column: 24, scope: !6)
!77 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !78)
!78 = !DILocation(line: 84, column: 47, scope: !6)
!79 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !80)
!80 = !DILocation(line: 82, column: 47, scope: !6)
!81 = !DILocation(line: 61, column: 102, scope: !6)
!82 = !DILocation(line: 63, column: 95, scope: !6)
!83 = !DILocation(line: 74, column: 24, scope: !6)
!84 = !DILocation(line: 76, column: 24, scope: !6)
!85 = !DILocation(line: 79, column: 24, scope: !6)
!86 = !DILocation(line: 77, column: 24, scope: !6)
!87 = !DILocation(line: 80, column: 24, scope: !6)
!88 = !DILocation(line: 86, column: 53, scope: !6)
!89 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !80)
!90 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !80)
!91 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !80)
!92 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !78)
!93 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !78)
!94 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !78)
!95 = !DILocation(line: 86, column: 29, scope: !6)
!96 = !DILocation(line: 110, column: 29, scope: !25, inlinedAt: !97)
!97 = !DILocation(line: 87, column: 40, scope: !6)
!98 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !97)
!99 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !97)
!100 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !97)
!101 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !97)
!102 = !DILocation(line: 89, column: 37, scope: !6)
!103 = !DILocation(line: 115, column: 29, scope: !25, inlinedAt: !104)
!104 = !DILocation(line: 88, column: 40, scope: !6)
!105 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !104)
!106 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !104)
!107 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !104)
!108 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !104)
!109 = !DILocation(line: 90, column: 37, scope: !6)
!110 = !DILocation(line: 89, column: 25, scope: !6)
!111 = !DILocation(line: 90, column: 25, scope: !6)
!112 = !DILocation(line: 91, column: 25, scope: !6)
!113 = !DILocation(line: 91, column: 37, scope: !6)
!114 = !DILocation(line: 92, column: 25, scope: !6)
!115 = !DILocation(line: 92, column: 37, scope: !6)
!116 = !DILocation(line: 93, column: 25, scope: !6)
!117 = !DILocation(line: 93, column: 37, scope: !6)
!118 = !DILocation(line: 94, column: 25, scope: !6)
!119 = !DILocation(line: 94, column: 37, scope: !6)
!120 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !121)
!121 = !DILocation(line: 103, column: 46, scope: !6)
!122 = !DILocation(line: 104, column: 17, scope: !6)
!123 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !124)
!124 = !DILocation(line: 105, column: 46, scope: !6)
!125 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !126)
!126 = !DILocation(line: 106, column: 46, scope: !6)
!127 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !126)
!128 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !126)
!129 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !126)
!130 = !DILocation(line: 108, column: 24, scope: !6)
!131 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !132)
!132 = !DILocation(line: 111, column: 46, scope: !6)
!133 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !132)
!134 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !132)
!135 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !132)
!136 = !DILocation(line: 114, column: 25, scope: !6)
!137 = !DILocation(line: 95, column: 40, scope: !6)
!138 = !DILocation(line: 96, column: 31, scope: !6)
!139 = !DILocation(line: 97, column: 29, scope: !6)
!140 = !DILocation(line: 101, column: 43, scope: !6)
!141 = !DILocation(line: 101, column: 36, scope: !6)
!142 = !DILocation(line: 101, column: 61, scope: !6)
!143 = !DILocation(line: 101, column: 53, scope: !6)
!144 = !DILocation(line: 101, column: 115, scope: !6)
!145 = !DILocation(line: 117, column: 24, scope: !6)
!146 = !DILocation(line: 118, column: 36, scope: !6)
!147 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !148)
!148 = !DILocation(line: 121, column: 46, scope: !6)
!149 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !148)
!150 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !148)
!151 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !148)
!152 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !153)
!153 = !DILocation(line: 123, column: 46, scope: !6)
!154 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !153)
!155 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !153)
!156 = !DILocation(line: 125, column: 25, scope: !6)
!157 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !153)
!158 = !DILocation(line: 126, column: 29, scope: !6)
!159 = !DILocation(line: 126, column: 53, scope: !6)
!160 = !DILocation(line: 127, column: 30, scope: !6)
!161 = !DILocation(line: 127, column: 54, scope: !6)
!162 = !DILocation(line: 128, column: 30, scope: !6)
!163 = !DILocation(line: 128, column: 54, scope: !6)
!164 = !DILocation(line: 95, column: 4, scope: !6)
