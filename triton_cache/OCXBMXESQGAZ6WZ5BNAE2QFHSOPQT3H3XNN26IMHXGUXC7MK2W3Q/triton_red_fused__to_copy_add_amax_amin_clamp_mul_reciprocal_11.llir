; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = icmp slt i32 %8, 512, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = shl i32 %10, 3, !dbg !11
  %13 = and i32 %12, 2040, !dbg !11
  %14 = shl i32 %8, 7, !dbg !12
  %15 = and i32 %12, 120
  %invariant.op = or disjoint i32 %14, %15, !dbg !13
  %16 = lshr i32 %13, 7, !dbg !14
  %17 = mul nuw nsw i32 %16, 526336, !dbg !15
  %.reass = add i32 %17, %invariant.op
  %18 = sext i32 %.reass to i64, !dbg !16
  %19 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %19, i1 %9) #4, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !17
  %22 = bitcast i32 %21 to <2 x bfloat>, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !17
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !17
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !17
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !17
  %29 = extractelement <2 x bfloat> %22, i64 0, !dbg !17
  %30 = extractelement <2 x bfloat> %22, i64 1, !dbg !17
  %31 = extractelement <2 x bfloat> %24, i64 0, !dbg !17
  %32 = extractelement <2 x bfloat> %24, i64 1, !dbg !17
  %33 = extractelement <2 x bfloat> %26, i64 0, !dbg !17
  %34 = extractelement <2 x bfloat> %26, i64 1, !dbg !17
  %35 = extractelement <2 x bfloat> %28, i64 0, !dbg !17
  %36 = extractelement <2 x bfloat> %28, i64 1, !dbg !17
  %37 = fpext bfloat %29 to float, !dbg !18
  %38 = fpext bfloat %30 to float, !dbg !18
  %39 = fpext bfloat %31 to float, !dbg !18
  %40 = fpext bfloat %32 to float, !dbg !18
  %41 = fpext bfloat %33 to float, !dbg !18
  %42 = fpext bfloat %34 to float, !dbg !18
  %43 = fpext bfloat %35 to float, !dbg !18
  %44 = fpext bfloat %36 to float, !dbg !18
  %45 = select i1 %9, float %37, float 0x7FF0000000000000, !dbg !19
  %46 = select i1 %9, float %38, float 0x7FF0000000000000, !dbg !19
  %47 = select i1 %9, float %39, float 0x7FF0000000000000, !dbg !19
  %48 = select i1 %9, float %40, float 0x7FF0000000000000, !dbg !19
  %49 = select i1 %9, float %42, float 0x7FF0000000000000, !dbg !19
  %50 = select i1 %9, float %43, float 0x7FF0000000000000, !dbg !19
  %51 = select i1 %9, float %37, float 0xFFF0000000000000, !dbg !20
  %52 = select i1 %9, float %38, float 0xFFF0000000000000, !dbg !20
  %53 = select i1 %9, float %39, float 0xFFF0000000000000, !dbg !20
  %54 = select i1 %9, float %40, float 0xFFF0000000000000, !dbg !20
  %55 = select i1 %9, float %42, float 0xFFF0000000000000, !dbg !20
  %56 = select i1 %9, float %43, float 0xFFF0000000000000, !dbg !20
  %57 = or disjoint i32 %13, 2048, !dbg !21
  %58 = icmp samesign ult i32 %57, 3072, !dbg !22
  %59 = lshr i32 %57, 7, !dbg !14
  %60 = mul nuw nsw i32 %59, 526336, !dbg !15
  %.reass.1 = add i32 %60, %invariant.op
  %61 = sext i32 %.reass.1 to i64, !dbg !16
  %62 = getelementptr bfloat, ptr addrspace(1) %0, i64 %61, !dbg !16
  %63 = and i1 %9, %58, !dbg !23
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %62, i1 %63) #4, !dbg !17
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !17
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !17
  %67 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !17
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !17
  %69 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !17
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !17
  %71 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !17
  %72 = bitcast i32 %71 to <2 x bfloat>, !dbg !17
  %73 = extractelement <2 x bfloat> %66, i64 0, !dbg !17
  %74 = extractelement <2 x bfloat> %66, i64 1, !dbg !17
  %75 = extractelement <2 x bfloat> %68, i64 0, !dbg !17
  %76 = extractelement <2 x bfloat> %68, i64 1, !dbg !17
  %77 = extractelement <2 x bfloat> %70, i64 0, !dbg !17
  %78 = extractelement <2 x bfloat> %70, i64 1, !dbg !17
  %79 = extractelement <2 x bfloat> %72, i64 0, !dbg !17
  %80 = extractelement <2 x bfloat> %72, i64 1, !dbg !17
  %81 = fpext bfloat %73 to float, !dbg !18
  %82 = fpext bfloat %74 to float, !dbg !18
  %83 = fpext bfloat %75 to float, !dbg !18
  %84 = fpext bfloat %76 to float, !dbg !18
  %85 = fpext bfloat %77 to float, !dbg !18
  %86 = fpext bfloat %78 to float, !dbg !18
  %87 = fpext bfloat %79 to float, !dbg !18
  %88 = fpext bfloat %80 to float, !dbg !18
  %89 = fcmp olt float %45, %81, !dbg !24
  %90 = fcmp olt float %46, %82, !dbg !24
  %91 = fcmp olt float %47, %83, !dbg !24
  %92 = fcmp olt float %48, %84, !dbg !24
  %93 = fcmp olt float %49, %86, !dbg !24
  %94 = fcmp olt float %50, %87, !dbg !24
  %95 = fcmp uno float %45, 0.000000e+00, !dbg !28
  %96 = fcmp uno float %46, 0.000000e+00, !dbg !28
  %97 = fcmp uno float %47, 0.000000e+00, !dbg !28
  %98 = fcmp uno float %48, 0.000000e+00, !dbg !28
  %99 = fcmp uno float %49, 0.000000e+00, !dbg !28
  %100 = fcmp uno float %50, 0.000000e+00, !dbg !28
  %101 = or i1 %95, %89, !dbg !29
  %102 = or i1 %96, %90, !dbg !29
  %103 = or i1 %97, %91, !dbg !29
  %104 = or i1 %98, %92, !dbg !29
  %105 = or i1 %99, %93, !dbg !29
  %106 = or i1 %100, %94, !dbg !29
  %107 = select i1 %101, float %45, float %81, !dbg !30
  %108 = select i1 %102, float %46, float %82, !dbg !30
  %109 = select i1 %103, float %47, float %83, !dbg !30
  %110 = select i1 %104, float %48, float %84, !dbg !30
  %111 = select i1 %105, float %49, float %86, !dbg !30
  %112 = select i1 %106, float %50, float %87, !dbg !30
  %113 = select i1 %63, float %107, float %45, !dbg !19
  %114 = select i1 %63, float %108, float %46, !dbg !19
  %115 = select i1 %63, float %109, float %47, !dbg !19
  %116 = select i1 %63, float %110, float %48, !dbg !19
  %117 = select i1 %63, float %111, float %49, !dbg !19
  %118 = select i1 %63, float %112, float %50, !dbg !19
  %119 = fcmp ogt float %51, %81, !dbg !31
  %120 = fcmp ogt float %52, %82, !dbg !31
  %121 = fcmp ogt float %53, %83, !dbg !31
  %122 = fcmp ogt float %54, %84, !dbg !31
  %123 = fcmp ogt float %55, %86, !dbg !31
  %124 = fcmp ogt float %56, %87, !dbg !31
  %125 = fcmp uno float %51, 0.000000e+00, !dbg !33
  %126 = fcmp uno float %52, 0.000000e+00, !dbg !33
  %127 = fcmp uno float %53, 0.000000e+00, !dbg !33
  %128 = fcmp uno float %54, 0.000000e+00, !dbg !33
  %129 = fcmp uno float %55, 0.000000e+00, !dbg !33
  %130 = fcmp uno float %56, 0.000000e+00, !dbg !33
  %131 = or i1 %125, %119, !dbg !34
  %132 = or i1 %126, %120, !dbg !34
  %133 = or i1 %127, %121, !dbg !34
  %134 = or i1 %128, %122, !dbg !34
  %135 = or i1 %129, %123, !dbg !34
  %136 = or i1 %130, %124, !dbg !34
  %137 = select i1 %131, float %51, float %81, !dbg !35
  %138 = select i1 %132, float %52, float %82, !dbg !35
  %139 = select i1 %133, float %53, float %83, !dbg !35
  %140 = select i1 %134, float %54, float %84, !dbg !35
  %141 = select i1 %135, float %55, float %86, !dbg !35
  %142 = select i1 %136, float %56, float %87, !dbg !35
  %143 = select i1 %63, float %137, float %51, !dbg !20
  %144 = select i1 %63, float %138, float %52, !dbg !20
  %145 = select i1 %63, float %139, float %53, !dbg !20
  %146 = select i1 %63, float %140, float %54, !dbg !20
  %147 = select i1 %63, float %141, float %55, !dbg !20
  %148 = select i1 %63, float %142, float %56, !dbg !20
  %149 = lshr i32 %10, 5, !dbg !11
  %150 = fcmp olt float %113, %114, !dbg !36
  %151 = fcmp uno float %113, 0.000000e+00, !dbg !39
  %152 = or i1 %150, %151, !dbg !40
  %153 = insertelement <2 x i1> poison, i1 %152, i64 0, !dbg !41
  %154 = insertelement <2 x i1> %153, i1 %9, i64 1, !dbg !41
  %155 = insertelement <2 x float> poison, float %113, i64 0, !dbg !41
  %156 = insertelement <2 x float> %155, float %41, i64 1, !dbg !41
  %157 = insertelement <2 x float> <float poison, float 0x7FF0000000000000>, float %114, i64 0, !dbg !41
  %158 = select <2 x i1> %154, <2 x float> %156, <2 x float> %157, !dbg !41
  %159 = insertelement <2 x float> poison, float %115, i64 0, !dbg !36
  %160 = insertelement <2 x float> %159, float %85, i64 1, !dbg !36
  %161 = fcmp olt <2 x float> %158, %160, !dbg !36
  %162 = fcmp uno <2 x float> %158, zeroinitializer, !dbg !39
  %163 = or <2 x i1> %162, %161, !dbg !40
  %164 = select <2 x i1> %163, <2 x float> %158, <2 x float> %160, !dbg !41
  %165 = extractelement <2 x float> %164, i64 0, !dbg !39
  %166 = fcmp olt float %165, %116, !dbg !36
  %167 = fcmp uno float %165, 0.000000e+00, !dbg !39
  %168 = or i1 %166, %167, !dbg !40
  %169 = insertelement <2 x i1> poison, i1 %168, i64 0, !dbg !41
  %170 = insertelement <2 x i1> %169, i1 %63, i64 1, !dbg !41
  %171 = insertelement <2 x float> %158, float %116, i64 0, !dbg !41
  %172 = select <2 x i1> %170, <2 x float> %164, <2 x float> %171, !dbg !41
  %173 = extractelement <2 x float> %172, i64 0, !dbg !39
  %174 = extractelement <2 x float> %172, i64 1, !dbg !36
  %175 = fcmp olt float %173, %174, !dbg !36
  %176 = fcmp uno float %173, 0.000000e+00, !dbg !39
  %177 = or i1 %175, %176, !dbg !40
  %178 = insertelement <2 x i1> poison, i1 %177, i64 0, !dbg !41
  %179 = insertelement <2 x i1> %178, i1 %9, i64 1, !dbg !41
  %180 = insertelement <2 x float> %172, float %44, i64 1, !dbg !41
  %181 = shufflevector <2 x float> <float poison, float 0x7FF0000000000000>, <2 x float> %172, <2 x i32> <i32 3, i32 1>, !dbg !41
  %182 = select <2 x i1> %179, <2 x float> %180, <2 x float> %181, !dbg !41
  %183 = insertelement <2 x float> poison, float %117, i64 0, !dbg !36
  %184 = insertelement <2 x float> %183, float %88, i64 1, !dbg !36
  %185 = fcmp olt <2 x float> %182, %184, !dbg !36
  %186 = fcmp uno <2 x float> %182, zeroinitializer, !dbg !39
  %187 = or <2 x i1> %186, %185, !dbg !40
  %188 = select <2 x i1> %187, <2 x float> %182, <2 x float> %184, !dbg !41
  %189 = extractelement <2 x float> %188, i64 0, !dbg !39
  %190 = fcmp olt float %189, %118, !dbg !36
  %191 = fcmp uno float %189, 0.000000e+00, !dbg !39
  %192 = or i1 %190, %191, !dbg !40
  %193 = insertelement <2 x i1> poison, i1 %192, i64 0, !dbg !41
  %194 = insertelement <2 x i1> %193, i1 %63, i64 1, !dbg !41
  %195 = insertelement <2 x float> %182, float %118, i64 0, !dbg !41
  %196 = select <2 x i1> %194, <2 x float> %188, <2 x float> %195, !dbg !41
  %197 = extractelement <2 x float> %196, i64 0, !dbg !41
  %198 = extractelement <2 x float> %196, i64 1, !dbg !36
  %199 = fcmp olt float %197, %198, !dbg !36
  %200 = fcmp uno float %197, 0.000000e+00, !dbg !39
  %201 = or i1 %199, %200, !dbg !40
  %202 = select i1 %201, float %197, float %198, !dbg !41
  %203 = bitcast float %202 to i32, !dbg !42
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 16, i32 31), !dbg !42
  %205 = bitcast i32 %204 to float, !dbg !42
  %206 = fcmp olt float %202, %205, !dbg !36
  %207 = fcmp uno float %202, 0.000000e+00, !dbg !39
  %208 = or i1 %207, %206, !dbg !40
  %209 = select i1 %208, float %202, float %205, !dbg !41
  %210 = bitcast float %209 to i32, !dbg !42
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !42
  %212 = bitcast i32 %211 to float, !dbg !42
  %213 = fcmp olt float %209, %212, !dbg !36
  %214 = fcmp uno float %209, 0.000000e+00, !dbg !39
  %215 = or i1 %213, %214, !dbg !40
  %216 = select i1 %215, float %209, float %212, !dbg !41
  %217 = bitcast float %216 to i32, !dbg !42
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 4, i32 31), !dbg !42
  %219 = bitcast i32 %218 to float, !dbg !42
  %220 = fcmp olt float %216, %219, !dbg !36
  %221 = fcmp uno float %216, 0.000000e+00, !dbg !39
  %222 = or i1 %220, %221, !dbg !40
  %223 = select i1 %222, float %216, float %219, !dbg !41
  %224 = bitcast float %223 to i32, !dbg !42
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 2, i32 31), !dbg !42
  %226 = bitcast i32 %225 to float, !dbg !42
  %227 = fcmp olt float %223, %226, !dbg !36
  %228 = fcmp uno float %223, 0.000000e+00, !dbg !39
  %229 = or i1 %227, %228, !dbg !40
  %230 = select i1 %229, float %223, float %226, !dbg !41
  %231 = bitcast float %230 to i32, !dbg !42
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !42
  %233 = bitcast i32 %232 to float, !dbg !42
  %234 = fcmp olt float %230, %233, !dbg !36
  %235 = fcmp uno float %230, 0.000000e+00, !dbg !39
  %236 = or i1 %234, %235, !dbg !40
  %237 = and i32 %149, 7, !dbg !42
  %238 = icmp eq i32 %11, 0, !dbg !42
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !42
  %240 = select i1 %236, i32 %231, i32 %232, !dbg !41
  %241 = insertelement <1 x i32> poison, i32 %240, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %241, i1 %238) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %242 = icmp slt i32 %10, 8, !dbg !42
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !42
  %244 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %243, i1 %242) #4, !dbg !42
  %245 = bitcast i32 %244 to float, !dbg !42
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 4, i32 31), !dbg !42
  %247 = bitcast i32 %246 to float, !dbg !42
  %248 = fcmp olt float %245, %247, !dbg !36
  %249 = fcmp uno float %245, 0.000000e+00, !dbg !39
  %250 = or i1 %249, %248, !dbg !40
  %251 = select i1 %250, float %245, float %247, !dbg !41
  %252 = bitcast float %251 to i32, !dbg !42
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !42
  %254 = bitcast i32 %253 to float, !dbg !42
  %255 = fcmp olt float %251, %254, !dbg !36
  %256 = fcmp uno float %251, 0.000000e+00, !dbg !39
  %257 = or i1 %255, %256, !dbg !40
  %258 = select i1 %257, float %251, float %254, !dbg !41
  %259 = bitcast float %258 to i32, !dbg !42
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 1, i32 31), !dbg !42
  %261 = bitcast i32 %260 to float, !dbg !42
  %262 = fcmp olt float %258, %261, !dbg !36
  %263 = fcmp uno float %258, 0.000000e+00, !dbg !39
  %264 = or i1 %262, %263, !dbg !40
  %265 = and i32 %10, 7, !dbg !42
  %266 = icmp eq i32 %265, 0, !dbg !42
  %267 = and i1 %242, %266, !dbg !42
  %268 = select i1 %264, i32 %259, i32 %260, !dbg !41
  %269 = insertelement <1 x i32> poison, i32 %268, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %269, i1 %267) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %270 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %271 = fcmp ogt float %143, %144, !dbg !45
  %272 = fcmp uno float %143, 0.000000e+00, !dbg !46
  %273 = or i1 %271, %272, !dbg !47
  %274 = insertelement <2 x i1> poison, i1 %273, i64 0, !dbg !48
  %275 = insertelement <2 x i1> %274, i1 %9, i64 1, !dbg !48
  %276 = insertelement <2 x float> poison, float %143, i64 0, !dbg !48
  %277 = insertelement <2 x float> %276, float %41, i64 1, !dbg !48
  %278 = insertelement <2 x float> <float poison, float 0xFFF0000000000000>, float %144, i64 0, !dbg !48
  %279 = select <2 x i1> %275, <2 x float> %277, <2 x float> %278, !dbg !48
  %280 = insertelement <2 x float> poison, float %145, i64 0, !dbg !45
  %281 = insertelement <2 x float> %280, float %85, i64 1, !dbg !45
  %282 = fcmp ogt <2 x float> %279, %281, !dbg !45
  %283 = fcmp uno <2 x float> %279, zeroinitializer, !dbg !46
  %284 = or <2 x i1> %283, %282, !dbg !47
  %285 = select <2 x i1> %284, <2 x float> %279, <2 x float> %281, !dbg !48
  %286 = extractelement <2 x float> %285, i64 0, !dbg !46
  %287 = fcmp ogt float %286, %146, !dbg !45
  %288 = fcmp uno float %286, 0.000000e+00, !dbg !46
  %289 = or i1 %287, %288, !dbg !47
  %290 = insertelement <2 x i1> poison, i1 %289, i64 0, !dbg !48
  %291 = insertelement <2 x i1> %290, i1 %63, i64 1, !dbg !48
  %292 = insertelement <2 x float> %279, float %146, i64 0, !dbg !48
  %293 = select <2 x i1> %291, <2 x float> %285, <2 x float> %292, !dbg !48
  %294 = extractelement <2 x float> %293, i64 0, !dbg !46
  %295 = extractelement <2 x float> %293, i64 1, !dbg !45
  %296 = fcmp ogt float %294, %295, !dbg !45
  %297 = fcmp uno float %294, 0.000000e+00, !dbg !46
  %298 = or i1 %296, %297, !dbg !47
  %299 = insertelement <2 x i1> poison, i1 %298, i64 0, !dbg !48
  %300 = insertelement <2 x i1> %299, i1 %9, i64 1, !dbg !48
  %301 = insertelement <2 x float> %293, float %44, i64 1, !dbg !48
  %302 = shufflevector <2 x float> <float poison, float 0xFFF0000000000000>, <2 x float> %293, <2 x i32> <i32 3, i32 1>, !dbg !48
  %303 = select <2 x i1> %300, <2 x float> %301, <2 x float> %302, !dbg !48
  %304 = insertelement <2 x float> poison, float %147, i64 0, !dbg !45
  %305 = insertelement <2 x float> %304, float %88, i64 1, !dbg !45
  %306 = fcmp ogt <2 x float> %303, %305, !dbg !45
  %307 = fcmp uno <2 x float> %303, zeroinitializer, !dbg !46
  %308 = or <2 x i1> %307, %306, !dbg !47
  %309 = select <2 x i1> %308, <2 x float> %303, <2 x float> %305, !dbg !48
  %310 = extractelement <2 x float> %309, i64 0, !dbg !46
  %311 = fcmp ogt float %310, %148, !dbg !45
  %312 = fcmp uno float %310, 0.000000e+00, !dbg !46
  %313 = or i1 %311, %312, !dbg !47
  %314 = insertelement <2 x i1> poison, i1 %313, i64 0, !dbg !48
  %315 = insertelement <2 x i1> %314, i1 %63, i64 1, !dbg !48
  %316 = insertelement <2 x float> %303, float %148, i64 0, !dbg !48
  %317 = select <2 x i1> %315, <2 x float> %309, <2 x float> %316, !dbg !48
  %318 = extractelement <2 x float> %317, i64 0, !dbg !48
  %319 = extractelement <2 x float> %317, i64 1, !dbg !45
  %320 = fcmp ogt float %318, %319, !dbg !45
  %321 = fcmp uno float %318, 0.000000e+00, !dbg !46
  %322 = or i1 %320, %321, !dbg !47
  %323 = select i1 %322, float %318, float %319, !dbg !48
  %324 = bitcast float %323 to i32, !dbg !43
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 16, i32 31), !dbg !43
  %326 = bitcast i32 %325 to float, !dbg !43
  %327 = fcmp ogt float %323, %326, !dbg !45
  %328 = fcmp uno float %323, 0.000000e+00, !dbg !46
  %329 = or i1 %328, %327, !dbg !47
  %330 = select i1 %329, float %323, float %326, !dbg !48
  %331 = bitcast float %330 to i32, !dbg !43
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 8, i32 31), !dbg !43
  %333 = bitcast i32 %332 to float, !dbg !43
  %334 = fcmp ogt float %330, %333, !dbg !45
  %335 = fcmp uno float %330, 0.000000e+00, !dbg !46
  %336 = or i1 %334, %335, !dbg !47
  %337 = select i1 %336, float %330, float %333, !dbg !48
  %338 = bitcast float %337 to i32, !dbg !43
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 4, i32 31), !dbg !43
  %340 = bitcast i32 %339 to float, !dbg !43
  %341 = fcmp ogt float %337, %340, !dbg !45
  %342 = fcmp uno float %337, 0.000000e+00, !dbg !46
  %343 = or i1 %341, %342, !dbg !47
  %344 = select i1 %343, float %337, float %340, !dbg !48
  %345 = bitcast float %344 to i32, !dbg !43
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 2, i32 31), !dbg !43
  %347 = bitcast i32 %346 to float, !dbg !43
  %348 = fcmp ogt float %344, %347, !dbg !45
  %349 = fcmp uno float %344, 0.000000e+00, !dbg !46
  %350 = or i1 %348, %349, !dbg !47
  %351 = select i1 %350, float %344, float %347, !dbg !48
  %352 = bitcast float %351 to i32, !dbg !43
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 1, i32 31), !dbg !43
  %354 = bitcast i32 %353 to float, !dbg !43
  %355 = fcmp ogt float %351, %354, !dbg !45
  %356 = fcmp uno float %351, 0.000000e+00, !dbg !46
  %357 = or i1 %355, %356, !dbg !47
  %358 = select i1 %357, i32 %352, i32 %353, !dbg !48
  %359 = insertelement <1 x i32> poison, i32 %358, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %359, i1 %238) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %360 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %243, i1 %242) #4, !dbg !43
  %361 = bitcast i32 %360 to float, !dbg !43
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 4, i32 31), !dbg !43
  %363 = bitcast i32 %362 to float, !dbg !43
  %364 = fcmp ogt float %361, %363, !dbg !45
  %365 = fcmp uno float %361, 0.000000e+00, !dbg !46
  %366 = or i1 %365, %364, !dbg !47
  %367 = select i1 %366, float %361, float %363, !dbg !48
  %368 = bitcast float %367 to i32, !dbg !43
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 2, i32 31), !dbg !43
  %370 = bitcast i32 %369 to float, !dbg !43
  %371 = fcmp ogt float %367, %370, !dbg !45
  %372 = fcmp uno float %367, 0.000000e+00, !dbg !46
  %373 = or i1 %371, %372, !dbg !47
  %374 = select i1 %373, float %367, float %370, !dbg !48
  %375 = bitcast float %374 to i32, !dbg !43
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 1, i32 31), !dbg !43
  %377 = bitcast i32 %376 to float, !dbg !43
  %378 = fcmp ogt float %374, %377, !dbg !45
  %379 = fcmp uno float %374, 0.000000e+00, !dbg !46
  %380 = or i1 %378, %379, !dbg !47
  %381 = select i1 %380, i32 %375, i32 %376, !dbg !48
  %382 = insertelement <1 x i32> poison, i32 %381, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %382, i1 %267) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %383 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %384 = sext i32 %8 to i64, !dbg !49
  %385 = getelementptr bfloat, ptr addrspace(1) %1, i64 %384, !dbg !49
  %386 = fptrunc float %270 to bfloat, !dbg !50
  %387 = and i32 %10, 255, !dbg !50
  %388 = icmp eq i32 %387, 0, !dbg !50
  %389 = bitcast bfloat %386 to i16, !dbg !50
  %390 = and i1 %9, %388, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %389, ptr addrspace(1) %385, i1 %390) #4, !dbg !50
  %391 = getelementptr bfloat, ptr addrspace(1) %2, i64 %384, !dbg !51
  %392 = fptrunc float %383 to bfloat, !dbg !52
  %393 = bitcast bfloat %392 to i16, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %393, ptr addrspace(1) %391, i1 %390) #4, !dbg !52
  %.inv = fcmp oge float %270, 0.000000e+00, !dbg !53
  %394 = select i1 %.inv, float 0.000000e+00, float %270, !dbg !53
  %395 = fsub float 0.000000e+00, %394, !dbg !55
  %.inv2 = fcmp ole float %383, 0.000000e+00, !dbg !56
  %396 = select i1 %.inv2, float 0.000000e+00, float %383, !dbg !56
  %397 = fcmp ogt float %395, %396, !dbg !58
  %398 = fcmp uno float %395, 0.000000e+00, !dbg !60
  %399 = or i1 %398, %397, !dbg !61
  %400 = select i1 %399, float %395, float %396, !dbg !62
  %401 = fmul float %400, 0x3F80204080000000, !dbg !63
  %402 = fcmp ogt float %401, 0x3EE4F8B580000000, !dbg !64
  %403 = fcmp uno float %401, 0.000000e+00, !dbg !66
  %404 = or i1 %402, %403, !dbg !67
  %405 = select i1 %404, float %401, float 0x3EE4F8B580000000, !dbg !68
  %406 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %405), !dbg !69
  %407 = mul i32 %8, 3072, !dbg !70
  %408 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %19, i1 %9) #4, !dbg !71
  %409 = extractvalue { i32, i32, i32, i32 } %408, 0, !dbg !71
  %410 = bitcast i32 %409 to <2 x bfloat>, !dbg !71
  %411 = extractvalue { i32, i32, i32, i32 } %408, 1, !dbg !71
  %412 = bitcast i32 %411 to <2 x bfloat>, !dbg !71
  %413 = extractvalue { i32, i32, i32, i32 } %408, 2, !dbg !71
  %414 = bitcast i32 %413 to <2 x bfloat>, !dbg !71
  %415 = extractvalue { i32, i32, i32, i32 } %408, 3, !dbg !71
  %416 = bitcast i32 %415 to <2 x bfloat>, !dbg !71
  %417 = extractelement <2 x bfloat> %410, i64 0, !dbg !71
  %418 = extractelement <2 x bfloat> %410, i64 1, !dbg !71
  %419 = extractelement <2 x bfloat> %412, i64 0, !dbg !71
  %420 = extractelement <2 x bfloat> %412, i64 1, !dbg !71
  %421 = extractelement <2 x bfloat> %414, i64 0, !dbg !71
  %422 = extractelement <2 x bfloat> %414, i64 1, !dbg !71
  %423 = extractelement <2 x bfloat> %416, i64 0, !dbg !71
  %424 = extractelement <2 x bfloat> %416, i64 1, !dbg !71
  %425 = fpext bfloat %417 to float, !dbg !72
  %426 = fpext bfloat %418 to float, !dbg !72
  %427 = fpext bfloat %419 to float, !dbg !72
  %428 = fpext bfloat %420 to float, !dbg !72
  %429 = fpext bfloat %421 to float, !dbg !72
  %430 = fpext bfloat %422 to float, !dbg !72
  %431 = fpext bfloat %423 to float, !dbg !72
  %432 = fpext bfloat %424 to float, !dbg !72
  %433 = fmul float %406, %425, !dbg !73
  %434 = fmul float %406, %426, !dbg !73
  %435 = fmul float %406, %427, !dbg !73
  %436 = fmul float %406, %428, !dbg !73
  %437 = fmul float %406, %429, !dbg !73
  %438 = fmul float %406, %430, !dbg !73
  %439 = fmul float %406, %431, !dbg !73
  %440 = fmul float %406, %432, !dbg !73
  %441 = tail call float @llvm.nvvm.round.f(float %433) #4, !dbg !74
  %442 = tail call float @llvm.nvvm.round.f(float %434) #4, !dbg !74
  %443 = tail call float @llvm.nvvm.round.f(float %435) #4, !dbg !74
  %444 = tail call float @llvm.nvvm.round.f(float %436) #4, !dbg !74
  %445 = tail call float @llvm.nvvm.round.f(float %437) #4, !dbg !74
  %446 = tail call float @llvm.nvvm.round.f(float %438) #4, !dbg !74
  %447 = tail call float @llvm.nvvm.round.f(float %439) #4, !dbg !74
  %448 = tail call float @llvm.nvvm.round.f(float %440) #4, !dbg !74
  %449 = insertelement <4 x float> poison, float %441, i64 0, !dbg !75
  %450 = insertelement <4 x float> %449, float %442, i64 1, !dbg !75
  %451 = insertelement <4 x float> %450, float %443, i64 2, !dbg !75
  %452 = insertelement <4 x float> %451, float %444, i64 3, !dbg !75
  %453 = fcmp ogt <4 x float> %452, splat (float -1.270000e+02), !dbg !75
  %454 = fcmp uno <4 x float> %452, zeroinitializer, !dbg !77
  %455 = or <4 x i1> %453, %454, !dbg !78
  %456 = select <4 x i1> %455, <4 x float> %452, <4 x float> splat (float -1.270000e+02), !dbg !79
  %457 = fcmp olt <4 x float> %456, splat (float 1.270000e+02), !dbg !80
  %458 = fcmp uno <4 x float> %456, zeroinitializer, !dbg !82
  %459 = or <4 x i1> %457, %458, !dbg !83
  %460 = fptosi <4 x float> %456 to <4 x i8>, !dbg !84
  %461 = select <4 x i1> %459, <4 x i8> %460, <4 x i8> splat (i8 127), !dbg !85
  %462 = insertelement <4 x float> poison, float %445, i64 0, !dbg !75
  %463 = insertelement <4 x float> %462, float %446, i64 1, !dbg !75
  %464 = insertelement <4 x float> %463, float %447, i64 2, !dbg !75
  %465 = insertelement <4 x float> %464, float %448, i64 3, !dbg !75
  %466 = fcmp ogt <4 x float> %465, splat (float -1.270000e+02), !dbg !75
  %467 = fcmp uno <4 x float> %465, zeroinitializer, !dbg !77
  %468 = or <4 x i1> %466, %467, !dbg !78
  %469 = select <4 x i1> %468, <4 x float> %465, <4 x float> splat (float -1.270000e+02), !dbg !79
  %470 = fcmp olt <4 x float> %469, splat (float 1.270000e+02), !dbg !80
  %471 = fcmp uno <4 x float> %469, zeroinitializer, !dbg !82
  %472 = or <4 x i1> %470, %471, !dbg !83
  %473 = fptosi <4 x float> %469 to <4 x i8>, !dbg !84
  %474 = select <4 x i1> %472, <4 x i8> %473, <4 x i8> splat (i8 127), !dbg !85
  %475 = add i32 %13, %407, !dbg !86
  %476 = sext i32 %475 to i64, !dbg !87
  %477 = getelementptr i8, ptr addrspace(1) %3, i64 %476, !dbg !87
  %478 = bitcast <4 x i8> %461 to i32, !dbg !88
  %479 = bitcast <4 x i8> %474 to i32, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %478, i32 %479, ptr addrspace(1) %477, i1 %9) #4, !dbg !88
  %480 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %62, i1 %63) #4, !dbg !71
  %481 = extractvalue { i32, i32, i32, i32 } %480, 0, !dbg !71
  %482 = bitcast i32 %481 to <2 x bfloat>, !dbg !71
  %483 = extractvalue { i32, i32, i32, i32 } %480, 1, !dbg !71
  %484 = bitcast i32 %483 to <2 x bfloat>, !dbg !71
  %485 = extractvalue { i32, i32, i32, i32 } %480, 2, !dbg !71
  %486 = bitcast i32 %485 to <2 x bfloat>, !dbg !71
  %487 = extractvalue { i32, i32, i32, i32 } %480, 3, !dbg !71
  %488 = bitcast i32 %487 to <2 x bfloat>, !dbg !71
  %489 = extractelement <2 x bfloat> %482, i64 0, !dbg !71
  %490 = extractelement <2 x bfloat> %482, i64 1, !dbg !71
  %491 = extractelement <2 x bfloat> %484, i64 0, !dbg !71
  %492 = extractelement <2 x bfloat> %484, i64 1, !dbg !71
  %493 = extractelement <2 x bfloat> %486, i64 0, !dbg !71
  %494 = extractelement <2 x bfloat> %486, i64 1, !dbg !71
  %495 = extractelement <2 x bfloat> %488, i64 0, !dbg !71
  %496 = extractelement <2 x bfloat> %488, i64 1, !dbg !71
  %497 = fpext bfloat %489 to float, !dbg !72
  %498 = fpext bfloat %490 to float, !dbg !72
  %499 = fpext bfloat %491 to float, !dbg !72
  %500 = fpext bfloat %492 to float, !dbg !72
  %501 = fpext bfloat %493 to float, !dbg !72
  %502 = fpext bfloat %494 to float, !dbg !72
  %503 = fpext bfloat %495 to float, !dbg !72
  %504 = fpext bfloat %496 to float, !dbg !72
  %505 = fmul float %406, %497, !dbg !73
  %506 = fmul float %406, %498, !dbg !73
  %507 = fmul float %406, %499, !dbg !73
  %508 = fmul float %406, %500, !dbg !73
  %509 = fmul float %406, %501, !dbg !73
  %510 = fmul float %406, %502, !dbg !73
  %511 = fmul float %406, %503, !dbg !73
  %512 = fmul float %406, %504, !dbg !73
  %513 = tail call float @llvm.nvvm.round.f(float %505) #4, !dbg !74
  %514 = tail call float @llvm.nvvm.round.f(float %506) #4, !dbg !74
  %515 = tail call float @llvm.nvvm.round.f(float %507) #4, !dbg !74
  %516 = tail call float @llvm.nvvm.round.f(float %508) #4, !dbg !74
  %517 = tail call float @llvm.nvvm.round.f(float %509) #4, !dbg !74
  %518 = tail call float @llvm.nvvm.round.f(float %510) #4, !dbg !74
  %519 = tail call float @llvm.nvvm.round.f(float %511) #4, !dbg !74
  %520 = tail call float @llvm.nvvm.round.f(float %512) #4, !dbg !74
  %521 = insertelement <4 x float> poison, float %513, i64 0, !dbg !75
  %522 = insertelement <4 x float> %521, float %514, i64 1, !dbg !75
  %523 = insertelement <4 x float> %522, float %515, i64 2, !dbg !75
  %524 = insertelement <4 x float> %523, float %516, i64 3, !dbg !75
  %525 = fcmp ogt <4 x float> %524, splat (float -1.270000e+02), !dbg !75
  %526 = fcmp uno <4 x float> %524, zeroinitializer, !dbg !77
  %527 = or <4 x i1> %525, %526, !dbg !78
  %528 = select <4 x i1> %527, <4 x float> %524, <4 x float> splat (float -1.270000e+02), !dbg !79
  %529 = fcmp olt <4 x float> %528, splat (float 1.270000e+02), !dbg !80
  %530 = fcmp uno <4 x float> %528, zeroinitializer, !dbg !82
  %531 = or <4 x i1> %529, %530, !dbg !83
  %532 = fptosi <4 x float> %528 to <4 x i8>, !dbg !84
  %533 = select <4 x i1> %531, <4 x i8> %532, <4 x i8> splat (i8 127), !dbg !85
  %534 = insertelement <4 x float> poison, float %517, i64 0, !dbg !75
  %535 = insertelement <4 x float> %534, float %518, i64 1, !dbg !75
  %536 = insertelement <4 x float> %535, float %519, i64 2, !dbg !75
  %537 = insertelement <4 x float> %536, float %520, i64 3, !dbg !75
  %538 = fcmp ogt <4 x float> %537, splat (float -1.270000e+02), !dbg !75
  %539 = fcmp uno <4 x float> %537, zeroinitializer, !dbg !77
  %540 = or <4 x i1> %538, %539, !dbg !78
  %541 = select <4 x i1> %540, <4 x float> %537, <4 x float> splat (float -1.270000e+02), !dbg !79
  %542 = fcmp olt <4 x float> %541, splat (float 1.270000e+02), !dbg !80
  %543 = fcmp uno <4 x float> %541, zeroinitializer, !dbg !82
  %544 = or <4 x i1> %542, %543, !dbg !83
  %545 = fptosi <4 x float> %541 to <4 x i8>, !dbg !84
  %546 = select <4 x i1> %544, <4 x i8> %545, <4 x i8> splat (i8 127), !dbg !85
  %547 = add i32 %57, %407, !dbg !86
  %548 = sext i32 %547 to i64, !dbg !87
  %549 = getelementptr i8, ptr addrspace(1) %3, i64 %548, !dbg !87
  %550 = bitcast <4 x i8> %533 to i32, !dbg !88
  %551 = bitcast <4 x i8> %546 to i32, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %550, i32 %551, ptr addrspace(1) %549, i1 %63) #4, !dbg !88
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 38, scope: !6)
!13 = !DILocation(line: 31, column: 40, scope: !6)
!14 = !DILocation(line: 37, column: 59, scope: !6)
!15 = !DILocation(line: 37, column: 51, scope: !6)
!16 = !DILocation(line: 37, column: 34, scope: !6)
!17 = !DILocation(line: 37, column: 83, scope: !6)
!18 = !DILocation(line: 37, column: 144, scope: !6)
!19 = !DILocation(line: 40, column: 48, scope: !6)
!20 = !DILocation(line: 42, column: 48, scope: !6)
!21 = !DILocation(line: 32, column: 31, scope: !6)
!22 = !DILocation(line: 33, column: 29, scope: !6)
!23 = !DILocation(line: 37, column: 91, scope: !6)
!24 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 39, column: 45, scope: !6)
!28 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !32)
!32 = !DILocation(line: 41, column: 45, scope: !6)
!33 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !32)
!34 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !32)
!35 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !32)
!36 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!38 = !DILocation(line: 43, column: 38, scope: !6)
!39 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 110, column: 29, scope: !25, inlinedAt: !38)
!43 = !DILocation(line: 115, column: 29, scope: !25, inlinedAt: !44)
!44 = !DILocation(line: 44, column: 38, scope: !6)
!45 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !44)
!46 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !44)
!47 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !44)
!48 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !44)
!49 = !DILocation(line: 45, column: 25, scope: !6)
!50 = !DILocation(line: 45, column: 36, scope: !6)
!51 = !DILocation(line: 46, column: 25, scope: !6)
!52 = !DILocation(line: 46, column: 36, scope: !6)
!53 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !54)
!54 = !DILocation(line: 55, column: 44, scope: !6)
!55 = !DILocation(line: 56, column: 16, scope: !6)
!56 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !57)
!57 = !DILocation(line: 57, column: 45, scope: !6)
!58 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !59)
!59 = !DILocation(line: 58, column: 45, scope: !6)
!60 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !59)
!61 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !59)
!62 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !59)
!63 = !DILocation(line: 60, column: 24, scope: !6)
!64 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !65)
!65 = !DILocation(line: 63, column: 46, scope: !6)
!66 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !65)
!67 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !65)
!68 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !65)
!69 = !DILocation(line: 66, column: 25, scope: !6)
!70 = !DILocation(line: 78, column: 41, scope: !6)
!71 = !DILocation(line: 53, column: 83, scope: !6)
!72 = !DILocation(line: 53, column: 145, scope: !6)
!73 = !DILocation(line: 69, column: 23, scope: !6)
!74 = !DILocation(line: 70, column: 36, scope: !6)
!75 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !76)
!76 = !DILocation(line: 73, column: 46, scope: !6)
!77 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !76)
!79 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !76)
!80 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !81)
!81 = !DILocation(line: 75, column: 46, scope: !6)
!82 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !81)
!83 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !81)
!84 = !DILocation(line: 77, column: 25, scope: !6)
!85 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !81)
!86 = !DILocation(line: 78, column: 36, scope: !6)
!87 = !DILocation(line: 78, column: 29, scope: !6)
!88 = !DILocation(line: 78, column: 53, scope: !6)
!89 = !DILocation(line: 47, column: 4, scope: !6)
