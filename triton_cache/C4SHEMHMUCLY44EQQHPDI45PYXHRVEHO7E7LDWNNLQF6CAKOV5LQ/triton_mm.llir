; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 512, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 512, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = lshr i32 %15, 2, !dbg !19
  %18 = and i32 %17, 8, !dbg !19
  %19 = and i32 %17, 16, !dbg !19
  %20 = and i32 %17, 31, !dbg !19
  %21 = or disjoint i32 %20, 32, !dbg !19
  %22 = shl i32 %15, 3, !dbg !19
  %23 = and i32 %22, 24, !dbg !19
  %24 = or disjoint i32 %14, %20, !dbg !20
  %25 = or disjoint i32 %14, %21, !dbg !20
  %26 = shl nsw i32 %13, 6, !dbg !21
  %27 = or disjoint i32 %26, %20, !dbg !22
  %28 = or disjoint i32 %26, %21, !dbg !22
  %29 = srem i32 %24, 512, !dbg !23
  %30 = srem i32 %25, 512, !dbg !23
  %31 = srem i32 %27, 4096, !dbg !24
  %.lhs.trunc = trunc i32 %28 to i16, !dbg !24
  %32 = srem i16 %.lhs.trunc, 4096, !dbg !24
  %.sext = sext i16 %32 to i32, !dbg !24
  %33 = shl nsw i32 %29, 12, !dbg !25
  %34 = shl nsw i32 %30, 12, !dbg !25
  %35 = shl nsw i32 %31, 12, !dbg !26
  %36 = shl nsw i32 %.sext, 12, !dbg !26
  %37 = or disjoint i32 %33, %23, !dbg !27
  %38 = or disjoint i32 %34, %23, !dbg !27
  %39 = sext i32 %37 to i64, !dbg !28
  %40 = getelementptr bfloat, ptr addrspace(1) %0, i64 %39, !dbg !28
  %41 = sext i32 %38 to i64, !dbg !28
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !28
  %43 = xor i32 %22, %15, !dbg !29
  %44 = and i32 %43, 24, !dbg !29
  %45 = shl nuw nsw i32 %20, 5, !dbg !29
  %46 = or disjoint i32 %45, %44, !dbg !29
  %47 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %46, !dbg !29
  %48 = or disjoint i32 %46, 1024, !dbg !29
  %49 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %48, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %47, ptr addrspace(1) %40, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %49, ptr addrspace(1) %42, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %50 = or disjoint i32 %35, %23, !dbg !30
  %51 = or disjoint i32 %36, %23, !dbg !30
  %52 = sext i32 %50 to i64, !dbg !31
  %53 = getelementptr bfloat, ptr addrspace(1) %1, i64 %52, !dbg !31
  %54 = sext i32 %51 to i64, !dbg !31
  %55 = getelementptr bfloat, ptr addrspace(1) %1, i64 %54, !dbg !31
  %56 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %46, !dbg !32
  %57 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %48, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %56, ptr addrspace(1) %53, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %57, ptr addrspace(1) %55, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %invariant.op = or disjoint i32 %16, %19, !dbg !33
  %invariant.op83 = or disjoint i32 %invariant.op, 32, !dbg !33
  %58 = shl i32 %15, 2
  %59 = and i32 %58, 8
  %60 = and i32 %58, 16
  %61 = and i32 %58, 24
  %62 = and i32 %15, 7
  %63 = and i32 %15, 15
  %64 = lshr i32 %15, 1
  %65 = and i32 %64, 8
  %66 = xor i32 %61, %65
  %67 = or disjoint i32 %19, %63
  %68 = shl nuw nsw i32 %67, 5
  %69 = or disjoint i32 %66, %68
  %70 = or disjoint i32 %59, 16
  %71 = or disjoint i32 %65, %60
  %72 = xor i32 %71, %70
  %73 = or disjoint i32 %72, %68
  %.reass84 = or disjoint i32 %62, %invariant.op83
  %74 = shl nuw nsw i32 %.reass84, 5
  %75 = or disjoint i32 %74, %66
  %76 = or disjoint i32 %72, %74
  %77 = xor i32 %58, %15
  %78 = and i32 %77, 24
  %79 = or disjoint i32 %18, %62
  %80 = shl nuw nsw i32 %79, 5
  %81 = or disjoint i32 %78, %80
  %82 = or disjoint i32 %81, 512
  %83 = or disjoint i32 %80, 1024
  %84 = or disjoint i32 %78, %83
  %85 = or disjoint i32 %81, 1536
  %86 = zext nneg i32 %23 to i64, !dbg !33
  %87 = sext i32 %36 to i64, !dbg !33
  %88 = sext i32 %35 to i64, !dbg !33
  %89 = sext i32 %34 to i64, !dbg !33
  %90 = sext i32 %33 to i64, !dbg !33
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %90, !dbg !33
  %invariant.gep147 = getelementptr bfloat, ptr addrspace(1) %0, i64 %89, !dbg !33
  %invariant.gep149 = getelementptr bfloat, ptr addrspace(1) %1, i64 %88, !dbg !33
  %invariant.gep151 = getelementptr bfloat, ptr addrspace(1) %1, i64 %87, !dbg !33
  br label %91, !dbg !33

91:                                               ; preds = %4, %91
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %91 ]
  %92 = phi i32 [ -1, %4 ], [ %127, %91 ]
  %93 = phi float [ 0.000000e+00, %4 ], [ %228, %91 ]
  %94 = phi float [ 0.000000e+00, %4 ], [ %229, %91 ]
  %95 = phi float [ 0.000000e+00, %4 ], [ %230, %91 ]
  %96 = phi float [ 0.000000e+00, %4 ], [ %231, %91 ]
  %97 = phi float [ 0.000000e+00, %4 ], [ %233, %91 ]
  %98 = phi float [ 0.000000e+00, %4 ], [ %234, %91 ]
  %99 = phi float [ 0.000000e+00, %4 ], [ %235, %91 ]
  %100 = phi float [ 0.000000e+00, %4 ], [ %236, %91 ]
  %101 = phi float [ 0.000000e+00, %4 ], [ %238, %91 ]
  %102 = phi float [ 0.000000e+00, %4 ], [ %239, %91 ]
  %103 = phi float [ 0.000000e+00, %4 ], [ %240, %91 ]
  %104 = phi float [ 0.000000e+00, %4 ], [ %241, %91 ]
  %105 = phi float [ 0.000000e+00, %4 ], [ %243, %91 ]
  %106 = phi float [ 0.000000e+00, %4 ], [ %244, %91 ]
  %107 = phi float [ 0.000000e+00, %4 ], [ %245, %91 ]
  %108 = phi float [ 0.000000e+00, %4 ], [ %246, %91 ]
  %109 = phi float [ 0.000000e+00, %4 ], [ %248, %91 ]
  %110 = phi float [ 0.000000e+00, %4 ], [ %249, %91 ]
  %111 = phi float [ 0.000000e+00, %4 ], [ %250, %91 ]
  %112 = phi float [ 0.000000e+00, %4 ], [ %251, %91 ]
  %113 = phi float [ 0.000000e+00, %4 ], [ %253, %91 ]
  %114 = phi float [ 0.000000e+00, %4 ], [ %254, %91 ]
  %115 = phi float [ 0.000000e+00, %4 ], [ %255, %91 ]
  %116 = phi float [ 0.000000e+00, %4 ], [ %256, %91 ]
  %117 = phi float [ 0.000000e+00, %4 ], [ %258, %91 ]
  %118 = phi float [ 0.000000e+00, %4 ], [ %259, %91 ]
  %119 = phi float [ 0.000000e+00, %4 ], [ %260, %91 ]
  %120 = phi float [ 0.000000e+00, %4 ], [ %261, %91 ]
  %121 = phi float [ 0.000000e+00, %4 ], [ %263, %91 ]
  %122 = phi float [ 0.000000e+00, %4 ], [ %264, %91 ]
  %123 = phi float [ 0.000000e+00, %4 ], [ %265, %91 ]
  %124 = phi float [ 0.000000e+00, %4 ], [ %266, %91 ]
  %.not50 = icmp eq i64 %indvars.iv, 127, !dbg !33
  %125 = add i32 %92, 1, !dbg !33
  %126 = icmp ugt i32 %92, 2147483646, !dbg !33
  %127 = select i1 %126, i32 %125, i32 0, !dbg !33
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %128 = shl i32 %127, 11, !dbg !29
  %129 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %128, !dbg !29
  %130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %129, i32 %69, !dbg !29
  %131 = ptrtoint ptr addrspace(3) %130 to i32, !dbg !29
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %131) #1, !dbg !29
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !29
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !29
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !29
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !29
  %137 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %129, i32 %73, !dbg !29
  %138 = ptrtoint ptr addrspace(3) %137 to i32, !dbg !29
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %138) #1, !dbg !29
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !29
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !29
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !29
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !29
  %144 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %129, i32 %75, !dbg !29
  %145 = ptrtoint ptr addrspace(3) %144 to i32, !dbg !29
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %145) #1, !dbg !29
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !29
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !29
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !29
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !29
  %151 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %129, i32 %76, !dbg !29
  %152 = ptrtoint ptr addrspace(3) %151 to i32, !dbg !29
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %152) #1, !dbg !29
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !29
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !29
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !29
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !29
  %158 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %128, !dbg !32
  %159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %158, i32 %81, !dbg !32
  %160 = ptrtoint ptr addrspace(3) %159 to i32, !dbg !32
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %160) #1, !dbg !32
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !32
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !32
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !32
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !32
  %166 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %158, i32 %82, !dbg !32
  %167 = ptrtoint ptr addrspace(3) %166 to i32, !dbg !32
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %167) #1, !dbg !32
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !32
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !32
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !32
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !32
  %173 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %158, i32 %84, !dbg !32
  %174 = ptrtoint ptr addrspace(3) %173 to i32, !dbg !32
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %174) #1, !dbg !32
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !32
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !32
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !32
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !32
  %180 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %158, i32 %85, !dbg !32
  %181 = ptrtoint ptr addrspace(3) %180 to i32, !dbg !32
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %181) #1, !dbg !32
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !32
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !32
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !32
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !32
  %187 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %93, float %94, float %95, float %96, i32 %133, i32 %134, i32 %135, i32 %136, i32 %162, i32 %163) #1, !dbg !34
  %188 = extractvalue { float, float, float, float } %187, 0, !dbg !34
  %189 = extractvalue { float, float, float, float } %187, 1, !dbg !34
  %190 = extractvalue { float, float, float, float } %187, 2, !dbg !34
  %191 = extractvalue { float, float, float, float } %187, 3, !dbg !34
  %192 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %97, float %98, float %99, float %100, i32 %133, i32 %134, i32 %135, i32 %136, i32 %169, i32 %170) #1, !dbg !34
  %193 = extractvalue { float, float, float, float } %192, 0, !dbg !34
  %194 = extractvalue { float, float, float, float } %192, 1, !dbg !34
  %195 = extractvalue { float, float, float, float } %192, 2, !dbg !34
  %196 = extractvalue { float, float, float, float } %192, 3, !dbg !34
  %197 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %101, float %102, float %103, float %104, i32 %133, i32 %134, i32 %135, i32 %136, i32 %176, i32 %177) #1, !dbg !34
  %198 = extractvalue { float, float, float, float } %197, 0, !dbg !34
  %199 = extractvalue { float, float, float, float } %197, 1, !dbg !34
  %200 = extractvalue { float, float, float, float } %197, 2, !dbg !34
  %201 = extractvalue { float, float, float, float } %197, 3, !dbg !34
  %202 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %105, float %106, float %107, float %108, i32 %133, i32 %134, i32 %135, i32 %136, i32 %183, i32 %184) #1, !dbg !34
  %203 = extractvalue { float, float, float, float } %202, 0, !dbg !34
  %204 = extractvalue { float, float, float, float } %202, 1, !dbg !34
  %205 = extractvalue { float, float, float, float } %202, 2, !dbg !34
  %206 = extractvalue { float, float, float, float } %202, 3, !dbg !34
  %207 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %109, float %110, float %111, float %112, i32 %147, i32 %148, i32 %149, i32 %150, i32 %162, i32 %163) #1, !dbg !34
  %208 = extractvalue { float, float, float, float } %207, 0, !dbg !34
  %209 = extractvalue { float, float, float, float } %207, 1, !dbg !34
  %210 = extractvalue { float, float, float, float } %207, 2, !dbg !34
  %211 = extractvalue { float, float, float, float } %207, 3, !dbg !34
  %212 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %113, float %114, float %115, float %116, i32 %147, i32 %148, i32 %149, i32 %150, i32 %169, i32 %170) #1, !dbg !34
  %213 = extractvalue { float, float, float, float } %212, 0, !dbg !34
  %214 = extractvalue { float, float, float, float } %212, 1, !dbg !34
  %215 = extractvalue { float, float, float, float } %212, 2, !dbg !34
  %216 = extractvalue { float, float, float, float } %212, 3, !dbg !34
  %217 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %117, float %118, float %119, float %120, i32 %147, i32 %148, i32 %149, i32 %150, i32 %176, i32 %177) #1, !dbg !34
  %218 = extractvalue { float, float, float, float } %217, 0, !dbg !34
  %219 = extractvalue { float, float, float, float } %217, 1, !dbg !34
  %220 = extractvalue { float, float, float, float } %217, 2, !dbg !34
  %221 = extractvalue { float, float, float, float } %217, 3, !dbg !34
  %222 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %121, float %122, float %123, float %124, i32 %147, i32 %148, i32 %149, i32 %150, i32 %183, i32 %184) #1, !dbg !34
  %223 = extractvalue { float, float, float, float } %222, 0, !dbg !34
  %224 = extractvalue { float, float, float, float } %222, 1, !dbg !34
  %225 = extractvalue { float, float, float, float } %222, 2, !dbg !34
  %226 = extractvalue { float, float, float, float } %222, 3, !dbg !34
  %227 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %188, float %189, float %190, float %191, i32 %140, i32 %141, i32 %142, i32 %143, i32 %164, i32 %165) #1, !dbg !34
  %228 = extractvalue { float, float, float, float } %227, 0, !dbg !34
  %229 = extractvalue { float, float, float, float } %227, 1, !dbg !34
  %230 = extractvalue { float, float, float, float } %227, 2, !dbg !34
  %231 = extractvalue { float, float, float, float } %227, 3, !dbg !34
  %232 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %193, float %194, float %195, float %196, i32 %140, i32 %141, i32 %142, i32 %143, i32 %171, i32 %172) #1, !dbg !34
  %233 = extractvalue { float, float, float, float } %232, 0, !dbg !34
  %234 = extractvalue { float, float, float, float } %232, 1, !dbg !34
  %235 = extractvalue { float, float, float, float } %232, 2, !dbg !34
  %236 = extractvalue { float, float, float, float } %232, 3, !dbg !34
  %237 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %198, float %199, float %200, float %201, i32 %140, i32 %141, i32 %142, i32 %143, i32 %178, i32 %179) #1, !dbg !34
  %238 = extractvalue { float, float, float, float } %237, 0, !dbg !34
  %239 = extractvalue { float, float, float, float } %237, 1, !dbg !34
  %240 = extractvalue { float, float, float, float } %237, 2, !dbg !34
  %241 = extractvalue { float, float, float, float } %237, 3, !dbg !34
  %242 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %203, float %204, float %205, float %206, i32 %140, i32 %141, i32 %142, i32 %143, i32 %185, i32 %186) #1, !dbg !34
  %243 = extractvalue { float, float, float, float } %242, 0, !dbg !34
  %244 = extractvalue { float, float, float, float } %242, 1, !dbg !34
  %245 = extractvalue { float, float, float, float } %242, 2, !dbg !34
  %246 = extractvalue { float, float, float, float } %242, 3, !dbg !34
  %247 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %208, float %209, float %210, float %211, i32 %154, i32 %155, i32 %156, i32 %157, i32 %164, i32 %165) #1, !dbg !34
  %248 = extractvalue { float, float, float, float } %247, 0, !dbg !34
  %249 = extractvalue { float, float, float, float } %247, 1, !dbg !34
  %250 = extractvalue { float, float, float, float } %247, 2, !dbg !34
  %251 = extractvalue { float, float, float, float } %247, 3, !dbg !34
  %252 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %213, float %214, float %215, float %216, i32 %154, i32 %155, i32 %156, i32 %157, i32 %171, i32 %172) #1, !dbg !34
  %253 = extractvalue { float, float, float, float } %252, 0, !dbg !34
  %254 = extractvalue { float, float, float, float } %252, 1, !dbg !34
  %255 = extractvalue { float, float, float, float } %252, 2, !dbg !34
  %256 = extractvalue { float, float, float, float } %252, 3, !dbg !34
  %257 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %218, float %219, float %220, float %221, i32 %154, i32 %155, i32 %156, i32 %157, i32 %178, i32 %179) #1, !dbg !34
  %258 = extractvalue { float, float, float, float } %257, 0, !dbg !34
  %259 = extractvalue { float, float, float, float } %257, 1, !dbg !34
  %260 = extractvalue { float, float, float, float } %257, 2, !dbg !34
  %261 = extractvalue { float, float, float, float } %257, 3, !dbg !34
  %262 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %223, float %224, float %225, float %226, i32 %154, i32 %155, i32 %156, i32 %157, i32 %185, i32 %186) #1, !dbg !34
  %263 = extractvalue { float, float, float, float } %262, 0, !dbg !34
  %264 = extractvalue { float, float, float, float } %262, 1, !dbg !34
  %265 = extractvalue { float, float, float, float } %262, 2, !dbg !34
  %266 = extractvalue { float, float, float, float } %262, 3, !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !33
  %267 = shl nuw nsw i64 %indvars.iv.next, 5, !dbg !35
  %268 = or disjoint i64 %267, %86, !dbg !36
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %268, !dbg !28
  %gep148 = getelementptr bfloat, ptr addrspace(1) %invariant.gep147, i64 %268, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %269 = select i1 %.not50, i32 0, i32 16, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %47, ptr addrspace(1) %gep, i32 %269) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %49, ptr addrspace(1) %gep148, i32 %269) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %gep150 = getelementptr bfloat, ptr addrspace(1) %invariant.gep149, i64 %268, !dbg !31
  %gep152 = getelementptr bfloat, ptr addrspace(1) %invariant.gep151, i64 %268, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %56, ptr addrspace(1) %gep150, i32 %269) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %57, ptr addrspace(1) %gep152, i32 %269) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %exitcond.not = icmp eq i64 %indvars.iv.next, 128, !dbg !33
  br i1 %exitcond.not, label %270, label %91, !dbg !33

270:                                              ; preds = %91
  %271 = and i32 %22, 56, !dbg !19
  %272 = or disjoint i32 %26, %271, !dbg !22
  %273 = lshr i32 %15, 3, !dbg !19
  %274 = and i32 %273, 15, !dbg !19
  %275 = or disjoint i32 %274, %14, !dbg !20
  %276 = or disjoint i32 %275, 48, !dbg !20
  %277 = or disjoint i32 %275, 32, !dbg !20
  %278 = or disjoint i32 %275, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %279 = icmp slt i32 %275, 512, !dbg !37
  %280 = icmp slt i32 %278, 512, !dbg !37
  %281 = icmp slt i32 %277, 512, !dbg !37
  %282 = icmp slt i32 %276, 512, !dbg !37
  %283 = icmp slt i32 %272, 4096, !dbg !38
  %284 = and i1 %279, %283, !dbg !39
  %285 = and i1 %280, %283, !dbg !39
  %286 = and i1 %281, %283, !dbg !39
  %287 = and i1 %282, %283, !dbg !39
  %288 = shl i32 %275, 12, !dbg !40
  %289 = shl i32 %278, 12, !dbg !40
  %290 = shl i32 %277, 12, !dbg !40
  %291 = shl i32 %276, 12, !dbg !40
  %292 = add i32 %288, %272, !dbg !41
  %293 = add i32 %289, %272, !dbg !41
  %294 = add i32 %290, %272, !dbg !41
  %295 = add i32 %291, %272, !dbg !41
  %296 = sext i32 %292 to i64, !dbg !42
  %297 = getelementptr bfloat, ptr addrspace(1) %2, i64 %296, !dbg !42
  %298 = sext i32 %293 to i64, !dbg !42
  %299 = getelementptr bfloat, ptr addrspace(1) %2, i64 %298, !dbg !42
  %300 = sext i32 %294 to i64, !dbg !42
  %301 = getelementptr bfloat, ptr addrspace(1) %2, i64 %300, !dbg !42
  %302 = sext i32 %295 to i64, !dbg !42
  %303 = getelementptr bfloat, ptr addrspace(1) %2, i64 %302, !dbg !42
  %304 = fptrunc float %228 to bfloat, !dbg !43
  %305 = fptrunc float %229 to bfloat, !dbg !43
  %306 = fptrunc float %230 to bfloat, !dbg !43
  %307 = fptrunc float %231 to bfloat, !dbg !43
  %308 = fptrunc float %233 to bfloat, !dbg !43
  %309 = fptrunc float %234 to bfloat, !dbg !43
  %310 = fptrunc float %235 to bfloat, !dbg !43
  %311 = fptrunc float %236 to bfloat, !dbg !43
  %312 = fptrunc float %238 to bfloat, !dbg !43
  %313 = fptrunc float %239 to bfloat, !dbg !43
  %314 = fptrunc float %240 to bfloat, !dbg !43
  %315 = fptrunc float %241 to bfloat, !dbg !43
  %316 = fptrunc float %243 to bfloat, !dbg !43
  %317 = fptrunc float %244 to bfloat, !dbg !43
  %318 = fptrunc float %245 to bfloat, !dbg !43
  %319 = fptrunc float %246 to bfloat, !dbg !43
  %320 = fptrunc float %248 to bfloat, !dbg !43
  %321 = fptrunc float %249 to bfloat, !dbg !43
  %322 = fptrunc float %250 to bfloat, !dbg !43
  %323 = fptrunc float %251 to bfloat, !dbg !43
  %324 = fptrunc float %253 to bfloat, !dbg !43
  %325 = fptrunc float %254 to bfloat, !dbg !43
  %326 = fptrunc float %255 to bfloat, !dbg !43
  %327 = fptrunc float %256 to bfloat, !dbg !43
  %328 = fptrunc float %258 to bfloat, !dbg !43
  %329 = fptrunc float %259 to bfloat, !dbg !43
  %330 = fptrunc float %260 to bfloat, !dbg !43
  %331 = fptrunc float %261 to bfloat, !dbg !43
  %332 = fptrunc float %263 to bfloat, !dbg !43
  %333 = fptrunc float %264 to bfloat, !dbg !43
  %334 = fptrunc float %265 to bfloat, !dbg !43
  %335 = fptrunc float %266 to bfloat, !dbg !43
  %336 = shl i32 %15, 1, !dbg !43
  %337 = and i32 %336, 6, !dbg !43
  %338 = shl i32 %15, 4, !dbg !43
  %339 = and i32 %338, 1472, !dbg !43
  %340 = or disjoint i32 %339, %337, !dbg !43
  %341 = or disjoint i32 %340, %18, !dbg !43
  %342 = and i32 %22, 1016, !dbg !43
  %343 = lshr exact i32 %339, 2, !dbg !43
  %344 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %343, !dbg !43
  %345 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i32 %341, !dbg !43
  %346 = bitcast bfloat %304 to i16, !dbg !43
  %347 = bitcast bfloat %305 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %345, i16 %346, i16 %347, i1 true) #1, !dbg !43
  %348 = or disjoint i32 %341, 512, !dbg !43
  %349 = lshr i32 %348, 3, !dbg !43
  %350 = and i32 %349, 248, !dbg !43
  %351 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %350, !dbg !43
  %352 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %351, i32 %348, !dbg !43
  %353 = bitcast bfloat %306 to i16, !dbg !43
  %354 = bitcast bfloat %307 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %352, i16 %353, i16 %354, i1 true) #1, !dbg !43
  %355 = or disjoint i32 %341, 16, !dbg !43
  %356 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i32 %355, !dbg !43
  %357 = bitcast bfloat %308 to i16, !dbg !43
  %358 = bitcast bfloat %309 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %356, i16 %357, i16 %358, i1 true) #1, !dbg !43
  %359 = or disjoint i32 %341, 528, !dbg !43
  %360 = lshr i32 %359, 3, !dbg !43
  %361 = and i32 %360, 248, !dbg !43
  %362 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %361, !dbg !43
  %363 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %362, i32 %359, !dbg !43
  %364 = bitcast bfloat %310 to i16, !dbg !43
  %365 = bitcast bfloat %311 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %363, i16 %364, i16 %365, i1 true) #1, !dbg !43
  %366 = or disjoint i32 %341, 32, !dbg !43
  %367 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i32 %366, !dbg !43
  %368 = bitcast bfloat %312 to i16, !dbg !43
  %369 = bitcast bfloat %313 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %367, i16 %368, i16 %369, i1 true) #1, !dbg !43
  %370 = or disjoint i32 %341, 544, !dbg !43
  %371 = lshr i32 %370, 3, !dbg !43
  %372 = and i32 %371, 248, !dbg !43
  %373 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %372, !dbg !43
  %374 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %373, i32 %370, !dbg !43
  %375 = bitcast bfloat %314 to i16, !dbg !43
  %376 = bitcast bfloat %315 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %374, i16 %375, i16 %376, i1 true) #1, !dbg !43
  %377 = or disjoint i32 %341, 48, !dbg !43
  %378 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %344, i32 %377, !dbg !43
  %379 = bitcast bfloat %316 to i16, !dbg !43
  %380 = bitcast bfloat %317 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %378, i16 %379, i16 %380, i1 true) #1, !dbg !43
  %381 = or disjoint i32 %341, 560, !dbg !43
  %382 = lshr i32 %381, 3, !dbg !43
  %383 = and i32 %382, 248, !dbg !43
  %384 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %383, !dbg !43
  %385 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %384, i32 %381, !dbg !43
  %386 = bitcast bfloat %318 to i16, !dbg !43
  %387 = bitcast bfloat %319 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %385, i16 %386, i16 %387, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %388 = and i32 %15, 120, !dbg !43
  %389 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %388, !dbg !43
  %390 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %389, i32 %342, !dbg !43
  %391 = load <4 x i32>, ptr addrspace(3) %390, align 16, !dbg !43
  %392 = or disjoint i32 %342, 1024, !dbg !43
  %393 = lshr exact i32 %392, 3, !dbg !43
  %394 = and i32 %393, 248, !dbg !43
  %395 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %394, !dbg !43
  %396 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %395, i32 %392, !dbg !43
  %397 = load <4 x i32>, ptr addrspace(3) %396, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %398 = bitcast bfloat %320 to i16, !dbg !43
  %399 = bitcast bfloat %321 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %345, i16 %398, i16 %399, i1 true) #1, !dbg !43
  %400 = bitcast bfloat %322 to i16, !dbg !43
  %401 = bitcast bfloat %323 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %352, i16 %400, i16 %401, i1 true) #1, !dbg !43
  %402 = bitcast bfloat %324 to i16, !dbg !43
  %403 = bitcast bfloat %325 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %356, i16 %402, i16 %403, i1 true) #1, !dbg !43
  %404 = bitcast bfloat %326 to i16, !dbg !43
  %405 = bitcast bfloat %327 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %363, i16 %404, i16 %405, i1 true) #1, !dbg !43
  %406 = bitcast bfloat %328 to i16, !dbg !43
  %407 = bitcast bfloat %329 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %367, i16 %406, i16 %407, i1 true) #1, !dbg !43
  %408 = bitcast bfloat %330 to i16, !dbg !43
  %409 = bitcast bfloat %331 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %374, i16 %408, i16 %409, i1 true) #1, !dbg !43
  %410 = bitcast bfloat %332 to i16, !dbg !43
  %411 = bitcast bfloat %333 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %378, i16 %410, i16 %411, i1 true) #1, !dbg !43
  %412 = bitcast bfloat %334 to i16, !dbg !43
  %413 = bitcast bfloat %335 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %385, i16 %412, i16 %413, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %414 = load <4 x i32>, ptr addrspace(3) %390, align 16, !dbg !43
  %415 = load <4 x i32>, ptr addrspace(3) %396, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %391, i64 0, !dbg !43
  %.extract53 = extractelement <4 x i32> %391, i64 1, !dbg !43
  %.extract55 = extractelement <4 x i32> %391, i64 2, !dbg !43
  %.extract57 = extractelement <4 x i32> %391, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract53, i32 %.extract55, i32 %.extract57, ptr addrspace(1) %297, i1 %284) #1, !dbg !43
  %.extract59 = extractelement <4 x i32> %397, i64 0, !dbg !43
  %.extract61 = extractelement <4 x i32> %397, i64 1, !dbg !43
  %.extract63 = extractelement <4 x i32> %397, i64 2, !dbg !43
  %.extract65 = extractelement <4 x i32> %397, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract59, i32 %.extract61, i32 %.extract63, i32 %.extract65, ptr addrspace(1) %299, i1 %285) #1, !dbg !43
  %.extract67 = extractelement <4 x i32> %414, i64 0, !dbg !43
  %.extract69 = extractelement <4 x i32> %414, i64 1, !dbg !43
  %.extract71 = extractelement <4 x i32> %414, i64 2, !dbg !43
  %.extract73 = extractelement <4 x i32> %414, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract67, i32 %.extract69, i32 %.extract71, i32 %.extract73, ptr addrspace(1) %301, i1 %286) #1, !dbg !43
  %.extract75 = extractelement <4 x i32> %415, i64 0, !dbg !43
  %.extract77 = extractelement <4 x i32> %415, i64 1, !dbg !43
  %.extract79 = extractelement <4 x i32> %415, i64 2, !dbg !43
  %.extract81 = extractelement <4 x i32> %415, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract75, i32 %.extract77, i32 %.extract79, i32 %.extract81, ptr addrspace(1) %303, i1 %287) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgiwipao45tjdmlenemqzzneiqr6ahu4z35kayw7352q6xaego5o.py", directory: "/tmp/torchinductor_root/gi")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 71, column: 30, scope: !6)
!26 = !DILocation(line: 77, column: 55, scope: !6)
!27 = !DILocation(line: 71, column: 25, scope: !6)
!28 = !DILocation(line: 72, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 20, scope: !6)
!30 = !DILocation(line: 77, column: 50, scope: !6)
!31 = !DILocation(line: 77, column: 25, scope: !6)
!32 = !DILocation(line: 77, column: 20, scope: !6)
!33 = !DILocation(line: 64, column: 26, scope: !6)
!34 = !DILocation(line: 78, column: 25, scope: !6)
!35 = !DILocation(line: 66, column: 50, scope: !6)
!36 = !DILocation(line: 66, column: 42, scope: !6)
!37 = !DILocation(line: 85, column: 20, scope: !6)
!38 = !DILocation(line: 85, column: 34, scope: !6)
!39 = !DILocation(line: 85, column: 26, scope: !6)
!40 = !DILocation(line: 88, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 21, scope: !6)
!42 = !DILocation(line: 89, column: 25, scope: !6)
!43 = !DILocation(line: 89, column: 67, scope: !6)
!44 = !DILocation(line: 89, column: 4, scope: !6)
