; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %21 = shl i32 %20, 6, !dbg !10
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %23 = lshr i32 %22, 2, !dbg !11
  %24 = and i32 %23, 63, !dbg !11
  %25 = and i32 %22, 3, !dbg !11
  %26 = and i32 %22, 63, !dbg !11
  %27 = or disjoint i32 %24, %21, !dbg !12
  %28 = or disjoint i32 %21, %26, !dbg !12
  %29 = icmp slt i32 %27, 4112, !dbg !13
  %30 = icmp slt i32 %28, 4112, !dbg !13
  %31 = mul i32 %27, 3072, !dbg !14
  %32 = or disjoint i32 %31, %25
  br i1 %29, label %.split.us.peel.next, label %.split

.split.us.peel.next:                              ; preds = %19
  %33 = sext i32 %32 to i64, !dbg !15
  %34 = getelementptr bfloat, ptr addrspace(1) %0, i64 %33, !dbg !15
  %35 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %34, i1 true) #5, !dbg !16
  %36 = bitcast i16 %35 to bfloat, !dbg !16
  %37 = fpext bfloat %36 to float, !dbg !17
  br label %38, !dbg !18

38:                                               ; preds = %.split.us.peel.next, %38
  %indvars.iv19 = phi i64 [ 4, %.split.us.peel.next ], [ %indvars.iv.next20, %38 ]
  %39 = phi float [ 1.000000e+00, %.split.us.peel.next ], [ %50, %38 ]
  %40 = phi float [ 0.000000e+00, %.split.us.peel.next ], [ %55, %38 ]
  %41 = phi float [ %37, %.split.us.peel.next ], [ %52, %38 ]
  %42 = trunc nuw nsw i64 %indvars.iv19 to i32, !dbg !22
  %43 = add i32 %32, %42, !dbg !22
  %44 = sext i32 %43 to i64, !dbg !15
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !15
  %46 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %45, i1 true) #5, !dbg !16
  %47 = bitcast i16 %46 to bfloat, !dbg !16
  %48 = fpext bfloat %47 to float, !dbg !17
  %49 = fsub float %48, %41, !dbg !23
  %50 = fadd float %39, 1.000000e+00, !dbg !24
  %51 = tail call float @llvm.nvvm.div.full(float %49, float %50), !dbg !25
  %52 = fadd float %41, %51, !dbg !26
  %53 = fsub float %48, %52, !dbg !27
  %54 = fmul float %49, %53, !dbg !28
  %55 = fadd float %40, %54, !dbg !29
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 4, !dbg !30
  %56 = icmp samesign ult i64 %indvars.iv19, 3068, !dbg !30
  br i1 %56, label %38, label %.split11.us, !dbg !30, !llvm.loop !31

.split:                                           ; preds = %19, %.split
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split ], [ 0, %19 ]
  %57 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %58 = add i32 %32, %57, !dbg !22
  %59 = sext i32 %58 to i64, !dbg !15
  %60 = getelementptr bfloat, ptr addrspace(1) %0, i64 %59, !dbg !15
  %61 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %60, i1 false) #5, !dbg !16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !30
  %62 = icmp samesign ult i64 %indvars.iv, 3068, !dbg !30
  br i1 %62, label %.split, label %.split11.us, !dbg !30

.split11.us:                                      ; preds = %.split, %38
  %.us-phi = phi float [ %52, %38 ], [ 0.000000e+00, %.split ], !dbg !33
  %.us-phi12 = phi float [ %55, %38 ], [ 0.000000e+00, %.split ], !dbg !33
  %.us-phi13 = phi float [ %50, %38 ], [ 0.000000e+00, %.split ], !dbg !33
  %63 = bitcast float %.us-phi to i32, !dbg !33
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !33
  %65 = bitcast i32 %64 to float, !dbg !33
  %66 = bitcast float %.us-phi12 to i32, !dbg !33
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !33
  %68 = bitcast i32 %67 to float, !dbg !33
  %69 = bitcast float %.us-phi13 to i32, !dbg !33
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !33
  %71 = bitcast i32 %70 to float, !dbg !33
  %72 = fsub float %65, %.us-phi, !dbg !35
  %73 = fadd float %.us-phi13, %71, !dbg !37
  %74 = fcmp oeq float %73, 0.000000e+00, !dbg !38
  %75 = tail call float @llvm.nvvm.div.full(float %71, float %73), !dbg !39
  %76 = select i1 %74, float 0.000000e+00, float %75, !dbg !40
  %77 = fmul float %72, %76, !dbg !41
  %78 = fadd float %.us-phi, %77, !dbg !42
  %79 = fadd float %.us-phi12, %68, !dbg !43
  %80 = fmul float %72, %72, !dbg !44
  %81 = fmul float %.us-phi13, %80, !dbg !45
  %82 = fmul float %81, %76, !dbg !46
  %83 = fadd float %79, %82, !dbg !47
  %84 = bitcast float %78 to i32, !dbg !33
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !33
  %86 = bitcast i32 %85 to float, !dbg !33
  %87 = bitcast float %83 to i32, !dbg !33
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !33
  %89 = bitcast i32 %88 to float, !dbg !33
  %90 = bitcast float %73 to i32, !dbg !33
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !33
  %92 = bitcast i32 %91 to float, !dbg !33
  %93 = fsub float %86, %78, !dbg !35
  %94 = fadd float %73, %92, !dbg !37
  %95 = fcmp oeq float %94, 0.000000e+00, !dbg !38
  %96 = tail call float @llvm.nvvm.div.full(float %92, float %94), !dbg !39
  %97 = select i1 %95, float 0.000000e+00, float %96, !dbg !40
  %98 = fmul float %93, %97, !dbg !41
  %99 = fadd float %78, %98, !dbg !42
  %100 = fadd float %83, %89, !dbg !43
  %101 = fmul float %93, %93, !dbg !44
  %102 = fmul float %73, %101, !dbg !45
  %103 = fmul float %97, %102, !dbg !46
  %104 = fadd float %100, %103, !dbg !47
  %105 = tail call float @llvm.nvvm.div.full(float %104, float 3.072000e+03), !dbg !48
  %106 = fadd float %105, 0x3EB0C6F7A0000000, !dbg !49
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %107, 0, !dbg !50
  br i1 %.not.i, label %110, label %108, !dbg !50

108:                                              ; preds = %.split11.us
  %109 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %106), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

110:                                              ; preds = %.split11.us
  %111 = tail call float @llvm.nvvm.rsqrt.approx.f(float %106), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

__nv_rsqrtf.exit:                                 ; preds = %108, %110
  %.0.i = phi float [ %109, %108 ], [ %111, %110 ], !dbg !50
  %112 = zext nneg i32 %25 to i64, !dbg !51
  br label %113, !dbg !51

113:                                              ; preds = %__nv_rsqrtf.exit, %113
  %indvars.iv22 = phi i64 [ 0, %__nv_rsqrtf.exit ], [ %indvars.iv.next23, %113 ]
  %114 = phi float [ 0xFFF0000000000000, %__nv_rsqrtf.exit ], [ %155, %113 ]
  %115 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit ], [ %150, %113 ]
  %116 = or disjoint i64 %indvars.iv22, %112, !dbg !52
  %117 = trunc nuw nsw i64 %116 to i32, !dbg !53
  %118 = add i32 %31, %117, !dbg !53
  %119 = sext i32 %118 to i64, !dbg !54
  %120 = getelementptr bfloat, ptr addrspace(1) %0, i64 %119, !dbg !54
  %121 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %120, i1 %29) #5, !dbg !55
  %122 = bitcast i16 %121 to bfloat, !dbg !55
  %123 = fpext bfloat %122 to float, !dbg !56
  %124 = add nuw nsw i64 %116, 3072, !dbg !57
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !58
  %126 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %125, i1 true) #5, !dbg !59
  %127 = bitcast i32 %126 to float, !dbg !59
  %128 = getelementptr bfloat, ptr addrspace(1) %2, i64 %124, !dbg !60
  %129 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %128, i1 true) #5, !dbg !61
  %130 = bitcast i16 %129 to bfloat, !dbg !61
  %131 = fpext bfloat %130 to float, !dbg !62
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !63
  %133 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %132, i1 true) #5, !dbg !64
  %134 = bitcast i32 %133 to float, !dbg !64
  %135 = getelementptr bfloat, ptr addrspace(1) %2, i64 %116, !dbg !65
  %136 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %135, i1 true) #5, !dbg !66
  %137 = bitcast i16 %136 to bfloat, !dbg !66
  %138 = fpext bfloat %137 to float, !dbg !67
  %139 = fsub float %123, %99, !dbg !68
  %140 = fmul float %.0.i, %139, !dbg !69
  %141 = fadd float %127, %131, !dbg !70
  %142 = fadd float %141, 1.000000e+00, !dbg !71
  %143 = fmul float %140, %142, !dbg !72
  %144 = fadd float %134, %138, !dbg !73
  %145 = fadd float %143, %144, !dbg !74
  %146 = fcmp olt float %115, %145, !dbg !75
  %147 = fcmp uno float %115, 0.000000e+00, !dbg !77
  %148 = or i1 %147, %146, !dbg !78
  %149 = select i1 %148, float %115, float %145, !dbg !79
  %150 = select i1 %29, float %149, float %115, !dbg !80
  %151 = fcmp ogt float %114, %145, !dbg !81
  %152 = fcmp uno float %114, 0.000000e+00, !dbg !83
  %153 = or i1 %152, %151, !dbg !84
  %154 = select i1 %153, float %114, float %145, !dbg !85
  %155 = select i1 %29, float %154, float %114, !dbg !86
  %156 = getelementptr bfloat, ptr addrspace(1) %3, i64 %119, !dbg !87
  %157 = fptrunc float %145 to bfloat, !dbg !88
  %158 = bitcast bfloat %157 to i16, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %158, ptr addrspace(1) %156, i1 %29) #5, !dbg !88
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 4, !dbg !51
  %159 = icmp samesign ult i64 %indvars.iv22, 3068, !dbg !51
  br i1 %159, label %113, label %160, !dbg !51

160:                                              ; preds = %113
  %161 = bitcast float %150 to i32, !dbg !89
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !89
  %163 = bitcast i32 %162 to float, !dbg !89
  %164 = fcmp olt float %150, %163, !dbg !91
  %165 = fcmp uno float %150, 0.000000e+00, !dbg !92
  %166 = or i1 %165, %164, !dbg !93
  %167 = select i1 %166, float %150, float %163, !dbg !94
  %168 = bitcast float %167 to i32, !dbg !89
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 1, i32 31), !dbg !89
  %170 = bitcast i32 %169 to float, !dbg !89
  %171 = fcmp olt float %167, %170, !dbg !91
  %172 = fcmp uno float %167, 0.000000e+00, !dbg !92
  %173 = or i1 %171, %172, !dbg !93
  %174 = select i1 %173, float %167, float %170, !dbg !94
  %175 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %24, !dbg !95
  %176 = bitcast float %174 to <1 x i32>, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %177 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26, !dbg !95
  %178 = load float, ptr addrspace(3) %177, align 4, !dbg !95
  %179 = bitcast float %155 to i32, !dbg !96
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 2, i32 31), !dbg !96
  %181 = bitcast i32 %180 to float, !dbg !96
  %182 = fcmp ogt float %155, %181, !dbg !98
  %183 = fcmp uno float %155, 0.000000e+00, !dbg !99
  %184 = or i1 %183, %182, !dbg !100
  %185 = select i1 %184, float %155, float %181, !dbg !101
  %186 = bitcast float %185 to i32, !dbg !96
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !96
  %188 = bitcast i32 %187 to float, !dbg !96
  %189 = fcmp ogt float %185, %188, !dbg !98
  %190 = fcmp uno float %185, 0.000000e+00, !dbg !99
  %191 = or i1 %189, %190, !dbg !100
  %192 = select i1 %191, float %185, float %188, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %193 = bitcast float %192 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %193, i1 true) #5, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %194 = load float, ptr addrspace(3) %177, align 4, !dbg !102
  %195 = sext i32 %28 to i64, !dbg !103
  %196 = getelementptr bfloat, ptr addrspace(1) %4, i64 %195, !dbg !103
  %197 = fptrunc float %178 to bfloat, !dbg !95
  %198 = and i32 %22, 192, !dbg !95
  %199 = icmp eq i32 %198, 0, !dbg !95
  %200 = bitcast bfloat %197 to i16, !dbg !95
  %201 = and i1 %199, %30, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %200, ptr addrspace(1) %196, i1 %201) #5, !dbg !95
  %202 = getelementptr bfloat, ptr addrspace(1) %5, i64 %195, !dbg !104
  %203 = fptrunc float %194 to bfloat, !dbg !102
  %204 = bitcast bfloat %203 to i16, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %204, ptr addrspace(1) %202, i1 %201) #5, !dbg !102
  %205 = getelementptr bfloat, ptr addrspace(1) %6, i64 %195, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %200, ptr addrspace(1) %205, i1 %201) #5, !dbg !106
  %206 = getelementptr bfloat, ptr addrspace(1) %7, i64 %195, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %204, ptr addrspace(1) %206, i1 %201) #5, !dbg !108
  %207 = getelementptr bfloat, ptr addrspace(1) %8, i64 %195, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %200, ptr addrspace(1) %207, i1 %201) #5, !dbg !110
  %208 = getelementptr bfloat, ptr addrspace(1) %9, i64 %195, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %204, ptr addrspace(1) %208, i1 %201) #5, !dbg !112
  %209 = getelementptr bfloat, ptr addrspace(1) %10, i64 %195, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %200, ptr addrspace(1) %209, i1 %201) #5, !dbg !114
  %210 = getelementptr bfloat, ptr addrspace(1) %11, i64 %195, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %204, ptr addrspace(1) %210, i1 %201) #5, !dbg !116
  %.inv = fcmp oge float %174, 0.000000e+00, !dbg !117
  %211 = select i1 %.inv, float 0.000000e+00, float %174, !dbg !117
  %212 = fsub float 0.000000e+00, %211, !dbg !119
  %.inv4 = fcmp ole float %192, 0.000000e+00, !dbg !120
  %213 = select i1 %.inv4, float 0.000000e+00, float %192, !dbg !120
  %214 = fcmp ogt float %212, %213, !dbg !122
  %215 = fcmp uno float %212, 0.000000e+00, !dbg !124
  %216 = or i1 %215, %214, !dbg !125
  %217 = select i1 %216, float %212, float %213, !dbg !126
  %218 = fmul float %217, 0x3F80204080000000, !dbg !127
  %219 = fcmp ogt float %218, 0x3EE4F8B580000000, !dbg !128
  %220 = fcmp uno float %218, 0.000000e+00, !dbg !130
  %221 = or i1 %219, %220, !dbg !131
  %222 = select i1 %221, float %218, float 0x3EE4F8B580000000, !dbg !132
  %223 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %222), !dbg !133
  br label %224, !dbg !134

224:                                              ; preds = %160, %224
  %indvars.iv24 = phi i64 [ 0, %160 ], [ %indvars.iv.next25, %224 ]
  %225 = trunc nuw nsw i64 %indvars.iv24 to i32, !dbg !135
  %226 = add i32 %32, %225, !dbg !135
  %227 = sext i32 %226 to i64, !dbg !136
  %228 = getelementptr bfloat, ptr addrspace(1) %3, i64 %227, !dbg !136
  %229 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %228, i1 %29) #5, !dbg !137
  %230 = bitcast i16 %229 to bfloat, !dbg !137
  %231 = fpext bfloat %230 to float, !dbg !138
  %232 = fmul float %223, %231, !dbg !139
  %233 = tail call float @llvm.nvvm.round.f(float %232) #5, !dbg !140
  %234 = fcmp ogt float %233, -1.270000e+02, !dbg !141
  %235 = fcmp uno float %233, 0.000000e+00, !dbg !143
  %236 = or i1 %234, %235, !dbg !144
  %237 = select i1 %236, float %233, float -1.270000e+02, !dbg !145
  %238 = fcmp olt float %237, 1.270000e+02, !dbg !146
  %239 = fcmp uno float %237, 0.000000e+00, !dbg !148
  %240 = or i1 %238, %239, !dbg !149
  %241 = fptosi float %237 to i8, !dbg !150
  %242 = select i1 %240, i8 %241, i8 127, !dbg !151
  %243 = getelementptr i8, ptr addrspace(1) %12, i64 %227, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %242, ptr addrspace(1) %243, i1 %29) #5, !dbg !153
  %244 = getelementptr i8, ptr addrspace(1) %13, i64 %227, !dbg !154
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %242, ptr addrspace(1) %244, i1 %29) #5, !dbg !155
  %245 = getelementptr i8, ptr addrspace(1) %14, i64 %227, !dbg !156
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %242, ptr addrspace(1) %245, i1 %29) #5, !dbg !157
  %246 = getelementptr i8, ptr addrspace(1) %15, i64 %227, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %242, ptr addrspace(1) %246, i1 %29) #5, !dbg !159
  %indvars.iv.next25 = add nuw nsw i64 %indvars.iv24, 4, !dbg !134
  %247 = icmp samesign ult i64 %indvars.iv24, 3068, !dbg !134
  br i1 %247, label %224, label %248, !dbg !134

248:                                              ; preds = %224
  ret void, !dbg !160
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 38, column: 46, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 51, scope: !6)
!17 = !DILocation(line: 38, column: 112, scope: !6)
!18 = !DILocation(line: 203, column: 7, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !6, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 42, column: 51, scope: !6)
!22 = !DILocation(line: 38, column: 41, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !19, inlinedAt: !21)
!24 = !DILocation(line: 209, column: 30, scope: !19, inlinedAt: !21)
!25 = !DILocation(line: 210, column: 34, scope: !19, inlinedAt: !21)
!26 = !DILocation(line: 210, column: 26, scope: !19, inlinedAt: !21)
!27 = !DILocation(line: 211, column: 39, scope: !19, inlinedAt: !21)
!28 = !DILocation(line: 211, column: 31, scope: !19, inlinedAt: !21)
!29 = !DILocation(line: 211, column: 22, scope: !19, inlinedAt: !21)
!30 = !DILocation(line: 32, column: 40, scope: !6)
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.peeled.count", i32 1}
!33 = !DILocation(line: 229, column: 46, scope: !19, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 79, scope: !6)
!35 = !DILocation(line: 217, column: 21, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!37 = !DILocation(line: 218, column: 28, scope: !36, inlinedAt: !34)
!38 = !DILocation(line: 219, column: 39, scope: !36, inlinedAt: !34)
!39 = !DILocation(line: 219, column: 60, scope: !36, inlinedAt: !34)
!40 = !DILocation(line: 219, column: 49, scope: !36, inlinedAt: !34)
!41 = !DILocation(line: 221, column: 25, scope: !36, inlinedAt: !34)
!42 = !DILocation(line: 221, column: 17, scope: !36, inlinedAt: !34)
!43 = !DILocation(line: 222, column: 15, scope: !36, inlinedAt: !34)
!44 = !DILocation(line: 222, column: 30, scope: !36, inlinedAt: !34)
!45 = !DILocation(line: 222, column: 38, scope: !36, inlinedAt: !34)
!46 = !DILocation(line: 222, column: 49, scope: !36, inlinedAt: !34)
!47 = !DILocation(line: 222, column: 22, scope: !36, inlinedAt: !34)
!48 = !DILocation(line: 67, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 32, scope: !6)
!51 = !DILocation(line: 53, column: 40, scope: !6)
!52 = !DILocation(line: 54, column: 31, scope: !6)
!53 = !DILocation(line: 59, column: 41, scope: !6)
!54 = !DILocation(line: 59, column: 34, scope: !6)
!55 = !DILocation(line: 59, column: 51, scope: !6)
!56 = !DILocation(line: 59, column: 113, scope: !6)
!57 = !DILocation(line: 60, column: 42, scope: !6)
!58 = !DILocation(line: 60, column: 35, scope: !6)
!59 = !DILocation(line: 60, column: 49, scope: !6)
!60 = !DILocation(line: 61, column: 35, scope: !6)
!61 = !DILocation(line: 61, column: 49, scope: !6)
!62 = !DILocation(line: 61, column: 102, scope: !6)
!63 = !DILocation(line: 62, column: 35, scope: !6)
!64 = !DILocation(line: 62, column: 42, scope: !6)
!65 = !DILocation(line: 63, column: 35, scope: !6)
!66 = !DILocation(line: 63, column: 42, scope: !6)
!67 = !DILocation(line: 63, column: 95, scope: !6)
!68 = !DILocation(line: 65, column: 24, scope: !6)
!69 = !DILocation(line: 71, column: 24, scope: !6)
!70 = !DILocation(line: 74, column: 24, scope: !6)
!71 = !DILocation(line: 76, column: 24, scope: !6)
!72 = !DILocation(line: 77, column: 24, scope: !6)
!73 = !DILocation(line: 79, column: 24, scope: !6)
!74 = !DILocation(line: 80, column: 24, scope: !6)
!75 = !DILocation(line: 94, column: 15, scope: !19, inlinedAt: !76)
!76 = !DILocation(line: 82, column: 47, scope: !6)
!77 = !DILocation(line: 96, column: 21, scope: !19, inlinedAt: !76)
!78 = !DILocation(line: 96, column: 16, scope: !19, inlinedAt: !76)
!79 = !DILocation(line: 97, column: 29, scope: !19, inlinedAt: !76)
!80 = !DILocation(line: 83, column: 50, scope: !6)
!81 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !82)
!82 = !DILocation(line: 84, column: 47, scope: !6)
!83 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !82)
!84 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !82)
!85 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !82)
!86 = !DILocation(line: 85, column: 50, scope: !6)
!87 = !DILocation(line: 86, column: 29, scope: !6)
!88 = !DILocation(line: 86, column: 53, scope: !6)
!89 = !DILocation(line: 110, column: 29, scope: !19, inlinedAt: !90)
!90 = !DILocation(line: 87, column: 40, scope: !6)
!91 = !DILocation(line: 94, column: 15, scope: !36, inlinedAt: !90)
!92 = !DILocation(line: 96, column: 21, scope: !36, inlinedAt: !90)
!93 = !DILocation(line: 96, column: 16, scope: !36, inlinedAt: !90)
!94 = !DILocation(line: 97, column: 29, scope: !36, inlinedAt: !90)
!95 = !DILocation(line: 89, column: 37, scope: !6)
!96 = !DILocation(line: 115, column: 29, scope: !19, inlinedAt: !97)
!97 = !DILocation(line: 88, column: 40, scope: !6)
!98 = !DILocation(line: 102, column: 15, scope: !36, inlinedAt: !97)
!99 = !DILocation(line: 104, column: 21, scope: !36, inlinedAt: !97)
!100 = !DILocation(line: 104, column: 16, scope: !36, inlinedAt: !97)
!101 = !DILocation(line: 105, column: 29, scope: !36, inlinedAt: !97)
!102 = !DILocation(line: 90, column: 37, scope: !6)
!103 = !DILocation(line: 89, column: 25, scope: !6)
!104 = !DILocation(line: 90, column: 25, scope: !6)
!105 = !DILocation(line: 91, column: 25, scope: !6)
!106 = !DILocation(line: 91, column: 37, scope: !6)
!107 = !DILocation(line: 92, column: 25, scope: !6)
!108 = !DILocation(line: 92, column: 37, scope: !6)
!109 = !DILocation(line: 93, column: 25, scope: !6)
!110 = !DILocation(line: 93, column: 37, scope: !6)
!111 = !DILocation(line: 94, column: 25, scope: !6)
!112 = !DILocation(line: 94, column: 37, scope: !6)
!113 = !DILocation(line: 95, column: 25, scope: !6)
!114 = !DILocation(line: 95, column: 37, scope: !6)
!115 = !DILocation(line: 96, column: 26, scope: !6)
!116 = !DILocation(line: 96, column: 38, scope: !6)
!117 = !DILocation(line: 97, column: 29, scope: !19, inlinedAt: !118)
!118 = !DILocation(line: 105, column: 46, scope: !6)
!119 = !DILocation(line: 106, column: 17, scope: !6)
!120 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !121)
!121 = !DILocation(line: 107, column: 46, scope: !6)
!122 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !123)
!123 = !DILocation(line: 108, column: 46, scope: !6)
!124 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !123)
!125 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !123)
!126 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !123)
!127 = !DILocation(line: 110, column: 24, scope: !6)
!128 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !129)
!129 = !DILocation(line: 113, column: 46, scope: !6)
!130 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !129)
!131 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !129)
!132 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !129)
!133 = !DILocation(line: 116, column: 25, scope: !6)
!134 = !DILocation(line: 97, column: 40, scope: !6)
!135 = !DILocation(line: 103, column: 43, scope: !6)
!136 = !DILocation(line: 103, column: 36, scope: !6)
!137 = !DILocation(line: 103, column: 53, scope: !6)
!138 = !DILocation(line: 103, column: 115, scope: !6)
!139 = !DILocation(line: 119, column: 24, scope: !6)
!140 = !DILocation(line: 120, column: 36, scope: !6)
!141 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !142)
!142 = !DILocation(line: 123, column: 46, scope: !6)
!143 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !142)
!144 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !142)
!145 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !142)
!146 = !DILocation(line: 94, column: 15, scope: !19, inlinedAt: !147)
!147 = !DILocation(line: 125, column: 46, scope: !6)
!148 = !DILocation(line: 96, column: 21, scope: !19, inlinedAt: !147)
!149 = !DILocation(line: 96, column: 16, scope: !19, inlinedAt: !147)
!150 = !DILocation(line: 127, column: 25, scope: !6)
!151 = !DILocation(line: 97, column: 29, scope: !19, inlinedAt: !147)
!152 = !DILocation(line: 128, column: 30, scope: !6)
!153 = !DILocation(line: 128, column: 54, scope: !6)
!154 = !DILocation(line: 129, column: 30, scope: !6)
!155 = !DILocation(line: 129, column: 54, scope: !6)
!156 = !DILocation(line: 130, column: 30, scope: !6)
!157 = !DILocation(line: 130, column: 54, scope: !6)
!158 = !DILocation(line: 131, column: 30, scope: !6)
!159 = !DILocation(line: 131, column: 54, scope: !6)
!160 = !DILocation(line: 97, column: 4, scope: !6)
