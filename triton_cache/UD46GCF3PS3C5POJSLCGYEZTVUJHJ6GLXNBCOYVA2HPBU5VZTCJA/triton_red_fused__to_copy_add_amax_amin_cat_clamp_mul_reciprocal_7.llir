; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 6, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 64, !dbg !11
  %13 = lshr i32 %11, 1, !dbg !11
  %14 = and i32 %13, 63, !dbg !11
  %15 = or disjoint i32 %14, %10, !dbg !12
  %16 = icmp slt i32 %15, 4112, !dbg !13
  %17 = shl i32 %11, 2, !dbg !14
  %18 = and i32 %17, 4, !dbg !14
  %19 = mul i32 %15, 3072, !dbg !15
  %20 = mul i32 %15, 12288, !dbg !16
  %21 = add i32 %20, -3072
  %22 = insertelement <4 x i1> poison, i1 %16, i64 0, !dbg !17
  %23 = shufflevector <4 x i1> %22, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !17
  br label %24, !dbg !18

24:                                               ; preds = %8, %__nv_tanhf.exit137
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %__nv_tanhf.exit137 ]
  %25 = phi <4 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %231, %__nv_tanhf.exit137 ]
  %26 = phi <4 x float> [ splat (float 0x7FF0000000000000), %8 ], [ %227, %__nv_tanhf.exit137 ]
  %27 = icmp samesign ult i64 %indvars.iv, 3072, !dbg !19
  %28 = trunc i64 %indvars.iv to i32, !dbg !20
  %29 = or disjoint i32 %18, %28, !dbg !20
  %30 = add i32 %29, %19, !dbg !20
  %31 = sext i32 %30 to i64, !dbg !21
  %32 = getelementptr bfloat, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = and i1 %16, %27, !dbg !22
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %33) #5, !dbg !23
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !23
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !23
  %37 = extractvalue { i32, i32 } %34, 1, !dbg !23
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !23
  %39 = shufflevector <2 x bfloat> %38, <2 x bfloat> %36, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !24
  %40 = fpext <4 x bfloat> %39 to <4 x float>, !dbg !24
  %41 = icmp samesign ugt i64 %indvars.iv, 3071, !dbg !25
  %42 = add i32 %21, %29, !dbg !26
  %43 = sext i32 %42 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !27
  %45 = and i1 %16, %41, !dbg !28
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %44, i1 %45) #5, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !29
  %51 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !29
  %52 = insertelement <4 x i32> %51, i32 %49, i64 1, !dbg !29
  %53 = insertelement <4 x i32> %52, i32 %48, i64 2, !dbg !29
  %54 = insertelement <4 x i32> %53, i32 %47, i64 3, !dbg !29
  %55 = bitcast <4 x i32> %54 to <4 x float>, !dbg !29
  %56 = fmul <4 x float> %55, splat (float 5.000000e-01), !dbg !30
  %57 = bitcast i32 %47 to float, !dbg !31
  %58 = fmul float %57, %57, !dbg !31
  %59 = bitcast i32 %48 to float, !dbg !31
  %60 = fmul float %59, %59, !dbg !31
  %61 = bitcast i32 %49 to float, !dbg !31
  %62 = fmul float %61, %61, !dbg !31
  %63 = bitcast i32 %50 to float, !dbg !31
  %64 = fmul float %63, %63, !dbg !31
  %65 = fmul float %58, %57, !dbg !32
  %66 = fmul float %60, %59, !dbg !32
  %67 = fmul float %62, %61, !dbg !32
  %68 = fmul float %64, %63, !dbg !32
  %69 = fmul float %65, 0x3FA6E4E260000000, !dbg !33
  %70 = fmul float %66, 0x3FA6E4E260000000, !dbg !33
  %71 = fmul float %67, 0x3FA6E4E260000000, !dbg !33
  %72 = fmul float %68, 0x3FA6E4E260000000, !dbg !33
  %73 = fadd float %69, %57, !dbg !34
  %74 = fadd float %70, %59, !dbg !34
  %75 = fadd float %71, %61, !dbg !34
  %76 = fadd float %72, %63, !dbg !34
  %77 = fmul float %73, 0x3FE9884540000000, !dbg !35
  %78 = fmul float %74, 0x3FE9884540000000, !dbg !35
  %79 = fmul float %75, 0x3FE9884540000000, !dbg !35
  %80 = fmul float %76, 0x3FE9884540000000, !dbg !35
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i62 = icmp eq i32 %81, 0, !dbg !36
  %82 = tail call float @llvm.nvvm.fabs.ftz.f(float %77) #5, !dbg !36
  %83 = tail call float @llvm.nvvm.fabs.f(float %77) #5, !dbg !36
  %.01.i63 = select i1 %.not.i62, float %83, float %82, !dbg !36
  %84 = fcmp ult float %.01.i63, 0x3FE3333340000000, !dbg !36
  br i1 %84, label %__internal_fmad.exit3.i69, label %__internal_fmad.exit1.i64, !dbg !36

__internal_fmad.exit1.i64:                        ; preds = %24
  %85 = fmul float %.01.i63, 0x4007154760000000, !dbg !36
  %86 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %85) #5, !dbg !36
  %87 = fadd float %86, 1.000000e+00, !dbg !36
  %88 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %87) #6, !dbg !36, !srcloc !37
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i65 = icmp eq i32 %89, 0, !dbg !36
  %90 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %88, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %91 = tail call float @llvm.nvvm.fma.rn.f(float %88, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i66 = select i1 %.not6.i65, float %91, float %90, !dbg !36
  %92 = fcmp oge float %.01.i63, 0x4022059680000000, !dbg !36
  %s.0.i67 = select i1 %92, float 1.000000e+00, float %.03.i66, !dbg !36
  %93 = bitcast float %s.0.i67 to i32, !dbg !36
  %94 = bitcast float %77 to i32, !dbg !36
  %95 = and i32 %94, -2147483648, !dbg !36
  %96 = or i32 %95, %93, !dbg !36
  %97 = bitcast i32 %96 to float, !dbg !36
  br label %__nv_tanhf.exit80, !dbg !36

__internal_fmad.exit3.i69:                        ; preds = %24
  %98 = fmul float %77, %77, !dbg !36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i70 = icmp eq i32 %99, 0, !dbg !36
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %98, float 0xBFAAC795C0000000) #5, !dbg !36
  %101 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %98, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i71 = select i1 %.not1.i70, float %101, float %100, !dbg !36
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i72 = icmp eq i32 %102, 0, !dbg !36
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i71, float %98, float 0x3FC10B2820000000) #5, !dbg !36
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i71, float %98, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i73 = select i1 %.not2.i72, float %104, float %103, !dbg !36
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i74 = icmp eq i32 %105, 0, !dbg !36
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i73, float %98, float 0xBFD5553DA0000000) #5, !dbg !36
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i73, float %98, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i75 = select i1 %.not3.i74, float %107, float %106, !dbg !36
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i76 = icmp eq i32 %108, 0, !dbg !36
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i75, float %98, float 0.000000e+00) #5, !dbg !36
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i75, float %98, float 0.000000e+00) #5, !dbg !36
  %.04.i77 = select i1 %.not4.i76, float %110, float %109, !dbg !36
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i78 = icmp eq i32 %111, 0, !dbg !36
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i77, float %77, float %77) #5, !dbg !36
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i77, float %77, float %77) #5, !dbg !36
  %.02.i79 = select i1 %.not5.i78, float %113, float %112, !dbg !36
  br label %__nv_tanhf.exit80, !dbg !36

__nv_tanhf.exit80:                                ; preds = %__internal_fmad.exit1.i64, %__internal_fmad.exit3.i69
  %s.1.i68 = phi float [ %97, %__internal_fmad.exit1.i64 ], [ %.02.i79, %__internal_fmad.exit3.i69 ], !dbg !36
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i81 = icmp eq i32 %114, 0, !dbg !36
  %115 = tail call float @llvm.nvvm.fabs.ftz.f(float %78) #5, !dbg !36
  %116 = tail call float @llvm.nvvm.fabs.f(float %78) #5, !dbg !36
  %.01.i82 = select i1 %.not.i81, float %116, float %115, !dbg !36
  %117 = fcmp ult float %.01.i82, 0x3FE3333340000000, !dbg !36
  br i1 %117, label %__internal_fmad.exit3.i88, label %__internal_fmad.exit1.i83, !dbg !36

__internal_fmad.exit1.i83:                        ; preds = %__nv_tanhf.exit80
  %118 = fmul float %.01.i82, 0x4007154760000000, !dbg !36
  %119 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %118) #5, !dbg !36
  %120 = fadd float %119, 1.000000e+00, !dbg !36
  %121 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %120) #6, !dbg !36, !srcloc !37
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i84 = icmp eq i32 %122, 0, !dbg !36
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %121, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %121, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i85 = select i1 %.not6.i84, float %124, float %123, !dbg !36
  %125 = fcmp oge float %.01.i82, 0x4022059680000000, !dbg !36
  %s.0.i86 = select i1 %125, float 1.000000e+00, float %.03.i85, !dbg !36
  %126 = bitcast float %s.0.i86 to i32, !dbg !36
  %127 = bitcast float %78 to i32, !dbg !36
  %128 = and i32 %127, -2147483648, !dbg !36
  %129 = or i32 %128, %126, !dbg !36
  %130 = bitcast i32 %129 to float, !dbg !36
  br label %__nv_tanhf.exit99, !dbg !36

__internal_fmad.exit3.i88:                        ; preds = %__nv_tanhf.exit80
  %131 = fmul float %78, %78, !dbg !36
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i89 = icmp eq i32 %132, 0, !dbg !36
  %133 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %131, float 0xBFAAC795C0000000) #5, !dbg !36
  %134 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %131, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i90 = select i1 %.not1.i89, float %134, float %133, !dbg !36
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i91 = icmp eq i32 %135, 0, !dbg !36
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i90, float %131, float 0x3FC10B2820000000) #5, !dbg !36
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i90, float %131, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i92 = select i1 %.not2.i91, float %137, float %136, !dbg !36
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i93 = icmp eq i32 %138, 0, !dbg !36
  %139 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i92, float %131, float 0xBFD5553DA0000000) #5, !dbg !36
  %140 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i92, float %131, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i94 = select i1 %.not3.i93, float %140, float %139, !dbg !36
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i95 = icmp eq i32 %141, 0, !dbg !36
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i94, float %131, float 0.000000e+00) #5, !dbg !36
  %143 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i94, float %131, float 0.000000e+00) #5, !dbg !36
  %.04.i96 = select i1 %.not4.i95, float %143, float %142, !dbg !36
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i97 = icmp eq i32 %144, 0, !dbg !36
  %145 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i96, float %78, float %78) #5, !dbg !36
  %146 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i96, float %78, float %78) #5, !dbg !36
  %.02.i98 = select i1 %.not5.i97, float %146, float %145, !dbg !36
  br label %__nv_tanhf.exit99, !dbg !36

__nv_tanhf.exit99:                                ; preds = %__internal_fmad.exit1.i83, %__internal_fmad.exit3.i88
  %s.1.i87 = phi float [ %130, %__internal_fmad.exit1.i83 ], [ %.02.i98, %__internal_fmad.exit3.i88 ], !dbg !36
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i100 = icmp eq i32 %147, 0, !dbg !36
  %148 = tail call float @llvm.nvvm.fabs.ftz.f(float %79) #5, !dbg !36
  %149 = tail call float @llvm.nvvm.fabs.f(float %79) #5, !dbg !36
  %.01.i101 = select i1 %.not.i100, float %149, float %148, !dbg !36
  %150 = fcmp ult float %.01.i101, 0x3FE3333340000000, !dbg !36
  br i1 %150, label %__internal_fmad.exit3.i107, label %__internal_fmad.exit1.i102, !dbg !36

__internal_fmad.exit1.i102:                       ; preds = %__nv_tanhf.exit99
  %151 = fmul float %.01.i101, 0x4007154760000000, !dbg !36
  %152 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %151) #5, !dbg !36
  %153 = fadd float %152, 1.000000e+00, !dbg !36
  %154 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %153) #6, !dbg !36, !srcloc !37
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i103 = icmp eq i32 %155, 0, !dbg !36
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %154, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %157 = tail call float @llvm.nvvm.fma.rn.f(float %154, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i104 = select i1 %.not6.i103, float %157, float %156, !dbg !36
  %158 = fcmp oge float %.01.i101, 0x4022059680000000, !dbg !36
  %s.0.i105 = select i1 %158, float 1.000000e+00, float %.03.i104, !dbg !36
  %159 = bitcast float %s.0.i105 to i32, !dbg !36
  %160 = bitcast float %79 to i32, !dbg !36
  %161 = and i32 %160, -2147483648, !dbg !36
  %162 = or i32 %161, %159, !dbg !36
  %163 = bitcast i32 %162 to float, !dbg !36
  br label %__nv_tanhf.exit118, !dbg !36

__internal_fmad.exit3.i107:                       ; preds = %__nv_tanhf.exit99
  %164 = fmul float %79, %79, !dbg !36
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i108 = icmp eq i32 %165, 0, !dbg !36
  %166 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %164, float 0xBFAAC795C0000000) #5, !dbg !36
  %167 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %164, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i109 = select i1 %.not1.i108, float %167, float %166, !dbg !36
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i110 = icmp eq i32 %168, 0, !dbg !36
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i109, float %164, float 0x3FC10B2820000000) #5, !dbg !36
  %170 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i109, float %164, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i111 = select i1 %.not2.i110, float %170, float %169, !dbg !36
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i112 = icmp eq i32 %171, 0, !dbg !36
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i111, float %164, float 0xBFD5553DA0000000) #5, !dbg !36
  %173 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i111, float %164, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i113 = select i1 %.not3.i112, float %173, float %172, !dbg !36
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i114 = icmp eq i32 %174, 0, !dbg !36
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i113, float %164, float 0.000000e+00) #5, !dbg !36
  %176 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i113, float %164, float 0.000000e+00) #5, !dbg !36
  %.04.i115 = select i1 %.not4.i114, float %176, float %175, !dbg !36
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i116 = icmp eq i32 %177, 0, !dbg !36
  %178 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i115, float %79, float %79) #5, !dbg !36
  %179 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i115, float %79, float %79) #5, !dbg !36
  %.02.i117 = select i1 %.not5.i116, float %179, float %178, !dbg !36
  br label %__nv_tanhf.exit118, !dbg !36

__nv_tanhf.exit118:                               ; preds = %__internal_fmad.exit1.i102, %__internal_fmad.exit3.i107
  %s.1.i106 = phi float [ %163, %__internal_fmad.exit1.i102 ], [ %.02.i117, %__internal_fmad.exit3.i107 ], !dbg !36
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i119 = icmp eq i32 %180, 0, !dbg !36
  %181 = tail call float @llvm.nvvm.fabs.ftz.f(float %80) #5, !dbg !36
  %182 = tail call float @llvm.nvvm.fabs.f(float %80) #5, !dbg !36
  %.01.i120 = select i1 %.not.i119, float %182, float %181, !dbg !36
  %183 = fcmp ult float %.01.i120, 0x3FE3333340000000, !dbg !36
  br i1 %183, label %__internal_fmad.exit3.i126, label %__internal_fmad.exit1.i121, !dbg !36

__internal_fmad.exit1.i121:                       ; preds = %__nv_tanhf.exit118
  %184 = fmul float %.01.i120, 0x4007154760000000, !dbg !36
  %185 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %184) #5, !dbg !36
  %186 = fadd float %185, 1.000000e+00, !dbg !36
  %187 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %186) #6, !dbg !36, !srcloc !37
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i122 = icmp eq i32 %188, 0, !dbg !36
  %189 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %187, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %190 = tail call float @llvm.nvvm.fma.rn.f(float %187, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i123 = select i1 %.not6.i122, float %190, float %189, !dbg !36
  %191 = fcmp oge float %.01.i120, 0x4022059680000000, !dbg !36
  %s.0.i124 = select i1 %191, float 1.000000e+00, float %.03.i123, !dbg !36
  %192 = bitcast float %s.0.i124 to i32, !dbg !36
  %193 = bitcast float %80 to i32, !dbg !36
  %194 = and i32 %193, -2147483648, !dbg !36
  %195 = or i32 %194, %192, !dbg !36
  %196 = bitcast i32 %195 to float, !dbg !36
  br label %__nv_tanhf.exit137, !dbg !36

__internal_fmad.exit3.i126:                       ; preds = %__nv_tanhf.exit118
  %197 = fmul float %80, %80, !dbg !36
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i127 = icmp eq i32 %198, 0, !dbg !36
  %199 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %197, float 0xBFAAC795C0000000) #5, !dbg !36
  %200 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %197, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i128 = select i1 %.not1.i127, float %200, float %199, !dbg !36
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i129 = icmp eq i32 %201, 0, !dbg !36
  %202 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i128, float %197, float 0x3FC10B2820000000) #5, !dbg !36
  %203 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i128, float %197, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i130 = select i1 %.not2.i129, float %203, float %202, !dbg !36
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i131 = icmp eq i32 %204, 0, !dbg !36
  %205 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i130, float %197, float 0xBFD5553DA0000000) #5, !dbg !36
  %206 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i130, float %197, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i132 = select i1 %.not3.i131, float %206, float %205, !dbg !36
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i133 = icmp eq i32 %207, 0, !dbg !36
  %208 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i132, float %197, float 0.000000e+00) #5, !dbg !36
  %209 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i132, float %197, float 0.000000e+00) #5, !dbg !36
  %.04.i134 = select i1 %.not4.i133, float %209, float %208, !dbg !36
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i135 = icmp eq i32 %210, 0, !dbg !36
  %211 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i134, float %80, float %80) #5, !dbg !36
  %212 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i134, float %80, float %80) #5, !dbg !36
  %.02.i136 = select i1 %.not5.i135, float %212, float %211, !dbg !36
  br label %__nv_tanhf.exit137, !dbg !36

__nv_tanhf.exit137:                               ; preds = %__internal_fmad.exit1.i121, %__internal_fmad.exit3.i126
  %s.1.i125 = phi float [ %196, %__internal_fmad.exit1.i121 ], [ %.02.i136, %__internal_fmad.exit3.i126 ], !dbg !36
  %213 = insertelement <4 x float> poison, float %s.1.i125, i64 0, !dbg !38
  %214 = insertelement <4 x float> %213, float %s.1.i106, i64 1, !dbg !38
  %215 = insertelement <4 x float> %214, float %s.1.i87, i64 2, !dbg !38
  %216 = insertelement <4 x float> %215, float %s.1.i68, i64 3, !dbg !38
  %217 = fadd <4 x float> %216, splat (float 1.000000e+00), !dbg !38
  %218 = fcmp uno <4 x float> %26, zeroinitializer, !dbg !39
  %219 = fcmp uno <4 x float> %25, zeroinitializer, !dbg !43
  %220 = fmul <4 x float> %56, %217, !dbg !45
  %221 = insertelement <4 x i1> poison, i1 %27, i64 0, !dbg !46
  %222 = shufflevector <4 x i1> %221, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !46
  %223 = select <4 x i1> %222, <4 x float> %40, <4 x float> %220, !dbg !46
  %224 = fcmp olt <4 x float> %26, %223, !dbg !47
  %225 = or <4 x i1> %218, %224, !dbg !48
  %226 = select <4 x i1> %225, <4 x float> %26, <4 x float> %223, !dbg !49
  %227 = select <4 x i1> %23, <4 x float> %226, <4 x float> %26, !dbg !50
  %228 = fcmp ogt <4 x float> %25, %223, !dbg !51
  %229 = or <4 x i1> %219, %228, !dbg !52
  %230 = select <4 x i1> %229, <4 x float> %25, <4 x float> %223, !dbg !53
  %231 = select <4 x i1> %23, <4 x float> %230, <4 x float> %25, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !18
  %232 = icmp samesign ult i64 %indvars.iv, 15352, !dbg !18
  br i1 %232, label %24, label %233, !dbg !18

233:                                              ; preds = %__nv_tanhf.exit137
  %234 = icmp eq i32 %12, 0, !dbg !11
  %235 = and i32 %11, 63, !dbg !11
  %236 = or disjoint i32 %10, %235, !dbg !12
  %237 = icmp slt i32 %236, 4112, !dbg !13
  %238 = extractelement <4 x float> %227, i64 2, !dbg !54
  %239 = extractelement <4 x float> %227, i64 3, !dbg !54
  %240 = fcmp olt float %239, %238, !dbg !54
  %241 = fcmp uno float %239, 0.000000e+00, !dbg !57
  %242 = or i1 %240, %241, !dbg !58
  %243 = select i1 %242, float %239, float %238, !dbg !59
  %244 = extractelement <4 x float> %227, i64 1, !dbg !54
  %245 = fcmp olt float %243, %244, !dbg !54
  %246 = fcmp uno float %243, 0.000000e+00, !dbg !57
  %247 = or i1 %245, %246, !dbg !58
  %248 = select i1 %247, float %243, float %244, !dbg !59
  %249 = extractelement <4 x float> %227, i64 0, !dbg !54
  %250 = fcmp olt float %248, %249, !dbg !54
  %251 = fcmp uno float %248, 0.000000e+00, !dbg !57
  %252 = or i1 %250, %251, !dbg !58
  %253 = select i1 %252, float %248, float %249, !dbg !59
  %254 = bitcast float %253 to i32, !dbg !60
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !60
  %256 = bitcast i32 %255 to float, !dbg !60
  %257 = fcmp olt float %253, %256, !dbg !54
  %258 = fcmp uno float %253, 0.000000e+00, !dbg !57
  %259 = or i1 %258, %257, !dbg !58
  %260 = select i1 %259, float %253, float %256, !dbg !59
  %261 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !61
  %262 = bitcast float %260 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %263 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %235, !dbg !61
  %264 = load float, ptr addrspace(3) %263, align 4, !dbg !61
  %265 = extractelement <4 x float> %231, i64 2, !dbg !62
  %266 = extractelement <4 x float> %231, i64 3, !dbg !62
  %267 = fcmp ogt float %266, %265, !dbg !62
  %268 = fcmp uno float %266, 0.000000e+00, !dbg !64
  %269 = or i1 %267, %268, !dbg !65
  %270 = select i1 %269, float %266, float %265, !dbg !66
  %271 = extractelement <4 x float> %231, i64 1, !dbg !62
  %272 = fcmp ogt float %270, %271, !dbg !62
  %273 = fcmp uno float %270, 0.000000e+00, !dbg !64
  %274 = or i1 %272, %273, !dbg !65
  %275 = select i1 %274, float %270, float %271, !dbg !66
  %276 = extractelement <4 x float> %231, i64 0, !dbg !62
  %277 = fcmp ogt float %275, %276, !dbg !62
  %278 = fcmp uno float %275, 0.000000e+00, !dbg !64
  %279 = or i1 %277, %278, !dbg !65
  %280 = select i1 %279, float %275, float %276, !dbg !66
  %281 = bitcast float %280 to i32, !dbg !67
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 1, i32 31), !dbg !67
  %283 = bitcast i32 %282 to float, !dbg !67
  %284 = fcmp ogt float %280, %283, !dbg !62
  %285 = fcmp uno float %280, 0.000000e+00, !dbg !64
  %286 = or i1 %285, %284, !dbg !65
  %287 = select i1 %286, float %280, float %283, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %288 = bitcast float %287 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %288, i1 true) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %289 = load float, ptr addrspace(3) %263, align 4, !dbg !68
  %290 = sext i32 %236 to i64, !dbg !69
  %291 = getelementptr bfloat, ptr addrspace(1) %2, i64 %290, !dbg !69
  %292 = fptrunc float %264 to bfloat, !dbg !61
  %293 = bitcast bfloat %292 to i16, !dbg !61
  %294 = and i1 %234, %237, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %293, ptr addrspace(1) %291, i1 %294) #5, !dbg !61
  %295 = getelementptr bfloat, ptr addrspace(1) %3, i64 %290, !dbg !70
  %296 = fptrunc float %289 to bfloat, !dbg !68
  %297 = bitcast bfloat %296 to i16, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %297, ptr addrspace(1) %295, i1 %294) #5, !dbg !68
  %.inv = fcmp oge float %260, 0.000000e+00, !dbg !71
  %298 = select i1 %.inv, float 0.000000e+00, float %260, !dbg !71
  %299 = fsub float 0.000000e+00, %298, !dbg !73
  %.inv4 = fcmp ole float %287, 0.000000e+00, !dbg !74
  %300 = select i1 %.inv4, float 0.000000e+00, float %287, !dbg !74
  %301 = fcmp ogt float %299, %300, !dbg !76
  %302 = fcmp uno float %299, 0.000000e+00, !dbg !78
  %303 = or i1 %302, %301, !dbg !79
  %304 = select i1 %303, float %299, float %300, !dbg !80
  %305 = fmul float %304, 0x3F80204080000000, !dbg !81
  %306 = fcmp ogt float %305, 0x3EE4F8B580000000, !dbg !82
  %307 = fcmp uno float %305, 0.000000e+00, !dbg !84
  %308 = or i1 %306, %307, !dbg !85
  %309 = select i1 %308, float %305, float 0x3EE4F8B580000000, !dbg !86
  %310 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %309), !dbg !87
  %311 = mul i32 %15, 15360, !dbg !88
  br label %312, !dbg !89

312:                                              ; preds = %233, %__nv_tanhf.exit61
  %indvars.iv146 = phi i64 [ 0, %233 ], [ %indvars.iv.next147, %__nv_tanhf.exit61 ]
  %313 = icmp samesign ult i64 %indvars.iv146, 3072, !dbg !90
  %314 = trunc i64 %indvars.iv146 to i32, !dbg !91
  %315 = or disjoint i32 %18, %314, !dbg !91
  %316 = add i32 %315, %19, !dbg !91
  %317 = sext i32 %316 to i64, !dbg !92
  %318 = getelementptr bfloat, ptr addrspace(1) %0, i64 %317, !dbg !92
  %319 = and i1 %16, %313, !dbg !93
  %320 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %318, i1 %319) #5, !dbg !94
  %321 = extractvalue { i32, i32 } %320, 0, !dbg !94
  %322 = bitcast i32 %321 to <2 x bfloat>, !dbg !94
  %323 = extractvalue { i32, i32 } %320, 1, !dbg !94
  %324 = bitcast i32 %323 to <2 x bfloat>, !dbg !94
  %325 = extractelement <2 x bfloat> %322, i64 0, !dbg !94
  %326 = extractelement <2 x bfloat> %322, i64 1, !dbg !94
  %327 = extractelement <2 x bfloat> %324, i64 0, !dbg !94
  %328 = extractelement <2 x bfloat> %324, i64 1, !dbg !94
  %329 = fpext bfloat %325 to float, !dbg !95
  %330 = fpext bfloat %326 to float, !dbg !95
  %331 = fpext bfloat %327 to float, !dbg !95
  %332 = fpext bfloat %328 to float, !dbg !95
  %333 = icmp samesign ugt i64 %indvars.iv146, 3071, !dbg !96
  %334 = add i32 %21, %315, !dbg !97
  %335 = sext i32 %334 to i64, !dbg !98
  %336 = getelementptr float, ptr addrspace(1) %1, i64 %335, !dbg !98
  %337 = and i1 %16, %333, !dbg !99
  %338 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %336, i1 %337) #5, !dbg !100
  %339 = extractvalue { i32, i32, i32, i32 } %338, 0, !dbg !100
  %340 = extractvalue { i32, i32, i32, i32 } %338, 1, !dbg !100
  %341 = extractvalue { i32, i32, i32, i32 } %338, 2, !dbg !100
  %342 = extractvalue { i32, i32, i32, i32 } %338, 3, !dbg !100
  %343 = bitcast i32 %339 to float, !dbg !100
  %344 = bitcast i32 %340 to float, !dbg !100
  %345 = bitcast i32 %341 to float, !dbg !100
  %346 = bitcast i32 %342 to float, !dbg !100
  %347 = fmul float %343, 5.000000e-01, !dbg !101
  %348 = fmul float %344, 5.000000e-01, !dbg !101
  %349 = fmul float %345, 5.000000e-01, !dbg !101
  %350 = fmul float %346, 5.000000e-01, !dbg !101
  %351 = fmul float %343, %343, !dbg !102
  %352 = fmul float %344, %344, !dbg !102
  %353 = fmul float %345, %345, !dbg !102
  %354 = fmul float %346, %346, !dbg !102
  %355 = fmul float %351, %343, !dbg !103
  %356 = fmul float %352, %344, !dbg !103
  %357 = fmul float %353, %345, !dbg !103
  %358 = fmul float %354, %346, !dbg !103
  %359 = fmul float %355, 0x3FA6E4E260000000, !dbg !104
  %360 = fmul float %356, 0x3FA6E4E260000000, !dbg !104
  %361 = fmul float %357, 0x3FA6E4E260000000, !dbg !104
  %362 = fmul float %358, 0x3FA6E4E260000000, !dbg !104
  %363 = fadd float %359, %343, !dbg !105
  %364 = fadd float %360, %344, !dbg !105
  %365 = fadd float %361, %345, !dbg !105
  %366 = fadd float %362, %346, !dbg !105
  %367 = fmul float %363, 0x3FE9884540000000, !dbg !106
  %368 = fmul float %364, 0x3FE9884540000000, !dbg !106
  %369 = fmul float %365, 0x3FE9884540000000, !dbg !106
  %370 = fmul float %366, 0x3FE9884540000000, !dbg !106
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i = icmp eq i32 %371, 0, !dbg !107
  %372 = tail call float @llvm.nvvm.fabs.ftz.f(float %367) #5, !dbg !107
  %373 = tail call float @llvm.nvvm.fabs.f(float %367) #5, !dbg !107
  %.01.i = select i1 %.not.i, float %373, float %372, !dbg !107
  %374 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !107
  br i1 %374, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !107

__internal_fmad.exit1.i:                          ; preds = %312
  %375 = fmul float %.01.i, 0x4007154760000000, !dbg !107
  %376 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %375) #5, !dbg !107
  %377 = fadd float %376, 1.000000e+00, !dbg !107
  %378 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %377) #6, !dbg !107, !srcloc !37
  %379 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i = icmp eq i32 %379, 0, !dbg !107
  %380 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %378, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %381 = tail call float @llvm.nvvm.fma.rn.f(float %378, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i = select i1 %.not6.i, float %381, float %380, !dbg !107
  %382 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !107
  %s.0.i = select i1 %382, float 1.000000e+00, float %.03.i, !dbg !107
  %383 = bitcast float %s.0.i to i32, !dbg !107
  %384 = bitcast float %367 to i32, !dbg !107
  %385 = and i32 %384, -2147483648, !dbg !107
  %386 = or i32 %385, %383, !dbg !107
  %387 = bitcast i32 %386 to float, !dbg !107
  br label %__nv_tanhf.exit, !dbg !107

__internal_fmad.exit3.i:                          ; preds = %312
  %388 = fmul float %367, %367, !dbg !107
  %389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i = icmp eq i32 %389, 0, !dbg !107
  %390 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %388, float 0xBFAAC795C0000000) #5, !dbg !107
  %391 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %388, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i = select i1 %.not1.i, float %391, float %390, !dbg !107
  %392 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i = icmp eq i32 %392, 0, !dbg !107
  %393 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %388, float 0x3FC10B2820000000) #5, !dbg !107
  %394 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %388, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i = select i1 %.not2.i, float %394, float %393, !dbg !107
  %395 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i = icmp eq i32 %395, 0, !dbg !107
  %396 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %388, float 0xBFD5553DA0000000) #5, !dbg !107
  %397 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %388, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i = select i1 %.not3.i, float %397, float %396, !dbg !107
  %398 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i = icmp eq i32 %398, 0, !dbg !107
  %399 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %388, float 0.000000e+00) #5, !dbg !107
  %400 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %388, float 0.000000e+00) #5, !dbg !107
  %.04.i = select i1 %.not4.i, float %400, float %399, !dbg !107
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i = icmp eq i32 %401, 0, !dbg !107
  %402 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %367, float %367) #5, !dbg !107
  %403 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %367, float %367) #5, !dbg !107
  %.02.i = select i1 %.not5.i, float %403, float %402, !dbg !107
  br label %__nv_tanhf.exit, !dbg !107

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %387, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !107
  %404 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i5 = icmp eq i32 %404, 0, !dbg !107
  %405 = tail call float @llvm.nvvm.fabs.ftz.f(float %368) #5, !dbg !107
  %406 = tail call float @llvm.nvvm.fabs.f(float %368) #5, !dbg !107
  %.01.i6 = select i1 %.not.i5, float %406, float %405, !dbg !107
  %407 = fcmp ult float %.01.i6, 0x3FE3333340000000, !dbg !107
  br i1 %407, label %__internal_fmad.exit3.i12, label %__internal_fmad.exit1.i7, !dbg !107

__internal_fmad.exit1.i7:                         ; preds = %__nv_tanhf.exit
  %408 = fmul float %.01.i6, 0x4007154760000000, !dbg !107
  %409 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %408) #5, !dbg !107
  %410 = fadd float %409, 1.000000e+00, !dbg !107
  %411 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %410) #6, !dbg !107, !srcloc !37
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i8 = icmp eq i32 %412, 0, !dbg !107
  %413 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %411, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %414 = tail call float @llvm.nvvm.fma.rn.f(float %411, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i9 = select i1 %.not6.i8, float %414, float %413, !dbg !107
  %415 = fcmp oge float %.01.i6, 0x4022059680000000, !dbg !107
  %s.0.i10 = select i1 %415, float 1.000000e+00, float %.03.i9, !dbg !107
  %416 = bitcast float %s.0.i10 to i32, !dbg !107
  %417 = bitcast float %368 to i32, !dbg !107
  %418 = and i32 %417, -2147483648, !dbg !107
  %419 = or i32 %418, %416, !dbg !107
  %420 = bitcast i32 %419 to float, !dbg !107
  br label %__nv_tanhf.exit23, !dbg !107

__internal_fmad.exit3.i12:                        ; preds = %__nv_tanhf.exit
  %421 = fmul float %368, %368, !dbg !107
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i13 = icmp eq i32 %422, 0, !dbg !107
  %423 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %421, float 0xBFAAC795C0000000) #5, !dbg !107
  %424 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %421, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i14 = select i1 %.not1.i13, float %424, float %423, !dbg !107
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i15 = icmp eq i32 %425, 0, !dbg !107
  %426 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i14, float %421, float 0x3FC10B2820000000) #5, !dbg !107
  %427 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i14, float %421, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i16 = select i1 %.not2.i15, float %427, float %426, !dbg !107
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i17 = icmp eq i32 %428, 0, !dbg !107
  %429 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i16, float %421, float 0xBFD5553DA0000000) #5, !dbg !107
  %430 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i16, float %421, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i18 = select i1 %.not3.i17, float %430, float %429, !dbg !107
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i19 = icmp eq i32 %431, 0, !dbg !107
  %432 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i18, float %421, float 0.000000e+00) #5, !dbg !107
  %433 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i18, float %421, float 0.000000e+00) #5, !dbg !107
  %.04.i20 = select i1 %.not4.i19, float %433, float %432, !dbg !107
  %434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i21 = icmp eq i32 %434, 0, !dbg !107
  %435 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i20, float %368, float %368) #5, !dbg !107
  %436 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i20, float %368, float %368) #5, !dbg !107
  %.02.i22 = select i1 %.not5.i21, float %436, float %435, !dbg !107
  br label %__nv_tanhf.exit23, !dbg !107

__nv_tanhf.exit23:                                ; preds = %__internal_fmad.exit1.i7, %__internal_fmad.exit3.i12
  %s.1.i11 = phi float [ %420, %__internal_fmad.exit1.i7 ], [ %.02.i22, %__internal_fmad.exit3.i12 ], !dbg !107
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i24 = icmp eq i32 %437, 0, !dbg !107
  %438 = tail call float @llvm.nvvm.fabs.ftz.f(float %369) #5, !dbg !107
  %439 = tail call float @llvm.nvvm.fabs.f(float %369) #5, !dbg !107
  %.01.i25 = select i1 %.not.i24, float %439, float %438, !dbg !107
  %440 = fcmp ult float %.01.i25, 0x3FE3333340000000, !dbg !107
  br i1 %440, label %__internal_fmad.exit3.i31, label %__internal_fmad.exit1.i26, !dbg !107

__internal_fmad.exit1.i26:                        ; preds = %__nv_tanhf.exit23
  %441 = fmul float %.01.i25, 0x4007154760000000, !dbg !107
  %442 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %441) #5, !dbg !107
  %443 = fadd float %442, 1.000000e+00, !dbg !107
  %444 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %443) #6, !dbg !107, !srcloc !37
  %445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i27 = icmp eq i32 %445, 0, !dbg !107
  %446 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %444, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %447 = tail call float @llvm.nvvm.fma.rn.f(float %444, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i28 = select i1 %.not6.i27, float %447, float %446, !dbg !107
  %448 = fcmp oge float %.01.i25, 0x4022059680000000, !dbg !107
  %s.0.i29 = select i1 %448, float 1.000000e+00, float %.03.i28, !dbg !107
  %449 = bitcast float %s.0.i29 to i32, !dbg !107
  %450 = bitcast float %369 to i32, !dbg !107
  %451 = and i32 %450, -2147483648, !dbg !107
  %452 = or i32 %451, %449, !dbg !107
  %453 = bitcast i32 %452 to float, !dbg !107
  br label %__nv_tanhf.exit42, !dbg !107

__internal_fmad.exit3.i31:                        ; preds = %__nv_tanhf.exit23
  %454 = fmul float %369, %369, !dbg !107
  %455 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i32 = icmp eq i32 %455, 0, !dbg !107
  %456 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %454, float 0xBFAAC795C0000000) #5, !dbg !107
  %457 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %454, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i33 = select i1 %.not1.i32, float %457, float %456, !dbg !107
  %458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i34 = icmp eq i32 %458, 0, !dbg !107
  %459 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i33, float %454, float 0x3FC10B2820000000) #5, !dbg !107
  %460 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i33, float %454, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i35 = select i1 %.not2.i34, float %460, float %459, !dbg !107
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i36 = icmp eq i32 %461, 0, !dbg !107
  %462 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i35, float %454, float 0xBFD5553DA0000000) #5, !dbg !107
  %463 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i35, float %454, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i37 = select i1 %.not3.i36, float %463, float %462, !dbg !107
  %464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i38 = icmp eq i32 %464, 0, !dbg !107
  %465 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i37, float %454, float 0.000000e+00) #5, !dbg !107
  %466 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i37, float %454, float 0.000000e+00) #5, !dbg !107
  %.04.i39 = select i1 %.not4.i38, float %466, float %465, !dbg !107
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i40 = icmp eq i32 %467, 0, !dbg !107
  %468 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i39, float %369, float %369) #5, !dbg !107
  %469 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i39, float %369, float %369) #5, !dbg !107
  %.02.i41 = select i1 %.not5.i40, float %469, float %468, !dbg !107
  br label %__nv_tanhf.exit42, !dbg !107

__nv_tanhf.exit42:                                ; preds = %__internal_fmad.exit1.i26, %__internal_fmad.exit3.i31
  %s.1.i30 = phi float [ %453, %__internal_fmad.exit1.i26 ], [ %.02.i41, %__internal_fmad.exit3.i31 ], !dbg !107
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i43 = icmp eq i32 %470, 0, !dbg !107
  %471 = tail call float @llvm.nvvm.fabs.ftz.f(float %370) #5, !dbg !107
  %472 = tail call float @llvm.nvvm.fabs.f(float %370) #5, !dbg !107
  %.01.i44 = select i1 %.not.i43, float %472, float %471, !dbg !107
  %473 = fcmp ult float %.01.i44, 0x3FE3333340000000, !dbg !107
  br i1 %473, label %__internal_fmad.exit3.i50, label %__internal_fmad.exit1.i45, !dbg !107

__internal_fmad.exit1.i45:                        ; preds = %__nv_tanhf.exit42
  %474 = fmul float %.01.i44, 0x4007154760000000, !dbg !107
  %475 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %474) #5, !dbg !107
  %476 = fadd float %475, 1.000000e+00, !dbg !107
  %477 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %476) #6, !dbg !107, !srcloc !37
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i46 = icmp eq i32 %478, 0, !dbg !107
  %479 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %477, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %480 = tail call float @llvm.nvvm.fma.rn.f(float %477, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i47 = select i1 %.not6.i46, float %480, float %479, !dbg !107
  %481 = fcmp oge float %.01.i44, 0x4022059680000000, !dbg !107
  %s.0.i48 = select i1 %481, float 1.000000e+00, float %.03.i47, !dbg !107
  %482 = bitcast float %s.0.i48 to i32, !dbg !107
  %483 = bitcast float %370 to i32, !dbg !107
  %484 = and i32 %483, -2147483648, !dbg !107
  %485 = or i32 %484, %482, !dbg !107
  %486 = bitcast i32 %485 to float, !dbg !107
  br label %__nv_tanhf.exit61, !dbg !107

__internal_fmad.exit3.i50:                        ; preds = %__nv_tanhf.exit42
  %487 = fmul float %370, %370, !dbg !107
  %488 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i51 = icmp eq i32 %488, 0, !dbg !107
  %489 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %487, float 0xBFAAC795C0000000) #5, !dbg !107
  %490 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %487, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i52 = select i1 %.not1.i51, float %490, float %489, !dbg !107
  %491 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i53 = icmp eq i32 %491, 0, !dbg !107
  %492 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i52, float %487, float 0x3FC10B2820000000) #5, !dbg !107
  %493 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i52, float %487, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i54 = select i1 %.not2.i53, float %493, float %492, !dbg !107
  %494 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i55 = icmp eq i32 %494, 0, !dbg !107
  %495 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i54, float %487, float 0xBFD5553DA0000000) #5, !dbg !107
  %496 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i54, float %487, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i56 = select i1 %.not3.i55, float %496, float %495, !dbg !107
  %497 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i57 = icmp eq i32 %497, 0, !dbg !107
  %498 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i56, float %487, float 0.000000e+00) #5, !dbg !107
  %499 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i56, float %487, float 0.000000e+00) #5, !dbg !107
  %.04.i58 = select i1 %.not4.i57, float %499, float %498, !dbg !107
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i59 = icmp eq i32 %500, 0, !dbg !107
  %501 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i58, float %370, float %370) #5, !dbg !107
  %502 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i58, float %370, float %370) #5, !dbg !107
  %.02.i60 = select i1 %.not5.i59, float %502, float %501, !dbg !107
  br label %__nv_tanhf.exit61, !dbg !107

__nv_tanhf.exit61:                                ; preds = %__internal_fmad.exit1.i45, %__internal_fmad.exit3.i50
  %s.1.i49 = phi float [ %486, %__internal_fmad.exit1.i45 ], [ %.02.i60, %__internal_fmad.exit3.i50 ], !dbg !107
  %503 = fadd float %s.1.i, 1.000000e+00, !dbg !108
  %504 = fadd float %s.1.i11, 1.000000e+00, !dbg !108
  %505 = fadd float %s.1.i30, 1.000000e+00, !dbg !108
  %506 = fadd float %s.1.i49, 1.000000e+00, !dbg !108
  %507 = fmul float %347, %503, !dbg !109
  %508 = fmul float %348, %504, !dbg !109
  %509 = fmul float %349, %505, !dbg !109
  %510 = fmul float %350, %506, !dbg !109
  %511 = select i1 %313, float %329, float %507, !dbg !110
  %512 = select i1 %313, float %330, float %508, !dbg !110
  %513 = select i1 %313, float %331, float %509, !dbg !110
  %514 = select i1 %313, float %332, float %510, !dbg !110
  %515 = fmul float %310, %511, !dbg !111
  %516 = fmul float %310, %512, !dbg !111
  %517 = fmul float %310, %513, !dbg !111
  %518 = fmul float %310, %514, !dbg !111
  %519 = tail call float @llvm.nvvm.round.f(float %515) #5, !dbg !112
  %520 = tail call float @llvm.nvvm.round.f(float %516) #5, !dbg !112
  %521 = tail call float @llvm.nvvm.round.f(float %517) #5, !dbg !112
  %522 = tail call float @llvm.nvvm.round.f(float %518) #5, !dbg !112
  %523 = insertelement <4 x float> poison, float %519, i64 0, !dbg !113
  %524 = insertelement <4 x float> %523, float %520, i64 1, !dbg !113
  %525 = insertelement <4 x float> %524, float %521, i64 2, !dbg !113
  %526 = insertelement <4 x float> %525, float %522, i64 3, !dbg !113
  %527 = fcmp ogt <4 x float> %526, splat (float -1.270000e+02), !dbg !113
  %528 = fcmp uno <4 x float> %526, zeroinitializer, !dbg !115
  %529 = or <4 x i1> %527, %528, !dbg !116
  %530 = select <4 x i1> %529, <4 x float> %526, <4 x float> splat (float -1.270000e+02), !dbg !117
  %531 = fcmp olt <4 x float> %530, splat (float 1.270000e+02), !dbg !118
  %532 = fcmp uno <4 x float> %530, zeroinitializer, !dbg !120
  %533 = or <4 x i1> %531, %532, !dbg !121
  %534 = fptosi <4 x float> %530 to <4 x i8>, !dbg !122
  %535 = select <4 x i1> %533, <4 x i8> %534, <4 x i8> splat (i8 127), !dbg !123
  %536 = add i32 %315, %311, !dbg !124
  %537 = sext i32 %536 to i64, !dbg !125
  %538 = getelementptr i8, ptr addrspace(1) %4, i64 %537, !dbg !125
  %539 = bitcast <4 x i8> %535 to i32, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %539, ptr addrspace(1) %538, i1 %16) #5, !dbg !126
  %indvars.iv.next147 = add nuw nsw i64 %indvars.iv146, 8, !dbg !89
  %540 = icmp samesign ult i64 %indvars.iv146, 15352, !dbg !89
  br i1 %540, label %312, label %541, !dbg !89

541:                                              ; preds = %__nv_tanhf.exit61
  ret void, !dbg !127
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctv732aq76geyr7p3gclneox6hl2lefctbk4uxv56pawut6us5co.py", directory: "/tmp/torchinductor_root/tv")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", linkageName: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 42, column: 39, scope: !6)
!16 = !DILocation(line: 46, column: 40, scope: !6)
!17 = !DILocation(line: 68, column: 50, scope: !6)
!18 = !DILocation(line: 31, column: 40, scope: !6)
!19 = !DILocation(line: 41, column: 22, scope: !6)
!20 = !DILocation(line: 42, column: 45, scope: !6)
!21 = !DILocation(line: 42, column: 34, scope: !6)
!22 = !DILocation(line: 42, column: 71, scope: !6)
!23 = !DILocation(line: 42, column: 53, scope: !6)
!24 = !DILocation(line: 42, column: 121, scope: !6)
!25 = !DILocation(line: 43, column: 23, scope: !6)
!26 = !DILocation(line: 46, column: 46, scope: !6)
!27 = !DILocation(line: 46, column: 34, scope: !6)
!28 = !DILocation(line: 46, column: 82, scope: !6)
!29 = !DILocation(line: 46, column: 64, scope: !6)
!30 = !DILocation(line: 48, column: 23, scope: !6)
!31 = !DILocation(line: 49, column: 23, scope: !6)
!32 = !DILocation(line: 50, column: 24, scope: !6)
!33 = !DILocation(line: 52, column: 24, scope: !6)
!34 = !DILocation(line: 53, column: 23, scope: !6)
!35 = !DILocation(line: 55, column: 24, scope: !6)
!36 = !DILocation(line: 56, column: 31, scope: !6)
!37 = !{i32 21046}
!38 = !DILocation(line: 58, column: 24, scope: !6)
!39 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !6, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 65, column: 47, scope: !6)
!43 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !44)
!44 = !DILocation(line: 67, column: 47, scope: !6)
!45 = !DILocation(line: 59, column: 24, scope: !6)
!46 = !DILocation(line: 63, column: 37, scope: !6)
!47 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !42)
!48 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !42)
!49 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !42)
!50 = !DILocation(line: 66, column: 50, scope: !6)
!51 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !44)
!52 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !44)
!53 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !44)
!54 = !DILocation(line: 94, column: 15, scope: !55, inlinedAt: !56)
!55 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!56 = !DILocation(line: 69, column: 40, scope: !6)
!57 = !DILocation(line: 96, column: 21, scope: !55, inlinedAt: !56)
!58 = !DILocation(line: 96, column: 16, scope: !55, inlinedAt: !56)
!59 = !DILocation(line: 97, column: 29, scope: !55, inlinedAt: !56)
!60 = !DILocation(line: 110, column: 29, scope: !40, inlinedAt: !56)
!61 = !DILocation(line: 71, column: 37, scope: !6)
!62 = !DILocation(line: 102, column: 15, scope: !55, inlinedAt: !63)
!63 = !DILocation(line: 70, column: 40, scope: !6)
!64 = !DILocation(line: 104, column: 21, scope: !55, inlinedAt: !63)
!65 = !DILocation(line: 104, column: 16, scope: !55, inlinedAt: !63)
!66 = !DILocation(line: 105, column: 29, scope: !55, inlinedAt: !63)
!67 = !DILocation(line: 115, column: 29, scope: !40, inlinedAt: !63)
!68 = !DILocation(line: 72, column: 37, scope: !6)
!69 = !DILocation(line: 71, column: 25, scope: !6)
!70 = !DILocation(line: 72, column: 25, scope: !6)
!71 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !72)
!72 = !DILocation(line: 107, column: 46, scope: !6)
!73 = !DILocation(line: 108, column: 17, scope: !6)
!74 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !75)
!75 = !DILocation(line: 109, column: 46, scope: !6)
!76 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !77)
!77 = !DILocation(line: 110, column: 46, scope: !6)
!78 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !77)
!79 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !77)
!80 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !77)
!81 = !DILocation(line: 112, column: 24, scope: !6)
!82 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !83)
!83 = !DILocation(line: 115, column: 46, scope: !6)
!84 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !83)
!85 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !83)
!86 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 25, scope: !6)
!88 = !DILocation(line: 130, column: 42, scope: !6)
!89 = !DILocation(line: 73, column: 40, scope: !6)
!90 = !DILocation(line: 83, column: 24, scope: !6)
!91 = !DILocation(line: 84, column: 46, scope: !6)
!92 = !DILocation(line: 84, column: 35, scope: !6)
!93 = !DILocation(line: 84, column: 72, scope: !6)
!94 = !DILocation(line: 84, column: 54, scope: !6)
!95 = !DILocation(line: 84, column: 123, scope: !6)
!96 = !DILocation(line: 85, column: 25, scope: !6)
!97 = !DILocation(line: 88, column: 47, scope: !6)
!98 = !DILocation(line: 88, column: 35, scope: !6)
!99 = !DILocation(line: 88, column: 83, scope: !6)
!100 = !DILocation(line: 88, column: 65, scope: !6)
!101 = !DILocation(line: 90, column: 24, scope: !6)
!102 = !DILocation(line: 91, column: 24, scope: !6)
!103 = !DILocation(line: 92, column: 24, scope: !6)
!104 = !DILocation(line: 94, column: 24, scope: !6)
!105 = !DILocation(line: 95, column: 24, scope: !6)
!106 = !DILocation(line: 97, column: 24, scope: !6)
!107 = !DILocation(line: 98, column: 31, scope: !6)
!108 = !DILocation(line: 100, column: 24, scope: !6)
!109 = !DILocation(line: 101, column: 24, scope: !6)
!110 = !DILocation(line: 105, column: 39, scope: !6)
!111 = !DILocation(line: 121, column: 24, scope: !6)
!112 = !DILocation(line: 122, column: 36, scope: !6)
!113 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !114)
!114 = !DILocation(line: 125, column: 46, scope: !6)
!115 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !114)
!116 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !114)
!117 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !114)
!118 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !119)
!119 = !DILocation(line: 127, column: 46, scope: !6)
!120 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !119)
!121 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !119)
!122 = !DILocation(line: 129, column: 25, scope: !6)
!123 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !119)
!124 = !DILocation(line: 130, column: 36, scope: !6)
!125 = !DILocation(line: 130, column: 29, scope: !6)
!126 = !DILocation(line: 130, column: 54, scope: !6)
!127 = !DILocation(line: 73, column: 4, scope: !6)
