#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":18:0)
#loc1 = loc(unknown)
#loc68 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":170:28)
#loc69 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":82:35)
#loc77 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":173:58)
#loc142 = loc(callsite(#loc1 at #loc68))
#loc154 = loc(callsite(#loc1 at #loc77))
#loc165 = loc(callsite(#loc142 at #loc69))
#loc172 = loc(callsite(#loc154 at #loc69))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 2 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__softmax__to_copy_add_2(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":18:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":18:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":18:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0xFF800000> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<15> : tensor<1x256xi64, #blocked1> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<32> : tensor<1x256xi64, #blocked1> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_5 = arith.constant dense<8.000000e+00> : tensor<1x256xf32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<0.360673755> : tensor<1x256xf32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<1.250000e-01> : tensor<1x256xf32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<8> : tensor<1x256xi64, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<16> : tensor<1x256xi64, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<0> : tensor<1x256xi64, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<0.000000e+00> : tensor<1x256xbf16, #blocked2> loc(#loc1)
    %cst_12 = arith.constant dense<true> : tensor<1x256xi1, #blocked1> loc(#loc1)
    %cst_13 = arith.constant dense<512> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_14 = arith.constant dense<512> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<512> : tensor<1x256xi32, #blocked2> loc(#loc1)
    %cst_16 = arith.constant dense<0> : tensor<1x256xi64, #blocked> loc(#loc1)
    %cst_17 = arith.constant dense<16> : tensor<1x256xi64, #blocked> loc(#loc1)
    %cst_18 = arith.constant dense<8> : tensor<1x256xi64, #blocked> loc(#loc1)
    %cst_19 = arith.constant dense<1.250000e-01> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_20 = arith.constant dense<0.360673755> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_21 = arith.constant dense<8.000000e+00> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_22 = arith.constant dense<64> : tensor<1x256xi64, #blocked> loc(#loc1)
    %cst_23 = arith.constant dense<32> : tensor<1x256xi64, #blocked> loc(#loc1)
    %cst_24 = arith.constant dense<15> : tensor<1x256xi64, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc3)
    %3 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc3)
    %4 = tt.expand_dims %1 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc3)
    %5 = tt.expand_dims %2 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc3)
    %6 = tt.expand_dims %3 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc3)
    %7 = arith.remsi %0, %c512_i32 : i32 loc(#loc4)
    %8 = arith.divsi %0, %c512_i32 : i32 loc(#loc5)
    %9 = arith.muli %0, %c512_i32 : i32 loc(#loc6)
    %10 = tt.splat %9 : i32 -> tensor<1x256xi32, #blocked2> loc(#loc124)
    %11 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<1x256x!tt.ptr<bf16>, #blocked2> loc(#loc8)
    %12 = arith.muli %7, %c-1_i32 : i32 loc(#loc9)
    %13 = tt.splat %12 : i32 -> tensor<1x256xi32, #blocked> loc(#loc125)
    %14 = tt.splat %12 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc125)
    %15 = arith.extsi %8 : i32 to i64 loc(#loc11)
    %16 = tt.splat %15 : i64 -> tensor<1x256xi64, #blocked> loc(#loc11)
    %17 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<1x256x!tt.ptr<bf16>, #blocked> loc(#loc12)
    %18:2 = scf.for %arg5 = %c0_i32 to %c512_i32 step %c256_i32 iter_args(%arg6 = %cst, %arg7 = %cst_0) -> (tensor<1x256xf32, #blocked>, tensor<1x256xf32, #blocked>)  : i32 {
      %32 = tt.splat %arg5 : i32 -> tensor<1x256xi32, #blocked> loc(#loc14)
      %33 = tt.splat %arg5 : i32 -> tensor<1x256xi32, #blocked2> loc(#loc14)
      %34 = tt.splat %arg5 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc14)
      %35 = arith.addi %32, %4 : tensor<1x256xi32, #blocked> loc(#loc14)
      %36 = arith.addi %33, %5 : tensor<1x256xi32, #blocked2> loc(#loc14)
      %37 = arith.addi %34, %6 : tensor<1x256xi32, #blocked1> loc(#loc14)
      %38 = arith.cmpi slt, %35, %cst_14 : tensor<1x256xi32, #blocked> loc(#loc15)
      %39 = arith.cmpi slt, %36, %cst_15 : tensor<1x256xi32, #blocked2> loc(#loc15)
      %40 = arith.cmpi slt, %37, %cst_13 : tensor<1x256xi32, #blocked1> loc(#loc15)
      %41 = arith.addi %36, %10 : tensor<1x256xi32, #blocked2> loc(#loc7)
      %42 = tt.addptr %11, %41 : tensor<1x256x!tt.ptr<bf16>, #blocked2>, tensor<1x256xi32, #blocked2> loc(#loc8)
      %43 = tt.load %42, %39, %cst_11 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<bf16>, #blocked2> loc(#loc16)
      %44 = ttg.convert_layout %43 : tensor<1x256xbf16, #blocked2> -> tensor<1x256xbf16, #blocked> loc(#loc17)
      %45 = arith.extf %44 : tensor<1x256xbf16, #blocked> to tensor<1x256xf32, #blocked> loc(#loc17)
      %46 = arith.addi %35, %13 : tensor<1x256xi32, #blocked> loc(#loc10)
      %47 = arith.addi %37, %14 : tensor<1x256xi32, #blocked1> loc(#loc10)
      %48 = arith.extsi %46 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc18)
      %49 = arith.extsi %47 : tensor<1x256xi32, #blocked1> to tensor<1x256xi64, #blocked1> loc(#loc18)
      %50 = arith.cmpi sgt, %48, %cst_16 : tensor<1x256xi64, #blocked> loc(#loc18)
      %51 = arith.cmpi sgt, %49, %cst_10 : tensor<1x256xi64, #blocked1> loc(#loc18)
      %52 = arith.extui %50 : tensor<1x256xi1, #blocked> to tensor<1x256xi64, #blocked> loc(#loc19)
      %53 = arith.extui %51 : tensor<1x256xi1, #blocked1> to tensor<1x256xi64, #blocked1> loc(#loc19)
      %54 = arith.muli %52, %cst_17 : tensor<1x256xi64, #blocked> loc(#loc20)
      %55 = arith.muli %53, %cst_9 : tensor<1x256xi64, #blocked1> loc(#loc20)
      %56 = math.absi %46 : tensor<1x256xi32, #blocked> loc(#loc21)
      %57 = math.absi %47 : tensor<1x256xi32, #blocked1> loc(#loc21)
      %58 = arith.extsi %56 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc22)
      %59 = arith.extsi %57 : tensor<1x256xi32, #blocked1> to tensor<1x256xi64, #blocked1> loc(#loc22)
      %60 = arith.cmpi slt, %58, %cst_18 : tensor<1x256xi64, #blocked> loc(#loc22)
      %61 = arith.cmpi slt, %59, %cst_8 : tensor<1x256xi64, #blocked1> loc(#loc22)
      %62 = arith.sitofp %56 : tensor<1x256xi32, #blocked> to tensor<1x256xf32, #blocked> loc(#loc23)
      %63 = arith.sitofp %57 : tensor<1x256xi32, #blocked1> to tensor<1x256xf32, #blocked1> loc(#loc23)
      %64 = arith.mulf %62, %cst_19 : tensor<1x256xf32, #blocked> loc(#loc24)
      %65 = arith.mulf %63, %cst_7 : tensor<1x256xf32, #blocked1> loc(#loc24)
      %66 = math.log %64 : tensor<1x256xf32, #blocked> loc(#loc25)
      %67 = math.log %65 : tensor<1x256xf32, #blocked1> loc(#loc25)
      %68 = arith.mulf %66, %cst_20 : tensor<1x256xf32, #blocked> loc(#loc26)
      %69 = arith.mulf %67, %cst_6 : tensor<1x256xf32, #blocked1> loc(#loc26)
      %70 = arith.mulf %68, %cst_21 : tensor<1x256xf32, #blocked> loc(#loc27)
      %71 = arith.mulf %69, %cst_5 : tensor<1x256xf32, #blocked1> loc(#loc27)
      %72 = arith.fptosi %70 : tensor<1x256xf32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc28)
      %73 = arith.fptosi %71 : tensor<1x256xf32, #blocked1> to tensor<1x256xi64, #blocked1> loc(#loc28)
      %74 = arith.addi %72, %cst_18 : tensor<1x256xi64, #blocked> loc(#loc29)
      %75 = arith.addi %73, %cst_8 : tensor<1x256xi64, #blocked1> loc(#loc29)
      %76 = arith.cmpi slt, %74, %cst_24 : tensor<1x256xi64, #blocked> loc(#loc126)
      %77 = arith.cmpi slt, %75, %cst_3 : tensor<1x256xi64, #blocked1> loc(#loc126)
      %78 = arith.select %76, %74, %cst_24 : tensor<1x256xi1, #blocked>, tensor<1x256xi64, #blocked> loc(#loc127)
      %79 = arith.select %77, %75, %cst_3 : tensor<1x256xi1, #blocked1>, tensor<1x256xi64, #blocked1> loc(#loc127)
      %80 = arith.select %60, %58, %78 : tensor<1x256xi1, #blocked>, tensor<1x256xi64, #blocked> loc(#loc33)
      %81 = arith.select %61, %59, %79 : tensor<1x256xi1, #blocked1>, tensor<1x256xi64, #blocked1> loc(#loc33)
      %82 = arith.addi %54, %80 : tensor<1x256xi64, #blocked> loc(#loc34)
      %83 = arith.addi %55, %81 : tensor<1x256xi64, #blocked1> loc(#loc34)
      %84 = arith.addi %82, %cst_23 : tensor<1x256xi64, #blocked> loc(#loc35)
      %85 = arith.addi %83, %cst_4 : tensor<1x256xi64, #blocked1> loc(#loc35)
      %86 = arith.cmpi slt, %82, %cst_16 : tensor<1x256xi64, #blocked> loc(#loc36)
      %87 = arith.cmpi slt, %83, %cst_10 : tensor<1x256xi64, #blocked1> loc(#loc36)
      %88 = arith.select %86, %84, %82 : tensor<1x256xi1, #blocked>, tensor<1x256xi64, #blocked> loc(#loc37)
      %89 = arith.select %87, %85, %83 : tensor<1x256xi1, #blocked1>, tensor<1x256xi64, #blocked1> loc(#loc37)
      %90 = arith.cmpi sge, %89, %cst_10 : tensor<1x256xi64, #blocked1> loc(#loc38)
      %91 = arith.cmpi slt, %89, %cst_4 : tensor<1x256xi64, #blocked1> loc(#loc39)
      %92 = arith.andi %90, %91 : tensor<1x256xi1, #blocked1> loc(#loc40)
      %93 = arith.xori %40, %cst_12 : tensor<1x256xi1, #blocked1> loc(#loc41)
      %94 = arith.ori %92, %93 : tensor<1x256xi1, #blocked1> loc(#loc42)
      tt.assert %94, "index out of bounds: 0 <= tmp28 < 32" : tensor<1x256xi1, #blocked1> loc(#loc43)
      %95 = arith.muli %88, %cst_22 : tensor<1x256xi64, #blocked> loc(#loc44)
      %96 = arith.addi %16, %95 : tensor<1x256xi64, #blocked> loc(#loc11)
      %97 = tt.addptr %17, %96 : tensor<1x256x!tt.ptr<bf16>, #blocked>, tensor<1x256xi64, #blocked> loc(#loc12)
      %98 = tt.load %97, %38 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<bf16>, #blocked> loc(#loc45)
      %99 = arith.extf %98 : tensor<1x256xbf16, #blocked> to tensor<1x256xf32, #blocked> loc(#loc46)
      %100 = arith.addf %45, %99 : tensor<1x256xf32, #blocked> loc(#loc47)
      %101 = arith.cmpf ogt, %arg6, %100 : tensor<1x256xf32, #blocked> loc(#loc158)
      %102 = arith.cmpf une, %arg6, %arg6 : tensor<1x256xf32, #blocked> loc(#loc159)
      %103 = arith.ori %101, %102 : tensor<1x256xi1, #blocked> loc(#loc160)
      %104 = arith.select %103, %arg6, %100 : tensor<1x256xi1, #blocked>, tensor<1x256xf32, #blocked> loc(#loc161)
      %105 = arith.cmpf oeq, %104, %cst : tensor<1x256xf32, #blocked> loc(#loc132)
      %106 = arith.subf %arg6, %104 : tensor<1x256xf32, #blocked> loc(#loc133)
      %107 = math.exp %106 : tensor<1x256xf32, #blocked> loc(#loc162)
      %108 = arith.select %105, %cst_1, %107 : tensor<1x256xi1, #blocked>, tensor<1x256xf32, #blocked> loc(#loc135)
      %109 = arith.subf %100, %104 : tensor<1x256xf32, #blocked> loc(#loc136)
      %110 = math.exp %109 : tensor<1x256xf32, #blocked> loc(#loc163)
      %111 = arith.select %105, %cst_1, %110 : tensor<1x256xi1, #blocked>, tensor<1x256xf32, #blocked> loc(#loc138)
      %112 = arith.mulf %arg7, %108 : tensor<1x256xf32, #blocked> loc(#loc139)
      %113 = arith.addf %112, %111 : tensor<1x256xf32, #blocked> loc(#loc140)
      %114 = arith.select %38, %104, %arg6 : tensor<1x256xi1, #blocked>, tensor<1x256xf32, #blocked> loc(#loc64)
      %115 = arith.select %38, %113, %arg7 : tensor<1x256xi1, #blocked>, tensor<1x256xf32, #blocked> loc(#loc65)
      scf.yield %114, %115 : tensor<1x256xf32, #blocked>, tensor<1x256xf32, #blocked> loc(#loc66)
    } loc(#loc13)
    %19 = "tt.reduce"(%18#0) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc142 at #loc69)), %arg6: f32 loc(callsite(#loc142 at #loc69))):
      %32 = arith.cmpf ogt, %arg5, %arg6 : f32 loc(#loc174)
      %33 = arith.cmpf une, %arg5, %arg5 : f32 loc(#loc175)
      %34 = arith.ori %32, %33 : i1 loc(#loc176)
      %35 = arith.select %34, %arg5, %arg6 : f32 loc(#loc177)
      tt.reduce.return %35 : f32 loc(#loc164)
    }) : (tensor<1x256xf32, #blocked>) -> tensor<1xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc164)
    %20 = tt.expand_dims %19 {axis = 1 : i32} : tensor<1xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc147)
    %21 = arith.cmpf oeq, %20, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc148)
    %22 = tt.broadcast %20 : tensor<1x1xf32, #blocked> -> tensor<1x256xf32, #blocked> loc(#loc149)
    %23 = arith.subf %18#0, %22 : tensor<1x256xf32, #blocked> loc(#loc149)
    %24 = tt.broadcast %21 : tensor<1x1xi1, #blocked> -> tensor<1x256xi1, #blocked> loc(#loc150)
    %25 = arith.select %24, %cst_0, %23 : tensor<1x256xi1, #blocked>, tensor<1x256xf32, #blocked> loc(#loc150)
    %26 = math.exp %25 : tensor<1x256xf32, #blocked> loc(#loc170)
    %27 = arith.mulf %18#1, %26 : tensor<1x256xf32, #blocked> loc(#loc152)
    %28 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc154 at #loc69)), %arg6: f32 loc(callsite(#loc154 at #loc69))):
      %32 = arith.addf %arg5, %arg6 : f32 loc(#loc178)
      tt.reduce.return %32 : f32 loc(#loc171)
    }) : (tensor<1x256xf32, #blocked>) -> tensor<1xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc171)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<1xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc79)
    %30 = tt.broadcast %29 : tensor<1x1xf32, #blocked> -> tensor<1x256xf32, #blocked> loc(#loc80)
    %31 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<1x256x!tt.ptr<bf16>, #blocked2> loc(#loc81)
    scf.for %arg5 = %c0_i32 to %c512_i32 step %c256_i32  : i32 {
      %32 = tt.splat %arg5 : i32 -> tensor<1x256xi32, #blocked2> loc(#loc83)
      %33 = tt.splat %arg5 : i32 -> tensor<1x256xi32, #blocked> loc(#loc83)
      %34 = tt.splat %arg5 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc83)
      %35 = arith.addi %32, %5 : tensor<1x256xi32, #blocked2> loc(#loc83)
      %36 = arith.addi %33, %4 : tensor<1x256xi32, #blocked> loc(#loc83)
      %37 = arith.addi %34, %6 : tensor<1x256xi32, #blocked1> loc(#loc83)
      %38 = arith.cmpi slt, %35, %cst_15 : tensor<1x256xi32, #blocked2> loc(#loc84)
      %39 = arith.cmpi slt, %36, %cst_14 : tensor<1x256xi32, #blocked> loc(#loc84)
      %40 = arith.cmpi slt, %37, %cst_13 : tensor<1x256xi32, #blocked1> loc(#loc84)
      %41 = arith.addi %35, %10 : tensor<1x256xi32, #blocked2> loc(#loc85)
      %42 = tt.addptr %11, %41 : tensor<1x256x!tt.ptr<bf16>, #blocked2>, tensor<1x256xi32, #blocked2> loc(#loc86)
      %43 = tt.load %42, %38, %cst_11 evictionPolicy = evict_first : tensor<1x256x!tt.ptr<bf16>, #blocked2> loc(#loc87)
      %44 = ttg.convert_layout %43 : tensor<1x256xbf16, #blocked2> -> tensor<1x256xbf16, #blocked> loc(#loc88)
      %45 = arith.extf %44 : tensor<1x256xbf16, #blocked> to tensor<1x256xf32, #blocked> loc(#loc88)
      %46 = arith.addi %36, %13 : tensor<1x256xi32, #blocked> loc(#loc89)
      %47 = arith.addi %37, %14 : tensor<1x256xi32, #blocked1> loc(#loc89)
      %48 = arith.extsi %46 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc90)
      %49 = arith.extsi %47 : tensor<1x256xi32, #blocked1> to tensor<1x256xi64, #blocked1> loc(#loc90)
      %50 = arith.cmpi sgt, %48, %cst_16 : tensor<1x256xi64, #blocked> loc(#loc90)
      %51 = arith.cmpi sgt, %49, %cst_10 : tensor<1x256xi64, #blocked1> loc(#loc90)
      %52 = arith.extui %50 : tensor<1x256xi1, #blocked> to tensor<1x256xi64, #blocked> loc(#loc91)
      %53 = arith.extui %51 : tensor<1x256xi1, #blocked1> to tensor<1x256xi64, #blocked1> loc(#loc91)
      %54 = arith.muli %52, %cst_17 : tensor<1x256xi64, #blocked> loc(#loc92)
      %55 = arith.muli %53, %cst_9 : tensor<1x256xi64, #blocked1> loc(#loc92)
      %56 = math.absi %46 : tensor<1x256xi32, #blocked> loc(#loc93)
      %57 = math.absi %47 : tensor<1x256xi32, #blocked1> loc(#loc93)
      %58 = arith.extsi %56 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc94)
      %59 = arith.extsi %57 : tensor<1x256xi32, #blocked1> to tensor<1x256xi64, #blocked1> loc(#loc94)
      %60 = arith.cmpi slt, %58, %cst_18 : tensor<1x256xi64, #blocked> loc(#loc94)
      %61 = arith.cmpi slt, %59, %cst_8 : tensor<1x256xi64, #blocked1> loc(#loc94)
      %62 = arith.sitofp %56 : tensor<1x256xi32, #blocked> to tensor<1x256xf32, #blocked> loc(#loc95)
      %63 = arith.sitofp %57 : tensor<1x256xi32, #blocked1> to tensor<1x256xf32, #blocked1> loc(#loc95)
      %64 = arith.mulf %62, %cst_19 : tensor<1x256xf32, #blocked> loc(#loc96)
      %65 = arith.mulf %63, %cst_7 : tensor<1x256xf32, #blocked1> loc(#loc96)
      %66 = math.log %64 : tensor<1x256xf32, #blocked> loc(#loc97)
      %67 = math.log %65 : tensor<1x256xf32, #blocked1> loc(#loc97)
      %68 = arith.mulf %66, %cst_20 : tensor<1x256xf32, #blocked> loc(#loc98)
      %69 = arith.mulf %67, %cst_6 : tensor<1x256xf32, #blocked1> loc(#loc98)
      %70 = arith.mulf %68, %cst_21 : tensor<1x256xf32, #blocked> loc(#loc99)
      %71 = arith.mulf %69, %cst_5 : tensor<1x256xf32, #blocked1> loc(#loc99)
      %72 = arith.fptosi %70 : tensor<1x256xf32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc100)
      %73 = arith.fptosi %71 : tensor<1x256xf32, #blocked1> to tensor<1x256xi64, #blocked1> loc(#loc100)
      %74 = arith.addi %72, %cst_18 : tensor<1x256xi64, #blocked> loc(#loc101)
      %75 = arith.addi %73, %cst_8 : tensor<1x256xi64, #blocked1> loc(#loc101)
      %76 = arith.cmpi slt, %74, %cst_24 : tensor<1x256xi64, #blocked> loc(#loc156)
      %77 = arith.cmpi slt, %75, %cst_3 : tensor<1x256xi64, #blocked1> loc(#loc156)
      %78 = arith.select %76, %74, %cst_24 : tensor<1x256xi1, #blocked>, tensor<1x256xi64, #blocked> loc(#loc157)
      %79 = arith.select %77, %75, %cst_3 : tensor<1x256xi1, #blocked1>, tensor<1x256xi64, #blocked1> loc(#loc157)
      %80 = arith.select %60, %58, %78 : tensor<1x256xi1, #blocked>, tensor<1x256xi64, #blocked> loc(#loc103)
      %81 = arith.select %61, %59, %79 : tensor<1x256xi1, #blocked1>, tensor<1x256xi64, #blocked1> loc(#loc103)
      %82 = arith.addi %54, %80 : tensor<1x256xi64, #blocked> loc(#loc104)
      %83 = arith.addi %55, %81 : tensor<1x256xi64, #blocked1> loc(#loc104)
      %84 = arith.addi %82, %cst_23 : tensor<1x256xi64, #blocked> loc(#loc105)
      %85 = arith.addi %83, %cst_4 : tensor<1x256xi64, #blocked1> loc(#loc105)
      %86 = arith.cmpi slt, %82, %cst_16 : tensor<1x256xi64, #blocked> loc(#loc106)
      %87 = arith.cmpi slt, %83, %cst_10 : tensor<1x256xi64, #blocked1> loc(#loc106)
      %88 = arith.select %86, %84, %82 : tensor<1x256xi1, #blocked>, tensor<1x256xi64, #blocked> loc(#loc107)
      %89 = arith.select %87, %85, %83 : tensor<1x256xi1, #blocked1>, tensor<1x256xi64, #blocked1> loc(#loc107)
      %90 = arith.cmpi sge, %89, %cst_10 : tensor<1x256xi64, #blocked1> loc(#loc108)
      %91 = arith.cmpi slt, %89, %cst_4 : tensor<1x256xi64, #blocked1> loc(#loc109)
      %92 = arith.andi %90, %91 : tensor<1x256xi1, #blocked1> loc(#loc110)
      %93 = arith.xori %40, %cst_12 : tensor<1x256xi1, #blocked1> loc(#loc111)
      %94 = arith.ori %92, %93 : tensor<1x256xi1, #blocked1> loc(#loc112)
      tt.assert %94, "index out of bounds: 0 <= tmp66 < 32" : tensor<1x256xi1, #blocked1> loc(#loc113)
      %95 = arith.muli %88, %cst_22 : tensor<1x256xi64, #blocked> loc(#loc114)
      %96 = arith.addi %16, %95 : tensor<1x256xi64, #blocked> loc(#loc115)
      %97 = tt.addptr %17, %96 : tensor<1x256x!tt.ptr<bf16>, #blocked>, tensor<1x256xi64, #blocked> loc(#loc116)
      %98 = tt.load %97, %39 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<bf16>, #blocked> loc(#loc117)
      %99 = arith.extf %98 : tensor<1x256xbf16, #blocked> to tensor<1x256xf32, #blocked> loc(#loc118)
      %100 = arith.addf %45, %99 : tensor<1x256xf32, #blocked> loc(#loc119)
      %101 = arith.subf %100, %22 : tensor<1x256xf32, #blocked> loc(#loc120)
      %102 = math.exp %101 : tensor<1x256xf32, #blocked> loc(#loc121)
      %103 = arith.divf %102, %30 : tensor<1x256xf32, #blocked> loc(#loc80)
      %104 = tt.addptr %31, %41 : tensor<1x256x!tt.ptr<bf16>, #blocked2>, tensor<1x256xi32, #blocked2> loc(#loc81)
      %105 = arith.truncf %103 : tensor<1x256xf32, #blocked> to tensor<1x256xbf16, #blocked> loc(#loc122)
      %106 = ttg.convert_layout %105 : tensor<1x256xbf16, #blocked> -> tensor<1x256xbf16, #blocked2> loc(#loc122)
      tt.store %104, %106, %38 : tensor<1x256x!tt.ptr<bf16>, #blocked2> loc(#loc122)
    } loc(#loc82)
    tt.return loc(#loc123)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":23:28)
#loc3 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":26:37)
#loc4 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":29:19)
#loc5 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":30:19)
#loc6 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":39:45)
#loc7 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":39:41)
#loc8 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":39:34)
#loc9 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":40:28)
#loc10 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":40:23)
#loc11 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":69:40)
#loc12 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":69:35)
#loc13 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":33:40)
#loc14 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":34:31)
#loc15 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":35:29)
#loc16 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":39:50)
#loc17 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":39:103)
#loc18 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":42:22)
#loc19 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":43:23)
#loc20 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":45:22)
#loc21 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":47:27)
#loc22 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":49:23)
#loc23 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":50:24)
#loc24 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":52:24)
#loc25 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":53:28)
#loc26 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":55:24)
#loc27 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":57:24)
#loc28 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":58:25)
#loc29 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":59:24)
#loc30 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":94:15)
#loc31 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":61:46)
#loc32 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":97:29)
#loc33 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":62:38)
#loc34 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":63:23)
#loc35 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":65:24)
#loc36 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":66:24)
#loc37 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":67:39)
#loc38 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":68:32)
#loc39 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":68:50)
#loc40 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":68:42)
#loc41 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":68:59)
#loc42 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":68:57)
#loc43 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":68:69)
#loc44 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":69:43)
#loc45 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":69:51)
#loc46 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":69:93)
#loc47 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":70:23)
#loc48 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":102:15)
#loc49 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":185:31)
#loc50 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":75:43)
#loc51 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":104:21)
#loc52 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":104:16)
#loc53 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":105:29)
#loc54 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":188:19)
#loc55 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":188:53)
#loc56 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":165:24)
#loc57 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":188:62)
#loc58 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":188:39)
#loc59 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":191:53)
#loc60 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":191:62)
#loc61 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":191:39)
#loc62 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":197:24)
#loc63 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":197:36)
#loc64 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":78:56)
#loc65 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":79:56)
#loc66 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":79:8)
#loc67 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":115:29)
#loc70 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":171:30)
#loc71 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":172:40)
#loc72 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":172:68)
#loc73 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":172:58)
#loc74 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":173:42)
#loc75 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":173:31)
#loc76 = loc("/usr/local/lib/python3.10/dist-packages/triton/language/standard.py":286:36)
#loc78 = loc("/usr/local/lib/python3.10/dist-packages/triton/language/standard.py":256:15)
#loc79 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":84:18)
#loc80 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":128:25)
#loc81 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":130:29)
#loc82 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":87:40)
#loc83 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":88:31)
#loc84 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":89:29)
#loc85 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":93:42)
#loc86 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":93:35)
#loc87 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":93:51)
#loc88 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":93:105)
#loc89 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":94:24)
#loc90 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":96:24)
#loc91 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":97:25)
#loc92 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":99:24)
#loc93 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":101:28)
#loc94 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":103:24)
#loc95 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":104:25)
#loc96 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":106:24)
#loc97 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":107:28)
#loc98 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":109:24)
#loc99 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":111:24)
#loc100 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":112:25)
#loc101 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":113:24)
#loc102 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":115:46)
#loc103 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":116:39)
#loc104 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":117:24)
#loc105 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":119:24)
#loc106 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":120:24)
#loc107 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":121:39)
#loc108 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":122:32)
#loc109 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":122:50)
#loc110 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":122:42)
#loc111 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":122:59)
#loc112 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":122:57)
#loc113 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":122:69)
#loc114 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":123:43)
#loc115 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":123:40)
#loc116 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":123:35)
#loc117 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":123:51)
#loc118 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":123:93)
#loc119 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":124:24)
#loc120 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":126:24)
#loc121 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":127:28)
#loc122 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":130:52)
#loc123 = loc("/tmp/torchinductor_root/h4/ch4b54psup3fa2cdfp5r7igovjwbsg7b2wjkky2nsos2a2dp2tke.py":87:4)
#loc124 = loc(fused[#loc7, #loc6])
#loc125 = loc(fused[#loc10, #loc9])
#loc126 = loc(callsite(#loc30 at #loc31))
#loc127 = loc(callsite(#loc32 at #loc31))
#loc128 = loc(callsite(#loc48 at #loc49))
#loc129 = loc(callsite(#loc51 at #loc49))
#loc130 = loc(callsite(#loc52 at #loc49))
#loc131 = loc(callsite(#loc53 at #loc49))
#loc132 = loc(callsite(#loc54 at #loc50))
#loc133 = loc(callsite(#loc55 at #loc50))
#loc134 = loc(callsite(#loc56 at #loc57))
#loc135 = loc(callsite(#loc58 at #loc50))
#loc136 = loc(callsite(#loc59 at #loc50))
#loc137 = loc(callsite(#loc56 at #loc60))
#loc138 = loc(callsite(#loc61 at #loc50))
#loc139 = loc(callsite(#loc62 at #loc50))
#loc140 = loc(callsite(#loc63 at #loc50))
#loc141 = loc(callsite(#loc67 at #loc68))
#loc143 = loc(callsite(#loc48 at #loc67))
#loc144 = loc(callsite(#loc51 at #loc67))
#loc145 = loc(callsite(#loc52 at #loc67))
#loc146 = loc(callsite(#loc53 at #loc67))
#loc147 = loc(callsite(#loc70 at #loc69))
#loc148 = loc(callsite(#loc71 at #loc69))
#loc149 = loc(callsite(#loc72 at #loc69))
#loc150 = loc(callsite(#loc73 at #loc69))
#loc151 = loc(callsite(#loc56 at #loc74))
#loc152 = loc(callsite(#loc75 at #loc69))
#loc153 = loc(callsite(#loc76 at #loc77))
#loc155 = loc(callsite(#loc78 at #loc76))
#loc156 = loc(callsite(#loc30 at #loc102))
#loc157 = loc(callsite(#loc32 at #loc102))
#loc158 = loc(callsite(#loc128 at #loc50))
#loc159 = loc(callsite(#loc129 at #loc50))
#loc160 = loc(callsite(#loc130 at #loc50))
#loc161 = loc(callsite(#loc131 at #loc50))
#loc162 = loc(callsite(#loc134 at #loc50))
#loc163 = loc(callsite(#loc137 at #loc50))
#loc164 = loc(callsite(#loc141 at #loc69))
#loc166 = loc(callsite(#loc143 at #loc68))
#loc167 = loc(callsite(#loc144 at #loc68))
#loc168 = loc(callsite(#loc145 at #loc68))
#loc169 = loc(callsite(#loc146 at #loc68))
#loc170 = loc(callsite(#loc151 at #loc69))
#loc171 = loc(callsite(#loc153 at #loc69))
#loc173 = loc(callsite(#loc155 at #loc77))
#loc174 = loc(callsite(#loc166 at #loc69))
#loc175 = loc(callsite(#loc167 at #loc69))
#loc176 = loc(callsite(#loc168 at #loc69))
#loc177 = loc(callsite(#loc169 at #loc69))
#loc178 = loc(callsite(#loc173 at #loc69))
