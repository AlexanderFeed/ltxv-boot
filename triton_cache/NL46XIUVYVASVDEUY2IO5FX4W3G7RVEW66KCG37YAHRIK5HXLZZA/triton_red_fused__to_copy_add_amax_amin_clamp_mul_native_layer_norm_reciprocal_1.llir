; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 6, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = lshr i32 %19, 2, !dbg !11
  %21 = and i32 %20, 63, !dbg !11
  %22 = and i32 %19, 3, !dbg !11
  %23 = and i32 %19, 63, !dbg !11
  %24 = or disjoint i32 %21, %18, !dbg !12
  %25 = or disjoint i32 %18, %23, !dbg !12
  %26 = icmp slt i32 %24, 3600, !dbg !13
  %27 = icmp slt i32 %25, 3600, !dbg !13
  %28 = mul i32 %24, 3072, !dbg !14
  %29 = or disjoint i32 %28, %22
  br i1 %26, label %.split.us.peel.next, label %.split

.split.us.peel.next:                              ; preds = %16
  %30 = sext i32 %29 to i64, !dbg !15
  %31 = getelementptr bfloat, ptr addrspace(1) %0, i64 %30, !dbg !15
  %32 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %31, i1 true) #5, !dbg !16
  %33 = bitcast i16 %32 to bfloat, !dbg !16
  %34 = fpext bfloat %33 to float, !dbg !17
  br label %35, !dbg !18

35:                                               ; preds = %.split.us.peel.next, %35
  %indvars.iv19 = phi i64 [ 4, %.split.us.peel.next ], [ %indvars.iv.next20, %35 ]
  %36 = phi float [ 1.000000e+00, %.split.us.peel.next ], [ %47, %35 ]
  %37 = phi float [ 0.000000e+00, %.split.us.peel.next ], [ %52, %35 ]
  %38 = phi float [ %34, %.split.us.peel.next ], [ %49, %35 ]
  %39 = trunc nuw nsw i64 %indvars.iv19 to i32, !dbg !22
  %40 = add i32 %29, %39, !dbg !22
  %41 = sext i32 %40 to i64, !dbg !15
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !15
  %43 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %42, i1 true) #5, !dbg !16
  %44 = bitcast i16 %43 to bfloat, !dbg !16
  %45 = fpext bfloat %44 to float, !dbg !17
  %46 = fsub float %45, %38, !dbg !23
  %47 = fadd float %36, 1.000000e+00, !dbg !24
  %48 = tail call float @llvm.nvvm.div.full(float %46, float %47), !dbg !25
  %49 = fadd float %38, %48, !dbg !26
  %50 = fsub float %45, %49, !dbg !27
  %51 = fmul float %46, %50, !dbg !28
  %52 = fadd float %37, %51, !dbg !29
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 4, !dbg !30
  %53 = icmp samesign ult i64 %indvars.iv19, 3068, !dbg !30
  br i1 %53, label %35, label %.split11.us, !dbg !30, !llvm.loop !31

.split:                                           ; preds = %16, %.split
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split ], [ 0, %16 ]
  %54 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %55 = add i32 %29, %54, !dbg !22
  %56 = sext i32 %55 to i64, !dbg !15
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %56, !dbg !15
  %58 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %57, i1 false) #5, !dbg !16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !30
  %59 = icmp samesign ult i64 %indvars.iv, 3068, !dbg !30
  br i1 %59, label %.split, label %.split11.us, !dbg !30

.split11.us:                                      ; preds = %.split, %35
  %.us-phi = phi float [ %49, %35 ], [ 0.000000e+00, %.split ], !dbg !33
  %.us-phi12 = phi float [ %52, %35 ], [ 0.000000e+00, %.split ], !dbg !33
  %.us-phi13 = phi float [ %47, %35 ], [ 0.000000e+00, %.split ], !dbg !33
  %60 = bitcast float %.us-phi to i32, !dbg !33
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 2, i32 31), !dbg !33
  %62 = bitcast i32 %61 to float, !dbg !33
  %63 = bitcast float %.us-phi12 to i32, !dbg !33
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !33
  %65 = bitcast i32 %64 to float, !dbg !33
  %66 = bitcast float %.us-phi13 to i32, !dbg !33
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !33
  %68 = bitcast i32 %67 to float, !dbg !33
  %69 = fsub float %62, %.us-phi, !dbg !35
  %70 = fadd float %.us-phi13, %68, !dbg !37
  %71 = fcmp oeq float %70, 0.000000e+00, !dbg !38
  %72 = tail call float @llvm.nvvm.div.full(float %68, float %70), !dbg !39
  %73 = select i1 %71, float 0.000000e+00, float %72, !dbg !40
  %74 = fmul float %69, %73, !dbg !41
  %75 = fadd float %.us-phi, %74, !dbg !42
  %76 = fadd float %.us-phi12, %65, !dbg !43
  %77 = fmul float %69, %69, !dbg !44
  %78 = fmul float %.us-phi13, %77, !dbg !45
  %79 = fmul float %78, %73, !dbg !46
  %80 = fadd float %76, %79, !dbg !47
  %81 = bitcast float %75 to i32, !dbg !33
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !33
  %83 = bitcast i32 %82 to float, !dbg !33
  %84 = bitcast float %80 to i32, !dbg !33
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !33
  %86 = bitcast i32 %85 to float, !dbg !33
  %87 = bitcast float %70 to i32, !dbg !33
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !33
  %89 = bitcast i32 %88 to float, !dbg !33
  %90 = fsub float %83, %75, !dbg !35
  %91 = fadd float %70, %89, !dbg !37
  %92 = fcmp oeq float %91, 0.000000e+00, !dbg !38
  %93 = tail call float @llvm.nvvm.div.full(float %89, float %91), !dbg !39
  %94 = select i1 %92, float 0.000000e+00, float %93, !dbg !40
  %95 = fmul float %90, %94, !dbg !41
  %96 = fadd float %75, %95, !dbg !42
  %97 = fadd float %80, %86, !dbg !43
  %98 = fmul float %90, %90, !dbg !44
  %99 = fmul float %70, %98, !dbg !45
  %100 = fmul float %94, %99, !dbg !46
  %101 = fadd float %97, %100, !dbg !47
  %102 = tail call float @llvm.nvvm.div.full(float %101, float 3.072000e+03), !dbg !48
  %103 = fadd float %102, 0x3EB0C6F7A0000000, !dbg !49
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %104, 0, !dbg !50
  br i1 %.not.i, label %107, label %105, !dbg !50

105:                                              ; preds = %.split11.us
  %106 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %103), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

107:                                              ; preds = %.split11.us
  %108 = tail call float @llvm.nvvm.rsqrt.approx.f(float %103), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

__nv_rsqrtf.exit:                                 ; preds = %105, %107
  %.0.i = phi float [ %106, %105 ], [ %108, %107 ], !dbg !50
  %109 = zext nneg i32 %22 to i64, !dbg !51
  br label %110, !dbg !51

110:                                              ; preds = %__nv_rsqrtf.exit, %110
  %indvars.iv22 = phi i64 [ 0, %__nv_rsqrtf.exit ], [ %indvars.iv.next23, %110 ]
  %111 = phi float [ 0xFFF0000000000000, %__nv_rsqrtf.exit ], [ %152, %110 ]
  %112 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit ], [ %147, %110 ]
  %113 = or disjoint i64 %indvars.iv22, %109, !dbg !52
  %114 = trunc nuw nsw i64 %113 to i32, !dbg !53
  %115 = add i32 %28, %114, !dbg !53
  %116 = sext i32 %115 to i64, !dbg !54
  %117 = getelementptr bfloat, ptr addrspace(1) %0, i64 %116, !dbg !54
  %118 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %117, i1 %26) #5, !dbg !55
  %119 = bitcast i16 %118 to bfloat, !dbg !55
  %120 = fpext bfloat %119 to float, !dbg !56
  %121 = add nuw nsw i64 %113, 3072, !dbg !57
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !58
  %123 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %122, i1 true) #5, !dbg !59
  %124 = bitcast i32 %123 to float, !dbg !59
  %125 = getelementptr bfloat, ptr addrspace(1) %2, i64 %121, !dbg !60
  %126 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %125, i1 true) #5, !dbg !61
  %127 = bitcast i16 %126 to bfloat, !dbg !61
  %128 = fpext bfloat %127 to float, !dbg !62
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !63
  %130 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %129, i1 true) #5, !dbg !64
  %131 = bitcast i32 %130 to float, !dbg !64
  %132 = getelementptr bfloat, ptr addrspace(1) %2, i64 %113, !dbg !65
  %133 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %132, i1 true) #5, !dbg !66
  %134 = bitcast i16 %133 to bfloat, !dbg !66
  %135 = fpext bfloat %134 to float, !dbg !67
  %136 = fsub float %120, %96, !dbg !68
  %137 = fmul float %.0.i, %136, !dbg !69
  %138 = fadd float %124, %128, !dbg !70
  %139 = fadd float %138, 1.000000e+00, !dbg !71
  %140 = fmul float %137, %139, !dbg !72
  %141 = fadd float %131, %135, !dbg !73
  %142 = fadd float %140, %141, !dbg !74
  %143 = fcmp olt float %112, %142, !dbg !75
  %144 = fcmp uno float %112, 0.000000e+00, !dbg !77
  %145 = or i1 %144, %143, !dbg !78
  %146 = select i1 %145, float %112, float %142, !dbg !79
  %147 = select i1 %26, float %146, float %112, !dbg !80
  %148 = fcmp ogt float %111, %142, !dbg !81
  %149 = fcmp uno float %111, 0.000000e+00, !dbg !83
  %150 = or i1 %149, %148, !dbg !84
  %151 = select i1 %150, float %111, float %142, !dbg !85
  %152 = select i1 %26, float %151, float %111, !dbg !86
  %153 = getelementptr bfloat, ptr addrspace(1) %3, i64 %116, !dbg !87
  %154 = fptrunc float %142 to bfloat, !dbg !88
  %155 = bitcast bfloat %154 to i16, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %155, ptr addrspace(1) %153, i1 %26) #5, !dbg !88
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 4, !dbg !51
  %156 = icmp samesign ult i64 %indvars.iv22, 3068, !dbg !51
  br i1 %156, label %110, label %157, !dbg !51

157:                                              ; preds = %110
  %158 = bitcast float %147 to i32, !dbg !89
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 2, i32 31), !dbg !89
  %160 = bitcast i32 %159 to float, !dbg !89
  %161 = fcmp olt float %147, %160, !dbg !91
  %162 = fcmp uno float %147, 0.000000e+00, !dbg !92
  %163 = or i1 %162, %161, !dbg !93
  %164 = select i1 %163, float %147, float %160, !dbg !94
  %165 = bitcast float %164 to i32, !dbg !89
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 1, i32 31), !dbg !89
  %167 = bitcast i32 %166 to float, !dbg !89
  %168 = fcmp olt float %164, %167, !dbg !91
  %169 = fcmp uno float %164, 0.000000e+00, !dbg !92
  %170 = or i1 %168, %169, !dbg !93
  %171 = select i1 %170, float %164, float %167, !dbg !94
  %172 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %21, !dbg !95
  %173 = bitcast float %171 to <1 x i32>, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %173, i1 true) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %174 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %23, !dbg !95
  %175 = load float, ptr addrspace(3) %174, align 4, !dbg !95
  %176 = bitcast float %152 to i32, !dbg !96
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 2, i32 31), !dbg !96
  %178 = bitcast i32 %177 to float, !dbg !96
  %179 = fcmp ogt float %152, %178, !dbg !98
  %180 = fcmp uno float %152, 0.000000e+00, !dbg !99
  %181 = or i1 %180, %179, !dbg !100
  %182 = select i1 %181, float %152, float %178, !dbg !101
  %183 = bitcast float %182 to i32, !dbg !96
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !96
  %185 = bitcast i32 %184 to float, !dbg !96
  %186 = fcmp ogt float %182, %185, !dbg !98
  %187 = fcmp uno float %182, 0.000000e+00, !dbg !99
  %188 = or i1 %186, %187, !dbg !100
  %189 = select i1 %188, float %182, float %185, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %190 = bitcast float %189 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %190, i1 true) #5, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %191 = load float, ptr addrspace(3) %174, align 4, !dbg !102
  %192 = sext i32 %25 to i64, !dbg !103
  %193 = getelementptr bfloat, ptr addrspace(1) %4, i64 %192, !dbg !103
  %194 = fptrunc float %175 to bfloat, !dbg !95
  %195 = and i32 %19, 192, !dbg !95
  %196 = icmp eq i32 %195, 0, !dbg !95
  %197 = bitcast bfloat %194 to i16, !dbg !95
  %198 = and i1 %196, %27, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %197, ptr addrspace(1) %193, i1 %198) #5, !dbg !95
  %199 = getelementptr bfloat, ptr addrspace(1) %5, i64 %192, !dbg !104
  %200 = fptrunc float %191 to bfloat, !dbg !102
  %201 = bitcast bfloat %200 to i16, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %201, ptr addrspace(1) %199, i1 %198) #5, !dbg !102
  %202 = getelementptr bfloat, ptr addrspace(1) %6, i64 %192, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %197, ptr addrspace(1) %202, i1 %198) #5, !dbg !106
  %203 = getelementptr bfloat, ptr addrspace(1) %7, i64 %192, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %201, ptr addrspace(1) %203, i1 %198) #5, !dbg !108
  %204 = getelementptr bfloat, ptr addrspace(1) %8, i64 %192, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %197, ptr addrspace(1) %204, i1 %198) #5, !dbg !110
  %205 = getelementptr bfloat, ptr addrspace(1) %9, i64 %192, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %201, ptr addrspace(1) %205, i1 %198) #5, !dbg !112
  %.inv = fcmp oge float %171, 0.000000e+00, !dbg !113
  %206 = select i1 %.inv, float 0.000000e+00, float %171, !dbg !113
  %207 = fsub float 0.000000e+00, %206, !dbg !115
  %.inv4 = fcmp ole float %189, 0.000000e+00, !dbg !116
  %208 = select i1 %.inv4, float 0.000000e+00, float %189, !dbg !116
  %209 = fcmp ogt float %207, %208, !dbg !118
  %210 = fcmp uno float %207, 0.000000e+00, !dbg !120
  %211 = or i1 %210, %209, !dbg !121
  %212 = select i1 %211, float %207, float %208, !dbg !122
  %213 = fmul float %212, 0x3F80204080000000, !dbg !123
  %214 = fcmp ogt float %213, 0x3EE4F8B580000000, !dbg !124
  %215 = fcmp uno float %213, 0.000000e+00, !dbg !126
  %216 = or i1 %214, %215, !dbg !127
  %217 = select i1 %216, float %213, float 0x3EE4F8B580000000, !dbg !128
  %218 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %217), !dbg !129
  br label %219, !dbg !130

219:                                              ; preds = %157, %219
  %indvars.iv24 = phi i64 [ 0, %157 ], [ %indvars.iv.next25, %219 ]
  %220 = trunc nuw nsw i64 %indvars.iv24 to i32, !dbg !131
  %221 = add i32 %29, %220, !dbg !131
  %222 = sext i32 %221 to i64, !dbg !132
  %223 = getelementptr bfloat, ptr addrspace(1) %3, i64 %222, !dbg !132
  %224 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %223, i1 %26) #5, !dbg !133
  %225 = bitcast i16 %224 to bfloat, !dbg !133
  %226 = fpext bfloat %225 to float, !dbg !134
  %227 = fmul float %218, %226, !dbg !135
  %228 = tail call float @llvm.nvvm.round.f(float %227) #5, !dbg !136
  %229 = fcmp ogt float %228, -1.270000e+02, !dbg !137
  %230 = fcmp uno float %228, 0.000000e+00, !dbg !139
  %231 = or i1 %229, %230, !dbg !140
  %232 = select i1 %231, float %228, float -1.270000e+02, !dbg !141
  %233 = fcmp olt float %232, 1.270000e+02, !dbg !142
  %234 = fcmp uno float %232, 0.000000e+00, !dbg !144
  %235 = or i1 %233, %234, !dbg !145
  %236 = fptosi float %232 to i8, !dbg !146
  %237 = select i1 %235, i8 %236, i8 127, !dbg !147
  %238 = getelementptr i8, ptr addrspace(1) %10, i64 %222, !dbg !148
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %237, ptr addrspace(1) %238, i1 %26) #5, !dbg !149
  %239 = getelementptr i8, ptr addrspace(1) %11, i64 %222, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %237, ptr addrspace(1) %239, i1 %26) #5, !dbg !151
  %240 = getelementptr i8, ptr addrspace(1) %12, i64 %222, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %237, ptr addrspace(1) %240, i1 %26) #5, !dbg !153
  %indvars.iv.next25 = add nuw nsw i64 %indvars.iv24, 4, !dbg !130
  %241 = icmp samesign ult i64 %indvars.iv24, 3068, !dbg !130
  br i1 %241, label %219, label %242, !dbg !130

242:                                              ; preds = %219
  ret void, !dbg !154
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 38, column: 46, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 51, scope: !6)
!17 = !DILocation(line: 38, column: 112, scope: !6)
!18 = !DILocation(line: 203, column: 7, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !6, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 42, column: 51, scope: !6)
!22 = !DILocation(line: 38, column: 41, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !19, inlinedAt: !21)
!24 = !DILocation(line: 209, column: 30, scope: !19, inlinedAt: !21)
!25 = !DILocation(line: 210, column: 34, scope: !19, inlinedAt: !21)
!26 = !DILocation(line: 210, column: 26, scope: !19, inlinedAt: !21)
!27 = !DILocation(line: 211, column: 39, scope: !19, inlinedAt: !21)
!28 = !DILocation(line: 211, column: 31, scope: !19, inlinedAt: !21)
!29 = !DILocation(line: 211, column: 22, scope: !19, inlinedAt: !21)
!30 = !DILocation(line: 32, column: 40, scope: !6)
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.peeled.count", i32 1}
!33 = !DILocation(line: 229, column: 46, scope: !19, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 79, scope: !6)
!35 = !DILocation(line: 217, column: 21, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!37 = !DILocation(line: 218, column: 28, scope: !36, inlinedAt: !34)
!38 = !DILocation(line: 219, column: 39, scope: !36, inlinedAt: !34)
!39 = !DILocation(line: 219, column: 60, scope: !36, inlinedAt: !34)
!40 = !DILocation(line: 219, column: 49, scope: !36, inlinedAt: !34)
!41 = !DILocation(line: 221, column: 25, scope: !36, inlinedAt: !34)
!42 = !DILocation(line: 221, column: 17, scope: !36, inlinedAt: !34)
!43 = !DILocation(line: 222, column: 15, scope: !36, inlinedAt: !34)
!44 = !DILocation(line: 222, column: 30, scope: !36, inlinedAt: !34)
!45 = !DILocation(line: 222, column: 38, scope: !36, inlinedAt: !34)
!46 = !DILocation(line: 222, column: 49, scope: !36, inlinedAt: !34)
!47 = !DILocation(line: 222, column: 22, scope: !36, inlinedAt: !34)
!48 = !DILocation(line: 67, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 32, scope: !6)
!51 = !DILocation(line: 53, column: 40, scope: !6)
!52 = !DILocation(line: 54, column: 31, scope: !6)
!53 = !DILocation(line: 59, column: 41, scope: !6)
!54 = !DILocation(line: 59, column: 34, scope: !6)
!55 = !DILocation(line: 59, column: 51, scope: !6)
!56 = !DILocation(line: 59, column: 113, scope: !6)
!57 = !DILocation(line: 60, column: 42, scope: !6)
!58 = !DILocation(line: 60, column: 35, scope: !6)
!59 = !DILocation(line: 60, column: 49, scope: !6)
!60 = !DILocation(line: 61, column: 35, scope: !6)
!61 = !DILocation(line: 61, column: 49, scope: !6)
!62 = !DILocation(line: 61, column: 102, scope: !6)
!63 = !DILocation(line: 62, column: 35, scope: !6)
!64 = !DILocation(line: 62, column: 42, scope: !6)
!65 = !DILocation(line: 63, column: 35, scope: !6)
!66 = !DILocation(line: 63, column: 42, scope: !6)
!67 = !DILocation(line: 63, column: 95, scope: !6)
!68 = !DILocation(line: 65, column: 24, scope: !6)
!69 = !DILocation(line: 71, column: 24, scope: !6)
!70 = !DILocation(line: 74, column: 24, scope: !6)
!71 = !DILocation(line: 76, column: 24, scope: !6)
!72 = !DILocation(line: 77, column: 24, scope: !6)
!73 = !DILocation(line: 79, column: 24, scope: !6)
!74 = !DILocation(line: 80, column: 24, scope: !6)
!75 = !DILocation(line: 94, column: 15, scope: !19, inlinedAt: !76)
!76 = !DILocation(line: 82, column: 47, scope: !6)
!77 = !DILocation(line: 96, column: 21, scope: !19, inlinedAt: !76)
!78 = !DILocation(line: 96, column: 16, scope: !19, inlinedAt: !76)
!79 = !DILocation(line: 97, column: 29, scope: !19, inlinedAt: !76)
!80 = !DILocation(line: 83, column: 50, scope: !6)
!81 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !82)
!82 = !DILocation(line: 84, column: 47, scope: !6)
!83 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !82)
!84 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !82)
!85 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !82)
!86 = !DILocation(line: 85, column: 50, scope: !6)
!87 = !DILocation(line: 86, column: 29, scope: !6)
!88 = !DILocation(line: 86, column: 53, scope: !6)
!89 = !DILocation(line: 110, column: 29, scope: !19, inlinedAt: !90)
!90 = !DILocation(line: 87, column: 40, scope: !6)
!91 = !DILocation(line: 94, column: 15, scope: !36, inlinedAt: !90)
!92 = !DILocation(line: 96, column: 21, scope: !36, inlinedAt: !90)
!93 = !DILocation(line: 96, column: 16, scope: !36, inlinedAt: !90)
!94 = !DILocation(line: 97, column: 29, scope: !36, inlinedAt: !90)
!95 = !DILocation(line: 89, column: 37, scope: !6)
!96 = !DILocation(line: 115, column: 29, scope: !19, inlinedAt: !97)
!97 = !DILocation(line: 88, column: 40, scope: !6)
!98 = !DILocation(line: 102, column: 15, scope: !36, inlinedAt: !97)
!99 = !DILocation(line: 104, column: 21, scope: !36, inlinedAt: !97)
!100 = !DILocation(line: 104, column: 16, scope: !36, inlinedAt: !97)
!101 = !DILocation(line: 105, column: 29, scope: !36, inlinedAt: !97)
!102 = !DILocation(line: 90, column: 37, scope: !6)
!103 = !DILocation(line: 89, column: 25, scope: !6)
!104 = !DILocation(line: 90, column: 25, scope: !6)
!105 = !DILocation(line: 91, column: 25, scope: !6)
!106 = !DILocation(line: 91, column: 37, scope: !6)
!107 = !DILocation(line: 92, column: 25, scope: !6)
!108 = !DILocation(line: 92, column: 37, scope: !6)
!109 = !DILocation(line: 93, column: 25, scope: !6)
!110 = !DILocation(line: 93, column: 37, scope: !6)
!111 = !DILocation(line: 94, column: 25, scope: !6)
!112 = !DILocation(line: 94, column: 37, scope: !6)
!113 = !DILocation(line: 97, column: 29, scope: !19, inlinedAt: !114)
!114 = !DILocation(line: 103, column: 46, scope: !6)
!115 = !DILocation(line: 104, column: 17, scope: !6)
!116 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !117)
!117 = !DILocation(line: 105, column: 46, scope: !6)
!118 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !119)
!119 = !DILocation(line: 106, column: 46, scope: !6)
!120 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !119)
!121 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !119)
!122 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !119)
!123 = !DILocation(line: 108, column: 24, scope: !6)
!124 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !125)
!125 = !DILocation(line: 111, column: 46, scope: !6)
!126 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !125)
!127 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !125)
!128 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !125)
!129 = !DILocation(line: 114, column: 25, scope: !6)
!130 = !DILocation(line: 95, column: 40, scope: !6)
!131 = !DILocation(line: 101, column: 43, scope: !6)
!132 = !DILocation(line: 101, column: 36, scope: !6)
!133 = !DILocation(line: 101, column: 53, scope: !6)
!134 = !DILocation(line: 101, column: 115, scope: !6)
!135 = !DILocation(line: 117, column: 24, scope: !6)
!136 = !DILocation(line: 118, column: 36, scope: !6)
!137 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !138)
!138 = !DILocation(line: 121, column: 46, scope: !6)
!139 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !138)
!140 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !138)
!141 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !138)
!142 = !DILocation(line: 94, column: 15, scope: !19, inlinedAt: !143)
!143 = !DILocation(line: 123, column: 46, scope: !6)
!144 = !DILocation(line: 96, column: 21, scope: !19, inlinedAt: !143)
!145 = !DILocation(line: 96, column: 16, scope: !19, inlinedAt: !143)
!146 = !DILocation(line: 125, column: 25, scope: !6)
!147 = !DILocation(line: 97, column: 29, scope: !19, inlinedAt: !143)
!148 = !DILocation(line: 126, column: 29, scope: !6)
!149 = !DILocation(line: 126, column: 53, scope: !6)
!150 = !DILocation(line: 127, column: 30, scope: !6)
!151 = !DILocation(line: 127, column: 54, scope: !6)
!152 = !DILocation(line: 128, column: 30, scope: !6)
!153 = !DILocation(line: 128, column: 54, scope: !6)
!154 = !DILocation(line: 95, column: 4, scope: !6)
