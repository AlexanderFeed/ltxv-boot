; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 6, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 3, !dbg !11
  %11 = and i32 %10, 63, !dbg !11
  %12 = or disjoint i32 %11, %8, !dbg !12
  %13 = icmp slt i32 %12, 512, !dbg !13
  %14 = shl i32 %9, 3, !dbg !14
  %15 = and i32 %14, 56, !dbg !14
  %16 = shl i32 %12, 12, !dbg !15
  %17 = or disjoint i32 %16, %15
  %18 = insertelement <8 x i1> poison, i1 %13, i64 0, !dbg !16
  %19 = shufflevector <8 x i1> %18, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %20, !dbg !17

20:                                               ; preds = %6, %20
  %21 = phi i32 [ 0, %6 ], [ %69, %20 ]
  %22 = phi <8 x float> [ zeroinitializer, %6 ], [ %68, %20 ]
  %23 = or i32 %17, %21, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %25, i1 %13) #4, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !20
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !20
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !20
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !20
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !20
  %35 = getelementptr bfloat, ptr addrspace(1) %1, i64 %24, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %35, i1 %13) #4, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !22
  %45 = shufflevector <2 x bfloat> %28, <2 x bfloat> %30, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %46 = shufflevector <2 x bfloat> %32, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %47 = shufflevector <8 x bfloat> %45, <8 x bfloat> %46, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !23
  %48 = shufflevector <2 x bfloat> %32, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %49 = shufflevector <8 x bfloat> %47, <8 x bfloat> %48, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !23
  %50 = shufflevector <2 x bfloat> %34, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %51 = shufflevector <8 x bfloat> %49, <8 x bfloat> %50, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !23
  %52 = shufflevector <2 x bfloat> %34, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %53 = shufflevector <8 x bfloat> %51, <8 x bfloat> %52, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !23
  %54 = fpext <8 x bfloat> %53 to <8 x float>, !dbg !23
  %55 = shufflevector <2 x bfloat> %38, <2 x bfloat> %40, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %56 = shufflevector <2 x bfloat> %42, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %57 = shufflevector <8 x bfloat> %55, <8 x bfloat> %56, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !24
  %58 = shufflevector <2 x bfloat> %42, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %59 = shufflevector <8 x bfloat> %57, <8 x bfloat> %58, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !24
  %60 = shufflevector <2 x bfloat> %44, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %61 = shufflevector <8 x bfloat> %59, <8 x bfloat> %60, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !24
  %62 = shufflevector <2 x bfloat> %44, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %63 = shufflevector <8 x bfloat> %61, <8 x bfloat> %62, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !24
  %64 = fpext <8 x bfloat> %63 to <8 x float>, !dbg !24
  %65 = fadd <8 x float> %54, %64, !dbg !25
  %66 = fmul <8 x float> %65, %65, !dbg !26
  %67 = fadd <8 x float> %22, %66, !dbg !27
  %68 = select <8 x i1> %19, <8 x float> %67, <8 x float> %22, !dbg !16
  %69 = add nuw nsw i32 %21, 64, !dbg !17
  %70 = icmp samesign ult i32 %21, 4032, !dbg !17
  br i1 %70, label %20, label %__nv_rsqrtf.exit, !dbg !17

__nv_rsqrtf.exit:                                 ; preds = %20
  %shift = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %71 = fadd <8 x float> %68, %shift, !dbg !28
  %shift44 = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %72 = fadd <8 x float> %shift44, %71, !dbg !28
  %shift45 = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %73 = fadd <8 x float> %shift45, %72, !dbg !28
  %shift46 = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %74 = fadd <8 x float> %shift46, %73, !dbg !28
  %shift47 = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %75 = fadd <8 x float> %shift47, %74, !dbg !28
  %shift48 = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %76 = fadd <8 x float> %shift48, %75, !dbg !28
  %shift49 = shufflevector <8 x float> %68, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %77 = fadd <8 x float> %shift49, %76, !dbg !28
  %78 = extractelement <8 x float> %77, i64 0, !dbg !28
  %79 = bitcast float %78 to i32, !dbg !33
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !33
  %81 = bitcast i32 %80 to float, !dbg !33
  %82 = fadd float %78, %81, !dbg !28
  %83 = bitcast float %82 to i32, !dbg !33
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !33
  %85 = bitcast i32 %84 to float, !dbg !33
  %86 = fadd float %82, %85, !dbg !28
  %87 = bitcast float %86 to i32, !dbg !33
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !33
  %89 = bitcast i32 %88 to float, !dbg !33
  %90 = fadd float %86, %89, !dbg !28
  %91 = tail call float @llvm.nvvm.div.full(float %90, float 4.096000e+03), !dbg !34
  %92 = fadd float %91, 0x3EB0C6F7A0000000, !dbg !35
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i20 = icmp eq i32 %100, 0, !dbg !36
  br i1 %.not.i20, label %103, label %101, !dbg !36

101:                                              ; preds = %__nv_rsqrtf.exit
  %102 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %92), !dbg !36
  br label %__nv_rsqrtf.exit22, !dbg !36

103:                                              ; preds = %__nv_rsqrtf.exit
  %104 = tail call float @llvm.nvvm.rsqrt.approx.f(float %92), !dbg !36
  br label %__nv_rsqrtf.exit22, !dbg !36

__nv_rsqrtf.exit22:                               ; preds = %101, %103
  %.0.i21 = phi float [ %102, %101 ], [ %104, %103 ], !dbg !36
  %105 = zext nneg i32 %15 to i64, !dbg !37
  %106 = insertelement <2 x float> poison, float %.0.i21, i64 0, !dbg !38
  %107 = shufflevector <2 x float> %106, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !38
  br label %108, !dbg !37

108:                                              ; preds = %__nv_rsqrtf.exit22, %108
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit22 ], [ %indvars.iv.next, %108 ]
  %109 = or disjoint i64 %indvars.iv, %105, !dbg !39
  %110 = getelementptr bfloat, ptr addrspace(1) %2, i64 %109, !dbg !40
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %110, i1 true) #4, !dbg !41
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !41
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !41
  %114 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !41
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !41
  %116 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !41
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !41
  %118 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !41
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !41
  %120 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %17, %120
  %121 = sext i32 %.reass to i64, !dbg !42
  %122 = getelementptr bfloat, ptr addrspace(1) %0, i64 %121, !dbg !42
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %122, i1 %13) #4, !dbg !43
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !43
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !43
  %126 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !43
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !43
  %128 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !43
  %129 = bitcast i32 %128 to <2 x bfloat>, !dbg !43
  %130 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !43
  %131 = bitcast i32 %130 to <2 x bfloat>, !dbg !43
  %132 = getelementptr bfloat, ptr addrspace(1) %1, i64 %121, !dbg !44
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %132, i1 %13) #4, !dbg !45
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !45
  %135 = bitcast i32 %134 to <2 x bfloat>, !dbg !45
  %136 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !45
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !45
  %138 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !45
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !45
  %140 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !45
  %141 = bitcast i32 %140 to <2 x bfloat>, !dbg !45
  %142 = fpext <2 x bfloat> %113 to <2 x float>, !dbg !46
  %143 = fpext <2 x bfloat> %125 to <2 x float>, !dbg !47
  %144 = fpext <2 x bfloat> %135 to <2 x float>, !dbg !48
  %145 = fadd <2 x float> %143, %144, !dbg !49
  %146 = fmul <2 x float> %107, %145, !dbg !38
  %147 = fmul <2 x float> %146, %142, !dbg !50
  %148 = fptrunc <2 x float> %147 to <2 x bfloat>, !dbg !51
  %149 = fpext <2 x bfloat> %115 to <2 x float>, !dbg !46
  %150 = fpext <2 x bfloat> %127 to <2 x float>, !dbg !47
  %151 = fpext <2 x bfloat> %137 to <2 x float>, !dbg !48
  %152 = fadd <2 x float> %150, %151, !dbg !49
  %153 = fmul <2 x float> %107, %152, !dbg !38
  %154 = fmul <2 x float> %153, %149, !dbg !50
  %155 = fptrunc <2 x float> %154 to <2 x bfloat>, !dbg !51
  %156 = fpext <2 x bfloat> %117 to <2 x float>, !dbg !46
  %157 = fpext <2 x bfloat> %129 to <2 x float>, !dbg !47
  %158 = fpext <2 x bfloat> %139 to <2 x float>, !dbg !48
  %159 = fadd <2 x float> %157, %158, !dbg !49
  %160 = fmul <2 x float> %107, %159, !dbg !38
  %161 = fmul <2 x float> %160, %156, !dbg !50
  %162 = fptrunc <2 x float> %161 to <2 x bfloat>, !dbg !51
  %163 = fpext <2 x bfloat> %119 to <2 x float>, !dbg !46
  %164 = fpext <2 x bfloat> %131 to <2 x float>, !dbg !47
  %165 = fpext <2 x bfloat> %141 to <2 x float>, !dbg !48
  %166 = fadd <2 x float> %164, %165, !dbg !49
  %167 = fmul <2 x float> %107, %166, !dbg !38
  %168 = fmul <2 x float> %167, %163, !dbg !50
  %169 = fptrunc <2 x float> %168 to <2 x bfloat>, !dbg !51
  %170 = bitcast <2 x bfloat> %148 to i32, !dbg !51
  %171 = bitcast <2 x bfloat> %155 to i32, !dbg !51
  %172 = bitcast <2 x bfloat> %162 to i32, !dbg !51
  %173 = bitcast <2 x bfloat> %169 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %170, i32 %171, i32 %172, i32 %173, ptr addrspace(1) %122, i1 %13) #4, !dbg !51
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !37
  %174 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !37
  br i1 %174, label %108, label %175, !dbg !37

175:                                              ; preds = %108
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdf3oqh7y3adnqsps36zscrzdot2y332beo2lwoofkjmbdddoauk.py", directory: "/tmp/torchinductor_root/df")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 50, scope: !6)
!16 = !DILocation(line: 43, column: 48, scope: !6)
!17 = !DILocation(line: 30, column: 40, scope: !6)
!18 = !DILocation(line: 36, column: 45, scope: !6)
!19 = !DILocation(line: 36, column: 38, scope: !6)
!20 = !DILocation(line: 36, column: 55, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 36, column: 116, scope: !6)
!24 = !DILocation(line: 37, column: 112, scope: !6)
!25 = !DILocation(line: 38, column: 22, scope: !6)
!26 = !DILocation(line: 40, column: 22, scope: !6)
!27 = !DILocation(line: 42, column: 23, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!32 = !DILocation(line: 44, column: 25, scope: !6)
!33 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 57, column: 24, scope: !6)
!35 = !DILocation(line: 59, column: 24, scope: !6)
!36 = !DILocation(line: 60, column: 32, scope: !6)
!37 = !DILocation(line: 45, column: 40, scope: !6)
!38 = !DILocation(line: 61, column: 24, scope: !6)
!39 = !DILocation(line: 46, column: 31, scope: !6)
!40 = !DILocation(line: 51, column: 34, scope: !6)
!41 = !DILocation(line: 51, column: 41, scope: !6)
!42 = !DILocation(line: 52, column: 38, scope: !6)
!43 = !DILocation(line: 52, column: 55, scope: !6)
!44 = !DILocation(line: 53, column: 35, scope: !6)
!45 = !DILocation(line: 53, column: 52, scope: !6)
!46 = !DILocation(line: 51, column: 94, scope: !6)
!47 = !DILocation(line: 52, column: 117, scope: !6)
!48 = !DILocation(line: 53, column: 114, scope: !6)
!49 = !DILocation(line: 54, column: 23, scope: !6)
!50 = !DILocation(line: 63, column: 23, scope: !6)
!51 = !DILocation(line: 64, column: 56, scope: !6)
!52 = !DILocation(line: 45, column: 4, scope: !6)
