; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_cat_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 11, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 3, !dbg !11
  %13 = and i32 %12, 1016, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = or disjoint i32 %14, 4, !dbg !12
  %16 = or disjoint i32 %14, 1024, !dbg !12
  %17 = sdiv i32 %14, 128, !dbg !13
  %18 = mul i32 %17, 128, !dbg !14
  %.decomposed = sub i32 %14, %18, !dbg !14
  %19 = srem i32 %15, 128, !dbg !14
  %20 = sdiv i32 %16, 128, !dbg !13
  %21 = srem i32 %17, 3600, !dbg !15
  %22 = srem i32 %20, 3600, !dbg !15
  %23 = sdiv i32 %14, 460800, !dbg !16
  %24 = sdiv i32 %16, 460800, !dbg !16
  %25 = shl nsw i32 %23, 7, !dbg !17
  %26 = shl nsw i32 %24, 7, !dbg !17
  %27 = add nsw i32 %25, %.decomposed, !dbg !18
  %28 = add nsw i32 %19, %25, !dbg !18
  %29 = add nsw i32 %26, %.decomposed, !dbg !18
  %30 = add nsw i32 %26, %19, !dbg !18
  %31 = mul nsw i32 %21, 3072, !dbg !19
  %32 = mul nsw i32 %22, 3072, !dbg !19
  %33 = add nsw i32 %27, %31, !dbg !20
  %34 = add nsw i32 %28, %31, !dbg !20
  %35 = add nsw i32 %29, %32, !dbg !20
  %36 = add nsw i32 %30, %32, !dbg !20
  %37 = sext i32 %33 to i64, !dbg !21
  %38 = getelementptr i32, ptr addrspace(1) %0, i64 %37, !dbg !21
  %39 = sext i32 %34 to i64, !dbg !21
  %40 = getelementptr i32, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = sext i32 %35 to i64, !dbg !21
  %42 = getelementptr i32, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = sext i32 %36 to i64, !dbg !21
  %44 = getelementptr i32, ptr addrspace(1) %0, i64 %43, !dbg !21
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %38) #1, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !22
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %40) #1, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !22
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !22
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !22
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %42) #1, !dbg !22
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !22
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !22
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !22
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !22
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %44) #1, !dbg !22
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !22
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !22
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !22
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !22
  %65 = sext i32 %21 to i64, !dbg !23
  %66 = getelementptr bfloat, ptr addrspace(1) %1, i64 %65, !dbg !23
  %67 = sext i32 %22 to i64, !dbg !23
  %68 = getelementptr bfloat, ptr addrspace(1) %1, i64 %67, !dbg !23
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %66) #1, !dbg !24
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %66) #1, !dbg !24
  %71 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %66) #1, !dbg !24
  %72 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %66) #1, !dbg !24
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %66) #1, !dbg !24
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %66) #1, !dbg !24
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %66) #1, !dbg !24
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %66) #1, !dbg !24
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %68) #1, !dbg !24
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %68) #1, !dbg !24
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %68) #1, !dbg !24
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %68) #1, !dbg !24
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %68) #1, !dbg !24
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %68) #1, !dbg !24
  %83 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %68) #1, !dbg !24
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %68) #1, !dbg !24
  %85 = getelementptr bfloat, ptr addrspace(1) %2, i64 %65, !dbg !25
  %86 = getelementptr bfloat, ptr addrspace(1) %2, i64 %67, !dbg !25
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #1, !dbg !26
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #1, !dbg !26
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #1, !dbg !26
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #1, !dbg !26
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #1, !dbg !26
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #1, !dbg !26
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #1, !dbg !26
  %94 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #1, !dbg !26
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %86) #1, !dbg !26
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %86) #1, !dbg !26
  %97 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %86) #1, !dbg !26
  %98 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %86) #1, !dbg !26
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %86) #1, !dbg !26
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %86) #1, !dbg !26
  %101 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %86) #1, !dbg !26
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %86) #1, !dbg !26
  %103 = sext i32 %27 to i64, !dbg !27
  %104 = getelementptr bfloat, ptr addrspace(1) %3, i64 %103, !dbg !27
  %105 = sext i32 %29 to i64, !dbg !27
  %106 = getelementptr bfloat, ptr addrspace(1) %3, i64 %105, !dbg !27
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %104) #1, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !28
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !28
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !28
  %112 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !28
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !28
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !28
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %106) #1, !dbg !28
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !28
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !28
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !28
  %122 = bitcast i32 %121 to <2 x bfloat>, !dbg !28
  %123 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !28
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !28
  %125 = getelementptr bfloat, ptr addrspace(1) %4, i64 %103, !dbg !29
  %126 = getelementptr bfloat, ptr addrspace(1) %4, i64 %105, !dbg !29
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %125) #1, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !30
  %129 = bitcast i32 %128 to <2 x bfloat>, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !30
  %131 = bitcast i32 %130 to <2 x bfloat>, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !30
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !30
  %135 = bitcast i32 %134 to <2 x bfloat>, !dbg !30
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %126) #1, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !30
  %138 = bitcast i32 %137 to <2 x bfloat>, !dbg !30
  %139 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !30
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !30
  %141 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !30
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !30
  %143 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !30
  %144 = bitcast i32 %143 to <2 x bfloat>, !dbg !30
  %145 = insertelement <2 x i16> poison, i16 %69, i64 0, !dbg !24
  %146 = insertelement <2 x i16> %145, i16 %70, i64 1, !dbg !24
  %147 = bitcast <2 x i16> %146 to <2 x bfloat>, !dbg !24
  %148 = fcmp oge <2 x bfloat> %147, zeroinitializer, !dbg !31
  %149 = select <2 x i1> %148, <2 x bfloat> zeroinitializer, <2 x bfloat> %147, !dbg !31
  %150 = insertelement <2 x i16> poison, i16 %71, i64 0, !dbg !24
  %151 = insertelement <2 x i16> %150, i16 %72, i64 1, !dbg !24
  %152 = bitcast <2 x i16> %151 to <2 x bfloat>, !dbg !24
  %153 = fcmp oge <2 x bfloat> %152, zeroinitializer, !dbg !31
  %154 = select <2 x i1> %153, <2 x bfloat> zeroinitializer, <2 x bfloat> %152, !dbg !31
  %155 = insertelement <2 x i16> poison, i16 %73, i64 0, !dbg !24
  %156 = insertelement <2 x i16> %155, i16 %74, i64 1, !dbg !24
  %157 = bitcast <2 x i16> %156 to <2 x bfloat>, !dbg !24
  %158 = fcmp oge <2 x bfloat> %157, zeroinitializer, !dbg !31
  %159 = select <2 x i1> %158, <2 x bfloat> zeroinitializer, <2 x bfloat> %157, !dbg !31
  %160 = insertelement <2 x i16> poison, i16 %75, i64 0, !dbg !24
  %161 = insertelement <2 x i16> %160, i16 %76, i64 1, !dbg !24
  %162 = bitcast <2 x i16> %161 to <2 x bfloat>, !dbg !24
  %163 = fcmp oge <2 x bfloat> %162, zeroinitializer, !dbg !31
  %164 = select <2 x i1> %163, <2 x bfloat> zeroinitializer, <2 x bfloat> %162, !dbg !31
  %165 = insertelement <2 x i16> poison, i16 %77, i64 0, !dbg !24
  %166 = insertelement <2 x i16> %165, i16 %78, i64 1, !dbg !24
  %167 = bitcast <2 x i16> %166 to <2 x bfloat>, !dbg !24
  %168 = fcmp oge <2 x bfloat> %167, zeroinitializer, !dbg !31
  %169 = select <2 x i1> %168, <2 x bfloat> zeroinitializer, <2 x bfloat> %167, !dbg !31
  %170 = insertelement <2 x i16> poison, i16 %79, i64 0, !dbg !24
  %171 = insertelement <2 x i16> %170, i16 %80, i64 1, !dbg !24
  %172 = bitcast <2 x i16> %171 to <2 x bfloat>, !dbg !24
  %173 = fcmp oge <2 x bfloat> %172, zeroinitializer, !dbg !31
  %174 = select <2 x i1> %173, <2 x bfloat> zeroinitializer, <2 x bfloat> %172, !dbg !31
  %175 = insertelement <2 x i16> poison, i16 %81, i64 0, !dbg !24
  %176 = insertelement <2 x i16> %175, i16 %82, i64 1, !dbg !24
  %177 = bitcast <2 x i16> %176 to <2 x bfloat>, !dbg !24
  %178 = fcmp oge <2 x bfloat> %177, zeroinitializer, !dbg !31
  %179 = select <2 x i1> %178, <2 x bfloat> zeroinitializer, <2 x bfloat> %177, !dbg !31
  %180 = insertelement <2 x i16> poison, i16 %83, i64 0, !dbg !24
  %181 = insertelement <2 x i16> %180, i16 %84, i64 1, !dbg !24
  %182 = bitcast <2 x i16> %181 to <2 x bfloat>, !dbg !24
  %183 = fcmp oge <2 x bfloat> %182, zeroinitializer, !dbg !31
  %184 = select <2 x i1> %183, <2 x bfloat> zeroinitializer, <2 x bfloat> %182, !dbg !31
  %185 = insertelement <2 x i16> poison, i16 %87, i64 0, !dbg !26
  %186 = insertelement <2 x i16> %185, i16 %88, i64 1, !dbg !26
  %187 = bitcast <2 x i16> %186 to <2 x bfloat>, !dbg !26
  %188 = fcmp ole <2 x bfloat> %187, zeroinitializer, !dbg !35
  %189 = insertelement <2 x i16> poison, i16 %89, i64 0, !dbg !26
  %190 = insertelement <2 x i16> %189, i16 %90, i64 1, !dbg !26
  %191 = bitcast <2 x i16> %190 to <2 x bfloat>, !dbg !26
  %192 = fcmp ole <2 x bfloat> %191, zeroinitializer, !dbg !35
  %193 = insertelement <2 x i16> poison, i16 %91, i64 0, !dbg !26
  %194 = insertelement <2 x i16> %193, i16 %92, i64 1, !dbg !26
  %195 = bitcast <2 x i16> %194 to <2 x bfloat>, !dbg !26
  %196 = fcmp ole <2 x bfloat> %195, zeroinitializer, !dbg !35
  %197 = insertelement <2 x i16> poison, i16 %93, i64 0, !dbg !26
  %198 = insertelement <2 x i16> %197, i16 %94, i64 1, !dbg !26
  %199 = bitcast <2 x i16> %198 to <2 x bfloat>, !dbg !26
  %200 = fcmp ole <2 x bfloat> %199, zeroinitializer, !dbg !35
  %201 = insertelement <2 x i16> poison, i16 %95, i64 0, !dbg !26
  %202 = insertelement <2 x i16> %201, i16 %96, i64 1, !dbg !26
  %203 = bitcast <2 x i16> %202 to <2 x bfloat>, !dbg !26
  %204 = fcmp ole <2 x bfloat> %203, zeroinitializer, !dbg !35
  %205 = insertelement <2 x i16> poison, i16 %97, i64 0, !dbg !26
  %206 = insertelement <2 x i16> %205, i16 %98, i64 1, !dbg !26
  %207 = bitcast <2 x i16> %206 to <2 x bfloat>, !dbg !26
  %208 = fcmp ole <2 x bfloat> %207, zeroinitializer, !dbg !35
  %209 = insertelement <2 x i16> poison, i16 %99, i64 0, !dbg !26
  %210 = insertelement <2 x i16> %209, i16 %100, i64 1, !dbg !26
  %211 = bitcast <2 x i16> %210 to <2 x bfloat>, !dbg !26
  %212 = fcmp ole <2 x bfloat> %211, zeroinitializer, !dbg !35
  %213 = insertelement <2 x i16> poison, i16 %101, i64 0, !dbg !26
  %214 = insertelement <2 x i16> %213, i16 %102, i64 1, !dbg !26
  %215 = bitcast <2 x i16> %214 to <2 x bfloat>, !dbg !26
  %216 = fcmp ole <2 x bfloat> %215, zeroinitializer, !dbg !35
  %217 = shl nsw i32 %23, 16, !dbg !37
  %218 = add i32 %217, %14, !dbg !37
  %219 = shl nsw i32 %24, 16, !dbg !37
  %220 = add i32 %219, %16, !dbg !37
  %221 = sext i32 %218 to i64, !dbg !38
  %222 = getelementptr bfloat, ptr addrspace(1) %5, i64 %221, !dbg !38
  %223 = sext i32 %220 to i64, !dbg !38
  %224 = getelementptr bfloat, ptr addrspace(1) %5, i64 %223, !dbg !38
  %225 = fpext <2 x bfloat> %109 to <2 x float>, !dbg !39
  %226 = fpext <2 x bfloat> %129 to <2 x float>, !dbg !40
  %227 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !41
  %228 = insertelement <2 x i32> %227, i32 %47, i64 1, !dbg !41
  %229 = sitofp <2 x i32> %228 to <2 x float>, !dbg !41
  %230 = fpext <2 x bfloat> %149 to <2 x float>, !dbg !31
  %231 = fsub <2 x float> zeroinitializer, %230, !dbg !42
  %232 = select <2 x i1> %188, <2 x bfloat> zeroinitializer, <2 x bfloat> %187, !dbg !35
  %233 = fpext <2 x bfloat> %232 to <2 x float>, !dbg !35
  %234 = fcmp ogt <2 x float> %231, %233, !dbg !43
  %235 = fcmp uno <2 x float> %231, zeroinitializer, !dbg !45
  %236 = or <2 x i1> %235, %234, !dbg !46
  %237 = select <2 x i1> %236, <2 x float> %231, <2 x float> %233, !dbg !47
  %238 = fmul <2 x float> %237, splat (float 0x3F80204080000000), !dbg !48
  %239 = fcmp ogt <2 x float> %238, splat (float 0x3EE4F8B580000000), !dbg !49
  %240 = fcmp uno <2 x float> %238, zeroinitializer, !dbg !51
  %241 = or <2 x i1> %239, %240, !dbg !52
  %242 = select <2 x i1> %241, <2 x float> %238, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !53
  %243 = fmul <2 x float> %242, %229, !dbg !54
  %244 = fmul <2 x float> %243, %225, !dbg !55
  %245 = fadd <2 x float> %244, %226, !dbg !56
  %246 = fptrunc <2 x float> %245 to <2 x bfloat>, !dbg !57
  %247 = fpext <2 x bfloat> %111 to <2 x float>, !dbg !39
  %248 = fpext <2 x bfloat> %131 to <2 x float>, !dbg !40
  %249 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !41
  %250 = insertelement <2 x i32> %249, i32 %49, i64 1, !dbg !41
  %251 = sitofp <2 x i32> %250 to <2 x float>, !dbg !41
  %252 = fpext <2 x bfloat> %154 to <2 x float>, !dbg !31
  %253 = fsub <2 x float> zeroinitializer, %252, !dbg !42
  %254 = select <2 x i1> %192, <2 x bfloat> zeroinitializer, <2 x bfloat> %191, !dbg !35
  %255 = fpext <2 x bfloat> %254 to <2 x float>, !dbg !35
  %256 = fcmp ogt <2 x float> %253, %255, !dbg !43
  %257 = fcmp uno <2 x float> %253, zeroinitializer, !dbg !45
  %258 = or <2 x i1> %257, %256, !dbg !46
  %259 = select <2 x i1> %258, <2 x float> %253, <2 x float> %255, !dbg !47
  %260 = fmul <2 x float> %259, splat (float 0x3F80204080000000), !dbg !48
  %261 = fcmp ogt <2 x float> %260, splat (float 0x3EE4F8B580000000), !dbg !49
  %262 = fcmp uno <2 x float> %260, zeroinitializer, !dbg !51
  %263 = or <2 x i1> %261, %262, !dbg !52
  %264 = select <2 x i1> %263, <2 x float> %260, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !53
  %265 = fmul <2 x float> %264, %251, !dbg !54
  %266 = fmul <2 x float> %265, %247, !dbg !55
  %267 = fadd <2 x float> %266, %248, !dbg !56
  %268 = fptrunc <2 x float> %267 to <2 x bfloat>, !dbg !57
  %269 = fpext <2 x bfloat> %113 to <2 x float>, !dbg !39
  %270 = fpext <2 x bfloat> %133 to <2 x float>, !dbg !40
  %271 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !41
  %272 = insertelement <2 x i32> %271, i32 %52, i64 1, !dbg !41
  %273 = sitofp <2 x i32> %272 to <2 x float>, !dbg !41
  %274 = fpext <2 x bfloat> %159 to <2 x float>, !dbg !31
  %275 = fsub <2 x float> zeroinitializer, %274, !dbg !42
  %276 = select <2 x i1> %196, <2 x bfloat> zeroinitializer, <2 x bfloat> %195, !dbg !35
  %277 = fpext <2 x bfloat> %276 to <2 x float>, !dbg !35
  %278 = fcmp ogt <2 x float> %275, %277, !dbg !43
  %279 = fcmp uno <2 x float> %275, zeroinitializer, !dbg !45
  %280 = or <2 x i1> %279, %278, !dbg !46
  %281 = select <2 x i1> %280, <2 x float> %275, <2 x float> %277, !dbg !47
  %282 = fmul <2 x float> %281, splat (float 0x3F80204080000000), !dbg !48
  %283 = fcmp ogt <2 x float> %282, splat (float 0x3EE4F8B580000000), !dbg !49
  %284 = fcmp uno <2 x float> %282, zeroinitializer, !dbg !51
  %285 = or <2 x i1> %283, %284, !dbg !52
  %286 = select <2 x i1> %285, <2 x float> %282, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !53
  %287 = fmul <2 x float> %286, %273, !dbg !54
  %288 = fmul <2 x float> %287, %269, !dbg !55
  %289 = fadd <2 x float> %288, %270, !dbg !56
  %290 = fptrunc <2 x float> %289 to <2 x bfloat>, !dbg !57
  %291 = fpext <2 x bfloat> %115 to <2 x float>, !dbg !39
  %292 = fpext <2 x bfloat> %135 to <2 x float>, !dbg !40
  %293 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !41
  %294 = insertelement <2 x i32> %293, i32 %54, i64 1, !dbg !41
  %295 = sitofp <2 x i32> %294 to <2 x float>, !dbg !41
  %296 = fpext <2 x bfloat> %164 to <2 x float>, !dbg !31
  %297 = fsub <2 x float> zeroinitializer, %296, !dbg !42
  %298 = select <2 x i1> %200, <2 x bfloat> zeroinitializer, <2 x bfloat> %199, !dbg !35
  %299 = fpext <2 x bfloat> %298 to <2 x float>, !dbg !35
  %300 = fcmp ogt <2 x float> %297, %299, !dbg !43
  %301 = fcmp uno <2 x float> %297, zeroinitializer, !dbg !45
  %302 = or <2 x i1> %301, %300, !dbg !46
  %303 = select <2 x i1> %302, <2 x float> %297, <2 x float> %299, !dbg !47
  %304 = fmul <2 x float> %303, splat (float 0x3F80204080000000), !dbg !48
  %305 = fcmp ogt <2 x float> %304, splat (float 0x3EE4F8B580000000), !dbg !49
  %306 = fcmp uno <2 x float> %304, zeroinitializer, !dbg !51
  %307 = or <2 x i1> %305, %306, !dbg !52
  %308 = select <2 x i1> %307, <2 x float> %304, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !53
  %309 = fmul <2 x float> %308, %295, !dbg !54
  %310 = fmul <2 x float> %309, %291, !dbg !55
  %311 = fadd <2 x float> %310, %292, !dbg !56
  %312 = fptrunc <2 x float> %311 to <2 x bfloat>, !dbg !57
  %313 = fpext <2 x bfloat> %118 to <2 x float>, !dbg !39
  %314 = fpext <2 x bfloat> %138 to <2 x float>, !dbg !40
  %315 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !41
  %316 = insertelement <2 x i32> %315, i32 %57, i64 1, !dbg !41
  %317 = sitofp <2 x i32> %316 to <2 x float>, !dbg !41
  %318 = fpext <2 x bfloat> %169 to <2 x float>, !dbg !31
  %319 = fsub <2 x float> zeroinitializer, %318, !dbg !42
  %320 = select <2 x i1> %204, <2 x bfloat> zeroinitializer, <2 x bfloat> %203, !dbg !35
  %321 = fpext <2 x bfloat> %320 to <2 x float>, !dbg !35
  %322 = fcmp ogt <2 x float> %319, %321, !dbg !43
  %323 = fcmp uno <2 x float> %319, zeroinitializer, !dbg !45
  %324 = or <2 x i1> %323, %322, !dbg !46
  %325 = select <2 x i1> %324, <2 x float> %319, <2 x float> %321, !dbg !47
  %326 = fmul <2 x float> %325, splat (float 0x3F80204080000000), !dbg !48
  %327 = fcmp ogt <2 x float> %326, splat (float 0x3EE4F8B580000000), !dbg !49
  %328 = fcmp uno <2 x float> %326, zeroinitializer, !dbg !51
  %329 = or <2 x i1> %327, %328, !dbg !52
  %330 = select <2 x i1> %329, <2 x float> %326, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !53
  %331 = fmul <2 x float> %330, %317, !dbg !54
  %332 = fmul <2 x float> %331, %313, !dbg !55
  %333 = fadd <2 x float> %332, %314, !dbg !56
  %334 = fptrunc <2 x float> %333 to <2 x bfloat>, !dbg !57
  %335 = fpext <2 x bfloat> %120 to <2 x float>, !dbg !39
  %336 = fpext <2 x bfloat> %140 to <2 x float>, !dbg !40
  %337 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !41
  %338 = insertelement <2 x i32> %337, i32 %59, i64 1, !dbg !41
  %339 = sitofp <2 x i32> %338 to <2 x float>, !dbg !41
  %340 = fpext <2 x bfloat> %174 to <2 x float>, !dbg !31
  %341 = fsub <2 x float> zeroinitializer, %340, !dbg !42
  %342 = select <2 x i1> %208, <2 x bfloat> zeroinitializer, <2 x bfloat> %207, !dbg !35
  %343 = fpext <2 x bfloat> %342 to <2 x float>, !dbg !35
  %344 = fcmp ogt <2 x float> %341, %343, !dbg !43
  %345 = fcmp uno <2 x float> %341, zeroinitializer, !dbg !45
  %346 = or <2 x i1> %345, %344, !dbg !46
  %347 = select <2 x i1> %346, <2 x float> %341, <2 x float> %343, !dbg !47
  %348 = fmul <2 x float> %347, splat (float 0x3F80204080000000), !dbg !48
  %349 = fcmp ogt <2 x float> %348, splat (float 0x3EE4F8B580000000), !dbg !49
  %350 = fcmp uno <2 x float> %348, zeroinitializer, !dbg !51
  %351 = or <2 x i1> %349, %350, !dbg !52
  %352 = select <2 x i1> %351, <2 x float> %348, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !53
  %353 = fmul <2 x float> %352, %339, !dbg !54
  %354 = fmul <2 x float> %353, %335, !dbg !55
  %355 = fadd <2 x float> %354, %336, !dbg !56
  %356 = fptrunc <2 x float> %355 to <2 x bfloat>, !dbg !57
  %357 = fpext <2 x bfloat> %122 to <2 x float>, !dbg !39
  %358 = fpext <2 x bfloat> %142 to <2 x float>, !dbg !40
  %359 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !41
  %360 = insertelement <2 x i32> %359, i32 %62, i64 1, !dbg !41
  %361 = sitofp <2 x i32> %360 to <2 x float>, !dbg !41
  %362 = fpext <2 x bfloat> %179 to <2 x float>, !dbg !31
  %363 = fsub <2 x float> zeroinitializer, %362, !dbg !42
  %364 = select <2 x i1> %212, <2 x bfloat> zeroinitializer, <2 x bfloat> %211, !dbg !35
  %365 = fpext <2 x bfloat> %364 to <2 x float>, !dbg !35
  %366 = fcmp ogt <2 x float> %363, %365, !dbg !43
  %367 = fcmp uno <2 x float> %363, zeroinitializer, !dbg !45
  %368 = or <2 x i1> %367, %366, !dbg !46
  %369 = select <2 x i1> %368, <2 x float> %363, <2 x float> %365, !dbg !47
  %370 = fmul <2 x float> %369, splat (float 0x3F80204080000000), !dbg !48
  %371 = fcmp ogt <2 x float> %370, splat (float 0x3EE4F8B580000000), !dbg !49
  %372 = fcmp uno <2 x float> %370, zeroinitializer, !dbg !51
  %373 = or <2 x i1> %371, %372, !dbg !52
  %374 = select <2 x i1> %373, <2 x float> %370, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !53
  %375 = fmul <2 x float> %374, %361, !dbg !54
  %376 = fmul <2 x float> %375, %357, !dbg !55
  %377 = fadd <2 x float> %376, %358, !dbg !56
  %378 = fptrunc <2 x float> %377 to <2 x bfloat>, !dbg !57
  %379 = fpext <2 x bfloat> %124 to <2 x float>, !dbg !39
  %380 = fpext <2 x bfloat> %144 to <2 x float>, !dbg !40
  %381 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !41
  %382 = insertelement <2 x i32> %381, i32 %64, i64 1, !dbg !41
  %383 = sitofp <2 x i32> %382 to <2 x float>, !dbg !41
  %384 = fpext <2 x bfloat> %184 to <2 x float>, !dbg !31
  %385 = fsub <2 x float> zeroinitializer, %384, !dbg !42
  %386 = select <2 x i1> %216, <2 x bfloat> zeroinitializer, <2 x bfloat> %215, !dbg !35
  %387 = fpext <2 x bfloat> %386 to <2 x float>, !dbg !35
  %388 = fcmp ogt <2 x float> %385, %387, !dbg !43
  %389 = fcmp uno <2 x float> %385, zeroinitializer, !dbg !45
  %390 = or <2 x i1> %389, %388, !dbg !46
  %391 = select <2 x i1> %390, <2 x float> %385, <2 x float> %387, !dbg !47
  %392 = fmul <2 x float> %391, splat (float 0x3F80204080000000), !dbg !48
  %393 = fcmp ogt <2 x float> %392, splat (float 0x3EE4F8B580000000), !dbg !49
  %394 = fcmp uno <2 x float> %392, zeroinitializer, !dbg !51
  %395 = or <2 x i1> %393, %394, !dbg !52
  %396 = select <2 x i1> %395, <2 x float> %392, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !53
  %397 = fmul <2 x float> %396, %383, !dbg !54
  %398 = fmul <2 x float> %397, %379, !dbg !55
  %399 = fadd <2 x float> %398, %380, !dbg !56
  %400 = fptrunc <2 x float> %399 to <2 x bfloat>, !dbg !57
  %401 = bitcast <2 x bfloat> %246 to i32, !dbg !57
  %402 = bitcast <2 x bfloat> %268 to i32, !dbg !57
  %403 = bitcast <2 x bfloat> %290 to i32, !dbg !57
  %404 = bitcast <2 x bfloat> %312 to i32, !dbg !57
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %401, i32 %402, i32 %403, i32 %404, ptr addrspace(1) %222) #1, !dbg !57
  %405 = bitcast <2 x bfloat> %334 to i32, !dbg !57
  %406 = bitcast <2 x bfloat> %356 to i32, !dbg !57
  %407 = bitcast <2 x bfloat> %378 to i32, !dbg !57
  %408 = bitcast <2 x bfloat> %400 to i32, !dbg !57
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %405, i32 %406, i32 %407, i32 %408, ptr addrspace(1) %224) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpduyi257hekzywwmvuszprlfyl44wtwmea5kiuhhyb6aron4awh.py", directory: "/tmp/torchinductor_root/pd")
!4 = !{ptr @triton_poi_fused_cat_7, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_cat_7", linkageName: "triton_poi_fused_cat_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 23, column: 19, scope: !6)
!15 = !DILocation(line: 24, column: 28, scope: !6)
!16 = !DILocation(line: 25, column: 19, scope: !6)
!17 = !DILocation(line: 27, column: 39, scope: !6)
!18 = !DILocation(line: 27, column: 35, scope: !6)
!19 = !DILocation(line: 27, column: 49, scope: !6)
!20 = !DILocation(line: 27, column: 44, scope: !6)
!21 = !DILocation(line: 27, column: 30, scope: !6)
!22 = !DILocation(line: 27, column: 54, scope: !6)
!23 = !DILocation(line: 28, column: 30, scope: !6)
!24 = !DILocation(line: 28, column: 35, scope: !6)
!25 = !DILocation(line: 29, column: 30, scope: !6)
!26 = !DILocation(line: 29, column: 35, scope: !6)
!27 = !DILocation(line: 30, column: 31, scope: !6)
!28 = !DILocation(line: 30, column: 45, scope: !6)
!29 = !DILocation(line: 31, column: 31, scope: !6)
!30 = !DILocation(line: 31, column: 45, scope: !6)
!31 = !DILocation(line: 97, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 34, column: 40, scope: !6)
!35 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !36)
!36 = !DILocation(line: 36, column: 40, scope: !6)
!37 = !DILocation(line: 47, column: 30, scope: !6)
!38 = !DILocation(line: 47, column: 25, scope: !6)
!39 = !DILocation(line: 30, column: 84, scope: !6)
!40 = !DILocation(line: 31, column: 84, scope: !6)
!41 = !DILocation(line: 32, column: 19, scope: !6)
!42 = !DILocation(line: 35, column: 12, scope: !6)
!43 = !DILocation(line: 102, column: 15, scope: !32, inlinedAt: !44)
!44 = !DILocation(line: 37, column: 40, scope: !6)
!45 = !DILocation(line: 104, column: 21, scope: !32, inlinedAt: !44)
!46 = !DILocation(line: 104, column: 16, scope: !32, inlinedAt: !44)
!47 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !44)
!48 = !DILocation(line: 39, column: 19, scope: !6)
!49 = !DILocation(line: 102, column: 15, scope: !32, inlinedAt: !50)
!50 = !DILocation(line: 42, column: 42, scope: !6)
!51 = !DILocation(line: 104, column: 21, scope: !32, inlinedAt: !50)
!52 = !DILocation(line: 104, column: 16, scope: !32, inlinedAt: !50)
!53 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !50)
!54 = !DILocation(line: 44, column: 19, scope: !6)
!55 = !DILocation(line: 45, column: 20, scope: !6)
!56 = !DILocation(line: 46, column: 20, scope: !6)
!57 = !DILocation(line: 47, column: 49, scope: !6)
!58 = !DILocation(line: 47, column: 4, scope: !6)
