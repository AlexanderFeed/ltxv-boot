; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = icmp slt i32 %13, 512, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = and i32 %15, 31, !dbg !11
  %17 = shl i32 %15, 3, !dbg !11
  %18 = and i32 %17, 8184, !dbg !11
  %19 = or disjoint i32 %18, 4, !dbg !11
  %20 = shl i32 %15, 2, !dbg !11
  %21 = and i32 %20, 4092, !dbg !11
  %22 = or disjoint i32 %21, 4096, !dbg !11
  %23 = sext i32 %13 to i64, !dbg !12
  %24 = getelementptr bfloat, ptr addrspace(1) %1, i64 %23, !dbg !12
  %25 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %14) #5, !dbg !13
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %14) #5, !dbg !13
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %14) #5, !dbg !13
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %14) #5, !dbg !13
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %14) #5, !dbg !13
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %14) #5, !dbg !13
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %14) #5, !dbg !13
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %14) #5, !dbg !13
  %33 = bitcast i16 %32 to bfloat, !dbg !13
  %34 = getelementptr bfloat, ptr addrspace(1) %2, i64 %23, !dbg !14
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %14) #5, !dbg !15
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %14) #5, !dbg !15
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %14) #5, !dbg !15
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %14) #5, !dbg !15
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %14) #5, !dbg !15
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %14) #5, !dbg !15
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %14) #5, !dbg !15
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %14) #5, !dbg !15
  %43 = bitcast i16 %42 to bfloat, !dbg !15
  %44 = mul i32 %13, 12288, !dbg !16
  %.inv = fcmp oge bfloat %33, 0xR0000, !dbg !17
  %45 = select i1 %.inv, bfloat 0xR0000, bfloat %33, !dbg !17
  %46 = fpext bfloat %45 to float, !dbg !17
  %47 = fsub float 0.000000e+00, %46, !dbg !21
  %.inv2 = fcmp ole bfloat %43, 0xR0000, !dbg !22
  %48 = select i1 %.inv2, bfloat 0xR0000, bfloat %43, !dbg !22
  %49 = fpext bfloat %48 to float, !dbg !22
  %50 = fcmp ogt float %47, %49, !dbg !24
  %51 = fcmp uno float %47, 0.000000e+00, !dbg !26
  %52 = or i1 %51, %50, !dbg !27
  %53 = select i1 %52, float %47, float %49, !dbg !28
  %54 = fmul float %53, 0x3F80204080000000, !dbg !29
  %55 = fcmp ogt float %54, 0x3EE4F8B580000000, !dbg !30
  %56 = fcmp uno float %54, 0.000000e+00, !dbg !32
  %57 = or i1 %55, %56, !dbg !33
  %58 = select i1 %57, float %54, float 0x3EE4F8B580000000, !dbg !34
  %59 = add i32 %19, %44
  %60 = or disjoint i32 %21, %44
  %61 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18
  %62 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19
  %63 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %21
  %64 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %22
  %65 = zext nneg i32 %22 to i64, !dbg !35
  %66 = zext nneg i32 %18 to i64, !dbg !35
  %67 = getelementptr inbounds nuw i8, ptr addrspace(3) %63, i32 4
  %68 = getelementptr inbounds nuw i8, ptr addrspace(3) %63, i32 8
  %69 = getelementptr inbounds nuw i8, ptr addrspace(3) %63, i32 12
  %70 = insertelement <2 x float> poison, float %58, i64 0, !dbg !36
  %71 = shufflevector <2 x float> %70, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !36
  %72 = insertelement <4 x float> poison, float %58, i64 0, !dbg !36
  %73 = shufflevector <4 x float> %72, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !36
  br label %74, !dbg !35

74:                                               ; preds = %12, %__nv_tanhf.exit303
  %75 = phi i1 [ true, %12 ], [ false, %__nv_tanhf.exit303 ]
  %indvars.iv = phi i64 [ 0, %12 ], [ 8192, %__nv_tanhf.exit303 ]
  %76 = phi float [ 0x7FF0000000000000, %12 ], [ %507, %__nv_tanhf.exit303 ]
  %77 = phi float [ 0x7FF0000000000000, %12 ], [ %508, %__nv_tanhf.exit303 ]
  %78 = phi <2 x float> [ splat (float 0xFFF0000000000000), %12 ], [ %524, %__nv_tanhf.exit303 ]
  %79 = phi <4 x float> [ splat (float 0x7FF0000000000000), %12 ], [ %495, %__nv_tanhf.exit303 ]
  %80 = phi <4 x float> [ splat (float 0xFFF0000000000000), %12 ], [ %526, %__nv_tanhf.exit303 ]
  %81 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %12 ], [ %525, %__nv_tanhf.exit303 ]
  %82 = or disjoint i64 %indvars.iv, %66, !dbg !37
  %83 = or disjoint i64 %indvars.iv, %65, !dbg !37
  %84 = icmp samesign ult i64 %82, 12288, !dbg !38
  %85 = icmp samesign ult i64 %83, 12288, !dbg !38
  %86 = trunc nuw nsw i64 %82 to i32, !dbg !39
  %87 = add i32 %44, %86, !dbg !39
  %88 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !39
  %89 = add i32 %59, %88, !dbg !39
  %90 = add i32 %60, %88, !dbg !39
  %91 = trunc nuw nsw i64 %83 to i32, !dbg !39
  %92 = add i32 %44, %91, !dbg !39
  %93 = sext i32 %87 to i64, !dbg !40
  %94 = getelementptr i32, ptr addrspace(1) %0, i64 %93, !dbg !40
  %95 = sext i32 %89 to i64, !dbg !40
  %96 = getelementptr i32, ptr addrspace(1) %0, i64 %95, !dbg !40
  %97 = and i1 %14, %84, !dbg !41
  %98 = and i1 %14, %85, !dbg !41
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %97) #5, !dbg !42
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !42
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !42
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !42
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !42
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %97) #5, !dbg !42
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !42
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !42
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !42
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !42
  %109 = getelementptr bfloat, ptr addrspace(1) %3, i64 %82, !dbg !43
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %109, i1 %84) #5, !dbg !44
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !44
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !44
  %113 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !44
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !44
  %115 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !44
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !44
  %117 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !44
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !44
  %119 = getelementptr bfloat, ptr addrspace(1) %4, i64 %82, !dbg !45
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %119, i1 %84) #5, !dbg !46
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !46
  %122 = bitcast i32 %121 to <2 x bfloat>, !dbg !46
  %123 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !46
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !46
  %125 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !46
  %126 = bitcast i32 %125 to <2 x bfloat>, !dbg !46
  %127 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !46
  %128 = bitcast i32 %127 to <2 x bfloat>, !dbg !46
  %129 = fpext <2 x bfloat> %112 to <2 x float>, !dbg !47
  %130 = fpext <2 x bfloat> %122 to <2 x float>, !dbg !48
  %131 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !49
  %132 = insertelement <2 x i32> %131, i32 %101, i64 1, !dbg !49
  %133 = sitofp <2 x i32> %132 to <2 x float>, !dbg !49
  %134 = fmul <2 x float> %71, %133, !dbg !36
  %135 = fmul <2 x float> %134, %129, !dbg !50
  %136 = fadd <2 x float> %135, %130, !dbg !51
  %137 = fpext <2 x bfloat> %114 to <2 x float>, !dbg !47
  %138 = shufflevector <2 x float> %137, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !47
  %139 = fpext <2 x bfloat> %124 to <2 x float>, !dbg !48
  %140 = shufflevector <2 x float> %139, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !48
  %141 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !49
  %142 = insertelement <2 x i32> %141, i32 %102, i64 1, !dbg !49
  %143 = sitofp <2 x i32> %142 to <2 x float>, !dbg !49
  %144 = fmul <2 x float> %71, %143, !dbg !36
  %145 = fmul <2 x float> %144, %138, !dbg !50
  %146 = fadd <2 x float> %145, %140, !dbg !51
  %147 = shufflevector <2 x bfloat> %118, <2 x bfloat> %116, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !47
  %148 = fpext <4 x bfloat> %147 to <4 x float>, !dbg !47
  %149 = shufflevector <2 x bfloat> %128, <2 x bfloat> %126, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !48
  %150 = fpext <4 x bfloat> %149 to <4 x float>, !dbg !48
  %151 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !49
  %152 = insertelement <4 x i32> %151, i32 %107, i64 1, !dbg !49
  %153 = insertelement <4 x i32> %152, i32 %106, i64 2, !dbg !49
  %154 = insertelement <4 x i32> %153, i32 %105, i64 3, !dbg !49
  %155 = sitofp <4 x i32> %154 to <4 x float>, !dbg !49
  %156 = fmul <4 x float> %73, %155, !dbg !36
  %157 = fmul <4 x float> %156, %148, !dbg !50
  %158 = fadd <4 x float> %157, %150, !dbg !51
  %159 = fmul <2 x float> %136, splat (float 5.000000e-01), !dbg !52
  %160 = fmul <2 x float> %146, splat (float 5.000000e-01), !dbg !52
  %161 = fmul <4 x float> %158, splat (float 5.000000e-01), !dbg !52
  %162 = extractelement <2 x float> %136, i64 0, !dbg !53
  %163 = fmul float %162, %162, !dbg !54
  %164 = extractelement <2 x float> %136, i64 1, !dbg !53
  %165 = fmul float %164, %164, !dbg !54
  %166 = extractelement <2 x float> %146, i64 1, !dbg !53
  %167 = fmul float %166, %166, !dbg !54
  %168 = extractelement <2 x float> %146, i64 0, !dbg !53
  %169 = fmul float %168, %168, !dbg !54
  %170 = extractelement <4 x float> %158, i64 3, !dbg !53
  %171 = fmul float %170, %170, !dbg !54
  %172 = extractelement <4 x float> %158, i64 2, !dbg !53
  %173 = fmul float %172, %172, !dbg !54
  %174 = extractelement <4 x float> %158, i64 1, !dbg !53
  %175 = fmul float %174, %174, !dbg !54
  %176 = extractelement <4 x float> %158, i64 0, !dbg !53
  %177 = fmul float %176, %176, !dbg !54
  %178 = fmul float %162, %163, !dbg !55
  %179 = fmul float %164, %165, !dbg !55
  %180 = fmul float %166, %167, !dbg !55
  %181 = fmul float %168, %169, !dbg !55
  %182 = fmul float %170, %171, !dbg !55
  %183 = fmul float %172, %173, !dbg !55
  %184 = fmul float %174, %175, !dbg !55
  %185 = fmul float %176, %177, !dbg !55
  %186 = fmul float %178, 0x3FA6E4E260000000, !dbg !56
  %187 = fmul float %179, 0x3FA6E4E260000000, !dbg !56
  %188 = fmul float %180, 0x3FA6E4E260000000, !dbg !56
  %189 = fmul float %181, 0x3FA6E4E260000000, !dbg !56
  %190 = fmul float %182, 0x3FA6E4E260000000, !dbg !56
  %191 = fmul float %183, 0x3FA6E4E260000000, !dbg !56
  %192 = fmul float %184, 0x3FA6E4E260000000, !dbg !56
  %193 = fmul float %185, 0x3FA6E4E260000000, !dbg !56
  %194 = fadd float %162, %186, !dbg !53
  %195 = fadd float %164, %187, !dbg !53
  %196 = fadd float %166, %188, !dbg !53
  %197 = fadd float %168, %189, !dbg !53
  %198 = fadd float %170, %190, !dbg !53
  %199 = fadd float %172, %191, !dbg !53
  %200 = fadd float %174, %192, !dbg !53
  %201 = fadd float %176, %193, !dbg !53
  %202 = fmul float %194, 0x3FE9884540000000, !dbg !57
  %203 = fmul float %195, 0x3FE9884540000000, !dbg !57
  %204 = fmul float %196, 0x3FE9884540000000, !dbg !57
  %205 = fmul float %197, 0x3FE9884540000000, !dbg !57
  %206 = fmul float %198, 0x3FE9884540000000, !dbg !57
  %207 = fmul float %199, 0x3FE9884540000000, !dbg !57
  %208 = fmul float %200, 0x3FE9884540000000, !dbg !57
  %209 = fmul float %201, 0x3FE9884540000000, !dbg !57
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i152 = icmp eq i32 %210, 0, !dbg !58
  %211 = tail call float @llvm.nvvm.fabs.ftz.f(float %202) #5, !dbg !58
  %212 = tail call float @llvm.nvvm.fabs.f(float %202) #5, !dbg !58
  %.01.i153 = select i1 %.not.i152, float %212, float %211, !dbg !58
  %213 = fcmp ult float %.01.i153, 0x3FE3333340000000, !dbg !58
  br i1 %213, label %__internal_fmad.exit3.i159, label %__internal_fmad.exit1.i154, !dbg !58

__internal_fmad.exit1.i154:                       ; preds = %74
  %214 = fmul float %.01.i153, 0x4007154760000000, !dbg !58
  %215 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %214) #5, !dbg !58
  %216 = fadd float %215, 1.000000e+00, !dbg !58
  %217 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %216) #6, !dbg !58, !srcloc !59
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i155 = icmp eq i32 %218, 0, !dbg !58
  %219 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %217, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %220 = tail call float @llvm.nvvm.fma.rn.f(float %217, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i156 = select i1 %.not6.i155, float %220, float %219, !dbg !58
  %221 = fcmp oge float %.01.i153, 0x4022059680000000, !dbg !58
  %s.0.i157 = select i1 %221, float 1.000000e+00, float %.03.i156, !dbg !58
  %222 = bitcast float %s.0.i157 to i32, !dbg !58
  %223 = bitcast float %202 to i32, !dbg !58
  %224 = and i32 %223, -2147483648, !dbg !58
  %225 = or i32 %224, %222, !dbg !58
  %226 = bitcast i32 %225 to float, !dbg !58
  br label %__nv_tanhf.exit170, !dbg !58

__internal_fmad.exit3.i159:                       ; preds = %74
  %227 = fmul float %202, %202, !dbg !58
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i160 = icmp eq i32 %228, 0, !dbg !58
  %229 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %227, float 0xBFAAC795C0000000) #5, !dbg !58
  %230 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %227, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i161 = select i1 %.not1.i160, float %230, float %229, !dbg !58
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i162 = icmp eq i32 %231, 0, !dbg !58
  %232 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i161, float %227, float 0x3FC10B2820000000) #5, !dbg !58
  %233 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i161, float %227, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i163 = select i1 %.not2.i162, float %233, float %232, !dbg !58
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i164 = icmp eq i32 %234, 0, !dbg !58
  %235 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i163, float %227, float 0xBFD5553DA0000000) #5, !dbg !58
  %236 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i163, float %227, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i165 = select i1 %.not3.i164, float %236, float %235, !dbg !58
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i166 = icmp eq i32 %237, 0, !dbg !58
  %238 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i165, float %227, float 0.000000e+00) #5, !dbg !58
  %239 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i165, float %227, float 0.000000e+00) #5, !dbg !58
  %.04.i167 = select i1 %.not4.i166, float %239, float %238, !dbg !58
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i168 = icmp eq i32 %240, 0, !dbg !58
  %241 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i167, float %202, float %202) #5, !dbg !58
  %242 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i167, float %202, float %202) #5, !dbg !58
  %.02.i169 = select i1 %.not5.i168, float %242, float %241, !dbg !58
  br label %__nv_tanhf.exit170, !dbg !58

__nv_tanhf.exit170:                               ; preds = %__internal_fmad.exit1.i154, %__internal_fmad.exit3.i159
  %s.1.i158 = phi float [ %226, %__internal_fmad.exit1.i154 ], [ %.02.i169, %__internal_fmad.exit3.i159 ], !dbg !58
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i171 = icmp eq i32 %243, 0, !dbg !58
  %244 = tail call float @llvm.nvvm.fabs.ftz.f(float %203) #5, !dbg !58
  %245 = tail call float @llvm.nvvm.fabs.f(float %203) #5, !dbg !58
  %.01.i172 = select i1 %.not.i171, float %245, float %244, !dbg !58
  %246 = fcmp ult float %.01.i172, 0x3FE3333340000000, !dbg !58
  br i1 %246, label %__internal_fmad.exit3.i178, label %__internal_fmad.exit1.i173, !dbg !58

__internal_fmad.exit1.i173:                       ; preds = %__nv_tanhf.exit170
  %247 = fmul float %.01.i172, 0x4007154760000000, !dbg !58
  %248 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %247) #5, !dbg !58
  %249 = fadd float %248, 1.000000e+00, !dbg !58
  %250 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %249) #6, !dbg !58, !srcloc !59
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i174 = icmp eq i32 %251, 0, !dbg !58
  %252 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %250, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %253 = tail call float @llvm.nvvm.fma.rn.f(float %250, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i175 = select i1 %.not6.i174, float %253, float %252, !dbg !58
  %254 = fcmp oge float %.01.i172, 0x4022059680000000, !dbg !58
  %s.0.i176 = select i1 %254, float 1.000000e+00, float %.03.i175, !dbg !58
  %255 = bitcast float %s.0.i176 to i32, !dbg !58
  %256 = bitcast float %203 to i32, !dbg !58
  %257 = and i32 %256, -2147483648, !dbg !58
  %258 = or i32 %257, %255, !dbg !58
  %259 = bitcast i32 %258 to float, !dbg !58
  br label %__nv_tanhf.exit189, !dbg !58

__internal_fmad.exit3.i178:                       ; preds = %__nv_tanhf.exit170
  %260 = fmul float %203, %203, !dbg !58
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i179 = icmp eq i32 %261, 0, !dbg !58
  %262 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %260, float 0xBFAAC795C0000000) #5, !dbg !58
  %263 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %260, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i180 = select i1 %.not1.i179, float %263, float %262, !dbg !58
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i181 = icmp eq i32 %264, 0, !dbg !58
  %265 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i180, float %260, float 0x3FC10B2820000000) #5, !dbg !58
  %266 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i180, float %260, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i182 = select i1 %.not2.i181, float %266, float %265, !dbg !58
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i183 = icmp eq i32 %267, 0, !dbg !58
  %268 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i182, float %260, float 0xBFD5553DA0000000) #5, !dbg !58
  %269 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i182, float %260, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i184 = select i1 %.not3.i183, float %269, float %268, !dbg !58
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i185 = icmp eq i32 %270, 0, !dbg !58
  %271 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i184, float %260, float 0.000000e+00) #5, !dbg !58
  %272 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i184, float %260, float 0.000000e+00) #5, !dbg !58
  %.04.i186 = select i1 %.not4.i185, float %272, float %271, !dbg !58
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i187 = icmp eq i32 %273, 0, !dbg !58
  %274 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i186, float %203, float %203) #5, !dbg !58
  %275 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i186, float %203, float %203) #5, !dbg !58
  %.02.i188 = select i1 %.not5.i187, float %275, float %274, !dbg !58
  br label %__nv_tanhf.exit189, !dbg !58

__nv_tanhf.exit189:                               ; preds = %__internal_fmad.exit1.i173, %__internal_fmad.exit3.i178
  %s.1.i177 = phi float [ %259, %__internal_fmad.exit1.i173 ], [ %.02.i188, %__internal_fmad.exit3.i178 ], !dbg !58
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i190 = icmp eq i32 %276, 0, !dbg !58
  %277 = tail call float @llvm.nvvm.fabs.ftz.f(float %204) #5, !dbg !58
  %278 = tail call float @llvm.nvvm.fabs.f(float %204) #5, !dbg !58
  %.01.i191 = select i1 %.not.i190, float %278, float %277, !dbg !58
  %279 = fcmp ult float %.01.i191, 0x3FE3333340000000, !dbg !58
  br i1 %279, label %__internal_fmad.exit3.i197, label %__internal_fmad.exit1.i192, !dbg !58

__internal_fmad.exit1.i192:                       ; preds = %__nv_tanhf.exit189
  %280 = fmul float %.01.i191, 0x4007154760000000, !dbg !58
  %281 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %280) #5, !dbg !58
  %282 = fadd float %281, 1.000000e+00, !dbg !58
  %283 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %282) #6, !dbg !58, !srcloc !59
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i193 = icmp eq i32 %284, 0, !dbg !58
  %285 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %283, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %286 = tail call float @llvm.nvvm.fma.rn.f(float %283, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i194 = select i1 %.not6.i193, float %286, float %285, !dbg !58
  %287 = fcmp oge float %.01.i191, 0x4022059680000000, !dbg !58
  %s.0.i195 = select i1 %287, float 1.000000e+00, float %.03.i194, !dbg !58
  %288 = bitcast float %s.0.i195 to i32, !dbg !58
  %289 = bitcast float %204 to i32, !dbg !58
  %290 = and i32 %289, -2147483648, !dbg !58
  %291 = or i32 %290, %288, !dbg !58
  %292 = bitcast i32 %291 to float, !dbg !58
  br label %__nv_tanhf.exit208, !dbg !58

__internal_fmad.exit3.i197:                       ; preds = %__nv_tanhf.exit189
  %293 = fmul float %204, %204, !dbg !58
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i198 = icmp eq i32 %294, 0, !dbg !58
  %295 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %293, float 0xBFAAC795C0000000) #5, !dbg !58
  %296 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %293, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i199 = select i1 %.not1.i198, float %296, float %295, !dbg !58
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i200 = icmp eq i32 %297, 0, !dbg !58
  %298 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i199, float %293, float 0x3FC10B2820000000) #5, !dbg !58
  %299 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i199, float %293, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i201 = select i1 %.not2.i200, float %299, float %298, !dbg !58
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i202 = icmp eq i32 %300, 0, !dbg !58
  %301 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i201, float %293, float 0xBFD5553DA0000000) #5, !dbg !58
  %302 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i201, float %293, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i203 = select i1 %.not3.i202, float %302, float %301, !dbg !58
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i204 = icmp eq i32 %303, 0, !dbg !58
  %304 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i203, float %293, float 0.000000e+00) #5, !dbg !58
  %305 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i203, float %293, float 0.000000e+00) #5, !dbg !58
  %.04.i205 = select i1 %.not4.i204, float %305, float %304, !dbg !58
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i206 = icmp eq i32 %306, 0, !dbg !58
  %307 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i205, float %204, float %204) #5, !dbg !58
  %308 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i205, float %204, float %204) #5, !dbg !58
  %.02.i207 = select i1 %.not5.i206, float %308, float %307, !dbg !58
  br label %__nv_tanhf.exit208, !dbg !58

__nv_tanhf.exit208:                               ; preds = %__internal_fmad.exit1.i192, %__internal_fmad.exit3.i197
  %s.1.i196 = phi float [ %292, %__internal_fmad.exit1.i192 ], [ %.02.i207, %__internal_fmad.exit3.i197 ], !dbg !58
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i209 = icmp eq i32 %309, 0, !dbg !58
  %310 = tail call float @llvm.nvvm.fabs.ftz.f(float %205) #5, !dbg !58
  %311 = tail call float @llvm.nvvm.fabs.f(float %205) #5, !dbg !58
  %.01.i210 = select i1 %.not.i209, float %311, float %310, !dbg !58
  %312 = fcmp ult float %.01.i210, 0x3FE3333340000000, !dbg !58
  br i1 %312, label %__internal_fmad.exit3.i216, label %__internal_fmad.exit1.i211, !dbg !58

__internal_fmad.exit1.i211:                       ; preds = %__nv_tanhf.exit208
  %313 = fmul float %.01.i210, 0x4007154760000000, !dbg !58
  %314 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %313) #5, !dbg !58
  %315 = fadd float %314, 1.000000e+00, !dbg !58
  %316 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %315) #6, !dbg !58, !srcloc !59
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i212 = icmp eq i32 %317, 0, !dbg !58
  %318 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %316, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %319 = tail call float @llvm.nvvm.fma.rn.f(float %316, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i213 = select i1 %.not6.i212, float %319, float %318, !dbg !58
  %320 = fcmp oge float %.01.i210, 0x4022059680000000, !dbg !58
  %s.0.i214 = select i1 %320, float 1.000000e+00, float %.03.i213, !dbg !58
  %321 = bitcast float %s.0.i214 to i32, !dbg !58
  %322 = bitcast float %205 to i32, !dbg !58
  %323 = and i32 %322, -2147483648, !dbg !58
  %324 = or i32 %323, %321, !dbg !58
  %325 = bitcast i32 %324 to float, !dbg !58
  br label %__nv_tanhf.exit227, !dbg !58

__internal_fmad.exit3.i216:                       ; preds = %__nv_tanhf.exit208
  %326 = fmul float %205, %205, !dbg !58
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i217 = icmp eq i32 %327, 0, !dbg !58
  %328 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %326, float 0xBFAAC795C0000000) #5, !dbg !58
  %329 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %326, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i218 = select i1 %.not1.i217, float %329, float %328, !dbg !58
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i219 = icmp eq i32 %330, 0, !dbg !58
  %331 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i218, float %326, float 0x3FC10B2820000000) #5, !dbg !58
  %332 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i218, float %326, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i220 = select i1 %.not2.i219, float %332, float %331, !dbg !58
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i221 = icmp eq i32 %333, 0, !dbg !58
  %334 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i220, float %326, float 0xBFD5553DA0000000) #5, !dbg !58
  %335 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i220, float %326, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i222 = select i1 %.not3.i221, float %335, float %334, !dbg !58
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i223 = icmp eq i32 %336, 0, !dbg !58
  %337 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i222, float %326, float 0.000000e+00) #5, !dbg !58
  %338 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i222, float %326, float 0.000000e+00) #5, !dbg !58
  %.04.i224 = select i1 %.not4.i223, float %338, float %337, !dbg !58
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i225 = icmp eq i32 %339, 0, !dbg !58
  %340 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i224, float %205, float %205) #5, !dbg !58
  %341 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i224, float %205, float %205) #5, !dbg !58
  %.02.i226 = select i1 %.not5.i225, float %341, float %340, !dbg !58
  br label %__nv_tanhf.exit227, !dbg !58

__nv_tanhf.exit227:                               ; preds = %__internal_fmad.exit1.i211, %__internal_fmad.exit3.i216
  %s.1.i215 = phi float [ %325, %__internal_fmad.exit1.i211 ], [ %.02.i226, %__internal_fmad.exit3.i216 ], !dbg !58
  %342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i228 = icmp eq i32 %342, 0, !dbg !58
  %343 = tail call float @llvm.nvvm.fabs.ftz.f(float %206) #5, !dbg !58
  %344 = tail call float @llvm.nvvm.fabs.f(float %206) #5, !dbg !58
  %.01.i229 = select i1 %.not.i228, float %344, float %343, !dbg !58
  %345 = fcmp ult float %.01.i229, 0x3FE3333340000000, !dbg !58
  br i1 %345, label %__internal_fmad.exit3.i235, label %__internal_fmad.exit1.i230, !dbg !58

__internal_fmad.exit1.i230:                       ; preds = %__nv_tanhf.exit227
  %346 = fmul float %.01.i229, 0x4007154760000000, !dbg !58
  %347 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %346) #5, !dbg !58
  %348 = fadd float %347, 1.000000e+00, !dbg !58
  %349 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %348) #6, !dbg !58, !srcloc !59
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i231 = icmp eq i32 %350, 0, !dbg !58
  %351 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %349, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %352 = tail call float @llvm.nvvm.fma.rn.f(float %349, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i232 = select i1 %.not6.i231, float %352, float %351, !dbg !58
  %353 = fcmp oge float %.01.i229, 0x4022059680000000, !dbg !58
  %s.0.i233 = select i1 %353, float 1.000000e+00, float %.03.i232, !dbg !58
  %354 = bitcast float %s.0.i233 to i32, !dbg !58
  %355 = bitcast float %206 to i32, !dbg !58
  %356 = and i32 %355, -2147483648, !dbg !58
  %357 = or i32 %356, %354, !dbg !58
  %358 = bitcast i32 %357 to float, !dbg !58
  br label %__nv_tanhf.exit246, !dbg !58

__internal_fmad.exit3.i235:                       ; preds = %__nv_tanhf.exit227
  %359 = fmul float %206, %206, !dbg !58
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i236 = icmp eq i32 %360, 0, !dbg !58
  %361 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %359, float 0xBFAAC795C0000000) #5, !dbg !58
  %362 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %359, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i237 = select i1 %.not1.i236, float %362, float %361, !dbg !58
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i238 = icmp eq i32 %363, 0, !dbg !58
  %364 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i237, float %359, float 0x3FC10B2820000000) #5, !dbg !58
  %365 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i237, float %359, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i239 = select i1 %.not2.i238, float %365, float %364, !dbg !58
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i240 = icmp eq i32 %366, 0, !dbg !58
  %367 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i239, float %359, float 0xBFD5553DA0000000) #5, !dbg !58
  %368 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i239, float %359, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i241 = select i1 %.not3.i240, float %368, float %367, !dbg !58
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i242 = icmp eq i32 %369, 0, !dbg !58
  %370 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i241, float %359, float 0.000000e+00) #5, !dbg !58
  %371 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i241, float %359, float 0.000000e+00) #5, !dbg !58
  %.04.i243 = select i1 %.not4.i242, float %371, float %370, !dbg !58
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i244 = icmp eq i32 %372, 0, !dbg !58
  %373 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i243, float %206, float %206) #5, !dbg !58
  %374 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i243, float %206, float %206) #5, !dbg !58
  %.02.i245 = select i1 %.not5.i244, float %374, float %373, !dbg !58
  br label %__nv_tanhf.exit246, !dbg !58

__nv_tanhf.exit246:                               ; preds = %__internal_fmad.exit1.i230, %__internal_fmad.exit3.i235
  %s.1.i234 = phi float [ %358, %__internal_fmad.exit1.i230 ], [ %.02.i245, %__internal_fmad.exit3.i235 ], !dbg !58
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i247 = icmp eq i32 %375, 0, !dbg !58
  %376 = tail call float @llvm.nvvm.fabs.ftz.f(float %207) #5, !dbg !58
  %377 = tail call float @llvm.nvvm.fabs.f(float %207) #5, !dbg !58
  %.01.i248 = select i1 %.not.i247, float %377, float %376, !dbg !58
  %378 = fcmp ult float %.01.i248, 0x3FE3333340000000, !dbg !58
  br i1 %378, label %__internal_fmad.exit3.i254, label %__internal_fmad.exit1.i249, !dbg !58

__internal_fmad.exit1.i249:                       ; preds = %__nv_tanhf.exit246
  %379 = fmul float %.01.i248, 0x4007154760000000, !dbg !58
  %380 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %379) #5, !dbg !58
  %381 = fadd float %380, 1.000000e+00, !dbg !58
  %382 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %381) #6, !dbg !58, !srcloc !59
  %383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i250 = icmp eq i32 %383, 0, !dbg !58
  %384 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %382, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %385 = tail call float @llvm.nvvm.fma.rn.f(float %382, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i251 = select i1 %.not6.i250, float %385, float %384, !dbg !58
  %386 = fcmp oge float %.01.i248, 0x4022059680000000, !dbg !58
  %s.0.i252 = select i1 %386, float 1.000000e+00, float %.03.i251, !dbg !58
  %387 = bitcast float %s.0.i252 to i32, !dbg !58
  %388 = bitcast float %207 to i32, !dbg !58
  %389 = and i32 %388, -2147483648, !dbg !58
  %390 = or i32 %389, %387, !dbg !58
  %391 = bitcast i32 %390 to float, !dbg !58
  br label %__nv_tanhf.exit265, !dbg !58

__internal_fmad.exit3.i254:                       ; preds = %__nv_tanhf.exit246
  %392 = fmul float %207, %207, !dbg !58
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i255 = icmp eq i32 %393, 0, !dbg !58
  %394 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %392, float 0xBFAAC795C0000000) #5, !dbg !58
  %395 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %392, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i256 = select i1 %.not1.i255, float %395, float %394, !dbg !58
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i257 = icmp eq i32 %396, 0, !dbg !58
  %397 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i256, float %392, float 0x3FC10B2820000000) #5, !dbg !58
  %398 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i256, float %392, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i258 = select i1 %.not2.i257, float %398, float %397, !dbg !58
  %399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i259 = icmp eq i32 %399, 0, !dbg !58
  %400 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i258, float %392, float 0xBFD5553DA0000000) #5, !dbg !58
  %401 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i258, float %392, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i260 = select i1 %.not3.i259, float %401, float %400, !dbg !58
  %402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i261 = icmp eq i32 %402, 0, !dbg !58
  %403 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i260, float %392, float 0.000000e+00) #5, !dbg !58
  %404 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i260, float %392, float 0.000000e+00) #5, !dbg !58
  %.04.i262 = select i1 %.not4.i261, float %404, float %403, !dbg !58
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i263 = icmp eq i32 %405, 0, !dbg !58
  %406 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i262, float %207, float %207) #5, !dbg !58
  %407 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i262, float %207, float %207) #5, !dbg !58
  %.02.i264 = select i1 %.not5.i263, float %407, float %406, !dbg !58
  br label %__nv_tanhf.exit265, !dbg !58

__nv_tanhf.exit265:                               ; preds = %__internal_fmad.exit1.i249, %__internal_fmad.exit3.i254
  %s.1.i253 = phi float [ %391, %__internal_fmad.exit1.i249 ], [ %.02.i264, %__internal_fmad.exit3.i254 ], !dbg !58
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i266 = icmp eq i32 %408, 0, !dbg !58
  %409 = tail call float @llvm.nvvm.fabs.ftz.f(float %208) #5, !dbg !58
  %410 = tail call float @llvm.nvvm.fabs.f(float %208) #5, !dbg !58
  %.01.i267 = select i1 %.not.i266, float %410, float %409, !dbg !58
  %411 = fcmp ult float %.01.i267, 0x3FE3333340000000, !dbg !58
  br i1 %411, label %__internal_fmad.exit3.i273, label %__internal_fmad.exit1.i268, !dbg !58

__internal_fmad.exit1.i268:                       ; preds = %__nv_tanhf.exit265
  %412 = fmul float %.01.i267, 0x4007154760000000, !dbg !58
  %413 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %412) #5, !dbg !58
  %414 = fadd float %413, 1.000000e+00, !dbg !58
  %415 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %414) #6, !dbg !58, !srcloc !59
  %416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i269 = icmp eq i32 %416, 0, !dbg !58
  %417 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %415, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %418 = tail call float @llvm.nvvm.fma.rn.f(float %415, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i270 = select i1 %.not6.i269, float %418, float %417, !dbg !58
  %419 = fcmp oge float %.01.i267, 0x4022059680000000, !dbg !58
  %s.0.i271 = select i1 %419, float 1.000000e+00, float %.03.i270, !dbg !58
  %420 = bitcast float %s.0.i271 to i32, !dbg !58
  %421 = bitcast float %208 to i32, !dbg !58
  %422 = and i32 %421, -2147483648, !dbg !58
  %423 = or i32 %422, %420, !dbg !58
  %424 = bitcast i32 %423 to float, !dbg !58
  br label %__nv_tanhf.exit284, !dbg !58

__internal_fmad.exit3.i273:                       ; preds = %__nv_tanhf.exit265
  %425 = fmul float %208, %208, !dbg !58
  %426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i274 = icmp eq i32 %426, 0, !dbg !58
  %427 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %425, float 0xBFAAC795C0000000) #5, !dbg !58
  %428 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %425, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i275 = select i1 %.not1.i274, float %428, float %427, !dbg !58
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i276 = icmp eq i32 %429, 0, !dbg !58
  %430 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i275, float %425, float 0x3FC10B2820000000) #5, !dbg !58
  %431 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i275, float %425, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i277 = select i1 %.not2.i276, float %431, float %430, !dbg !58
  %432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i278 = icmp eq i32 %432, 0, !dbg !58
  %433 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i277, float %425, float 0xBFD5553DA0000000) #5, !dbg !58
  %434 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i277, float %425, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i279 = select i1 %.not3.i278, float %434, float %433, !dbg !58
  %435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i280 = icmp eq i32 %435, 0, !dbg !58
  %436 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i279, float %425, float 0.000000e+00) #5, !dbg !58
  %437 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i279, float %425, float 0.000000e+00) #5, !dbg !58
  %.04.i281 = select i1 %.not4.i280, float %437, float %436, !dbg !58
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i282 = icmp eq i32 %438, 0, !dbg !58
  %439 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i281, float %208, float %208) #5, !dbg !58
  %440 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i281, float %208, float %208) #5, !dbg !58
  %.02.i283 = select i1 %.not5.i282, float %440, float %439, !dbg !58
  br label %__nv_tanhf.exit284, !dbg !58

__nv_tanhf.exit284:                               ; preds = %__internal_fmad.exit1.i268, %__internal_fmad.exit3.i273
  %s.1.i272 = phi float [ %424, %__internal_fmad.exit1.i268 ], [ %.02.i283, %__internal_fmad.exit3.i273 ], !dbg !58
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i285 = icmp eq i32 %441, 0, !dbg !58
  %442 = tail call float @llvm.nvvm.fabs.ftz.f(float %209) #5, !dbg !58
  %443 = tail call float @llvm.nvvm.fabs.f(float %209) #5, !dbg !58
  %.01.i286 = select i1 %.not.i285, float %443, float %442, !dbg !58
  %444 = fcmp ult float %.01.i286, 0x3FE3333340000000, !dbg !58
  br i1 %444, label %__internal_fmad.exit3.i292, label %__internal_fmad.exit1.i287, !dbg !58

__internal_fmad.exit1.i287:                       ; preds = %__nv_tanhf.exit284
  %445 = fmul float %.01.i286, 0x4007154760000000, !dbg !58
  %446 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %445) #5, !dbg !58
  %447 = fadd float %446, 1.000000e+00, !dbg !58
  %448 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %447) #6, !dbg !58, !srcloc !59
  %449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i288 = icmp eq i32 %449, 0, !dbg !58
  %450 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %448, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %451 = tail call float @llvm.nvvm.fma.rn.f(float %448, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i289 = select i1 %.not6.i288, float %451, float %450, !dbg !58
  %452 = fcmp oge float %.01.i286, 0x4022059680000000, !dbg !58
  %s.0.i290 = select i1 %452, float 1.000000e+00, float %.03.i289, !dbg !58
  %453 = bitcast float %s.0.i290 to i32, !dbg !58
  %454 = bitcast float %209 to i32, !dbg !58
  %455 = and i32 %454, -2147483648, !dbg !58
  %456 = or i32 %455, %453, !dbg !58
  %457 = bitcast i32 %456 to float, !dbg !58
  br label %__nv_tanhf.exit303, !dbg !58

__internal_fmad.exit3.i292:                       ; preds = %__nv_tanhf.exit284
  %458 = fmul float %209, %209, !dbg !58
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i293 = icmp eq i32 %459, 0, !dbg !58
  %460 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %458, float 0xBFAAC795C0000000) #5, !dbg !58
  %461 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %458, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i294 = select i1 %.not1.i293, float %461, float %460, !dbg !58
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i295 = icmp eq i32 %462, 0, !dbg !58
  %463 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i294, float %458, float 0x3FC10B2820000000) #5, !dbg !58
  %464 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i294, float %458, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i296 = select i1 %.not2.i295, float %464, float %463, !dbg !58
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i297 = icmp eq i32 %465, 0, !dbg !58
  %466 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i296, float %458, float 0xBFD5553DA0000000) #5, !dbg !58
  %467 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i296, float %458, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i298 = select i1 %.not3.i297, float %467, float %466, !dbg !58
  %468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i299 = icmp eq i32 %468, 0, !dbg !58
  %469 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i298, float %458, float 0.000000e+00) #5, !dbg !58
  %470 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i298, float %458, float 0.000000e+00) #5, !dbg !58
  %.04.i300 = select i1 %.not4.i299, float %470, float %469, !dbg !58
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i301 = icmp eq i32 %471, 0, !dbg !58
  %472 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i300, float %209, float %209) #5, !dbg !58
  %473 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i300, float %209, float %209) #5, !dbg !58
  %.02.i302 = select i1 %.not5.i301, float %473, float %472, !dbg !58
  br label %__nv_tanhf.exit303, !dbg !58

__nv_tanhf.exit303:                               ; preds = %__internal_fmad.exit1.i287, %__internal_fmad.exit3.i292
  %s.1.i291 = phi float [ %457, %__internal_fmad.exit1.i287 ], [ %.02.i302, %__internal_fmad.exit3.i292 ], !dbg !58
  %474 = insertelement <2 x float> poison, float %s.1.i158, i64 0, !dbg !60
  %475 = insertelement <2 x float> %474, float %s.1.i177, i64 1, !dbg !60
  %476 = fadd <2 x float> %475, splat (float 1.000000e+00), !dbg !60
  %477 = insertelement <2 x float> poison, float %s.1.i215, i64 0, !dbg !60
  %478 = insertelement <2 x float> %477, float %s.1.i196, i64 1, !dbg !60
  %479 = fadd <2 x float> %478, splat (float 1.000000e+00), !dbg !60
  %480 = insertelement <4 x float> poison, float %s.1.i291, i64 0, !dbg !60
  %481 = insertelement <4 x float> %480, float %s.1.i272, i64 1, !dbg !60
  %482 = insertelement <4 x float> %481, float %s.1.i253, i64 2, !dbg !60
  %483 = insertelement <4 x float> %482, float %s.1.i234, i64 3, !dbg !60
  %484 = fadd <4 x float> %483, splat (float 1.000000e+00), !dbg !60
  %485 = fcmp uno float %76, 0.000000e+00, !dbg !61
  %486 = fcmp uno float %77, 0.000000e+00, !dbg !61
  %487 = fcmp uno <4 x float> %81, zeroinitializer, !dbg !63
  %488 = fcmp uno <4 x float> %79, zeroinitializer, !dbg !61
  %489 = fmul <4 x float> %161, %484, !dbg !65
  %490 = fcmp olt <4 x float> %79, %489, !dbg !66
  %491 = or <4 x i1> %488, %490, !dbg !67
  %492 = select <4 x i1> %491, <4 x float> %79, <4 x float> %489, !dbg !68
  %493 = insertelement <4 x i1> poison, i1 %97, i64 0, !dbg !69
  %494 = shufflevector <4 x i1> %493, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !69
  %495 = select <4 x i1> %494, <4 x float> %492, <4 x float> %79, !dbg !69
  %496 = fcmp uno <2 x float> %78, zeroinitializer, !dbg !63
  %497 = fcmp uno <4 x float> %80, zeroinitializer, !dbg !63
  %498 = fmul <2 x float> %159, %476, !dbg !65
  %499 = extractelement <2 x float> %498, i64 0, !dbg !68
  %500 = fcmp olt float %76, %499, !dbg !66
  %501 = extractelement <2 x float> %498, i64 1, !dbg !68
  %502 = fcmp olt float %77, %501, !dbg !66
  %503 = or i1 %485, %500, !dbg !67
  %504 = or i1 %486, %502, !dbg !67
  %505 = select i1 %503, float %76, float %499, !dbg !68
  %506 = select i1 %504, float %77, float %501, !dbg !68
  %507 = select i1 %97, float %505, float %76, !dbg !69
  %508 = select i1 %97, float %506, float %77, !dbg !69
  %509 = fcmp ogt <2 x float> %78, %498, !dbg !70
  %510 = or <2 x i1> %496, %509, !dbg !71
  %511 = select <2 x i1> %510, <2 x float> %78, <2 x float> %498, !dbg !72
  %512 = fmul <2 x float> %160, %479, !dbg !65
  %513 = shufflevector <2 x float> %512, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !65
  %514 = fcmp ogt <4 x float> %81, %513, !dbg !70
  %515 = fcmp olt <4 x float> %81, %513, !dbg !70
  %516 = shufflevector <4 x i1> %514, <4 x i1> %515, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !70
  %517 = or <4 x i1> %487, %516, !dbg !71
  %518 = select <4 x i1> %517, <4 x float> %81, <4 x float> %513, !dbg !72
  %519 = fcmp ogt <4 x float> %80, %489, !dbg !70
  %520 = or <4 x i1> %497, %519, !dbg !71
  %521 = select <4 x i1> %520, <4 x float> %80, <4 x float> %489, !dbg !72
  %522 = insertelement <2 x i1> poison, i1 %97, i64 0, !dbg !73
  %523 = shufflevector <2 x i1> %522, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !73
  %524 = select <2 x i1> %523, <2 x float> %511, <2 x float> %78, !dbg !73
  %525 = select <4 x i1> %494, <4 x float> %518, <4 x float> %81, !dbg !73
  %526 = select <4 x i1> %494, <4 x float> %521, <4 x float> %80, !dbg !73
  %527 = sext i32 %90 to i64, !dbg !74
  %528 = getelementptr float, ptr addrspace(1) %5, i64 %527, !dbg !74
  %529 = sext i32 %92 to i64, !dbg !74
  %530 = getelementptr float, ptr addrspace(1) %5, i64 %529, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %531 = bitcast float %162 to i32, !dbg !75
  %532 = bitcast float %164 to i32, !dbg !75
  %533 = bitcast float %166 to i32, !dbg !75
  %534 = bitcast float %168 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %61, i32 %531, i32 %532, i32 %533, i32 %534, i1 true) #5, !dbg !75
  %535 = bitcast float %170 to i32, !dbg !75
  %536 = bitcast float %172 to i32, !dbg !75
  %537 = bitcast float %174 to i32, !dbg !75
  %538 = bitcast float %176 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %62, i32 %535, i32 %536, i32 %537, i32 %538, i1 true) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %539 = load <4 x i32>, ptr addrspace(3) %64, align 16, !dbg !75
  %.extract = load i32, ptr addrspace(3) %63, align 16, !dbg !75
  %.extract12 = load i32, ptr addrspace(3) %67, align 4, !dbg !75
  %.extract13 = load i32, ptr addrspace(3) %68, align 8, !dbg !75
  %.extract14 = load i32, ptr addrspace(3) %69, align 4, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %528, i1 %14) #5, !dbg !75
  %.extract15 = extractelement <4 x i32> %539, i64 0, !dbg !75
  %.extract16 = extractelement <4 x i32> %539, i64 1, !dbg !75
  %.extract17 = extractelement <4 x i32> %539, i64 2, !dbg !75
  %.extract18 = extractelement <4 x i32> %539, i64 3, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %530, i1 %98) #5, !dbg !75
  br i1 %75, label %74, label %540, !dbg !35

540:                                              ; preds = %__nv_tanhf.exit303
  %541 = lshr i32 %15, 5, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %542 = fcmp olt float %507, %508, !dbg !78
  %543 = fcmp uno float %507, 0.000000e+00, !dbg !80
  %544 = or i1 %542, %543, !dbg !81
  %545 = select i1 %544, float %507, float %508, !dbg !82
  %546 = extractelement <4 x float> %525, i64 3, !dbg !78
  %547 = fcmp olt float %545, %546, !dbg !78
  %548 = fcmp uno float %545, 0.000000e+00, !dbg !80
  %549 = or i1 %547, %548, !dbg !81
  %550 = select i1 %549, float %545, float %546, !dbg !82
  %551 = extractelement <4 x float> %525, i64 2, !dbg !78
  %552 = fcmp olt float %550, %551, !dbg !78
  %553 = fcmp uno float %550, 0.000000e+00, !dbg !80
  %554 = or i1 %552, %553, !dbg !81
  %555 = select i1 %554, float %550, float %551, !dbg !82
  %556 = extractelement <4 x float> %495, i64 3, !dbg !78
  %557 = fcmp olt float %555, %556, !dbg !78
  %558 = fcmp uno float %555, 0.000000e+00, !dbg !80
  %559 = or i1 %557, %558, !dbg !81
  %560 = select i1 %559, float %555, float %556, !dbg !82
  %561 = extractelement <4 x float> %495, i64 2, !dbg !78
  %562 = fcmp olt float %560, %561, !dbg !78
  %563 = fcmp uno float %560, 0.000000e+00, !dbg !80
  %564 = or i1 %562, %563, !dbg !81
  %565 = select i1 %564, float %560, float %561, !dbg !82
  %566 = extractelement <4 x float> %495, i64 1, !dbg !78
  %567 = fcmp olt float %565, %566, !dbg !78
  %568 = fcmp uno float %565, 0.000000e+00, !dbg !80
  %569 = or i1 %567, %568, !dbg !81
  %570 = select i1 %569, float %565, float %566, !dbg !82
  %571 = extractelement <4 x float> %495, i64 0, !dbg !78
  %572 = fcmp olt float %570, %571, !dbg !78
  %573 = fcmp uno float %570, 0.000000e+00, !dbg !80
  %574 = or i1 %572, %573, !dbg !81
  %575 = select i1 %574, float %570, float %571, !dbg !82
  %576 = bitcast float %575 to i32, !dbg !76
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 16, i32 31), !dbg !76
  %578 = bitcast i32 %577 to float, !dbg !76
  %579 = fcmp olt float %575, %578, !dbg !78
  %580 = fcmp uno float %575, 0.000000e+00, !dbg !80
  %581 = or i1 %580, %579, !dbg !81
  %582 = select i1 %581, float %575, float %578, !dbg !82
  %583 = bitcast float %582 to i32, !dbg !76
  %584 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %583, i32 8, i32 31), !dbg !76
  %585 = bitcast i32 %584 to float, !dbg !76
  %586 = fcmp olt float %582, %585, !dbg !78
  %587 = fcmp uno float %582, 0.000000e+00, !dbg !80
  %588 = or i1 %586, %587, !dbg !81
  %589 = select i1 %588, float %582, float %585, !dbg !82
  %590 = bitcast float %589 to i32, !dbg !76
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 4, i32 31), !dbg !76
  %592 = bitcast i32 %591 to float, !dbg !76
  %593 = fcmp olt float %589, %592, !dbg !78
  %594 = fcmp uno float %589, 0.000000e+00, !dbg !80
  %595 = or i1 %593, %594, !dbg !81
  %596 = select i1 %595, float %589, float %592, !dbg !82
  %597 = bitcast float %596 to i32, !dbg !76
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 2, i32 31), !dbg !76
  %599 = bitcast i32 %598 to float, !dbg !76
  %600 = fcmp olt float %596, %599, !dbg !78
  %601 = fcmp uno float %596, 0.000000e+00, !dbg !80
  %602 = or i1 %600, %601, !dbg !81
  %603 = select i1 %602, float %596, float %599, !dbg !82
  %604 = bitcast float %603 to i32, !dbg !76
  %605 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %604, i32 1, i32 31), !dbg !76
  %606 = bitcast i32 %605 to float, !dbg !76
  %607 = fcmp olt float %603, %606, !dbg !78
  %608 = fcmp uno float %603, 0.000000e+00, !dbg !80
  %609 = or i1 %607, %608, !dbg !81
  %610 = and i32 %541, 31, !dbg !76
  %611 = icmp eq i32 %16, 0, !dbg !76
  %612 = getelementptr float, ptr addrspace(3) @global_smem, i32 %610, !dbg !76
  %613 = select i1 %609, i32 %604, i32 %605, !dbg !82
  %614 = insertelement <1 x i32> poison, i32 %613, i64 0, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %612, <1 x i32> %614, i1 %611) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %615 = icmp slt i32 %15, 32, !dbg !76
  %616 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !76
  %617 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %616, i1 %615) #5, !dbg !76
  %618 = bitcast i32 %617 to float, !dbg !76
  %619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 16, i32 31), !dbg !76
  %620 = bitcast i32 %619 to float, !dbg !76
  %621 = fcmp olt float %618, %620, !dbg !78
  %622 = fcmp uno float %618, 0.000000e+00, !dbg !80
  %623 = or i1 %622, %621, !dbg !81
  %624 = select i1 %623, float %618, float %620, !dbg !82
  %625 = bitcast float %624 to i32, !dbg !76
  %626 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %625, i32 8, i32 31), !dbg !76
  %627 = bitcast i32 %626 to float, !dbg !76
  %628 = fcmp olt float %624, %627, !dbg !78
  %629 = fcmp uno float %624, 0.000000e+00, !dbg !80
  %630 = or i1 %628, %629, !dbg !81
  %631 = select i1 %630, float %624, float %627, !dbg !82
  %632 = bitcast float %631 to i32, !dbg !76
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 4, i32 31), !dbg !76
  %634 = bitcast i32 %633 to float, !dbg !76
  %635 = fcmp olt float %631, %634, !dbg !78
  %636 = fcmp uno float %631, 0.000000e+00, !dbg !80
  %637 = or i1 %635, %636, !dbg !81
  %638 = select i1 %637, float %631, float %634, !dbg !82
  %639 = bitcast float %638 to i32, !dbg !76
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 2, i32 31), !dbg !76
  %641 = bitcast i32 %640 to float, !dbg !76
  %642 = fcmp olt float %638, %641, !dbg !78
  %643 = fcmp uno float %638, 0.000000e+00, !dbg !80
  %644 = or i1 %642, %643, !dbg !81
  %645 = select i1 %644, float %638, float %641, !dbg !82
  %646 = bitcast float %645 to i32, !dbg !76
  %647 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %646, i32 1, i32 31), !dbg !76
  %648 = bitcast i32 %647 to float, !dbg !76
  %649 = fcmp olt float %645, %648, !dbg !78
  %650 = fcmp uno float %645, 0.000000e+00, !dbg !80
  %651 = or i1 %649, %650, !dbg !81
  %652 = and i1 %615, %611, !dbg !76
  %653 = select i1 %651, i32 %646, i32 %647, !dbg !82
  %654 = insertelement <1 x i32> poison, i32 %653, i64 0, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %616, <1 x i32> %654, i1 %652) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %655 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %656 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %524, <2 x i32> <i32 0, i32 2>, !dbg !85
  %657 = fcmp ogt <2 x float> %656, %524, !dbg !85
  %658 = fcmp uno <2 x float> %656, %524, !dbg !85
  %shift = shufflevector <2 x i1> %657, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !86
  %659 = or <2 x i1> %shift, %658, !dbg !86
  %660 = extractelement <2 x i1> %659, i64 0, !dbg !86
  %661 = extractelement <2 x float> %524, i64 0, !dbg !87
  %662 = extractelement <2 x float> %524, i64 1, !dbg !87
  %663 = select i1 %660, float %661, float %662, !dbg !87
  %664 = extractelement <4 x float> %525, i64 1, !dbg !85
  %665 = fcmp ogt float %663, %664, !dbg !85
  %666 = fcmp uno float %663, 0.000000e+00, !dbg !88
  %667 = or i1 %665, %666, !dbg !86
  %668 = select i1 %667, float %663, float %664, !dbg !87
  %669 = extractelement <4 x float> %525, i64 0, !dbg !85
  %670 = fcmp ogt float %668, %669, !dbg !85
  %671 = fcmp uno float %668, 0.000000e+00, !dbg !88
  %672 = or i1 %670, %671, !dbg !86
  %673 = select i1 %672, float %668, float %669, !dbg !87
  %674 = extractelement <4 x float> %526, i64 3, !dbg !85
  %675 = fcmp ogt float %673, %674, !dbg !85
  %676 = fcmp uno float %673, 0.000000e+00, !dbg !88
  %677 = or i1 %675, %676, !dbg !86
  %678 = select i1 %677, float %673, float %674, !dbg !87
  %679 = extractelement <4 x float> %526, i64 2, !dbg !85
  %680 = fcmp ogt float %678, %679, !dbg !85
  %681 = fcmp uno float %678, 0.000000e+00, !dbg !88
  %682 = or i1 %680, %681, !dbg !86
  %683 = select i1 %682, float %678, float %679, !dbg !87
  %684 = extractelement <4 x float> %526, i64 1, !dbg !85
  %685 = fcmp ogt float %683, %684, !dbg !85
  %686 = fcmp uno float %683, 0.000000e+00, !dbg !88
  %687 = or i1 %685, %686, !dbg !86
  %688 = select i1 %687, float %683, float %684, !dbg !87
  %689 = extractelement <4 x float> %526, i64 0, !dbg !85
  %690 = fcmp ogt float %688, %689, !dbg !85
  %691 = fcmp uno float %688, 0.000000e+00, !dbg !88
  %692 = or i1 %690, %691, !dbg !86
  %693 = select i1 %692, float %688, float %689, !dbg !87
  %694 = bitcast float %693 to i32, !dbg !83
  %695 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %694, i32 16, i32 31), !dbg !83
  %696 = bitcast i32 %695 to float, !dbg !83
  %697 = fcmp ogt float %693, %696, !dbg !85
  %698 = fcmp uno float %693, 0.000000e+00, !dbg !88
  %699 = or i1 %698, %697, !dbg !86
  %700 = select i1 %699, float %693, float %696, !dbg !87
  %701 = bitcast float %700 to i32, !dbg !83
  %702 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %701, i32 8, i32 31), !dbg !83
  %703 = bitcast i32 %702 to float, !dbg !83
  %704 = fcmp ogt float %700, %703, !dbg !85
  %705 = fcmp uno float %700, 0.000000e+00, !dbg !88
  %706 = or i1 %704, %705, !dbg !86
  %707 = select i1 %706, float %700, float %703, !dbg !87
  %708 = bitcast float %707 to i32, !dbg !83
  %709 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %708, i32 4, i32 31), !dbg !83
  %710 = bitcast i32 %709 to float, !dbg !83
  %711 = fcmp ogt float %707, %710, !dbg !85
  %712 = fcmp uno float %707, 0.000000e+00, !dbg !88
  %713 = or i1 %711, %712, !dbg !86
  %714 = select i1 %713, float %707, float %710, !dbg !87
  %715 = bitcast float %714 to i32, !dbg !83
  %716 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %715, i32 2, i32 31), !dbg !83
  %717 = bitcast i32 %716 to float, !dbg !83
  %718 = fcmp ogt float %714, %717, !dbg !85
  %719 = fcmp uno float %714, 0.000000e+00, !dbg !88
  %720 = or i1 %718, %719, !dbg !86
  %721 = select i1 %720, float %714, float %717, !dbg !87
  %722 = bitcast float %721 to i32, !dbg !83
  %723 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %722, i32 1, i32 31), !dbg !83
  %724 = bitcast i32 %723 to float, !dbg !83
  %725 = fcmp ogt float %721, %724, !dbg !85
  %726 = fcmp uno float %721, 0.000000e+00, !dbg !88
  %727 = or i1 %725, %726, !dbg !86
  %728 = select i1 %727, i32 %722, i32 %723, !dbg !87
  %729 = insertelement <1 x i32> poison, i32 %728, i64 0, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %612, <1 x i32> %729, i1 %611) #5, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %730 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %616, i1 %615) #5, !dbg !83
  %731 = bitcast i32 %730 to float, !dbg !83
  %732 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %730, i32 16, i32 31), !dbg !83
  %733 = bitcast i32 %732 to float, !dbg !83
  %734 = fcmp ogt float %731, %733, !dbg !85
  %735 = fcmp uno float %731, 0.000000e+00, !dbg !88
  %736 = or i1 %735, %734, !dbg !86
  %737 = select i1 %736, float %731, float %733, !dbg !87
  %738 = bitcast float %737 to i32, !dbg !83
  %739 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %738, i32 8, i32 31), !dbg !83
  %740 = bitcast i32 %739 to float, !dbg !83
  %741 = fcmp ogt float %737, %740, !dbg !85
  %742 = fcmp uno float %737, 0.000000e+00, !dbg !88
  %743 = or i1 %741, %742, !dbg !86
  %744 = select i1 %743, float %737, float %740, !dbg !87
  %745 = bitcast float %744 to i32, !dbg !83
  %746 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %745, i32 4, i32 31), !dbg !83
  %747 = bitcast i32 %746 to float, !dbg !83
  %748 = fcmp ogt float %744, %747, !dbg !85
  %749 = fcmp uno float %744, 0.000000e+00, !dbg !88
  %750 = or i1 %748, %749, !dbg !86
  %751 = select i1 %750, float %744, float %747, !dbg !87
  %752 = bitcast float %751 to i32, !dbg !83
  %753 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %752, i32 2, i32 31), !dbg !83
  %754 = bitcast i32 %753 to float, !dbg !83
  %755 = fcmp ogt float %751, %754, !dbg !85
  %756 = fcmp uno float %751, 0.000000e+00, !dbg !88
  %757 = or i1 %755, %756, !dbg !86
  %758 = select i1 %757, float %751, float %754, !dbg !87
  %759 = bitcast float %758 to i32, !dbg !83
  %760 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %759, i32 1, i32 31), !dbg !83
  %761 = bitcast i32 %760 to float, !dbg !83
  %762 = fcmp ogt float %758, %761, !dbg !85
  %763 = fcmp uno float %758, 0.000000e+00, !dbg !88
  %764 = or i1 %762, %763, !dbg !86
  %765 = select i1 %764, i32 %759, i32 %760, !dbg !87
  %766 = insertelement <1 x i32> poison, i32 %765, i64 0, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %616, <1 x i32> %766, i1 %652) #5, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %767 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !83
  %768 = getelementptr bfloat, ptr addrspace(1) %6, i64 %23, !dbg !89
  %769 = fptrunc float %655 to bfloat, !dbg !90
  %770 = and i32 %15, 1023, !dbg !90
  %771 = icmp eq i32 %770, 0, !dbg !90
  %772 = bitcast bfloat %769 to i16, !dbg !90
  %773 = and i1 %14, %771, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %772, ptr addrspace(1) %768, i1 %773) #5, !dbg !90
  %774 = getelementptr bfloat, ptr addrspace(1) %7, i64 %23, !dbg !91
  %775 = fptrunc float %767 to bfloat, !dbg !92
  %776 = bitcast bfloat %775 to i16, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %776, ptr addrspace(1) %774, i1 %773) #5, !dbg !92
  %.inv3 = fcmp oge float %655, 0.000000e+00, !dbg !93
  %777 = select i1 %.inv3, float 0.000000e+00, float %655, !dbg !93
  %778 = fsub float 0.000000e+00, %777, !dbg !95
  %.inv4 = fcmp ole float %767, 0.000000e+00, !dbg !96
  %779 = select i1 %.inv4, float 0.000000e+00, float %767, !dbg !96
  %780 = fcmp ogt float %778, %779, !dbg !98
  %781 = fcmp uno float %778, 0.000000e+00, !dbg !100
  %782 = or i1 %781, %780, !dbg !101
  %783 = select i1 %782, float %778, float %779, !dbg !102
  %784 = fmul float %783, 0x3F80204080000000, !dbg !103
  %785 = fcmp ogt float %784, 0x3EE4F8B580000000, !dbg !104
  %786 = fcmp uno float %784, 0.000000e+00, !dbg !106
  %787 = or i1 %785, %786, !dbg !107
  %788 = select i1 %787, float %784, float 0x3EE4F8B580000000, !dbg !108
  %789 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %788), !dbg !109
  br label %790, !dbg !110

790:                                              ; preds = %540, %__nv_tanhf.exit151
  %791 = phi i1 [ true, %540 ], [ false, %__nv_tanhf.exit151 ]
  %indvars.iv320 = phi i64 [ 0, %540 ], [ 8192, %__nv_tanhf.exit151 ]
  %792 = or disjoint i64 %indvars.iv320, %66, !dbg !111
  %793 = icmp samesign ult i64 %792, 12288, !dbg !112
  %794 = trunc nuw nsw i64 %792 to i32, !dbg !113
  %795 = add i32 %44, %794, !dbg !113
  %796 = trunc nuw nsw i64 %indvars.iv320 to i32, !dbg !113
  %797 = add i32 %59, %796, !dbg !113
  %798 = sext i32 %795 to i64, !dbg !114
  %799 = getelementptr float, ptr addrspace(1) %5, i64 %798, !dbg !114
  %800 = sext i32 %797 to i64, !dbg !114
  %801 = getelementptr float, ptr addrspace(1) %5, i64 %800, !dbg !114
  %802 = and i1 %14, %793, !dbg !115
  %803 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %799, i1 %802) #5, !dbg !116
  %804 = extractvalue { i32, i32, i32, i32 } %803, 0, !dbg !116
  %805 = extractvalue { i32, i32, i32, i32 } %803, 1, !dbg !116
  %806 = extractvalue { i32, i32, i32, i32 } %803, 2, !dbg !116
  %807 = extractvalue { i32, i32, i32, i32 } %803, 3, !dbg !116
  %808 = bitcast i32 %804 to float, !dbg !116
  %809 = bitcast i32 %805 to float, !dbg !116
  %810 = bitcast i32 %806 to float, !dbg !116
  %811 = bitcast i32 %807 to float, !dbg !116
  %812 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %801, i1 %802) #5, !dbg !116
  %813 = extractvalue { i32, i32, i32, i32 } %812, 0, !dbg !116
  %814 = extractvalue { i32, i32, i32, i32 } %812, 1, !dbg !116
  %815 = extractvalue { i32, i32, i32, i32 } %812, 2, !dbg !116
  %816 = extractvalue { i32, i32, i32, i32 } %812, 3, !dbg !116
  %817 = bitcast i32 %813 to float, !dbg !116
  %818 = bitcast i32 %814 to float, !dbg !116
  %819 = bitcast i32 %815 to float, !dbg !116
  %820 = bitcast i32 %816 to float, !dbg !116
  %821 = fmul float %808, 5.000000e-01, !dbg !117
  %822 = fmul float %809, 5.000000e-01, !dbg !117
  %823 = fmul float %810, 5.000000e-01, !dbg !117
  %824 = fmul float %811, 5.000000e-01, !dbg !117
  %825 = fmul float %817, 5.000000e-01, !dbg !117
  %826 = fmul float %818, 5.000000e-01, !dbg !117
  %827 = fmul float %819, 5.000000e-01, !dbg !117
  %828 = fmul float %820, 5.000000e-01, !dbg !117
  %829 = fmul float %808, %808, !dbg !118
  %830 = fmul float %809, %809, !dbg !118
  %831 = fmul float %810, %810, !dbg !118
  %832 = fmul float %811, %811, !dbg !118
  %833 = fmul float %817, %817, !dbg !118
  %834 = fmul float %818, %818, !dbg !118
  %835 = fmul float %819, %819, !dbg !118
  %836 = fmul float %820, %820, !dbg !118
  %837 = fmul float %829, %808, !dbg !119
  %838 = fmul float %830, %809, !dbg !119
  %839 = fmul float %831, %810, !dbg !119
  %840 = fmul float %832, %811, !dbg !119
  %841 = fmul float %833, %817, !dbg !119
  %842 = fmul float %834, %818, !dbg !119
  %843 = fmul float %835, %819, !dbg !119
  %844 = fmul float %836, %820, !dbg !119
  %845 = fmul float %837, 0x3FA6E4E260000000, !dbg !120
  %846 = fmul float %838, 0x3FA6E4E260000000, !dbg !120
  %847 = fmul float %839, 0x3FA6E4E260000000, !dbg !120
  %848 = fmul float %840, 0x3FA6E4E260000000, !dbg !120
  %849 = fmul float %841, 0x3FA6E4E260000000, !dbg !120
  %850 = fmul float %842, 0x3FA6E4E260000000, !dbg !120
  %851 = fmul float %843, 0x3FA6E4E260000000, !dbg !120
  %852 = fmul float %844, 0x3FA6E4E260000000, !dbg !120
  %853 = fadd float %845, %808, !dbg !121
  %854 = fadd float %846, %809, !dbg !121
  %855 = fadd float %847, %810, !dbg !121
  %856 = fadd float %848, %811, !dbg !121
  %857 = fadd float %849, %817, !dbg !121
  %858 = fadd float %850, %818, !dbg !121
  %859 = fadd float %851, %819, !dbg !121
  %860 = fadd float %852, %820, !dbg !121
  %861 = fmul float %853, 0x3FE9884540000000, !dbg !122
  %862 = fmul float %854, 0x3FE9884540000000, !dbg !122
  %863 = fmul float %855, 0x3FE9884540000000, !dbg !122
  %864 = fmul float %856, 0x3FE9884540000000, !dbg !122
  %865 = fmul float %857, 0x3FE9884540000000, !dbg !122
  %866 = fmul float %858, 0x3FE9884540000000, !dbg !122
  %867 = fmul float %859, 0x3FE9884540000000, !dbg !122
  %868 = fmul float %860, 0x3FE9884540000000, !dbg !122
  %869 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i = icmp eq i32 %869, 0, !dbg !123
  %870 = tail call float @llvm.nvvm.fabs.ftz.f(float %861) #5, !dbg !123
  %871 = tail call float @llvm.nvvm.fabs.f(float %861) #5, !dbg !123
  %.01.i = select i1 %.not.i, float %871, float %870, !dbg !123
  %872 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !123
  br i1 %872, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !123

__internal_fmad.exit1.i:                          ; preds = %790
  %873 = fmul float %.01.i, 0x4007154760000000, !dbg !123
  %874 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %873) #5, !dbg !123
  %875 = fadd float %874, 1.000000e+00, !dbg !123
  %876 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %875) #6, !dbg !123, !srcloc !59
  %877 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i = icmp eq i32 %877, 0, !dbg !123
  %878 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %876, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %879 = tail call float @llvm.nvvm.fma.rn.f(float %876, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i = select i1 %.not6.i, float %879, float %878, !dbg !123
  %880 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !123
  %s.0.i = select i1 %880, float 1.000000e+00, float %.03.i, !dbg !123
  %881 = bitcast float %s.0.i to i32, !dbg !123
  %882 = bitcast float %861 to i32, !dbg !123
  %883 = and i32 %882, -2147483648, !dbg !123
  %884 = or i32 %883, %881, !dbg !123
  %885 = bitcast i32 %884 to float, !dbg !123
  br label %__nv_tanhf.exit, !dbg !123

__internal_fmad.exit3.i:                          ; preds = %790
  %886 = fmul float %861, %861, !dbg !123
  %887 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i = icmp eq i32 %887, 0, !dbg !123
  %888 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %886, float 0xBFAAC795C0000000) #5, !dbg !123
  %889 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %886, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i = select i1 %.not1.i, float %889, float %888, !dbg !123
  %890 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i = icmp eq i32 %890, 0, !dbg !123
  %891 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %886, float 0x3FC10B2820000000) #5, !dbg !123
  %892 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %886, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i = select i1 %.not2.i, float %892, float %891, !dbg !123
  %893 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i = icmp eq i32 %893, 0, !dbg !123
  %894 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %886, float 0xBFD5553DA0000000) #5, !dbg !123
  %895 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %886, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i = select i1 %.not3.i, float %895, float %894, !dbg !123
  %896 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i = icmp eq i32 %896, 0, !dbg !123
  %897 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %886, float 0.000000e+00) #5, !dbg !123
  %898 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %886, float 0.000000e+00) #5, !dbg !123
  %.04.i = select i1 %.not4.i, float %898, float %897, !dbg !123
  %899 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i = icmp eq i32 %899, 0, !dbg !123
  %900 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %861, float %861) #5, !dbg !123
  %901 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %861, float %861) #5, !dbg !123
  %.02.i = select i1 %.not5.i, float %901, float %900, !dbg !123
  br label %__nv_tanhf.exit, !dbg !123

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %885, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !123
  %902 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i19 = icmp eq i32 %902, 0, !dbg !123
  %903 = tail call float @llvm.nvvm.fabs.ftz.f(float %862) #5, !dbg !123
  %904 = tail call float @llvm.nvvm.fabs.f(float %862) #5, !dbg !123
  %.01.i20 = select i1 %.not.i19, float %904, float %903, !dbg !123
  %905 = fcmp ult float %.01.i20, 0x3FE3333340000000, !dbg !123
  br i1 %905, label %__internal_fmad.exit3.i26, label %__internal_fmad.exit1.i21, !dbg !123

__internal_fmad.exit1.i21:                        ; preds = %__nv_tanhf.exit
  %906 = fmul float %.01.i20, 0x4007154760000000, !dbg !123
  %907 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %906) #5, !dbg !123
  %908 = fadd float %907, 1.000000e+00, !dbg !123
  %909 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %908) #6, !dbg !123, !srcloc !59
  %910 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i22 = icmp eq i32 %910, 0, !dbg !123
  %911 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %909, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %912 = tail call float @llvm.nvvm.fma.rn.f(float %909, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i23 = select i1 %.not6.i22, float %912, float %911, !dbg !123
  %913 = fcmp oge float %.01.i20, 0x4022059680000000, !dbg !123
  %s.0.i24 = select i1 %913, float 1.000000e+00, float %.03.i23, !dbg !123
  %914 = bitcast float %s.0.i24 to i32, !dbg !123
  %915 = bitcast float %862 to i32, !dbg !123
  %916 = and i32 %915, -2147483648, !dbg !123
  %917 = or i32 %916, %914, !dbg !123
  %918 = bitcast i32 %917 to float, !dbg !123
  br label %__nv_tanhf.exit37, !dbg !123

__internal_fmad.exit3.i26:                        ; preds = %__nv_tanhf.exit
  %919 = fmul float %862, %862, !dbg !123
  %920 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i27 = icmp eq i32 %920, 0, !dbg !123
  %921 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %919, float 0xBFAAC795C0000000) #5, !dbg !123
  %922 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %919, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i28 = select i1 %.not1.i27, float %922, float %921, !dbg !123
  %923 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i29 = icmp eq i32 %923, 0, !dbg !123
  %924 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i28, float %919, float 0x3FC10B2820000000) #5, !dbg !123
  %925 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i28, float %919, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i30 = select i1 %.not2.i29, float %925, float %924, !dbg !123
  %926 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i31 = icmp eq i32 %926, 0, !dbg !123
  %927 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i30, float %919, float 0xBFD5553DA0000000) #5, !dbg !123
  %928 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i30, float %919, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i32 = select i1 %.not3.i31, float %928, float %927, !dbg !123
  %929 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i33 = icmp eq i32 %929, 0, !dbg !123
  %930 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i32, float %919, float 0.000000e+00) #5, !dbg !123
  %931 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i32, float %919, float 0.000000e+00) #5, !dbg !123
  %.04.i34 = select i1 %.not4.i33, float %931, float %930, !dbg !123
  %932 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i35 = icmp eq i32 %932, 0, !dbg !123
  %933 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i34, float %862, float %862) #5, !dbg !123
  %934 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i34, float %862, float %862) #5, !dbg !123
  %.02.i36 = select i1 %.not5.i35, float %934, float %933, !dbg !123
  br label %__nv_tanhf.exit37, !dbg !123

__nv_tanhf.exit37:                                ; preds = %__internal_fmad.exit1.i21, %__internal_fmad.exit3.i26
  %s.1.i25 = phi float [ %918, %__internal_fmad.exit1.i21 ], [ %.02.i36, %__internal_fmad.exit3.i26 ], !dbg !123
  %935 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i38 = icmp eq i32 %935, 0, !dbg !123
  %936 = tail call float @llvm.nvvm.fabs.ftz.f(float %863) #5, !dbg !123
  %937 = tail call float @llvm.nvvm.fabs.f(float %863) #5, !dbg !123
  %.01.i39 = select i1 %.not.i38, float %937, float %936, !dbg !123
  %938 = fcmp ult float %.01.i39, 0x3FE3333340000000, !dbg !123
  br i1 %938, label %__internal_fmad.exit3.i45, label %__internal_fmad.exit1.i40, !dbg !123

__internal_fmad.exit1.i40:                        ; preds = %__nv_tanhf.exit37
  %939 = fmul float %.01.i39, 0x4007154760000000, !dbg !123
  %940 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %939) #5, !dbg !123
  %941 = fadd float %940, 1.000000e+00, !dbg !123
  %942 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %941) #6, !dbg !123, !srcloc !59
  %943 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i41 = icmp eq i32 %943, 0, !dbg !123
  %944 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %942, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %945 = tail call float @llvm.nvvm.fma.rn.f(float %942, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i42 = select i1 %.not6.i41, float %945, float %944, !dbg !123
  %946 = fcmp oge float %.01.i39, 0x4022059680000000, !dbg !123
  %s.0.i43 = select i1 %946, float 1.000000e+00, float %.03.i42, !dbg !123
  %947 = bitcast float %s.0.i43 to i32, !dbg !123
  %948 = bitcast float %863 to i32, !dbg !123
  %949 = and i32 %948, -2147483648, !dbg !123
  %950 = or i32 %949, %947, !dbg !123
  %951 = bitcast i32 %950 to float, !dbg !123
  br label %__nv_tanhf.exit56, !dbg !123

__internal_fmad.exit3.i45:                        ; preds = %__nv_tanhf.exit37
  %952 = fmul float %863, %863, !dbg !123
  %953 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i46 = icmp eq i32 %953, 0, !dbg !123
  %954 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %952, float 0xBFAAC795C0000000) #5, !dbg !123
  %955 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %952, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i47 = select i1 %.not1.i46, float %955, float %954, !dbg !123
  %956 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i48 = icmp eq i32 %956, 0, !dbg !123
  %957 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i47, float %952, float 0x3FC10B2820000000) #5, !dbg !123
  %958 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i47, float %952, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i49 = select i1 %.not2.i48, float %958, float %957, !dbg !123
  %959 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i50 = icmp eq i32 %959, 0, !dbg !123
  %960 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i49, float %952, float 0xBFD5553DA0000000) #5, !dbg !123
  %961 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i49, float %952, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i51 = select i1 %.not3.i50, float %961, float %960, !dbg !123
  %962 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i52 = icmp eq i32 %962, 0, !dbg !123
  %963 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i51, float %952, float 0.000000e+00) #5, !dbg !123
  %964 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i51, float %952, float 0.000000e+00) #5, !dbg !123
  %.04.i53 = select i1 %.not4.i52, float %964, float %963, !dbg !123
  %965 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i54 = icmp eq i32 %965, 0, !dbg !123
  %966 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i53, float %863, float %863) #5, !dbg !123
  %967 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i53, float %863, float %863) #5, !dbg !123
  %.02.i55 = select i1 %.not5.i54, float %967, float %966, !dbg !123
  br label %__nv_tanhf.exit56, !dbg !123

__nv_tanhf.exit56:                                ; preds = %__internal_fmad.exit1.i40, %__internal_fmad.exit3.i45
  %s.1.i44 = phi float [ %951, %__internal_fmad.exit1.i40 ], [ %.02.i55, %__internal_fmad.exit3.i45 ], !dbg !123
  %968 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i57 = icmp eq i32 %968, 0, !dbg !123
  %969 = tail call float @llvm.nvvm.fabs.ftz.f(float %864) #5, !dbg !123
  %970 = tail call float @llvm.nvvm.fabs.f(float %864) #5, !dbg !123
  %.01.i58 = select i1 %.not.i57, float %970, float %969, !dbg !123
  %971 = fcmp ult float %.01.i58, 0x3FE3333340000000, !dbg !123
  br i1 %971, label %__internal_fmad.exit3.i64, label %__internal_fmad.exit1.i59, !dbg !123

__internal_fmad.exit1.i59:                        ; preds = %__nv_tanhf.exit56
  %972 = fmul float %.01.i58, 0x4007154760000000, !dbg !123
  %973 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %972) #5, !dbg !123
  %974 = fadd float %973, 1.000000e+00, !dbg !123
  %975 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %974) #6, !dbg !123, !srcloc !59
  %976 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i60 = icmp eq i32 %976, 0, !dbg !123
  %977 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %975, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %978 = tail call float @llvm.nvvm.fma.rn.f(float %975, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i61 = select i1 %.not6.i60, float %978, float %977, !dbg !123
  %979 = fcmp oge float %.01.i58, 0x4022059680000000, !dbg !123
  %s.0.i62 = select i1 %979, float 1.000000e+00, float %.03.i61, !dbg !123
  %980 = bitcast float %s.0.i62 to i32, !dbg !123
  %981 = bitcast float %864 to i32, !dbg !123
  %982 = and i32 %981, -2147483648, !dbg !123
  %983 = or i32 %982, %980, !dbg !123
  %984 = bitcast i32 %983 to float, !dbg !123
  br label %__nv_tanhf.exit75, !dbg !123

__internal_fmad.exit3.i64:                        ; preds = %__nv_tanhf.exit56
  %985 = fmul float %864, %864, !dbg !123
  %986 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i65 = icmp eq i32 %986, 0, !dbg !123
  %987 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %985, float 0xBFAAC795C0000000) #5, !dbg !123
  %988 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %985, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i66 = select i1 %.not1.i65, float %988, float %987, !dbg !123
  %989 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i67 = icmp eq i32 %989, 0, !dbg !123
  %990 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i66, float %985, float 0x3FC10B2820000000) #5, !dbg !123
  %991 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i66, float %985, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i68 = select i1 %.not2.i67, float %991, float %990, !dbg !123
  %992 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i69 = icmp eq i32 %992, 0, !dbg !123
  %993 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i68, float %985, float 0xBFD5553DA0000000) #5, !dbg !123
  %994 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i68, float %985, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i70 = select i1 %.not3.i69, float %994, float %993, !dbg !123
  %995 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i71 = icmp eq i32 %995, 0, !dbg !123
  %996 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i70, float %985, float 0.000000e+00) #5, !dbg !123
  %997 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i70, float %985, float 0.000000e+00) #5, !dbg !123
  %.04.i72 = select i1 %.not4.i71, float %997, float %996, !dbg !123
  %998 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i73 = icmp eq i32 %998, 0, !dbg !123
  %999 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i72, float %864, float %864) #5, !dbg !123
  %1000 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i72, float %864, float %864) #5, !dbg !123
  %.02.i74 = select i1 %.not5.i73, float %1000, float %999, !dbg !123
  br label %__nv_tanhf.exit75, !dbg !123

__nv_tanhf.exit75:                                ; preds = %__internal_fmad.exit1.i59, %__internal_fmad.exit3.i64
  %s.1.i63 = phi float [ %984, %__internal_fmad.exit1.i59 ], [ %.02.i74, %__internal_fmad.exit3.i64 ], !dbg !123
  %1001 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i76 = icmp eq i32 %1001, 0, !dbg !123
  %1002 = tail call float @llvm.nvvm.fabs.ftz.f(float %865) #5, !dbg !123
  %1003 = tail call float @llvm.nvvm.fabs.f(float %865) #5, !dbg !123
  %.01.i77 = select i1 %.not.i76, float %1003, float %1002, !dbg !123
  %1004 = fcmp ult float %.01.i77, 0x3FE3333340000000, !dbg !123
  br i1 %1004, label %__internal_fmad.exit3.i83, label %__internal_fmad.exit1.i78, !dbg !123

__internal_fmad.exit1.i78:                        ; preds = %__nv_tanhf.exit75
  %1005 = fmul float %.01.i77, 0x4007154760000000, !dbg !123
  %1006 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1005) #5, !dbg !123
  %1007 = fadd float %1006, 1.000000e+00, !dbg !123
  %1008 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1007) #6, !dbg !123, !srcloc !59
  %1009 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i79 = icmp eq i32 %1009, 0, !dbg !123
  %1010 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1008, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1011 = tail call float @llvm.nvvm.fma.rn.f(float %1008, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i80 = select i1 %.not6.i79, float %1011, float %1010, !dbg !123
  %1012 = fcmp oge float %.01.i77, 0x4022059680000000, !dbg !123
  %s.0.i81 = select i1 %1012, float 1.000000e+00, float %.03.i80, !dbg !123
  %1013 = bitcast float %s.0.i81 to i32, !dbg !123
  %1014 = bitcast float %865 to i32, !dbg !123
  %1015 = and i32 %1014, -2147483648, !dbg !123
  %1016 = or i32 %1015, %1013, !dbg !123
  %1017 = bitcast i32 %1016 to float, !dbg !123
  br label %__nv_tanhf.exit94, !dbg !123

__internal_fmad.exit3.i83:                        ; preds = %__nv_tanhf.exit75
  %1018 = fmul float %865, %865, !dbg !123
  %1019 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i84 = icmp eq i32 %1019, 0, !dbg !123
  %1020 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1018, float 0xBFAAC795C0000000) #5, !dbg !123
  %1021 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1018, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i85 = select i1 %.not1.i84, float %1021, float %1020, !dbg !123
  %1022 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i86 = icmp eq i32 %1022, 0, !dbg !123
  %1023 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i85, float %1018, float 0x3FC10B2820000000) #5, !dbg !123
  %1024 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i85, float %1018, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i87 = select i1 %.not2.i86, float %1024, float %1023, !dbg !123
  %1025 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i88 = icmp eq i32 %1025, 0, !dbg !123
  %1026 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i87, float %1018, float 0xBFD5553DA0000000) #5, !dbg !123
  %1027 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i87, float %1018, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i89 = select i1 %.not3.i88, float %1027, float %1026, !dbg !123
  %1028 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i90 = icmp eq i32 %1028, 0, !dbg !123
  %1029 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i89, float %1018, float 0.000000e+00) #5, !dbg !123
  %1030 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i89, float %1018, float 0.000000e+00) #5, !dbg !123
  %.04.i91 = select i1 %.not4.i90, float %1030, float %1029, !dbg !123
  %1031 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i92 = icmp eq i32 %1031, 0, !dbg !123
  %1032 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i91, float %865, float %865) #5, !dbg !123
  %1033 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i91, float %865, float %865) #5, !dbg !123
  %.02.i93 = select i1 %.not5.i92, float %1033, float %1032, !dbg !123
  br label %__nv_tanhf.exit94, !dbg !123

__nv_tanhf.exit94:                                ; preds = %__internal_fmad.exit1.i78, %__internal_fmad.exit3.i83
  %s.1.i82 = phi float [ %1017, %__internal_fmad.exit1.i78 ], [ %.02.i93, %__internal_fmad.exit3.i83 ], !dbg !123
  %1034 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i95 = icmp eq i32 %1034, 0, !dbg !123
  %1035 = tail call float @llvm.nvvm.fabs.ftz.f(float %866) #5, !dbg !123
  %1036 = tail call float @llvm.nvvm.fabs.f(float %866) #5, !dbg !123
  %.01.i96 = select i1 %.not.i95, float %1036, float %1035, !dbg !123
  %1037 = fcmp ult float %.01.i96, 0x3FE3333340000000, !dbg !123
  br i1 %1037, label %__internal_fmad.exit3.i102, label %__internal_fmad.exit1.i97, !dbg !123

__internal_fmad.exit1.i97:                        ; preds = %__nv_tanhf.exit94
  %1038 = fmul float %.01.i96, 0x4007154760000000, !dbg !123
  %1039 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1038) #5, !dbg !123
  %1040 = fadd float %1039, 1.000000e+00, !dbg !123
  %1041 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1040) #6, !dbg !123, !srcloc !59
  %1042 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i98 = icmp eq i32 %1042, 0, !dbg !123
  %1043 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1041, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1044 = tail call float @llvm.nvvm.fma.rn.f(float %1041, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i99 = select i1 %.not6.i98, float %1044, float %1043, !dbg !123
  %1045 = fcmp oge float %.01.i96, 0x4022059680000000, !dbg !123
  %s.0.i100 = select i1 %1045, float 1.000000e+00, float %.03.i99, !dbg !123
  %1046 = bitcast float %s.0.i100 to i32, !dbg !123
  %1047 = bitcast float %866 to i32, !dbg !123
  %1048 = and i32 %1047, -2147483648, !dbg !123
  %1049 = or i32 %1048, %1046, !dbg !123
  %1050 = bitcast i32 %1049 to float, !dbg !123
  br label %__nv_tanhf.exit113, !dbg !123

__internal_fmad.exit3.i102:                       ; preds = %__nv_tanhf.exit94
  %1051 = fmul float %866, %866, !dbg !123
  %1052 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i103 = icmp eq i32 %1052, 0, !dbg !123
  %1053 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1051, float 0xBFAAC795C0000000) #5, !dbg !123
  %1054 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1051, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i104 = select i1 %.not1.i103, float %1054, float %1053, !dbg !123
  %1055 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i105 = icmp eq i32 %1055, 0, !dbg !123
  %1056 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i104, float %1051, float 0x3FC10B2820000000) #5, !dbg !123
  %1057 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i104, float %1051, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i106 = select i1 %.not2.i105, float %1057, float %1056, !dbg !123
  %1058 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i107 = icmp eq i32 %1058, 0, !dbg !123
  %1059 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i106, float %1051, float 0xBFD5553DA0000000) #5, !dbg !123
  %1060 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i106, float %1051, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i108 = select i1 %.not3.i107, float %1060, float %1059, !dbg !123
  %1061 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i109 = icmp eq i32 %1061, 0, !dbg !123
  %1062 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i108, float %1051, float 0.000000e+00) #5, !dbg !123
  %1063 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i108, float %1051, float 0.000000e+00) #5, !dbg !123
  %.04.i110 = select i1 %.not4.i109, float %1063, float %1062, !dbg !123
  %1064 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i111 = icmp eq i32 %1064, 0, !dbg !123
  %1065 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i110, float %866, float %866) #5, !dbg !123
  %1066 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i110, float %866, float %866) #5, !dbg !123
  %.02.i112 = select i1 %.not5.i111, float %1066, float %1065, !dbg !123
  br label %__nv_tanhf.exit113, !dbg !123

__nv_tanhf.exit113:                               ; preds = %__internal_fmad.exit1.i97, %__internal_fmad.exit3.i102
  %s.1.i101 = phi float [ %1050, %__internal_fmad.exit1.i97 ], [ %.02.i112, %__internal_fmad.exit3.i102 ], !dbg !123
  %1067 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i114 = icmp eq i32 %1067, 0, !dbg !123
  %1068 = tail call float @llvm.nvvm.fabs.ftz.f(float %867) #5, !dbg !123
  %1069 = tail call float @llvm.nvvm.fabs.f(float %867) #5, !dbg !123
  %.01.i115 = select i1 %.not.i114, float %1069, float %1068, !dbg !123
  %1070 = fcmp ult float %.01.i115, 0x3FE3333340000000, !dbg !123
  br i1 %1070, label %__internal_fmad.exit3.i121, label %__internal_fmad.exit1.i116, !dbg !123

__internal_fmad.exit1.i116:                       ; preds = %__nv_tanhf.exit113
  %1071 = fmul float %.01.i115, 0x4007154760000000, !dbg !123
  %1072 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1071) #5, !dbg !123
  %1073 = fadd float %1072, 1.000000e+00, !dbg !123
  %1074 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1073) #6, !dbg !123, !srcloc !59
  %1075 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i117 = icmp eq i32 %1075, 0, !dbg !123
  %1076 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1074, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1077 = tail call float @llvm.nvvm.fma.rn.f(float %1074, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i118 = select i1 %.not6.i117, float %1077, float %1076, !dbg !123
  %1078 = fcmp oge float %.01.i115, 0x4022059680000000, !dbg !123
  %s.0.i119 = select i1 %1078, float 1.000000e+00, float %.03.i118, !dbg !123
  %1079 = bitcast float %s.0.i119 to i32, !dbg !123
  %1080 = bitcast float %867 to i32, !dbg !123
  %1081 = and i32 %1080, -2147483648, !dbg !123
  %1082 = or i32 %1081, %1079, !dbg !123
  %1083 = bitcast i32 %1082 to float, !dbg !123
  br label %__nv_tanhf.exit132, !dbg !123

__internal_fmad.exit3.i121:                       ; preds = %__nv_tanhf.exit113
  %1084 = fmul float %867, %867, !dbg !123
  %1085 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i122 = icmp eq i32 %1085, 0, !dbg !123
  %1086 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1084, float 0xBFAAC795C0000000) #5, !dbg !123
  %1087 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1084, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i123 = select i1 %.not1.i122, float %1087, float %1086, !dbg !123
  %1088 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i124 = icmp eq i32 %1088, 0, !dbg !123
  %1089 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i123, float %1084, float 0x3FC10B2820000000) #5, !dbg !123
  %1090 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i123, float %1084, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i125 = select i1 %.not2.i124, float %1090, float %1089, !dbg !123
  %1091 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i126 = icmp eq i32 %1091, 0, !dbg !123
  %1092 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i125, float %1084, float 0xBFD5553DA0000000) #5, !dbg !123
  %1093 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i125, float %1084, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i127 = select i1 %.not3.i126, float %1093, float %1092, !dbg !123
  %1094 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i128 = icmp eq i32 %1094, 0, !dbg !123
  %1095 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i127, float %1084, float 0.000000e+00) #5, !dbg !123
  %1096 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i127, float %1084, float 0.000000e+00) #5, !dbg !123
  %.04.i129 = select i1 %.not4.i128, float %1096, float %1095, !dbg !123
  %1097 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i130 = icmp eq i32 %1097, 0, !dbg !123
  %1098 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i129, float %867, float %867) #5, !dbg !123
  %1099 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i129, float %867, float %867) #5, !dbg !123
  %.02.i131 = select i1 %.not5.i130, float %1099, float %1098, !dbg !123
  br label %__nv_tanhf.exit132, !dbg !123

__nv_tanhf.exit132:                               ; preds = %__internal_fmad.exit1.i116, %__internal_fmad.exit3.i121
  %s.1.i120 = phi float [ %1083, %__internal_fmad.exit1.i116 ], [ %.02.i131, %__internal_fmad.exit3.i121 ], !dbg !123
  %1100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i133 = icmp eq i32 %1100, 0, !dbg !123
  %1101 = tail call float @llvm.nvvm.fabs.ftz.f(float %868) #5, !dbg !123
  %1102 = tail call float @llvm.nvvm.fabs.f(float %868) #5, !dbg !123
  %.01.i134 = select i1 %.not.i133, float %1102, float %1101, !dbg !123
  %1103 = fcmp ult float %.01.i134, 0x3FE3333340000000, !dbg !123
  br i1 %1103, label %__internal_fmad.exit3.i140, label %__internal_fmad.exit1.i135, !dbg !123

__internal_fmad.exit1.i135:                       ; preds = %__nv_tanhf.exit132
  %1104 = fmul float %.01.i134, 0x4007154760000000, !dbg !123
  %1105 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1104) #5, !dbg !123
  %1106 = fadd float %1105, 1.000000e+00, !dbg !123
  %1107 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1106) #6, !dbg !123, !srcloc !59
  %1108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i136 = icmp eq i32 %1108, 0, !dbg !123
  %1109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1107, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1110 = tail call float @llvm.nvvm.fma.rn.f(float %1107, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i137 = select i1 %.not6.i136, float %1110, float %1109, !dbg !123
  %1111 = fcmp oge float %.01.i134, 0x4022059680000000, !dbg !123
  %s.0.i138 = select i1 %1111, float 1.000000e+00, float %.03.i137, !dbg !123
  %1112 = bitcast float %s.0.i138 to i32, !dbg !123
  %1113 = bitcast float %868 to i32, !dbg !123
  %1114 = and i32 %1113, -2147483648, !dbg !123
  %1115 = or i32 %1114, %1112, !dbg !123
  %1116 = bitcast i32 %1115 to float, !dbg !123
  br label %__nv_tanhf.exit151, !dbg !123

__internal_fmad.exit3.i140:                       ; preds = %__nv_tanhf.exit132
  %1117 = fmul float %868, %868, !dbg !123
  %1118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i141 = icmp eq i32 %1118, 0, !dbg !123
  %1119 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1117, float 0xBFAAC795C0000000) #5, !dbg !123
  %1120 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1117, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i142 = select i1 %.not1.i141, float %1120, float %1119, !dbg !123
  %1121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i143 = icmp eq i32 %1121, 0, !dbg !123
  %1122 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i142, float %1117, float 0x3FC10B2820000000) #5, !dbg !123
  %1123 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i142, float %1117, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i144 = select i1 %.not2.i143, float %1123, float %1122, !dbg !123
  %1124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i145 = icmp eq i32 %1124, 0, !dbg !123
  %1125 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i144, float %1117, float 0xBFD5553DA0000000) #5, !dbg !123
  %1126 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i144, float %1117, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i146 = select i1 %.not3.i145, float %1126, float %1125, !dbg !123
  %1127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i147 = icmp eq i32 %1127, 0, !dbg !123
  %1128 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i146, float %1117, float 0.000000e+00) #5, !dbg !123
  %1129 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i146, float %1117, float 0.000000e+00) #5, !dbg !123
  %.04.i148 = select i1 %.not4.i147, float %1129, float %1128, !dbg !123
  %1130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i149 = icmp eq i32 %1130, 0, !dbg !123
  %1131 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i148, float %868, float %868) #5, !dbg !123
  %1132 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i148, float %868, float %868) #5, !dbg !123
  %.02.i150 = select i1 %.not5.i149, float %1132, float %1131, !dbg !123
  br label %__nv_tanhf.exit151, !dbg !123

__nv_tanhf.exit151:                               ; preds = %__internal_fmad.exit1.i135, %__internal_fmad.exit3.i140
  %s.1.i139 = phi float [ %1116, %__internal_fmad.exit1.i135 ], [ %.02.i150, %__internal_fmad.exit3.i140 ], !dbg !123
  %1133 = fadd float %s.1.i, 1.000000e+00, !dbg !124
  %1134 = fadd float %s.1.i25, 1.000000e+00, !dbg !124
  %1135 = fadd float %s.1.i44, 1.000000e+00, !dbg !124
  %1136 = fadd float %s.1.i63, 1.000000e+00, !dbg !124
  %1137 = fadd float %s.1.i82, 1.000000e+00, !dbg !124
  %1138 = fadd float %s.1.i101, 1.000000e+00, !dbg !124
  %1139 = fadd float %s.1.i120, 1.000000e+00, !dbg !124
  %1140 = fadd float %s.1.i139, 1.000000e+00, !dbg !124
  %1141 = fmul float %821, %1133, !dbg !125
  %1142 = fmul float %822, %1134, !dbg !125
  %1143 = fmul float %823, %1135, !dbg !125
  %1144 = fmul float %824, %1136, !dbg !125
  %1145 = fmul float %825, %1137, !dbg !125
  %1146 = fmul float %826, %1138, !dbg !125
  %1147 = fmul float %827, %1139, !dbg !125
  %1148 = fmul float %828, %1140, !dbg !125
  %1149 = fmul float %789, %1141, !dbg !126
  %1150 = fmul float %789, %1142, !dbg !126
  %1151 = fmul float %789, %1143, !dbg !126
  %1152 = fmul float %789, %1144, !dbg !126
  %1153 = fmul float %789, %1145, !dbg !126
  %1154 = fmul float %789, %1146, !dbg !126
  %1155 = fmul float %789, %1147, !dbg !126
  %1156 = fmul float %789, %1148, !dbg !126
  %1157 = tail call float @llvm.nvvm.round.f(float %1149) #5, !dbg !127
  %1158 = tail call float @llvm.nvvm.round.f(float %1150) #5, !dbg !127
  %1159 = tail call float @llvm.nvvm.round.f(float %1151) #5, !dbg !127
  %1160 = tail call float @llvm.nvvm.round.f(float %1152) #5, !dbg !127
  %1161 = tail call float @llvm.nvvm.round.f(float %1153) #5, !dbg !127
  %1162 = tail call float @llvm.nvvm.round.f(float %1154) #5, !dbg !127
  %1163 = tail call float @llvm.nvvm.round.f(float %1155) #5, !dbg !127
  %1164 = tail call float @llvm.nvvm.round.f(float %1156) #5, !dbg !127
  %1165 = insertelement <4 x float> poison, float %1157, i64 0, !dbg !128
  %1166 = insertelement <4 x float> %1165, float %1158, i64 1, !dbg !128
  %1167 = insertelement <4 x float> %1166, float %1159, i64 2, !dbg !128
  %1168 = insertelement <4 x float> %1167, float %1160, i64 3, !dbg !128
  %1169 = fcmp ogt <4 x float> %1168, splat (float -1.270000e+02), !dbg !128
  %1170 = fcmp uno <4 x float> %1168, zeroinitializer, !dbg !130
  %1171 = or <4 x i1> %1169, %1170, !dbg !131
  %1172 = select <4 x i1> %1171, <4 x float> %1168, <4 x float> splat (float -1.270000e+02), !dbg !132
  %1173 = fcmp olt <4 x float> %1172, splat (float 1.270000e+02), !dbg !133
  %1174 = fcmp uno <4 x float> %1172, zeroinitializer, !dbg !135
  %1175 = or <4 x i1> %1173, %1174, !dbg !136
  %1176 = fptosi <4 x float> %1172 to <4 x i8>, !dbg !137
  %1177 = select <4 x i1> %1175, <4 x i8> %1176, <4 x i8> splat (i8 127), !dbg !138
  %1178 = insertelement <4 x float> poison, float %1161, i64 0, !dbg !128
  %1179 = insertelement <4 x float> %1178, float %1162, i64 1, !dbg !128
  %1180 = insertelement <4 x float> %1179, float %1163, i64 2, !dbg !128
  %1181 = insertelement <4 x float> %1180, float %1164, i64 3, !dbg !128
  %1182 = fcmp ogt <4 x float> %1181, splat (float -1.270000e+02), !dbg !128
  %1183 = fcmp uno <4 x float> %1181, zeroinitializer, !dbg !130
  %1184 = or <4 x i1> %1182, %1183, !dbg !131
  %1185 = select <4 x i1> %1184, <4 x float> %1181, <4 x float> splat (float -1.270000e+02), !dbg !132
  %1186 = fcmp olt <4 x float> %1185, splat (float 1.270000e+02), !dbg !133
  %1187 = fcmp uno <4 x float> %1185, zeroinitializer, !dbg !135
  %1188 = or <4 x i1> %1186, %1187, !dbg !136
  %1189 = fptosi <4 x float> %1185 to <4 x i8>, !dbg !137
  %1190 = select <4 x i1> %1188, <4 x i8> %1189, <4 x i8> splat (i8 127), !dbg !138
  %1191 = getelementptr i8, ptr addrspace(1) %8, i64 %798, !dbg !139
  %1192 = bitcast <4 x i8> %1177 to i32, !dbg !140
  %1193 = bitcast <4 x i8> %1190 to i32, !dbg !140
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1192, i32 %1193, ptr addrspace(1) %1191, i1 %802) #5, !dbg !140
  br i1 %791, label %790, label %1194, !dbg !110

1194:                                             ; preds = %__nv_tanhf.exit151
  ret void, !dbg !141
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmxyjrahlth755bxxcexivgsgdoyxnb2wwthefvjadx2dkvt3x6m.py", directory: "/tmp/torchinductor_root/mx")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 30, scope: !6)
!15 = !DILocation(line: 30, column: 35, scope: !6)
!16 = !DILocation(line: 39, column: 47, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 44, column: 44, scope: !6)
!21 = !DILocation(line: 45, column: 16, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 46, column: 44, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 47, column: 44, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 49, column: 23, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 52, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 33, column: 40, scope: !6)
!36 = !DILocation(line: 54, column: 23, scope: !6)
!37 = !DILocation(line: 34, column: 31, scope: !6)
!38 = !DILocation(line: 35, column: 29, scope: !6)
!39 = !DILocation(line: 39, column: 41, scope: !6)
!40 = !DILocation(line: 39, column: 34, scope: !6)
!41 = !DILocation(line: 39, column: 60, scope: !6)
!42 = !DILocation(line: 39, column: 52, scope: !6)
!43 = !DILocation(line: 40, column: 35, scope: !6)
!44 = !DILocation(line: 40, column: 42, scope: !6)
!45 = !DILocation(line: 41, column: 35, scope: !6)
!46 = !DILocation(line: 41, column: 42, scope: !6)
!47 = !DILocation(line: 40, column: 95, scope: !6)
!48 = !DILocation(line: 41, column: 95, scope: !6)
!49 = !DILocation(line: 42, column: 23, scope: !6)
!50 = !DILocation(line: 55, column: 24, scope: !6)
!51 = !DILocation(line: 56, column: 24, scope: !6)
!52 = !DILocation(line: 59, column: 24, scope: !6)
!53 = !DILocation(line: 64, column: 24, scope: !6)
!54 = !DILocation(line: 60, column: 24, scope: !6)
!55 = !DILocation(line: 61, column: 24, scope: !6)
!56 = !DILocation(line: 63, column: 24, scope: !6)
!57 = !DILocation(line: 66, column: 24, scope: !6)
!58 = !DILocation(line: 67, column: 31, scope: !6)
!59 = !{i32 21046}
!60 = !DILocation(line: 69, column: 24, scope: !6)
!61 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !62)
!62 = !DILocation(line: 73, column: 47, scope: !6)
!63 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !64)
!64 = !DILocation(line: 75, column: 47, scope: !6)
!65 = !DILocation(line: 70, column: 24, scope: !6)
!66 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !62)
!67 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !62)
!68 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !62)
!69 = !DILocation(line: 74, column: 50, scope: !6)
!70 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !64)
!71 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !64)
!72 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !64)
!73 = !DILocation(line: 76, column: 50, scope: !6)
!74 = !DILocation(line: 77, column: 29, scope: !6)
!75 = !DILocation(line: 77, column: 54, scope: !6)
!76 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !77)
!77 = !DILocation(line: 78, column: 40, scope: !6)
!78 = !DILocation(line: 94, column: 15, scope: !79, inlinedAt: !77)
!79 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!80 = !DILocation(line: 96, column: 21, scope: !79, inlinedAt: !77)
!81 = !DILocation(line: 96, column: 16, scope: !79, inlinedAt: !77)
!82 = !DILocation(line: 97, column: 29, scope: !79, inlinedAt: !77)
!83 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !84)
!84 = !DILocation(line: 79, column: 40, scope: !6)
!85 = !DILocation(line: 102, column: 15, scope: !79, inlinedAt: !84)
!86 = !DILocation(line: 104, column: 16, scope: !79, inlinedAt: !84)
!87 = !DILocation(line: 105, column: 29, scope: !79, inlinedAt: !84)
!88 = !DILocation(line: 104, column: 21, scope: !79, inlinedAt: !84)
!89 = !DILocation(line: 80, column: 25, scope: !6)
!90 = !DILocation(line: 80, column: 37, scope: !6)
!91 = !DILocation(line: 81, column: 25, scope: !6)
!92 = !DILocation(line: 81, column: 37, scope: !6)
!93 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !94)
!94 = !DILocation(line: 104, column: 46, scope: !6)
!95 = !DILocation(line: 105, column: 17, scope: !6)
!96 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !97)
!97 = !DILocation(line: 106, column: 46, scope: !6)
!98 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !99)
!99 = !DILocation(line: 107, column: 46, scope: !6)
!100 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !99)
!101 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !99)
!102 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !99)
!103 = !DILocation(line: 109, column: 24, scope: !6)
!104 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !105)
!105 = !DILocation(line: 112, column: 46, scope: !6)
!106 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !105)
!107 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !105)
!108 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !105)
!109 = !DILocation(line: 115, column: 25, scope: !6)
!110 = !DILocation(line: 82, column: 40, scope: !6)
!111 = !DILocation(line: 83, column: 31, scope: !6)
!112 = !DILocation(line: 84, column: 29, scope: !6)
!113 = !DILocation(line: 88, column: 43, scope: !6)
!114 = !DILocation(line: 88, column: 36, scope: !6)
!115 = !DILocation(line: 88, column: 62, scope: !6)
!116 = !DILocation(line: 88, column: 54, scope: !6)
!117 = !DILocation(line: 90, column: 24, scope: !6)
!118 = !DILocation(line: 91, column: 24, scope: !6)
!119 = !DILocation(line: 92, column: 24, scope: !6)
!120 = !DILocation(line: 94, column: 24, scope: !6)
!121 = !DILocation(line: 95, column: 24, scope: !6)
!122 = !DILocation(line: 97, column: 24, scope: !6)
!123 = !DILocation(line: 98, column: 31, scope: !6)
!124 = !DILocation(line: 100, column: 24, scope: !6)
!125 = !DILocation(line: 101, column: 24, scope: !6)
!126 = !DILocation(line: 117, column: 24, scope: !6)
!127 = !DILocation(line: 118, column: 36, scope: !6)
!128 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !129)
!129 = !DILocation(line: 121, column: 46, scope: !6)
!130 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !129)
!131 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !129)
!132 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !129)
!133 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !134)
!134 = !DILocation(line: 123, column: 46, scope: !6)
!135 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !134)
!136 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !134)
!137 = !DILocation(line: 125, column: 25, scope: !6)
!138 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !134)
!139 = !DILocation(line: 126, column: 29, scope: !6)
!140 = !DILocation(line: 126, column: 54, scope: !6)
!141 = !DILocation(line: 82, column: 4, scope: !6)
