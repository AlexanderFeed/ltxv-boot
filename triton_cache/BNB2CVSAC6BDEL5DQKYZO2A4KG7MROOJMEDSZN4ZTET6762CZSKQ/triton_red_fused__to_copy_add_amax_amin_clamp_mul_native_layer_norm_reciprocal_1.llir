; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
._crit_edge:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 3600, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = shl i32 %18, 3, !dbg !11
  %21 = and i32 %20, 2040, !dbg !11
  %22 = mul i32 %16, 3072, !dbg !12
  %23 = zext nneg i32 %21 to i64, !dbg !13
  %24 = add i32 %22, %21, !dbg !14
  %25 = sext i32 %24 to i64, !dbg !15
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !15
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %26, i1 %17) #5, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !16
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !16
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !16
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !16
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !16
  %36 = extractelement <2 x bfloat> %29, i64 0, !dbg !16
  %37 = extractelement <2 x bfloat> %29, i64 1, !dbg !16
  %38 = extractelement <2 x bfloat> %31, i64 0, !dbg !16
  %39 = extractelement <2 x bfloat> %31, i64 1, !dbg !16
  %40 = extractelement <2 x bfloat> %33, i64 0, !dbg !16
  %41 = extractelement <2 x bfloat> %33, i64 1, !dbg !16
  %42 = extractelement <2 x bfloat> %35, i64 0, !dbg !16
  %43 = extractelement <2 x bfloat> %35, i64 1, !dbg !16
  %44 = fpext bfloat %36 to float, !dbg !17
  %45 = fpext bfloat %37 to float, !dbg !17
  %46 = fpext bfloat %38 to float, !dbg !17
  %47 = fpext bfloat %39 to float, !dbg !17
  %48 = fpext bfloat %40 to float, !dbg !17
  %49 = fpext bfloat %41 to float, !dbg !17
  %50 = fpext bfloat %42 to float, !dbg !17
  %51 = fpext bfloat %43 to float, !dbg !17
  %52 = select i1 %17, float %44, float 0.000000e+00, !dbg !18
  %53 = select i1 %17, float %45, float 0.000000e+00, !dbg !18
  %54 = select i1 %17, float %46, float 0.000000e+00, !dbg !18
  %55 = select i1 %17, float %47, float 0.000000e+00, !dbg !18
  %56 = select i1 %17, float %48, float 0.000000e+00, !dbg !18
  %57 = select i1 %17, float %49, float 0.000000e+00, !dbg !18
  %58 = select i1 %17, float %50, float 0.000000e+00, !dbg !18
  %59 = select i1 %17, float %51, float 0.000000e+00, !dbg !18
  %60 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %61 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %62 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %63 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %64 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %65 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %66 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %67 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %68 = or disjoint i64 %23, 2048, !dbg !20
  %69 = icmp samesign ult i64 %68, 3072, !dbg !21
  %70 = trunc nuw nsw i64 %68 to i32, !dbg !14
  %71 = add i32 %22, %70, !dbg !14
  %72 = sext i32 %71 to i64, !dbg !15
  %73 = getelementptr bfloat, ptr addrspace(1) %0, i64 %72, !dbg !15
  %74 = and i1 %17, %69, !dbg !22
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %73, i1 %74) #5, !dbg !16
  %76 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !16
  %77 = bitcast i32 %76 to <2 x bfloat>, !dbg !16
  %78 = extractelement <2 x bfloat> %77, i64 1, !dbg !16
  %79 = fpext bfloat %78 to float, !dbg !17
  %80 = extractelement <2 x bfloat> %77, i64 0, !dbg !16
  %81 = fpext bfloat %80 to float, !dbg !17
  %82 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !16
  %83 = bitcast i32 %82 to <2 x bfloat>, !dbg !16
  %84 = extractelement <2 x bfloat> %83, i64 1, !dbg !16
  %85 = fpext bfloat %84 to float, !dbg !17
  %86 = extractelement <2 x bfloat> %83, i64 0, !dbg !16
  %87 = fpext bfloat %86 to float, !dbg !17
  %88 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !16
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !16
  %90 = extractelement <2 x bfloat> %89, i64 1, !dbg !16
  %91 = fpext bfloat %90 to float, !dbg !17
  %92 = extractelement <2 x bfloat> %89, i64 0, !dbg !16
  %93 = fpext bfloat %92 to float, !dbg !17
  %94 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !16
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !16
  %96 = extractelement <2 x bfloat> %95, i64 1, !dbg !16
  %97 = fpext bfloat %96 to float, !dbg !17
  %98 = extractelement <2 x bfloat> %95, i64 0, !dbg !16
  %99 = fpext bfloat %98 to float, !dbg !17
  %100 = fsub float %99, %52, !dbg !23
  %101 = fsub float %97, %53, !dbg !23
  %102 = fsub float %93, %54, !dbg !23
  %103 = fsub float %91, %55, !dbg !23
  %104 = fsub float %87, %56, !dbg !23
  %105 = fsub float %85, %57, !dbg !23
  %106 = fsub float %81, %58, !dbg !23
  %107 = fsub float %79, %59, !dbg !23
  %108 = fadd float %60, 1.000000e+00, !dbg !27
  %109 = fadd float %61, 1.000000e+00, !dbg !27
  %110 = fadd float %62, 1.000000e+00, !dbg !27
  %111 = fadd float %63, 1.000000e+00, !dbg !27
  %112 = fadd float %64, 1.000000e+00, !dbg !27
  %113 = fadd float %65, 1.000000e+00, !dbg !27
  %114 = fadd float %66, 1.000000e+00, !dbg !27
  %115 = fadd float %67, 1.000000e+00, !dbg !27
  %116 = tail call float @llvm.nvvm.div.full(float %100, float %108), !dbg !28
  %117 = tail call float @llvm.nvvm.div.full(float %101, float %109), !dbg !28
  %118 = tail call float @llvm.nvvm.div.full(float %102, float %110), !dbg !28
  %119 = tail call float @llvm.nvvm.div.full(float %103, float %111), !dbg !28
  %120 = tail call float @llvm.nvvm.div.full(float %104, float %112), !dbg !28
  %121 = tail call float @llvm.nvvm.div.full(float %105, float %113), !dbg !28
  %122 = tail call float @llvm.nvvm.div.full(float %106, float %114), !dbg !28
  %123 = tail call float @llvm.nvvm.div.full(float %107, float %115), !dbg !28
  %124 = fadd float %52, %116, !dbg !29
  %125 = fadd float %53, %117, !dbg !29
  %126 = fadd float %54, %118, !dbg !29
  %127 = fadd float %55, %119, !dbg !29
  %128 = fadd float %56, %120, !dbg !29
  %129 = fadd float %57, %121, !dbg !29
  %130 = fadd float %58, %122, !dbg !29
  %131 = fadd float %59, %123, !dbg !29
  %132 = fsub float %99, %124, !dbg !30
  %133 = fsub float %97, %125, !dbg !30
  %134 = fsub float %93, %126, !dbg !30
  %135 = fsub float %91, %127, !dbg !30
  %136 = fsub float %87, %128, !dbg !30
  %137 = fsub float %85, %129, !dbg !30
  %138 = fsub float %81, %130, !dbg !30
  %139 = fsub float %79, %131, !dbg !30
  %140 = fmul float %100, %132, !dbg !31
  %141 = fmul float %101, %133, !dbg !31
  %142 = fmul float %102, %134, !dbg !31
  %143 = fmul float %103, %135, !dbg !31
  %144 = fmul float %104, %136, !dbg !31
  %145 = fmul float %105, %137, !dbg !31
  %146 = fmul float %106, %138, !dbg !31
  %147 = fmul float %107, %139, !dbg !31
  %148 = fadd float %140, 0.000000e+00, !dbg !32
  %149 = fadd float %141, 0.000000e+00, !dbg !32
  %150 = fadd float %142, 0.000000e+00, !dbg !32
  %151 = fadd float %143, 0.000000e+00, !dbg !32
  %152 = fadd float %144, 0.000000e+00, !dbg !32
  %153 = fadd float %145, 0.000000e+00, !dbg !32
  %154 = fadd float %146, 0.000000e+00, !dbg !32
  %155 = fadd float %147, 0.000000e+00, !dbg !32
  %156 = fadd float %148, %149, !dbg !33
  %157 = select i1 %74, float %124, float %52, !dbg !18
  %158 = select i1 %74, float %125, float %53, !dbg !18
  %159 = select i1 %74, float %126, float %54, !dbg !18
  %160 = select i1 %74, float %127, float %55, !dbg !18
  %161 = select i1 %74, float %128, float %56, !dbg !18
  %162 = select i1 %74, float %129, float %57, !dbg !18
  %163 = select i1 %74, float %130, float %58, !dbg !18
  %164 = select i1 %74, float %131, float %59, !dbg !18
  %165 = select i1 %74, float %150, float 0.000000e+00, !dbg !34
  %166 = select i1 %74, float %151, float 0.000000e+00, !dbg !34
  %167 = select i1 %74, float %152, float 0.000000e+00, !dbg !34
  %168 = select i1 %74, float %153, float 0.000000e+00, !dbg !34
  %169 = select i1 %74, float %154, float 0.000000e+00, !dbg !34
  %170 = select i1 %74, float %155, float 0.000000e+00, !dbg !34
  %171 = select i1 %74, float %108, float %60, !dbg !19
  %172 = select i1 %74, float %109, float %61, !dbg !19
  %173 = select i1 %74, float %110, float %62, !dbg !19
  %174 = select i1 %74, float %111, float %63, !dbg !19
  %175 = select i1 %74, float %112, float %64, !dbg !19
  %176 = select i1 %74, float %113, float %65, !dbg !19
  %177 = select i1 %74, float %114, float %66, !dbg !19
  %178 = select i1 %74, float %115, float %67, !dbg !19
  %179 = lshr i32 %18, 5, !dbg !11
  %180 = fsub float %158, %157, !dbg !35
  %181 = fadd float %171, %172, !dbg !38
  %182 = fcmp oeq float %181, 0.000000e+00, !dbg !39
  %183 = tail call float @llvm.nvvm.div.full(float %172, float %181), !dbg !40
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !41
  %185 = fmul float %180, %184, !dbg !42
  %186 = fadd float %157, %185, !dbg !43
  %187 = select i1 %74, float %156, float 0.000000e+00, !dbg !44
  %188 = fmul float %180, %180, !dbg !45
  %189 = fmul float %188, %171, !dbg !46
  %190 = fmul float %189, %184, !dbg !47
  %191 = fadd float %187, %190, !dbg !48
  %192 = fsub float %159, %186, !dbg !35
  %193 = fadd float %173, %181, !dbg !38
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !39
  %195 = tail call float @llvm.nvvm.div.full(float %173, float %193), !dbg !40
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !41
  %197 = fmul float %196, %192, !dbg !42
  %198 = fadd float %186, %197, !dbg !43
  %199 = fadd float %165, %191, !dbg !44
  %200 = fmul float %192, %192, !dbg !45
  %201 = fmul float %181, %200, !dbg !46
  %202 = fmul float %196, %201, !dbg !47
  %203 = fadd float %199, %202, !dbg !48
  %204 = fsub float %160, %198, !dbg !35
  %205 = fadd float %174, %193, !dbg !38
  %206 = fcmp oeq float %205, 0.000000e+00, !dbg !39
  %207 = tail call float @llvm.nvvm.div.full(float %174, float %205), !dbg !40
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !41
  %209 = fmul float %208, %204, !dbg !42
  %210 = fadd float %198, %209, !dbg !43
  %211 = fadd float %166, %203, !dbg !44
  %212 = fmul float %204, %204, !dbg !45
  %213 = fmul float %193, %212, !dbg !46
  %214 = fmul float %208, %213, !dbg !47
  %215 = fadd float %211, %214, !dbg !48
  %216 = fsub float %161, %210, !dbg !35
  %217 = fadd float %175, %205, !dbg !38
  %218 = fcmp oeq float %217, 0.000000e+00, !dbg !39
  %219 = tail call float @llvm.nvvm.div.full(float %175, float %217), !dbg !40
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !41
  %221 = fmul float %220, %216, !dbg !42
  %222 = fadd float %210, %221, !dbg !43
  %223 = fadd float %167, %215, !dbg !44
  %224 = fmul float %216, %216, !dbg !45
  %225 = fmul float %205, %224, !dbg !46
  %226 = fmul float %220, %225, !dbg !47
  %227 = fadd float %223, %226, !dbg !48
  %228 = fsub float %162, %222, !dbg !35
  %229 = fadd float %176, %217, !dbg !38
  %230 = fcmp oeq float %229, 0.000000e+00, !dbg !39
  %231 = tail call float @llvm.nvvm.div.full(float %176, float %229), !dbg !40
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !41
  %233 = fmul float %232, %228, !dbg !42
  %234 = fadd float %222, %233, !dbg !43
  %235 = fadd float %168, %227, !dbg !44
  %236 = fmul float %228, %228, !dbg !45
  %237 = fmul float %217, %236, !dbg !46
  %238 = fmul float %232, %237, !dbg !47
  %239 = fadd float %235, %238, !dbg !48
  %240 = fsub float %163, %234, !dbg !35
  %241 = fadd float %177, %229, !dbg !38
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !39
  %243 = tail call float @llvm.nvvm.div.full(float %177, float %241), !dbg !40
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !41
  %245 = fmul float %244, %240, !dbg !42
  %246 = fadd float %234, %245, !dbg !43
  %247 = fadd float %169, %239, !dbg !44
  %248 = fmul float %240, %240, !dbg !45
  %249 = fmul float %229, %248, !dbg !46
  %250 = fmul float %244, %249, !dbg !47
  %251 = fadd float %247, %250, !dbg !48
  %252 = fsub float %164, %246, !dbg !35
  %253 = fadd float %178, %241, !dbg !38
  %254 = fcmp oeq float %253, 0.000000e+00, !dbg !39
  %255 = tail call float @llvm.nvvm.div.full(float %178, float %253), !dbg !40
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !41
  %257 = fmul float %256, %252, !dbg !42
  %258 = fadd float %246, %257, !dbg !43
  %259 = fadd float %170, %251, !dbg !44
  %260 = fmul float %252, %252, !dbg !45
  %261 = fmul float %241, %260, !dbg !46
  %262 = fmul float %256, %261, !dbg !47
  %263 = fadd float %259, %262, !dbg !48
  %264 = bitcast float %258 to i32, !dbg !49
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 16, i32 31), !dbg !49
  %266 = bitcast i32 %265 to float, !dbg !49
  %267 = bitcast float %263 to i32, !dbg !49
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 16, i32 31), !dbg !49
  %269 = bitcast i32 %268 to float, !dbg !49
  %270 = bitcast float %253 to i32, !dbg !49
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 16, i32 31), !dbg !49
  %272 = bitcast i32 %271 to float, !dbg !49
  %273 = fsub float %266, %258, !dbg !35
  %274 = fadd float %253, %272, !dbg !38
  %275 = fcmp oeq float %274, 0.000000e+00, !dbg !39
  %276 = tail call float @llvm.nvvm.div.full(float %272, float %274), !dbg !40
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !41
  %278 = fmul float %277, %273, !dbg !42
  %279 = fadd float %258, %278, !dbg !43
  %280 = fadd float %263, %269, !dbg !44
  %281 = fmul float %273, %273, !dbg !45
  %282 = fmul float %253, %281, !dbg !46
  %283 = fmul float %277, %282, !dbg !47
  %284 = fadd float %280, %283, !dbg !48
  %285 = bitcast float %279 to i32, !dbg !49
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 8, i32 31), !dbg !49
  %287 = bitcast i32 %286 to float, !dbg !49
  %288 = bitcast float %284 to i32, !dbg !49
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 8, i32 31), !dbg !49
  %290 = bitcast i32 %289 to float, !dbg !49
  %291 = bitcast float %274 to i32, !dbg !49
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 8, i32 31), !dbg !49
  %293 = bitcast i32 %292 to float, !dbg !49
  %294 = fsub float %287, %279, !dbg !35
  %295 = fadd float %274, %293, !dbg !38
  %296 = fcmp oeq float %295, 0.000000e+00, !dbg !39
  %297 = tail call float @llvm.nvvm.div.full(float %293, float %295), !dbg !40
  %298 = select i1 %296, float 0.000000e+00, float %297, !dbg !41
  %299 = fmul float %298, %294, !dbg !42
  %300 = fadd float %279, %299, !dbg !43
  %301 = fadd float %284, %290, !dbg !44
  %302 = fmul float %294, %294, !dbg !45
  %303 = fmul float %274, %302, !dbg !46
  %304 = fmul float %298, %303, !dbg !47
  %305 = fadd float %301, %304, !dbg !48
  %306 = bitcast float %300 to i32, !dbg !49
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 4, i32 31), !dbg !49
  %308 = bitcast i32 %307 to float, !dbg !49
  %309 = bitcast float %305 to i32, !dbg !49
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 4, i32 31), !dbg !49
  %311 = bitcast i32 %310 to float, !dbg !49
  %312 = bitcast float %295 to i32, !dbg !49
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 4, i32 31), !dbg !49
  %314 = bitcast i32 %313 to float, !dbg !49
  %315 = fsub float %308, %300, !dbg !35
  %316 = fadd float %295, %314, !dbg !38
  %317 = fcmp oeq float %316, 0.000000e+00, !dbg !39
  %318 = tail call float @llvm.nvvm.div.full(float %314, float %316), !dbg !40
  %319 = select i1 %317, float 0.000000e+00, float %318, !dbg !41
  %320 = fmul float %319, %315, !dbg !42
  %321 = fadd float %300, %320, !dbg !43
  %322 = fadd float %305, %311, !dbg !44
  %323 = fmul float %315, %315, !dbg !45
  %324 = fmul float %295, %323, !dbg !46
  %325 = fmul float %319, %324, !dbg !47
  %326 = fadd float %322, %325, !dbg !48
  %327 = bitcast float %321 to i32, !dbg !49
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 2, i32 31), !dbg !49
  %329 = bitcast i32 %328 to float, !dbg !49
  %330 = bitcast float %326 to i32, !dbg !49
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !49
  %332 = bitcast i32 %331 to float, !dbg !49
  %333 = bitcast float %316 to i32, !dbg !49
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 2, i32 31), !dbg !49
  %335 = bitcast i32 %334 to float, !dbg !49
  %336 = fsub float %329, %321, !dbg !35
  %337 = fadd float %316, %335, !dbg !38
  %338 = fcmp oeq float %337, 0.000000e+00, !dbg !39
  %339 = tail call float @llvm.nvvm.div.full(float %335, float %337), !dbg !40
  %340 = select i1 %338, float 0.000000e+00, float %339, !dbg !41
  %341 = fmul float %340, %336, !dbg !42
  %342 = fadd float %321, %341, !dbg !43
  %343 = fadd float %326, %332, !dbg !44
  %344 = fmul float %336, %336, !dbg !45
  %345 = fmul float %316, %344, !dbg !46
  %346 = fmul float %340, %345, !dbg !47
  %347 = fadd float %343, %346, !dbg !48
  %348 = bitcast float %342 to i32, !dbg !49
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 1, i32 31), !dbg !49
  %350 = bitcast i32 %349 to float, !dbg !49
  %351 = bitcast float %347 to i32, !dbg !49
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 1, i32 31), !dbg !49
  %353 = bitcast i32 %352 to float, !dbg !49
  %354 = bitcast float %337 to i32, !dbg !49
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 1, i32 31), !dbg !49
  %356 = bitcast i32 %355 to float, !dbg !49
  %357 = fsub float %350, %342, !dbg !35
  %358 = fadd float %337, %356, !dbg !38
  %359 = fcmp oeq float %358, 0.000000e+00, !dbg !39
  %360 = tail call float @llvm.nvvm.div.full(float %356, float %358), !dbg !40
  %361 = select i1 %359, float 0.000000e+00, float %360, !dbg !41
  %362 = fmul float %361, %357, !dbg !42
  %363 = fadd float %342, %362, !dbg !43
  %364 = fadd float %347, %353, !dbg !44
  %365 = fmul float %357, %357, !dbg !45
  %366 = fmul float %337, %365, !dbg !46
  %367 = fmul float %361, %366, !dbg !47
  %368 = fadd float %364, %367, !dbg !48
  %369 = and i32 %179, 7, !dbg !49
  %370 = icmp eq i32 %19, 0, !dbg !49
  %371 = zext nneg i32 %369 to i64, !dbg !49
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i64 %371, !dbg !49
  %373 = bitcast float %363 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %373, i1 %370) #5, !dbg !49
  %374 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %371, !dbg !49
  %375 = bitcast float %368 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 %370) #5, !dbg !49
  %376 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %371, !dbg !49
  %377 = bitcast float %358 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %377, i1 %370) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %378 = icmp slt i32 %18, 8, !dbg !49
  %379 = sext i32 %18 to i64, !dbg !49
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i64 %379, !dbg !49
  %381 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %380, i1 %378) #5, !dbg !49
  %382 = bitcast i32 %381 to float, !dbg !49
  %383 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %379, !dbg !49
  %384 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %383, i1 %378) #5, !dbg !49
  %385 = bitcast i32 %384 to float, !dbg !49
  %386 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %379, !dbg !49
  %387 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %386, i1 %378) #5, !dbg !49
  %388 = bitcast i32 %387 to float, !dbg !49
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 4, i32 31), !dbg !49
  %390 = bitcast i32 %389 to float, !dbg !49
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 4, i32 31), !dbg !49
  %392 = bitcast i32 %391 to float, !dbg !49
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 4, i32 31), !dbg !49
  %394 = bitcast i32 %393 to float, !dbg !49
  %395 = fsub float %390, %382, !dbg !35
  %396 = fadd float %388, %394, !dbg !38
  %397 = fcmp oeq float %396, 0.000000e+00, !dbg !39
  %398 = tail call float @llvm.nvvm.div.full(float %394, float %396), !dbg !40
  %399 = select i1 %397, float 0.000000e+00, float %398, !dbg !41
  %400 = fmul float %395, %399, !dbg !42
  %401 = fadd float %400, %382, !dbg !43
  %402 = fadd float %385, %392, !dbg !44
  %403 = fmul float %395, %395, !dbg !45
  %404 = fmul float %403, %388, !dbg !46
  %405 = fmul float %404, %399, !dbg !47
  %406 = fadd float %402, %405, !dbg !48
  %407 = bitcast float %401 to i32, !dbg !49
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 2, i32 31), !dbg !49
  %409 = bitcast i32 %408 to float, !dbg !49
  %410 = bitcast float %406 to i32, !dbg !49
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 2, i32 31), !dbg !49
  %412 = bitcast i32 %411 to float, !dbg !49
  %413 = bitcast float %396 to i32, !dbg !49
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 2, i32 31), !dbg !49
  %415 = bitcast i32 %414 to float, !dbg !49
  %416 = fsub float %409, %401, !dbg !35
  %417 = fadd float %396, %415, !dbg !38
  %418 = fcmp oeq float %417, 0.000000e+00, !dbg !39
  %419 = tail call float @llvm.nvvm.div.full(float %415, float %417), !dbg !40
  %420 = select i1 %418, float 0.000000e+00, float %419, !dbg !41
  %421 = fmul float %416, %420, !dbg !42
  %422 = fadd float %401, %421, !dbg !43
  %423 = fadd float %406, %412, !dbg !44
  %424 = fmul float %416, %416, !dbg !45
  %425 = fmul float %396, %424, !dbg !46
  %426 = fmul float %420, %425, !dbg !47
  %427 = fadd float %423, %426, !dbg !48
  %428 = bitcast float %422 to i32, !dbg !49
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 1, i32 31), !dbg !49
  %430 = bitcast i32 %429 to float, !dbg !49
  %431 = bitcast float %427 to i32, !dbg !49
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %431, i32 1, i32 31), !dbg !49
  %433 = bitcast i32 %432 to float, !dbg !49
  %434 = bitcast float %417 to i32, !dbg !49
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 1, i32 31), !dbg !49
  %436 = bitcast i32 %435 to float, !dbg !49
  %437 = fsub float %430, %422, !dbg !35
  %438 = fadd float %417, %436, !dbg !38
  %439 = fcmp oeq float %438, 0.000000e+00, !dbg !39
  %440 = tail call float @llvm.nvvm.div.full(float %436, float %438), !dbg !40
  %441 = select i1 %439, float 0.000000e+00, float %440, !dbg !41
  %442 = fmul float %437, %441, !dbg !42
  %443 = fadd float %422, %442, !dbg !43
  %444 = fadd float %427, %433, !dbg !44
  %445 = fmul float %437, %437, !dbg !45
  %446 = fmul float %417, %445, !dbg !46
  %447 = fmul float %441, %446, !dbg !47
  %448 = fadd float %444, %447, !dbg !48
  %449 = and i32 %18, 7, !dbg !49
  %450 = icmp eq i32 %449, 0, !dbg !49
  %451 = and i1 %378, %450, !dbg !49
  %452 = bitcast float %443 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %452, i1 %451) #5, !dbg !49
  %453 = bitcast float %448 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %453, i1 %451) #5, !dbg !49
  %454 = bitcast float %438 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %454, i1 %451) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %455 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !49
  %456 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !49
  %457 = tail call float @llvm.nvvm.div.full(float %456, float 3.072000e+03), !dbg !50
  %458 = fadd float %457, 0x3EB0C6F7A0000000, !dbg !51
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %.not.i37 = icmp eq i32 %466, 0, !dbg !52
  br i1 %.not.i37, label %469, label %467, !dbg !52

467:                                              ; preds = %._crit_edge
  %468 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %458), !dbg !52
  br label %__nv_rsqrtf.exit39, !dbg !52

469:                                              ; preds = %._crit_edge
  %470 = tail call float @llvm.nvvm.rsqrt.approx.f(float %458), !dbg !52
  br label %__nv_rsqrtf.exit39, !dbg !52

__nv_rsqrtf.exit39:                               ; preds = %467, %469
  %.0.i38 = phi float [ %468, %467 ], [ %470, %469 ], !dbg !52
  %471 = insertelement <2 x float> poison, float %.0.i38, i64 0, !dbg !53
  %472 = shufflevector <2 x float> %471, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %473 = insertelement <2 x float> poison, float %455, i64 0, !dbg !54
  %474 = shufflevector <2 x float> %473, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %475 = insertelement <4 x float> poison, float %.0.i38, i64 0, !dbg !53
  %476 = shufflevector <4 x float> %475, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !53
  %477 = insertelement <4 x float> poison, float %455, i64 0, !dbg !54
  %478 = shufflevector <4 x float> %477, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !54
  br label %479, !dbg !55

479:                                              ; preds = %__nv_rsqrtf.exit39, %479
  %480 = phi i1 [ true, %__nv_rsqrtf.exit39 ], [ false, %479 ]
  %indvars.iv83 = phi i64 [ 0, %__nv_rsqrtf.exit39 ], [ 2048, %479 ]
  %481 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit39 ], [ %640, %479 ]
  %482 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit39 ], [ %641, %479 ]
  %483 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit39 ], [ %603, %479 ]
  %484 = phi <8 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit39 ], [ %650, %479 ]
  %485 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit39 ], [ %600, %479 ]
  %486 = or disjoint i64 %indvars.iv83, %23, !dbg !56
  %487 = or disjoint i64 %486, 4, !dbg !56
  %488 = icmp samesign ult i64 %486, 3072, !dbg !57
  %489 = trunc nuw nsw i64 %486 to i32, !dbg !58
  %490 = add i32 %22, %489, !dbg !58
  %491 = sext i32 %490 to i64, !dbg !59
  %492 = getelementptr bfloat, ptr addrspace(1) %0, i64 %491, !dbg !59
  %493 = and i1 %17, %488, !dbg !60
  %494 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %492, i1 %493) #5, !dbg !61
  %495 = extractvalue { i32, i32, i32, i32 } %494, 0, !dbg !61
  %496 = bitcast i32 %495 to <2 x bfloat>, !dbg !61
  %497 = extractvalue { i32, i32, i32, i32 } %494, 1, !dbg !61
  %498 = bitcast i32 %497 to <2 x bfloat>, !dbg !61
  %499 = extractvalue { i32, i32, i32, i32 } %494, 2, !dbg !61
  %500 = bitcast i32 %499 to <2 x bfloat>, !dbg !61
  %501 = extractvalue { i32, i32, i32, i32 } %494, 3, !dbg !61
  %502 = bitcast i32 %501 to <2 x bfloat>, !dbg !61
  %503 = add nuw nsw i64 %486, 3072, !dbg !62
  %504 = getelementptr float, ptr addrspace(1) %1, i64 %503, !dbg !63
  %505 = getelementptr float, ptr addrspace(1) %1, i64 %487, !dbg !63
  %506 = getelementptr i8, ptr addrspace(1) %505, i64 12288, !dbg !63
  %507 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %504, i1 %488) #5, !dbg !64
  %508 = extractvalue { i32, i32, i32, i32 } %507, 0, !dbg !64
  %509 = extractvalue { i32, i32, i32, i32 } %507, 1, !dbg !64
  %510 = extractvalue { i32, i32, i32, i32 } %507, 2, !dbg !64
  %511 = extractvalue { i32, i32, i32, i32 } %507, 3, !dbg !64
  %512 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %506, i1 %488) #5, !dbg !64
  %513 = extractvalue { i32, i32, i32, i32 } %512, 0, !dbg !64
  %514 = extractvalue { i32, i32, i32, i32 } %512, 1, !dbg !64
  %515 = extractvalue { i32, i32, i32, i32 } %512, 2, !dbg !64
  %516 = extractvalue { i32, i32, i32, i32 } %512, 3, !dbg !64
  %517 = getelementptr bfloat, ptr addrspace(1) %2, i64 %503, !dbg !65
  %518 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %517, i1 %488) #5, !dbg !66
  %519 = extractvalue { i32, i32, i32, i32 } %518, 0, !dbg !66
  %520 = bitcast i32 %519 to <2 x bfloat>, !dbg !66
  %521 = extractvalue { i32, i32, i32, i32 } %518, 1, !dbg !66
  %522 = bitcast i32 %521 to <2 x bfloat>, !dbg !66
  %523 = extractvalue { i32, i32, i32, i32 } %518, 2, !dbg !66
  %524 = bitcast i32 %523 to <2 x bfloat>, !dbg !66
  %525 = extractvalue { i32, i32, i32, i32 } %518, 3, !dbg !66
  %526 = bitcast i32 %525 to <2 x bfloat>, !dbg !66
  %527 = getelementptr float, ptr addrspace(1) %1, i64 %486, !dbg !67
  %528 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %527, i1 %488) #5, !dbg !68
  %529 = extractvalue { i32, i32, i32, i32 } %528, 0, !dbg !68
  %530 = extractvalue { i32, i32, i32, i32 } %528, 1, !dbg !68
  %531 = extractvalue { i32, i32, i32, i32 } %528, 2, !dbg !68
  %532 = extractvalue { i32, i32, i32, i32 } %528, 3, !dbg !68
  %533 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %505, i1 %488) #5, !dbg !68
  %534 = extractvalue { i32, i32, i32, i32 } %533, 0, !dbg !68
  %535 = extractvalue { i32, i32, i32, i32 } %533, 1, !dbg !68
  %536 = extractvalue { i32, i32, i32, i32 } %533, 2, !dbg !68
  %537 = extractvalue { i32, i32, i32, i32 } %533, 3, !dbg !68
  %538 = getelementptr bfloat, ptr addrspace(1) %2, i64 %486, !dbg !69
  %539 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %538, i1 %488) #5, !dbg !70
  %540 = extractvalue { i32, i32, i32, i32 } %539, 0, !dbg !70
  %541 = bitcast i32 %540 to <2 x bfloat>, !dbg !70
  %542 = extractvalue { i32, i32, i32, i32 } %539, 1, !dbg !70
  %543 = bitcast i32 %542 to <2 x bfloat>, !dbg !70
  %544 = extractvalue { i32, i32, i32, i32 } %539, 2, !dbg !70
  %545 = bitcast i32 %544 to <2 x bfloat>, !dbg !70
  %546 = extractvalue { i32, i32, i32, i32 } %539, 3, !dbg !70
  %547 = bitcast i32 %546 to <2 x bfloat>, !dbg !70
  %548 = fcmp uno <8 x float> %484, zeroinitializer, !dbg !71
  %549 = fcmp uno <4 x float> %485, zeroinitializer, !dbg !73
  %550 = fcmp uno float %481, 0.000000e+00, !dbg !73
  %551 = fcmp uno float %482, 0.000000e+00, !dbg !73
  %552 = fcmp uno <2 x float> %483, zeroinitializer, !dbg !71
  %553 = fpext <2 x bfloat> %496 to <2 x float>, !dbg !75
  %554 = insertelement <2 x i32> poison, i32 %508, i64 0, !dbg !64
  %555 = insertelement <2 x i32> %554, i32 %509, i64 1, !dbg !64
  %556 = bitcast <2 x i32> %555 to <2 x float>, !dbg !64
  %557 = fpext <2 x bfloat> %520 to <2 x float>, !dbg !76
  %558 = insertelement <2 x i32> poison, i32 %529, i64 0, !dbg !68
  %559 = insertelement <2 x i32> %558, i32 %530, i64 1, !dbg !68
  %560 = bitcast <2 x i32> %559 to <2 x float>, !dbg !68
  %561 = fpext <2 x bfloat> %541 to <2 x float>, !dbg !77
  %562 = fsub <2 x float> %553, %474, !dbg !54
  %563 = fmul <2 x float> %472, %562, !dbg !53
  %564 = fadd <2 x float> %556, %557, !dbg !78
  %565 = fadd <2 x float> %564, splat (float 1.000000e+00), !dbg !79
  %566 = fmul <2 x float> %563, %565, !dbg !80
  %567 = fadd <2 x float> %560, %561, !dbg !81
  %568 = fadd <2 x float> %566, %567, !dbg !82
  %569 = fcmp ogt <2 x float> %483, %568, !dbg !83
  %570 = or <2 x i1> %552, %569, !dbg !84
  %571 = select <2 x i1> %570, <2 x float> %483, <2 x float> %568, !dbg !85
  %572 = shufflevector <2 x bfloat> %498, <2 x bfloat> %500, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !75
  %573 = fpext <4 x bfloat> %572 to <4 x float>, !dbg !75
  %574 = insertelement <4 x i32> poison, i32 %510, i64 0, !dbg !64
  %575 = insertelement <4 x i32> %574, i32 %511, i64 1, !dbg !64
  %576 = insertelement <4 x i32> %575, i32 %513, i64 2, !dbg !64
  %577 = insertelement <4 x i32> %576, i32 %514, i64 3, !dbg !64
  %578 = bitcast <4 x i32> %577 to <4 x float>, !dbg !64
  %579 = shufflevector <2 x bfloat> %522, <2 x bfloat> %524, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !76
  %580 = fpext <4 x bfloat> %579 to <4 x float>, !dbg !76
  %581 = insertelement <4 x i32> poison, i32 %531, i64 0, !dbg !68
  %582 = insertelement <4 x i32> %581, i32 %532, i64 1, !dbg !68
  %583 = insertelement <4 x i32> %582, i32 %534, i64 2, !dbg !68
  %584 = insertelement <4 x i32> %583, i32 %535, i64 3, !dbg !68
  %585 = bitcast <4 x i32> %584 to <4 x float>, !dbg !68
  %586 = shufflevector <2 x bfloat> %543, <2 x bfloat> %545, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !77
  %587 = fpext <4 x bfloat> %586 to <4 x float>, !dbg !77
  %588 = fsub <4 x float> %573, %478, !dbg !54
  %589 = fmul <4 x float> %476, %588, !dbg !53
  %590 = fadd <4 x float> %578, %580, !dbg !78
  %591 = fadd <4 x float> %590, splat (float 1.000000e+00), !dbg !79
  %592 = fmul <4 x float> %589, %591, !dbg !80
  %593 = fadd <4 x float> %585, %587, !dbg !81
  %594 = fadd <4 x float> %592, %593, !dbg !82
  %595 = fcmp olt <4 x float> %485, %594, !dbg !86
  %596 = or <4 x i1> %549, %595, !dbg !87
  %597 = select <4 x i1> %596, <4 x float> %485, <4 x float> %594, !dbg !88
  %598 = insertelement <4 x i1> poison, i1 %493, i64 0, !dbg !89
  %599 = shufflevector <4 x i1> %598, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !89
  %600 = select <4 x i1> %599, <4 x float> %597, <4 x float> %485, !dbg !89
  %601 = insertelement <2 x i1> poison, i1 %493, i64 0, !dbg !90
  %602 = shufflevector <2 x i1> %601, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !90
  %603 = select <2 x i1> %602, <2 x float> %571, <2 x float> %483, !dbg !90
  %604 = insertelement <8 x i1> poison, i1 %493, i64 0, !dbg !90
  %605 = shufflevector <8 x i1> %604, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !90
  %606 = getelementptr bfloat, ptr addrspace(1) %3, i64 %491, !dbg !91
  %607 = fptrunc <2 x float> %568 to <2 x bfloat>, !dbg !92
  %608 = extractelement <4 x float> %594, i64 0, !dbg !92
  %609 = fptrunc float %608 to bfloat, !dbg !92
  %610 = extractelement <4 x float> %594, i64 1, !dbg !92
  %611 = fptrunc float %610 to bfloat, !dbg !92
  %612 = extractelement <4 x float> %594, i64 2, !dbg !92
  %613 = fptrunc float %612 to bfloat, !dbg !92
  %614 = extractelement <4 x float> %594, i64 3, !dbg !92
  %615 = fptrunc float %614 to bfloat, !dbg !92
  %616 = fpext <2 x bfloat> %502 to <2 x float>, !dbg !75
  %617 = insertelement <2 x i32> poison, i32 %515, i64 0, !dbg !64
  %618 = insertelement <2 x i32> %617, i32 %516, i64 1, !dbg !64
  %619 = bitcast <2 x i32> %618 to <2 x float>, !dbg !64
  %620 = fpext <2 x bfloat> %526 to <2 x float>, !dbg !76
  %621 = insertelement <2 x i32> poison, i32 %536, i64 0, !dbg !68
  %622 = insertelement <2 x i32> %621, i32 %537, i64 1, !dbg !68
  %623 = bitcast <2 x i32> %622 to <2 x float>, !dbg !68
  %624 = fpext <2 x bfloat> %547 to <2 x float>, !dbg !77
  %625 = fsub <2 x float> %616, %474, !dbg !54
  %626 = fmul <2 x float> %472, %625, !dbg !53
  %627 = fadd <2 x float> %619, %620, !dbg !78
  %628 = fadd <2 x float> %627, splat (float 1.000000e+00), !dbg !79
  %629 = fmul <2 x float> %626, %628, !dbg !80
  %630 = fadd <2 x float> %623, %624, !dbg !81
  %631 = fadd <2 x float> %629, %630, !dbg !82
  %632 = extractelement <2 x float> %631, i64 0, !dbg !88
  %633 = fcmp olt float %481, %632, !dbg !86
  %634 = extractelement <2 x float> %631, i64 1, !dbg !88
  %635 = fcmp olt float %482, %634, !dbg !86
  %636 = or i1 %550, %633, !dbg !87
  %637 = or i1 %551, %635, !dbg !87
  %638 = select i1 %636, float %481, float %632, !dbg !88
  %639 = select i1 %637, float %482, float %634, !dbg !88
  %640 = select i1 %493, float %638, float %481, !dbg !89
  %641 = select i1 %493, float %639, float %482, !dbg !89
  %642 = shufflevector <2 x float> %568, <2 x float> %631, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 2, i32 3, i32 0, i32 1>, !dbg !83
  %643 = shufflevector <4 x float> %594, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !83
  %644 = shufflevector <8 x float> %643, <8 x float> %642, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !83
  %645 = fcmp ogt <8 x float> %484, %644, !dbg !83
  %646 = fcmp olt <8 x float> %484, %644, !dbg !83
  %647 = shufflevector <8 x i1> %645, <8 x i1> %646, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>, !dbg !83
  %648 = or <8 x i1> %548, %647, !dbg !84
  %649 = select <8 x i1> %648, <8 x float> %484, <8 x float> %644, !dbg !85
  %650 = select <8 x i1> %605, <8 x float> %649, <8 x float> %484, !dbg !90
  %651 = fptrunc <2 x float> %631 to <2 x bfloat>, !dbg !92
  %652 = bitcast <2 x bfloat> %607 to i32, !dbg !92
  %653 = insertelement <2 x bfloat> poison, bfloat %609, i64 0, !dbg !92
  %654 = insertelement <2 x bfloat> %653, bfloat %611, i64 1, !dbg !92
  %655 = bitcast <2 x bfloat> %654 to i32, !dbg !92
  %656 = insertelement <2 x bfloat> poison, bfloat %613, i64 0, !dbg !92
  %657 = insertelement <2 x bfloat> %656, bfloat %615, i64 1, !dbg !92
  %658 = bitcast <2 x bfloat> %657 to i32, !dbg !92
  %659 = bitcast <2 x bfloat> %651 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %652, i32 %655, i32 %658, i32 %659, ptr addrspace(1) %606, i1 %493) #5, !dbg !92
  br i1 %480, label %479, label %660, !dbg !55

660:                                              ; preds = %479
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %661 = extractelement <8 x float> %650, i64 6, !dbg !95
  %662 = extractelement <8 x float> %650, i64 7, !dbg !95
  %663 = fcmp olt float %661, %662, !dbg !95
  %664 = fcmp uno float %661, 0.000000e+00, !dbg !96
  %665 = or i1 %663, %664, !dbg !97
  %666 = select i1 %665, float %661, float %662, !dbg !98
  %667 = extractelement <4 x float> %600, i64 0, !dbg !95
  %668 = fcmp olt float %666, %667, !dbg !95
  %669 = fcmp uno float %666, 0.000000e+00, !dbg !96
  %670 = or i1 %668, %669, !dbg !97
  %671 = select i1 %670, float %666, float %667, !dbg !98
  %672 = extractelement <4 x float> %600, i64 1, !dbg !95
  %673 = fcmp olt float %671, %672, !dbg !95
  %674 = fcmp uno float %671, 0.000000e+00, !dbg !96
  %675 = or i1 %673, %674, !dbg !97
  %676 = select i1 %675, float %671, float %672, !dbg !98
  %677 = extractelement <4 x float> %600, i64 2, !dbg !95
  %678 = fcmp olt float %676, %677, !dbg !95
  %679 = fcmp uno float %676, 0.000000e+00, !dbg !96
  %680 = or i1 %678, %679, !dbg !97
  %681 = select i1 %680, float %676, float %677, !dbg !98
  %682 = extractelement <4 x float> %600, i64 3, !dbg !95
  %683 = fcmp olt float %681, %682, !dbg !95
  %684 = fcmp uno float %681, 0.000000e+00, !dbg !96
  %685 = or i1 %683, %684, !dbg !97
  %686 = select i1 %685, float %681, float %682, !dbg !98
  %687 = fcmp olt float %686, %640, !dbg !95
  %688 = fcmp uno float %686, 0.000000e+00, !dbg !96
  %689 = or i1 %687, %688, !dbg !97
  %690 = select i1 %689, float %686, float %640, !dbg !98
  %691 = fcmp olt float %690, %641, !dbg !95
  %692 = fcmp uno float %690, 0.000000e+00, !dbg !96
  %693 = or i1 %691, %692, !dbg !97
  %694 = select i1 %693, float %690, float %641, !dbg !98
  %695 = bitcast float %694 to i32, !dbg !93
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %695, i32 16, i32 31), !dbg !93
  %697 = bitcast i32 %696 to float, !dbg !93
  %698 = fcmp olt float %694, %697, !dbg !95
  %699 = fcmp uno float %694, 0.000000e+00, !dbg !96
  %700 = or i1 %699, %698, !dbg !97
  %701 = select i1 %700, float %694, float %697, !dbg !98
  %702 = bitcast float %701 to i32, !dbg !93
  %703 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %702, i32 8, i32 31), !dbg !93
  %704 = bitcast i32 %703 to float, !dbg !93
  %705 = fcmp olt float %701, %704, !dbg !95
  %706 = fcmp uno float %701, 0.000000e+00, !dbg !96
  %707 = or i1 %705, %706, !dbg !97
  %708 = select i1 %707, float %701, float %704, !dbg !98
  %709 = bitcast float %708 to i32, !dbg !93
  %710 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %709, i32 4, i32 31), !dbg !93
  %711 = bitcast i32 %710 to float, !dbg !93
  %712 = fcmp olt float %708, %711, !dbg !95
  %713 = fcmp uno float %708, 0.000000e+00, !dbg !96
  %714 = or i1 %712, %713, !dbg !97
  %715 = select i1 %714, float %708, float %711, !dbg !98
  %716 = bitcast float %715 to i32, !dbg !93
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 2, i32 31), !dbg !93
  %718 = bitcast i32 %717 to float, !dbg !93
  %719 = fcmp olt float %715, %718, !dbg !95
  %720 = fcmp uno float %715, 0.000000e+00, !dbg !96
  %721 = or i1 %719, %720, !dbg !97
  %722 = select i1 %721, float %715, float %718, !dbg !98
  %723 = bitcast float %722 to i32, !dbg !93
  %724 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %723, i32 1, i32 31), !dbg !93
  %725 = bitcast i32 %724 to float, !dbg !93
  %726 = fcmp olt float %722, %725, !dbg !95
  %727 = fcmp uno float %722, 0.000000e+00, !dbg !96
  %728 = or i1 %726, %727, !dbg !97
  %729 = select i1 %728, i32 %723, i32 %724, !dbg !98
  %730 = insertelement <1 x i32> poison, i32 %729, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %730, i1 %370) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %731 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %380, i1 %378) #5, !dbg !93
  %732 = bitcast i32 %731 to float, !dbg !93
  %733 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %731, i32 4, i32 31), !dbg !93
  %734 = bitcast i32 %733 to float, !dbg !93
  %735 = fcmp olt float %732, %734, !dbg !95
  %736 = fcmp uno float %732, 0.000000e+00, !dbg !96
  %737 = or i1 %736, %735, !dbg !97
  %738 = select i1 %737, float %732, float %734, !dbg !98
  %739 = bitcast float %738 to i32, !dbg !93
  %740 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %739, i32 2, i32 31), !dbg !93
  %741 = bitcast i32 %740 to float, !dbg !93
  %742 = fcmp olt float %738, %741, !dbg !95
  %743 = fcmp uno float %738, 0.000000e+00, !dbg !96
  %744 = or i1 %742, %743, !dbg !97
  %745 = select i1 %744, float %738, float %741, !dbg !98
  %746 = bitcast float %745 to i32, !dbg !93
  %747 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %746, i32 1, i32 31), !dbg !93
  %748 = bitcast i32 %747 to float, !dbg !93
  %749 = fcmp olt float %745, %748, !dbg !95
  %750 = fcmp uno float %745, 0.000000e+00, !dbg !96
  %751 = or i1 %749, %750, !dbg !97
  %752 = select i1 %751, i32 %746, i32 %747, !dbg !98
  %753 = insertelement <1 x i32> poison, i32 %752, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %753, i1 %451) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %754 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %755 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %603, <2 x i32> <i32 0, i32 2>, !dbg !101
  %756 = fcmp ogt <2 x float> %755, %603, !dbg !101
  %757 = fcmp uno <2 x float> %755, %603, !dbg !101
  %shift = shufflevector <2 x i1> %756, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !102
  %758 = or <2 x i1> %shift, %757, !dbg !102
  %759 = extractelement <2 x i1> %758, i64 0, !dbg !102
  %760 = extractelement <2 x float> %603, i64 0, !dbg !103
  %761 = extractelement <2 x float> %603, i64 1, !dbg !103
  %762 = select i1 %759, float %760, float %761, !dbg !103
  %763 = extractelement <8 x float> %650, i64 0, !dbg !101
  %764 = fcmp ogt float %762, %763, !dbg !101
  %765 = fcmp uno float %762, 0.000000e+00, !dbg !104
  %766 = or i1 %764, %765, !dbg !102
  %767 = select i1 %766, float %762, float %763, !dbg !103
  %768 = extractelement <8 x float> %650, i64 1, !dbg !101
  %769 = fcmp ogt float %767, %768, !dbg !101
  %770 = fcmp uno float %767, 0.000000e+00, !dbg !104
  %771 = or i1 %769, %770, !dbg !102
  %772 = select i1 %771, float %767, float %768, !dbg !103
  %773 = extractelement <8 x float> %650, i64 2, !dbg !101
  %774 = fcmp ogt float %772, %773, !dbg !101
  %775 = fcmp uno float %772, 0.000000e+00, !dbg !104
  %776 = or i1 %774, %775, !dbg !102
  %777 = select i1 %776, float %772, float %773, !dbg !103
  %778 = extractelement <8 x float> %650, i64 3, !dbg !101
  %779 = fcmp ogt float %777, %778, !dbg !101
  %780 = fcmp uno float %777, 0.000000e+00, !dbg !104
  %781 = or i1 %779, %780, !dbg !102
  %782 = select i1 %781, float %777, float %778, !dbg !103
  %783 = extractelement <8 x float> %650, i64 4, !dbg !101
  %784 = fcmp ogt float %782, %783, !dbg !101
  %785 = fcmp uno float %782, 0.000000e+00, !dbg !104
  %786 = or i1 %784, %785, !dbg !102
  %787 = select i1 %786, float %782, float %783, !dbg !103
  %788 = extractelement <8 x float> %650, i64 5, !dbg !101
  %789 = fcmp ogt float %787, %788, !dbg !101
  %790 = fcmp uno float %787, 0.000000e+00, !dbg !104
  %791 = or i1 %789, %790, !dbg !102
  %792 = select i1 %791, float %787, float %788, !dbg !103
  %793 = bitcast float %792 to i32, !dbg !99
  %794 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %793, i32 16, i32 31), !dbg !99
  %795 = bitcast i32 %794 to float, !dbg !99
  %796 = fcmp ogt float %792, %795, !dbg !101
  %797 = fcmp uno float %792, 0.000000e+00, !dbg !104
  %798 = or i1 %797, %796, !dbg !102
  %799 = select i1 %798, float %792, float %795, !dbg !103
  %800 = bitcast float %799 to i32, !dbg !99
  %801 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %800, i32 8, i32 31), !dbg !99
  %802 = bitcast i32 %801 to float, !dbg !99
  %803 = fcmp ogt float %799, %802, !dbg !101
  %804 = fcmp uno float %799, 0.000000e+00, !dbg !104
  %805 = or i1 %803, %804, !dbg !102
  %806 = select i1 %805, float %799, float %802, !dbg !103
  %807 = bitcast float %806 to i32, !dbg !99
  %808 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %807, i32 4, i32 31), !dbg !99
  %809 = bitcast i32 %808 to float, !dbg !99
  %810 = fcmp ogt float %806, %809, !dbg !101
  %811 = fcmp uno float %806, 0.000000e+00, !dbg !104
  %812 = or i1 %810, %811, !dbg !102
  %813 = select i1 %812, float %806, float %809, !dbg !103
  %814 = bitcast float %813 to i32, !dbg !99
  %815 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %814, i32 2, i32 31), !dbg !99
  %816 = bitcast i32 %815 to float, !dbg !99
  %817 = fcmp ogt float %813, %816, !dbg !101
  %818 = fcmp uno float %813, 0.000000e+00, !dbg !104
  %819 = or i1 %817, %818, !dbg !102
  %820 = select i1 %819, float %813, float %816, !dbg !103
  %821 = bitcast float %820 to i32, !dbg !99
  %822 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %821, i32 1, i32 31), !dbg !99
  %823 = bitcast i32 %822 to float, !dbg !99
  %824 = fcmp ogt float %820, %823, !dbg !101
  %825 = fcmp uno float %820, 0.000000e+00, !dbg !104
  %826 = or i1 %824, %825, !dbg !102
  %827 = select i1 %826, i32 %821, i32 %822, !dbg !103
  %828 = insertelement <1 x i32> poison, i32 %827, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %828, i1 %370) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %829 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %380, i1 %378) #5, !dbg !99
  %830 = bitcast i32 %829 to float, !dbg !99
  %831 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %829, i32 4, i32 31), !dbg !99
  %832 = bitcast i32 %831 to float, !dbg !99
  %833 = fcmp ogt float %830, %832, !dbg !101
  %834 = fcmp uno float %830, 0.000000e+00, !dbg !104
  %835 = or i1 %834, %833, !dbg !102
  %836 = select i1 %835, float %830, float %832, !dbg !103
  %837 = bitcast float %836 to i32, !dbg !99
  %838 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %837, i32 2, i32 31), !dbg !99
  %839 = bitcast i32 %838 to float, !dbg !99
  %840 = fcmp ogt float %836, %839, !dbg !101
  %841 = fcmp uno float %836, 0.000000e+00, !dbg !104
  %842 = or i1 %840, %841, !dbg !102
  %843 = select i1 %842, float %836, float %839, !dbg !103
  %844 = bitcast float %843 to i32, !dbg !99
  %845 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %844, i32 1, i32 31), !dbg !99
  %846 = bitcast i32 %845 to float, !dbg !99
  %847 = fcmp ogt float %843, %846, !dbg !101
  %848 = fcmp uno float %843, 0.000000e+00, !dbg !104
  %849 = or i1 %847, %848, !dbg !102
  %850 = select i1 %849, i32 %844, i32 %845, !dbg !103
  %851 = insertelement <1 x i32> poison, i32 %850, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %851, i1 %451) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %852 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !99
  %853 = sext i32 %16 to i64, !dbg !105
  %854 = getelementptr bfloat, ptr addrspace(1) %4, i64 %853, !dbg !105
  %855 = fptrunc float %754 to bfloat, !dbg !106
  %856 = and i32 %18, 255, !dbg !106
  %857 = icmp eq i32 %856, 0, !dbg !106
  %858 = bitcast bfloat %855 to i16, !dbg !106
  %859 = and i1 %17, %857, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %858, ptr addrspace(1) %854, i1 %859) #5, !dbg !106
  %860 = getelementptr bfloat, ptr addrspace(1) %5, i64 %853, !dbg !107
  %861 = fptrunc float %852 to bfloat, !dbg !108
  %862 = bitcast bfloat %861 to i16, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %862, ptr addrspace(1) %860, i1 %859) #5, !dbg !108
  %863 = getelementptr bfloat, ptr addrspace(1) %6, i64 %853, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %858, ptr addrspace(1) %863, i1 %859) #5, !dbg !110
  %864 = getelementptr bfloat, ptr addrspace(1) %7, i64 %853, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %862, ptr addrspace(1) %864, i1 %859) #5, !dbg !112
  %865 = getelementptr bfloat, ptr addrspace(1) %8, i64 %853, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %858, ptr addrspace(1) %865, i1 %859) #5, !dbg !114
  %866 = getelementptr bfloat, ptr addrspace(1) %9, i64 %853, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %862, ptr addrspace(1) %866, i1 %859) #5, !dbg !116
  %.inv = fcmp oge float %754, 0.000000e+00, !dbg !117
  %867 = select i1 %.inv, float 0.000000e+00, float %754, !dbg !117
  %868 = fsub float 0.000000e+00, %867, !dbg !119
  %.inv3 = fcmp ole float %852, 0.000000e+00, !dbg !120
  %869 = select i1 %.inv3, float 0.000000e+00, float %852, !dbg !120
  %870 = fcmp ogt float %868, %869, !dbg !122
  %871 = fcmp uno float %868, 0.000000e+00, !dbg !124
  %872 = or i1 %871, %870, !dbg !125
  %873 = select i1 %872, float %868, float %869, !dbg !126
  %874 = fmul float %873, 0x3F80204080000000, !dbg !127
  %875 = fcmp ogt float %874, 0x3EE4F8B580000000, !dbg !128
  %876 = fcmp uno float %874, 0.000000e+00, !dbg !130
  %877 = or i1 %875, %876, !dbg !131
  %878 = select i1 %877, float %874, float 0x3EE4F8B580000000, !dbg !132
  %879 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %878), !dbg !133
  %880 = add i32 %21, %22, !dbg !134
  %881 = sext i32 %880 to i64, !dbg !135
  %882 = getelementptr bfloat, ptr addrspace(1) %3, i64 %881, !dbg !135
  %883 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %882, i1 %17) #5, !dbg !136
  %884 = extractvalue { i32, i32, i32, i32 } %883, 0, !dbg !136
  %885 = bitcast i32 %884 to <2 x bfloat>, !dbg !136
  %886 = extractvalue { i32, i32, i32, i32 } %883, 1, !dbg !136
  %887 = bitcast i32 %886 to <2 x bfloat>, !dbg !136
  %888 = extractvalue { i32, i32, i32, i32 } %883, 2, !dbg !136
  %889 = bitcast i32 %888 to <2 x bfloat>, !dbg !136
  %890 = extractvalue { i32, i32, i32, i32 } %883, 3, !dbg !136
  %891 = bitcast i32 %890 to <2 x bfloat>, !dbg !136
  %892 = extractelement <2 x bfloat> %885, i64 0, !dbg !136
  %893 = extractelement <2 x bfloat> %885, i64 1, !dbg !136
  %894 = extractelement <2 x bfloat> %887, i64 0, !dbg !136
  %895 = extractelement <2 x bfloat> %887, i64 1, !dbg !136
  %896 = extractelement <2 x bfloat> %889, i64 0, !dbg !136
  %897 = extractelement <2 x bfloat> %889, i64 1, !dbg !136
  %898 = extractelement <2 x bfloat> %891, i64 0, !dbg !136
  %899 = extractelement <2 x bfloat> %891, i64 1, !dbg !136
  %900 = fpext bfloat %892 to float, !dbg !137
  %901 = fpext bfloat %893 to float, !dbg !137
  %902 = fpext bfloat %894 to float, !dbg !137
  %903 = fpext bfloat %895 to float, !dbg !137
  %904 = fpext bfloat %896 to float, !dbg !137
  %905 = fpext bfloat %897 to float, !dbg !137
  %906 = fpext bfloat %898 to float, !dbg !137
  %907 = fpext bfloat %899 to float, !dbg !137
  %908 = fmul float %879, %900, !dbg !138
  %909 = fmul float %879, %901, !dbg !138
  %910 = fmul float %879, %902, !dbg !138
  %911 = fmul float %879, %903, !dbg !138
  %912 = fmul float %879, %904, !dbg !138
  %913 = fmul float %879, %905, !dbg !138
  %914 = fmul float %879, %906, !dbg !138
  %915 = fmul float %879, %907, !dbg !138
  %916 = tail call float @llvm.nvvm.round.f(float %908) #5, !dbg !139
  %917 = tail call float @llvm.nvvm.round.f(float %909) #5, !dbg !139
  %918 = tail call float @llvm.nvvm.round.f(float %910) #5, !dbg !139
  %919 = tail call float @llvm.nvvm.round.f(float %911) #5, !dbg !139
  %920 = tail call float @llvm.nvvm.round.f(float %912) #5, !dbg !139
  %921 = tail call float @llvm.nvvm.round.f(float %913) #5, !dbg !139
  %922 = tail call float @llvm.nvvm.round.f(float %914) #5, !dbg !139
  %923 = tail call float @llvm.nvvm.round.f(float %915) #5, !dbg !139
  %924 = insertelement <4 x float> poison, float %916, i64 0, !dbg !140
  %925 = insertelement <4 x float> %924, float %917, i64 1, !dbg !140
  %926 = insertelement <4 x float> %925, float %918, i64 2, !dbg !140
  %927 = insertelement <4 x float> %926, float %919, i64 3, !dbg !140
  %928 = fcmp ogt <4 x float> %927, splat (float -1.270000e+02), !dbg !140
  %929 = fcmp uno <4 x float> %927, zeroinitializer, !dbg !142
  %930 = or <4 x i1> %928, %929, !dbg !143
  %931 = select <4 x i1> %930, <4 x float> %927, <4 x float> splat (float -1.270000e+02), !dbg !144
  %932 = fcmp olt <4 x float> %931, splat (float 1.270000e+02), !dbg !145
  %933 = fcmp uno <4 x float> %931, zeroinitializer, !dbg !147
  %934 = or <4 x i1> %932, %933, !dbg !148
  %935 = fptosi <4 x float> %931 to <4 x i8>, !dbg !149
  %936 = select <4 x i1> %934, <4 x i8> %935, <4 x i8> splat (i8 127), !dbg !150
  %937 = insertelement <4 x float> poison, float %920, i64 0, !dbg !140
  %938 = insertelement <4 x float> %937, float %921, i64 1, !dbg !140
  %939 = insertelement <4 x float> %938, float %922, i64 2, !dbg !140
  %940 = insertelement <4 x float> %939, float %923, i64 3, !dbg !140
  %941 = fcmp ogt <4 x float> %940, splat (float -1.270000e+02), !dbg !140
  %942 = fcmp uno <4 x float> %940, zeroinitializer, !dbg !142
  %943 = or <4 x i1> %941, %942, !dbg !143
  %944 = select <4 x i1> %943, <4 x float> %940, <4 x float> splat (float -1.270000e+02), !dbg !144
  %945 = fcmp olt <4 x float> %944, splat (float 1.270000e+02), !dbg !145
  %946 = fcmp uno <4 x float> %944, zeroinitializer, !dbg !147
  %947 = or <4 x i1> %945, %946, !dbg !148
  %948 = fptosi <4 x float> %944 to <4 x i8>, !dbg !149
  %949 = select <4 x i1> %947, <4 x i8> %948, <4 x i8> splat (i8 127), !dbg !150
  %950 = getelementptr i8, ptr addrspace(1) %10, i64 %881, !dbg !151
  %951 = bitcast <4 x i8> %936 to i32, !dbg !152
  %952 = bitcast <4 x i8> %949 to i32, !dbg !152
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %951, i32 %952, ptr addrspace(1) %950, i1 %17) #5, !dbg !152
  %953 = getelementptr i8, ptr addrspace(1) %11, i64 %881, !dbg !153
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %951, i32 %952, ptr addrspace(1) %953, i1 %17) #5, !dbg !154
  %954 = getelementptr i8, ptr addrspace(1) %12, i64 %881, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %951, i32 %952, ptr addrspace(1) %954, i1 %17) #5, !dbg !156
  %955 = or disjoint i64 %23, 2048, !dbg !157
  %956 = icmp samesign ult i64 %955, 3072, !dbg !158
  %957 = trunc nuw nsw i64 %955 to i32, !dbg !134
  %958 = add i32 %22, %957, !dbg !134
  %959 = sext i32 %958 to i64, !dbg !135
  %960 = getelementptr bfloat, ptr addrspace(1) %3, i64 %959, !dbg !135
  %961 = and i1 %17, %956, !dbg !159
  %962 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %960, i1 %961) #5, !dbg !136
  %963 = extractvalue { i32, i32, i32, i32 } %962, 0, !dbg !136
  %964 = bitcast i32 %963 to <2 x bfloat>, !dbg !136
  %965 = extractvalue { i32, i32, i32, i32 } %962, 1, !dbg !136
  %966 = bitcast i32 %965 to <2 x bfloat>, !dbg !136
  %967 = extractvalue { i32, i32, i32, i32 } %962, 2, !dbg !136
  %968 = bitcast i32 %967 to <2 x bfloat>, !dbg !136
  %969 = extractvalue { i32, i32, i32, i32 } %962, 3, !dbg !136
  %970 = bitcast i32 %969 to <2 x bfloat>, !dbg !136
  %971 = extractelement <2 x bfloat> %964, i64 0, !dbg !136
  %972 = extractelement <2 x bfloat> %964, i64 1, !dbg !136
  %973 = extractelement <2 x bfloat> %966, i64 0, !dbg !136
  %974 = extractelement <2 x bfloat> %966, i64 1, !dbg !136
  %975 = extractelement <2 x bfloat> %968, i64 0, !dbg !136
  %976 = extractelement <2 x bfloat> %968, i64 1, !dbg !136
  %977 = extractelement <2 x bfloat> %970, i64 0, !dbg !136
  %978 = extractelement <2 x bfloat> %970, i64 1, !dbg !136
  %979 = fpext bfloat %971 to float, !dbg !137
  %980 = fpext bfloat %972 to float, !dbg !137
  %981 = fpext bfloat %973 to float, !dbg !137
  %982 = fpext bfloat %974 to float, !dbg !137
  %983 = fpext bfloat %975 to float, !dbg !137
  %984 = fpext bfloat %976 to float, !dbg !137
  %985 = fpext bfloat %977 to float, !dbg !137
  %986 = fpext bfloat %978 to float, !dbg !137
  %987 = fmul float %879, %979, !dbg !138
  %988 = fmul float %879, %980, !dbg !138
  %989 = fmul float %879, %981, !dbg !138
  %990 = fmul float %879, %982, !dbg !138
  %991 = fmul float %879, %983, !dbg !138
  %992 = fmul float %879, %984, !dbg !138
  %993 = fmul float %879, %985, !dbg !138
  %994 = fmul float %879, %986, !dbg !138
  %995 = tail call float @llvm.nvvm.round.f(float %987) #5, !dbg !139
  %996 = tail call float @llvm.nvvm.round.f(float %988) #5, !dbg !139
  %997 = tail call float @llvm.nvvm.round.f(float %989) #5, !dbg !139
  %998 = tail call float @llvm.nvvm.round.f(float %990) #5, !dbg !139
  %999 = tail call float @llvm.nvvm.round.f(float %991) #5, !dbg !139
  %1000 = tail call float @llvm.nvvm.round.f(float %992) #5, !dbg !139
  %1001 = tail call float @llvm.nvvm.round.f(float %993) #5, !dbg !139
  %1002 = tail call float @llvm.nvvm.round.f(float %994) #5, !dbg !139
  %1003 = insertelement <4 x float> poison, float %995, i64 0, !dbg !140
  %1004 = insertelement <4 x float> %1003, float %996, i64 1, !dbg !140
  %1005 = insertelement <4 x float> %1004, float %997, i64 2, !dbg !140
  %1006 = insertelement <4 x float> %1005, float %998, i64 3, !dbg !140
  %1007 = fcmp ogt <4 x float> %1006, splat (float -1.270000e+02), !dbg !140
  %1008 = fcmp uno <4 x float> %1006, zeroinitializer, !dbg !142
  %1009 = or <4 x i1> %1007, %1008, !dbg !143
  %1010 = select <4 x i1> %1009, <4 x float> %1006, <4 x float> splat (float -1.270000e+02), !dbg !144
  %1011 = fcmp olt <4 x float> %1010, splat (float 1.270000e+02), !dbg !145
  %1012 = fcmp uno <4 x float> %1010, zeroinitializer, !dbg !147
  %1013 = or <4 x i1> %1011, %1012, !dbg !148
  %1014 = fptosi <4 x float> %1010 to <4 x i8>, !dbg !149
  %1015 = select <4 x i1> %1013, <4 x i8> %1014, <4 x i8> splat (i8 127), !dbg !150
  %1016 = insertelement <4 x float> poison, float %999, i64 0, !dbg !140
  %1017 = insertelement <4 x float> %1016, float %1000, i64 1, !dbg !140
  %1018 = insertelement <4 x float> %1017, float %1001, i64 2, !dbg !140
  %1019 = insertelement <4 x float> %1018, float %1002, i64 3, !dbg !140
  %1020 = fcmp ogt <4 x float> %1019, splat (float -1.270000e+02), !dbg !140
  %1021 = fcmp uno <4 x float> %1019, zeroinitializer, !dbg !142
  %1022 = or <4 x i1> %1020, %1021, !dbg !143
  %1023 = select <4 x i1> %1022, <4 x float> %1019, <4 x float> splat (float -1.270000e+02), !dbg !144
  %1024 = fcmp olt <4 x float> %1023, splat (float 1.270000e+02), !dbg !145
  %1025 = fcmp uno <4 x float> %1023, zeroinitializer, !dbg !147
  %1026 = or <4 x i1> %1024, %1025, !dbg !148
  %1027 = fptosi <4 x float> %1023 to <4 x i8>, !dbg !149
  %1028 = select <4 x i1> %1026, <4 x i8> %1027, <4 x i8> splat (i8 127), !dbg !150
  %1029 = getelementptr i8, ptr addrspace(1) %10, i64 %959, !dbg !151
  %1030 = bitcast <4 x i8> %1015 to i32, !dbg !152
  %1031 = bitcast <4 x i8> %1028 to i32, !dbg !152
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1030, i32 %1031, ptr addrspace(1) %1029, i1 %961) #5, !dbg !152
  %1032 = getelementptr i8, ptr addrspace(1) %11, i64 %959, !dbg !153
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1030, i32 %1031, ptr addrspace(1) %1032, i1 %961) #5, !dbg !154
  %1033 = getelementptr i8, ptr addrspace(1) %12, i64 %959, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1030, i32 %1031, ptr addrspace(1) %1033, i1 %961) #5, !dbg !156
  ret void, !dbg !160
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 32, column: 40, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 51, scope: !6)
!17 = !DILocation(line: 38, column: 112, scope: !6)
!18 = !DILocation(line: 44, column: 62, scope: !6)
!19 = !DILocation(line: 46, column: 66, scope: !6)
!20 = !DILocation(line: 33, column: 31, scope: !6)
!21 = !DILocation(line: 34, column: 29, scope: !6)
!22 = !DILocation(line: 38, column: 59, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 203, column: 7, scope: !24, inlinedAt: !26)
!34 = !DILocation(line: 45, column: 58, scope: !6)
!35 = !DILocation(line: 217, column: 21, scope: !36, inlinedAt: !37)
!36 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!37 = !DILocation(line: 47, column: 79, scope: !6)
!38 = !DILocation(line: 218, column: 28, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 219, column: 39, scope: !36, inlinedAt: !37)
!40 = !DILocation(line: 219, column: 60, scope: !36, inlinedAt: !37)
!41 = !DILocation(line: 219, column: 49, scope: !36, inlinedAt: !37)
!42 = !DILocation(line: 221, column: 25, scope: !36, inlinedAt: !37)
!43 = !DILocation(line: 221, column: 17, scope: !36, inlinedAt: !37)
!44 = !DILocation(line: 222, column: 15, scope: !36, inlinedAt: !37)
!45 = !DILocation(line: 222, column: 30, scope: !36, inlinedAt: !37)
!46 = !DILocation(line: 222, column: 38, scope: !36, inlinedAt: !37)
!47 = !DILocation(line: 222, column: 49, scope: !36, inlinedAt: !37)
!48 = !DILocation(line: 222, column: 22, scope: !36, inlinedAt: !37)
!49 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !37)
!50 = !DILocation(line: 67, column: 24, scope: !6)
!51 = !DILocation(line: 69, column: 24, scope: !6)
!52 = !DILocation(line: 70, column: 32, scope: !6)
!53 = !DILocation(line: 71, column: 24, scope: !6)
!54 = !DILocation(line: 65, column: 24, scope: !6)
!55 = !DILocation(line: 53, column: 40, scope: !6)
!56 = !DILocation(line: 54, column: 31, scope: !6)
!57 = !DILocation(line: 55, column: 29, scope: !6)
!58 = !DILocation(line: 59, column: 41, scope: !6)
!59 = !DILocation(line: 59, column: 34, scope: !6)
!60 = !DILocation(line: 59, column: 59, scope: !6)
!61 = !DILocation(line: 59, column: 51, scope: !6)
!62 = !DILocation(line: 60, column: 42, scope: !6)
!63 = !DILocation(line: 60, column: 35, scope: !6)
!64 = !DILocation(line: 60, column: 49, scope: !6)
!65 = !DILocation(line: 61, column: 35, scope: !6)
!66 = !DILocation(line: 61, column: 49, scope: !6)
!67 = !DILocation(line: 62, column: 35, scope: !6)
!68 = !DILocation(line: 62, column: 42, scope: !6)
!69 = !DILocation(line: 63, column: 35, scope: !6)
!70 = !DILocation(line: 63, column: 42, scope: !6)
!71 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !72)
!72 = !DILocation(line: 84, column: 47, scope: !6)
!73 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !74)
!74 = !DILocation(line: 82, column: 47, scope: !6)
!75 = !DILocation(line: 59, column: 113, scope: !6)
!76 = !DILocation(line: 61, column: 102, scope: !6)
!77 = !DILocation(line: 63, column: 95, scope: !6)
!78 = !DILocation(line: 74, column: 24, scope: !6)
!79 = !DILocation(line: 76, column: 24, scope: !6)
!80 = !DILocation(line: 77, column: 24, scope: !6)
!81 = !DILocation(line: 79, column: 24, scope: !6)
!82 = !DILocation(line: 80, column: 24, scope: !6)
!83 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !72)
!84 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !72)
!85 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !72)
!86 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !74)
!87 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !74)
!88 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !74)
!89 = !DILocation(line: 83, column: 50, scope: !6)
!90 = !DILocation(line: 85, column: 50, scope: !6)
!91 = !DILocation(line: 86, column: 29, scope: !6)
!92 = !DILocation(line: 86, column: 53, scope: !6)
!93 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !94)
!94 = !DILocation(line: 87, column: 40, scope: !6)
!95 = !DILocation(line: 94, column: 15, scope: !36, inlinedAt: !94)
!96 = !DILocation(line: 96, column: 21, scope: !36, inlinedAt: !94)
!97 = !DILocation(line: 96, column: 16, scope: !36, inlinedAt: !94)
!98 = !DILocation(line: 97, column: 29, scope: !36, inlinedAt: !94)
!99 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !100)
!100 = !DILocation(line: 88, column: 40, scope: !6)
!101 = !DILocation(line: 102, column: 15, scope: !36, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !36, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !36, inlinedAt: !100)
!104 = !DILocation(line: 104, column: 21, scope: !36, inlinedAt: !100)
!105 = !DILocation(line: 89, column: 25, scope: !6)
!106 = !DILocation(line: 89, column: 37, scope: !6)
!107 = !DILocation(line: 90, column: 25, scope: !6)
!108 = !DILocation(line: 90, column: 37, scope: !6)
!109 = !DILocation(line: 91, column: 25, scope: !6)
!110 = !DILocation(line: 91, column: 37, scope: !6)
!111 = !DILocation(line: 92, column: 25, scope: !6)
!112 = !DILocation(line: 92, column: 37, scope: !6)
!113 = !DILocation(line: 93, column: 25, scope: !6)
!114 = !DILocation(line: 93, column: 37, scope: !6)
!115 = !DILocation(line: 94, column: 25, scope: !6)
!116 = !DILocation(line: 94, column: 37, scope: !6)
!117 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !118)
!118 = !DILocation(line: 103, column: 46, scope: !6)
!119 = !DILocation(line: 104, column: 17, scope: !6)
!120 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !121)
!121 = !DILocation(line: 105, column: 46, scope: !6)
!122 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !123)
!123 = !DILocation(line: 106, column: 46, scope: !6)
!124 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !123)
!125 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !123)
!126 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !123)
!127 = !DILocation(line: 108, column: 24, scope: !6)
!128 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !129)
!129 = !DILocation(line: 111, column: 46, scope: !6)
!130 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !129)
!131 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !129)
!132 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !129)
!133 = !DILocation(line: 114, column: 25, scope: !6)
!134 = !DILocation(line: 101, column: 43, scope: !6)
!135 = !DILocation(line: 101, column: 36, scope: !6)
!136 = !DILocation(line: 101, column: 53, scope: !6)
!137 = !DILocation(line: 101, column: 115, scope: !6)
!138 = !DILocation(line: 117, column: 24, scope: !6)
!139 = !DILocation(line: 118, column: 36, scope: !6)
!140 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !141)
!141 = !DILocation(line: 121, column: 46, scope: !6)
!142 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !141)
!143 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !141)
!144 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !141)
!145 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !146)
!146 = !DILocation(line: 123, column: 46, scope: !6)
!147 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !146)
!148 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !146)
!149 = !DILocation(line: 125, column: 25, scope: !6)
!150 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !146)
!151 = !DILocation(line: 126, column: 29, scope: !6)
!152 = !DILocation(line: 126, column: 53, scope: !6)
!153 = !DILocation(line: 127, column: 30, scope: !6)
!154 = !DILocation(line: 127, column: 54, scope: !6)
!155 = !DILocation(line: 128, column: 30, scope: !6)
!156 = !DILocation(line: 128, column: 54, scope: !6)
!157 = !DILocation(line: 96, column: 31, scope: !6)
!158 = !DILocation(line: 97, column: 29, scope: !6)
!159 = !DILocation(line: 101, column: 61, scope: !6)
!160 = !DILocation(line: 95, column: 4, scope: !6)
