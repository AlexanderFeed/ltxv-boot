; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 128, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 16, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 128, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 5, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = and i32 %15, 32, !dbg !19
  %18 = and i32 %15, 64, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = or disjoint i32 %20, 16, !dbg !19
  %22 = lshr i32 %15, 2, !dbg !19
  %23 = and i32 %22, 7, !dbg !19
  %24 = lshr exact i32 %17, 2, !dbg !19
  %25 = or disjoint i32 %23, %24, !dbg !19
  %26 = lshr exact i32 %18, 2, !dbg !19
  %27 = or disjoint i32 %25, %26, !dbg !19
  %28 = shl i32 %15, 3, !dbg !19
  %29 = and i32 %28, 8, !dbg !19
  %30 = and i32 %28, 16, !dbg !19
  %31 = and i32 %28, 24, !dbg !19
  %32 = or disjoint i32 %14, %20, !dbg !20
  %33 = or disjoint i32 %14, %21, !dbg !20
  %34 = or disjoint i32 %27, %14, !dbg !20
  %35 = shl nsw i32 %13, 5, !dbg !21
  %36 = or disjoint i32 %35, %20, !dbg !22
  %37 = or disjoint i32 %35, %21, !dbg !22
  %38 = or disjoint i32 %35, %31, !dbg !22
  %39 = srem i32 %32, 512, !dbg !23
  %40 = srem i32 %33, 512, !dbg !23
  %41 = srem i32 %36, 512, !dbg !24
  %42 = srem i32 %37, 512, !dbg !24
  %43 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !25
  %44 = shl nsw i32 %39, 12, !dbg !26
  %45 = shl nsw i32 %40, 12, !dbg !26
  %46 = and i32 %28, 32, !dbg !27
  %47 = and i32 %28, 56, !dbg !27
  %48 = shl i32 %43, 6, !dbg !28
  %49 = or disjoint i32 %47, %48, !dbg !29
  %50 = add i32 %49, %44, !dbg !30
  %51 = add i32 %49, %45, !dbg !30
  %52 = sext i32 %50 to i64, !dbg !31
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !31
  %54 = sext i32 %51 to i64, !dbg !31
  %55 = getelementptr bfloat, ptr addrspace(1) %0, i64 %54, !dbg !31
  %56 = shl nsw i32 %41, 12, !dbg !32
  %57 = shl nsw i32 %42, 12, !dbg !32
  %58 = add i32 %49, %56, !dbg !33
  %59 = add i32 %49, %57, !dbg !33
  %60 = sext i32 %58 to i64, !dbg !34
  %61 = getelementptr bfloat, ptr addrspace(1) %1, i64 %60, !dbg !34
  %62 = sext i32 %59 to i64, !dbg !34
  %63 = getelementptr bfloat, ptr addrspace(1) %1, i64 %62, !dbg !34
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %53) #2, !dbg !35
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !35
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !35
  %67 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !35
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !35
  %69 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !35
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !35
  %71 = shufflevector <2 x bfloat> %70, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %72 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !35
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !35
  %74 = shufflevector <2 x bfloat> %73, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %55) #2, !dbg !35
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !35
  %77 = bitcast i32 %76 to <2 x bfloat>, !dbg !35
  %78 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !35
  %79 = bitcast i32 %78 to <2 x bfloat>, !dbg !35
  %80 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !35
  %81 = bitcast i32 %80 to <2 x bfloat>, !dbg !35
  %82 = shufflevector <2 x bfloat> %81, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %83 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !35
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !35
  %85 = shufflevector <2 x bfloat> %84, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %and.ra = and i32 %15, 24, !dbg !35
  %86 = xor i32 %47, %and.ra, !dbg !35
  %87 = xor i32 %86, %17, !dbg !35
  %88 = shl nuw nsw i32 %20, 6, !dbg !35
  %89 = or disjoint i32 %87, %88, !dbg !35
  %90 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %89, !dbg !35
  %91 = shufflevector <2 x bfloat> %66, <2 x bfloat> %68, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %92 = shufflevector <8 x bfloat> %91, <8 x bfloat> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %93 = shufflevector <8 x bfloat> %92, <8 x bfloat> %74, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %93, ptr addrspace(3) %90, align 16, !dbg !35
  %94 = or disjoint i32 %89, 1024, !dbg !35
  %95 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %94, !dbg !35
  %96 = shufflevector <2 x bfloat> %77, <2 x bfloat> %79, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %97 = shufflevector <8 x bfloat> %96, <8 x bfloat> %82, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %98 = shufflevector <8 x bfloat> %97, <8 x bfloat> %85, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %98, ptr addrspace(3) %95, align 16, !dbg !35
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %61) #2, !dbg !36
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !36
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !36
  %102 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !36
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !36
  %104 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !36
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !36
  %106 = shufflevector <2 x bfloat> %105, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %107 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !36
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !36
  %109 = shufflevector <2 x bfloat> %108, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %63) #2, !dbg !36
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !36
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !36
  %113 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !36
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !36
  %115 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !36
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !36
  %117 = shufflevector <2 x bfloat> %116, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %118 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !36
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !36
  %120 = shufflevector <2 x bfloat> %119, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %121 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %89, !dbg !36
  %122 = shufflevector <2 x bfloat> %101, <2 x bfloat> %103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %123 = shufflevector <8 x bfloat> %122, <8 x bfloat> %106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %124 = shufflevector <8 x bfloat> %123, <8 x bfloat> %109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %124, ptr addrspace(3) %121, align 16, !dbg !36
  %125 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %94, !dbg !36
  %126 = shufflevector <2 x bfloat> %112, <2 x bfloat> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %127 = shufflevector <8 x bfloat> %126, <8 x bfloat> %117, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %128 = shufflevector <8 x bfloat> %127, <8 x bfloat> %120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %128, ptr addrspace(3) %125, align 16, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %129 = and i32 %15, 7, !dbg !35
  %130 = and i32 %15, 15, !dbg !35
  %131 = lshr exact i32 %16, 1, !dbg !35
  %132 = xor i32 %47, %131, !dbg !35
  %133 = or disjoint i32 %26, %130, !dbg !35
  %134 = shl nuw nsw i32 %133, 6, !dbg !35
  %135 = or disjoint i32 %134, %132, !dbg !35
  %136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %135, !dbg !35
  %137 = ptrtoint ptr addrspace(3) %136 to i32, !dbg !35
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %137) #2, !dbg !35
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !35
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !35
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !35
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !35
  %143 = or disjoint i32 %29, 16, !dbg !35
  %144 = xor i32 %143, %30, !dbg !35
  %145 = or disjoint i32 %144, %46, !dbg !35
  %146 = xor i32 %145, %131, !dbg !35
  %147 = or disjoint i32 %146, %134, !dbg !35
  %148 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %147, !dbg !35
  %149 = ptrtoint ptr addrspace(3) %148 to i32, !dbg !35
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %149) #2, !dbg !35
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !35
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !35
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !35
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !35
  %155 = or disjoint i32 %31, 32, !dbg !35
  %156 = xor i32 %155, %46, !dbg !35
  %157 = xor i32 %156, %131, !dbg !35
  %158 = or disjoint i32 %157, %134, !dbg !35
  %159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %158, !dbg !35
  %160 = ptrtoint ptr addrspace(3) %159 to i32, !dbg !35
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %160) #2, !dbg !35
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !35
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !35
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !35
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !35
  %166 = or disjoint i32 %29, 48, !dbg !35
  %and.ra22 = and i32 %28, 48, !dbg !35
  %167 = or disjoint i32 %131, %and.ra22, !dbg !35
  %168 = xor i32 %167, %166, !dbg !35
  %169 = or disjoint i32 %168, %134, !dbg !35
  %170 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %169, !dbg !35
  %171 = ptrtoint ptr addrspace(3) %170 to i32, !dbg !35
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %171) #2, !dbg !35
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !35
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !35
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !35
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !35
  %177 = or disjoint i32 %24, %129, !dbg !36
  %178 = shl nuw nsw i32 %177, 6, !dbg !36
  %179 = or disjoint i32 %178, %86, !dbg !36
  %180 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %179, !dbg !36
  %181 = ptrtoint ptr addrspace(3) %180 to i32, !dbg !36
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %181) #2, !dbg !36
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !36
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !36
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !36
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !36
  %187 = xor i32 %156, %and.ra, !dbg !36
  %188 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %187, !dbg !36
  %189 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %188, i32 %178, !dbg !36
  %190 = ptrtoint ptr addrspace(3) %189 to i32, !dbg !36
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %190) #2, !dbg !36
  %192 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !36
  %193 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !36
  %194 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !36
  %195 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !36
  %196 = or disjoint i32 %178, 1024, !dbg !36
  %197 = or disjoint i32 %196, %86, !dbg !36
  %198 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %197, !dbg !36
  %199 = ptrtoint ptr addrspace(3) %198 to i32, !dbg !36
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %199) #2, !dbg !36
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !36
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !36
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !36
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !36
  %205 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %188, i32 %196, !dbg !36
  %206 = ptrtoint ptr addrspace(3) %205 to i32, !dbg !36
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %206) #2, !dbg !36
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !36
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !36
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !36
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !36
  %212 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %139, i32 %140, i32 %141, i32 %142, i32 %183, i32 %184) #2, !dbg !37
  %213 = extractvalue { float, float, float, float } %212, 0, !dbg !37
  %214 = extractvalue { float, float, float, float } %212, 1, !dbg !37
  %215 = extractvalue { float, float, float, float } %212, 2, !dbg !37
  %216 = extractvalue { float, float, float, float } %212, 3, !dbg !37
  %217 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %139, i32 %140, i32 %141, i32 %142, i32 %201, i32 %202) #2, !dbg !37
  %218 = extractvalue { float, float, float, float } %217, 0, !dbg !37
  %219 = extractvalue { float, float, float, float } %217, 1, !dbg !37
  %220 = extractvalue { float, float, float, float } %217, 2, !dbg !37
  %221 = extractvalue { float, float, float, float } %217, 3, !dbg !37
  %222 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %213, float %214, float %215, float %216, i32 %151, i32 %152, i32 %153, i32 %154, i32 %185, i32 %186) #2, !dbg !37
  %223 = extractvalue { float, float, float, float } %222, 0, !dbg !37
  %224 = extractvalue { float, float, float, float } %222, 1, !dbg !37
  %225 = extractvalue { float, float, float, float } %222, 2, !dbg !37
  %226 = extractvalue { float, float, float, float } %222, 3, !dbg !37
  %227 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %218, float %219, float %220, float %221, i32 %151, i32 %152, i32 %153, i32 %154, i32 %203, i32 %204) #2, !dbg !37
  %228 = extractvalue { float, float, float, float } %227, 0, !dbg !37
  %229 = extractvalue { float, float, float, float } %227, 1, !dbg !37
  %230 = extractvalue { float, float, float, float } %227, 2, !dbg !37
  %231 = extractvalue { float, float, float, float } %227, 3, !dbg !37
  %232 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %223, float %224, float %225, float %226, i32 %162, i32 %163, i32 %164, i32 %165, i32 %192, i32 %193) #2, !dbg !37
  %233 = extractvalue { float, float, float, float } %232, 0, !dbg !37
  %234 = extractvalue { float, float, float, float } %232, 1, !dbg !37
  %235 = extractvalue { float, float, float, float } %232, 2, !dbg !37
  %236 = extractvalue { float, float, float, float } %232, 3, !dbg !37
  %237 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %228, float %229, float %230, float %231, i32 %162, i32 %163, i32 %164, i32 %165, i32 %208, i32 %209) #2, !dbg !37
  %238 = extractvalue { float, float, float, float } %237, 0, !dbg !37
  %239 = extractvalue { float, float, float, float } %237, 1, !dbg !37
  %240 = extractvalue { float, float, float, float } %237, 2, !dbg !37
  %241 = extractvalue { float, float, float, float } %237, 3, !dbg !37
  %242 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %233, float %234, float %235, float %236, i32 %173, i32 %174, i32 %175, i32 %176, i32 %194, i32 %195) #2, !dbg !37
  %243 = extractvalue { float, float, float, float } %242, 0, !dbg !37
  %244 = extractvalue { float, float, float, float } %242, 1, !dbg !37
  %245 = extractvalue { float, float, float, float } %242, 2, !dbg !37
  %246 = extractvalue { float, float, float, float } %242, 3, !dbg !37
  %247 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %238, float %239, float %240, float %241, i32 %173, i32 %174, i32 %175, i32 %176, i32 %210, i32 %211) #2, !dbg !37
  %248 = extractvalue { float, float, float, float } %247, 0, !dbg !37
  %249 = extractvalue { float, float, float, float } %247, 1, !dbg !37
  %250 = extractvalue { float, float, float, float } %247, 2, !dbg !37
  %251 = extractvalue { float, float, float, float } %247, 3, !dbg !37
  %252 = icmp slt i32 %34, 512, !dbg !38
  %253 = icmp slt i32 %38, 512, !dbg !39
  %254 = and i1 %252, %253, !dbg !40
  %255 = shl i32 %34, 9, !dbg !41
  %256 = shl i32 %43, 18, !dbg !42
  %257 = add i32 %38, %256, !dbg !43
  %258 = add i32 %257, %255, !dbg !44
  %259 = sext i32 %258 to i64, !dbg !45
  %260 = getelementptr bfloat, ptr addrspace(1) %2, i64 %259, !dbg !45
  %261 = fptrunc float %243 to bfloat, !dbg !46
  %262 = fptrunc float %244 to bfloat, !dbg !46
  %263 = fptrunc float %245 to bfloat, !dbg !46
  %264 = fptrunc float %246 to bfloat, !dbg !46
  %265 = fptrunc float %248 to bfloat, !dbg !46
  %266 = fptrunc float %249 to bfloat, !dbg !46
  %267 = fptrunc float %250 to bfloat, !dbg !46
  %268 = fptrunc float %251 to bfloat, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %269 = shl i32 %15, 1, !dbg !46
  %270 = and i32 %269, 6, !dbg !46
  %271 = and i32 %28, 64, !dbg !46
  %272 = or disjoint i32 %270, %271, !dbg !46
  %273 = or disjoint i32 %272, %46, !dbg !46
  %274 = shl nuw nsw i32 %16, 3, !dbg !46
  %275 = or disjoint i32 %273, %274, !dbg !46
  %276 = or disjoint i32 %275, %24, !dbg !46
  %277 = shl nuw nsw i32 %18, 3, !dbg !46
  %278 = or disjoint i32 %276, %277, !dbg !46
  %279 = and i32 %28, 376, !dbg !46
  %280 = or disjoint i32 %274, %279, !dbg !46
  %281 = or disjoint i32 %280, %277, !dbg !46
  %282 = lshr i32 %278, 2, !dbg !46
  %283 = and i32 %282, 1073741816, !dbg !46
  %284 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %283, !dbg !46
  %285 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %284, i32 %278, !dbg !46
  %286 = bitcast bfloat %261 to i16, !dbg !46
  %287 = bitcast bfloat %262 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %285, i16 %286, i16 %287, i1 true) #2, !dbg !46
  %288 = xor i32 %278, 256, !dbg !46
  %289 = lshr i32 %288, 2, !dbg !46
  %290 = and i32 %289, 1073741816, !dbg !46
  %291 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %290, !dbg !46
  %292 = getelementptr bfloat, ptr addrspace(3) %291, i32 %288, !dbg !46
  %293 = bitcast bfloat %263 to i16, !dbg !46
  %294 = bitcast bfloat %264 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %292, i16 %293, i16 %294, i1 true) #2, !dbg !46
  %295 = xor i32 %278, 16, !dbg !46
  %296 = getelementptr bfloat, ptr addrspace(3) %284, i32 %295, !dbg !46
  %297 = bitcast bfloat %265 to i16, !dbg !46
  %298 = bitcast bfloat %266 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %296, i16 %297, i16 %298, i1 true) #2, !dbg !46
  %299 = xor i32 %278, 272, !dbg !46
  %300 = lshr i32 %299, 2, !dbg !46
  %301 = and i32 %300, 1073741816, !dbg !46
  %302 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %301, !dbg !46
  %303 = getelementptr bfloat, ptr addrspace(3) %302, i32 %299, !dbg !46
  %304 = bitcast bfloat %267 to i16, !dbg !46
  %305 = bitcast bfloat %268 to i16, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %303, i16 %304, i16 %305, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %306 = lshr exact i32 %281, 2, !dbg !46
  %307 = and i32 %306, 248, !dbg !46
  %308 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %307, !dbg !46
  %309 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %308, i32 %281, !dbg !46
  %.extract = load i32, ptr addrspace(3) %309, align 16, !dbg !46
  %310 = getelementptr inbounds nuw i8, ptr addrspace(3) %309, i32 4, !dbg !46
  %.extract17 = load i32, ptr addrspace(3) %310, align 4, !dbg !46
  %311 = getelementptr inbounds nuw i8, ptr addrspace(3) %309, i32 8, !dbg !46
  %.extract19 = load i32, ptr addrspace(3) %311, align 8, !dbg !46
  %312 = getelementptr inbounds nuw i8, ptr addrspace(3) %309, i32 12, !dbg !46
  %.extract21 = load i32, ptr addrspace(3) %312, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract19, i32 %.extract21, ptr addrspace(1) %260, i1 %254) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cormvzvg4tchrilngdz7lkxccm4prckklsdig7gsliqxmpiznigf.py", directory: "/tmp/torchinductor_root/or")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 27, scope: !6)
!23 = !DILocation(line: 57, column: 19, scope: !6)
!24 = !DILocation(line: 61, column: 19, scope: !6)
!25 = !DILocation(line: 65, column: 26, scope: !6)
!26 = !DILocation(line: 66, column: 28, scope: !6)
!27 = !DILocation(line: 66, column: 43, scope: !6)
!28 = !DILocation(line: 66, column: 72, scope: !6)
!29 = !DILocation(line: 66, column: 40, scope: !6)
!30 = !DILocation(line: 66, column: 66, scope: !6)
!31 = !DILocation(line: 66, column: 13, scope: !6)
!32 = !DILocation(line: 67, column: 54, scope: !6)
!33 = !DILocation(line: 67, column: 66, scope: !6)
!34 = !DILocation(line: 67, column: 13, scope: !6)
!35 = !DILocation(line: 72, column: 24, scope: !6)
!36 = !DILocation(line: 73, column: 24, scope: !6)
!37 = !DILocation(line: 77, column: 25, scope: !6)
!38 = !DILocation(line: 87, column: 20, scope: !6)
!39 = !DILocation(line: 87, column: 34, scope: !6)
!40 = !DILocation(line: 87, column: 26, scope: !6)
!41 = !DILocation(line: 90, column: 25, scope: !6)
!42 = !DILocation(line: 90, column: 40, scope: !6)
!43 = !DILocation(line: 90, column: 21, scope: !6)
!44 = !DILocation(line: 90, column: 33, scope: !6)
!45 = !DILocation(line: 91, column: 25, scope: !6)
!46 = !DILocation(line: 91, column: 67, scope: !6)
!47 = !DILocation(line: 91, column: 4, scope: !6)
