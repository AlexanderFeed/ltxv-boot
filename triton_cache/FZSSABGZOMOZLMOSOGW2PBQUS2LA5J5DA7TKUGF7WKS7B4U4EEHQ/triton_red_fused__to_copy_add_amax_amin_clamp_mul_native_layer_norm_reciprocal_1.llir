; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %21 = shl i32 %20, 2, !dbg !10
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %23 = and i32 %22, 128, !dbg !11
  %.lobit = lshr exact i32 %23, 7, !dbg !11
  %24 = or disjoint i32 %.lobit, 2, !dbg !11
  %25 = and i32 %22, 31, !dbg !11
  %26 = or disjoint i32 %.lobit, %21, !dbg !12
  %27 = or disjoint i32 %24, %21, !dbg !12
  %28 = icmp slt i32 %26, 4112, !dbg !13
  %29 = icmp slt i32 %27, 4112, !dbg !13
  %30 = icmp slt i32 %21, 4112, !dbg !13
  %31 = shl i32 %22, 4, !dbg !14
  %32 = and i32 %31, 2032, !dbg !14
  %33 = or disjoint i32 %32, 8, !dbg !14
  %34 = shl i32 %22, 3, !dbg !14
  %35 = and i32 %34, 2040, !dbg !14
  %36 = mul i32 %26, 3072, !dbg !15
  %37 = mul i32 %27, 3072, !dbg !15
  %38 = zext nneg i32 %32 to i64, !dbg !16
  br label %39, !dbg !16

39:                                               ; preds = %19, %._crit_edge
  %40 = phi i1 [ true, %19 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %19 ], [ 2048, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %19 ], [ %609, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %19 ], [ %610, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %19 ], [ %611, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %19 ], [ %612, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %19 ], [ %613, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %19 ], [ %614, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %19 ], [ %615, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %19 ], [ %616, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %19 ], [ %617, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %19 ], [ %618, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %19 ], [ %619, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %19 ], [ %620, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %19 ], [ %621, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %19 ], [ %622, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %19 ], [ %623, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %19 ], [ %624, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %19 ], [ %625, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %19 ], [ %626, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %19 ], [ %627, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %19 ], [ %628, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %19 ], [ %629, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %19 ], [ %630, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %19 ], [ %631, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %19 ], [ %632, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %19 ], [ %633, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %19 ], [ %634, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %19 ], [ %635, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %19 ], [ %636, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %19 ], [ %637, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %19 ], [ %638, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %19 ], [ %639, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %19 ], [ %640, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %19 ], [ %577, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %19 ], [ %578, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %19 ], [ %579, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %19 ], [ %580, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %19 ], [ %581, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %19 ], [ %582, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %19 ], [ %583, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %19 ], [ %584, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %19 ], [ %585, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %19 ], [ %586, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %19 ], [ %587, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %19 ], [ %588, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %19 ], [ %589, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %19 ], [ %590, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %19 ], [ %591, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %19 ], [ %592, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %19 ], [ %593, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %19 ], [ %594, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %19 ], [ %595, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %19 ], [ %596, %._crit_edge ]
  %93 = phi float [ 0.000000e+00, %19 ], [ %597, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %19 ], [ %598, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %19 ], [ %599, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %19 ], [ %600, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %19 ], [ %601, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %19 ], [ %602, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %19 ], [ %603, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %19 ], [ %604, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %19 ], [ %605, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %19 ], [ %606, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %19 ], [ %607, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %19 ], [ %608, %._crit_edge ]
  %105 = phi float [ 0.000000e+00, %19 ], [ %545, %._crit_edge ]
  %106 = phi float [ 0.000000e+00, %19 ], [ %546, %._crit_edge ]
  %107 = phi float [ 0.000000e+00, %19 ], [ %547, %._crit_edge ]
  %108 = phi float [ 0.000000e+00, %19 ], [ %548, %._crit_edge ]
  %109 = phi float [ 0.000000e+00, %19 ], [ %549, %._crit_edge ]
  %110 = phi float [ 0.000000e+00, %19 ], [ %550, %._crit_edge ]
  %111 = phi float [ 0.000000e+00, %19 ], [ %551, %._crit_edge ]
  %112 = phi float [ 0.000000e+00, %19 ], [ %552, %._crit_edge ]
  %113 = phi float [ 0.000000e+00, %19 ], [ %553, %._crit_edge ]
  %114 = phi float [ 0.000000e+00, %19 ], [ %554, %._crit_edge ]
  %115 = phi float [ 0.000000e+00, %19 ], [ %555, %._crit_edge ]
  %116 = phi float [ 0.000000e+00, %19 ], [ %556, %._crit_edge ]
  %117 = phi float [ 0.000000e+00, %19 ], [ %557, %._crit_edge ]
  %118 = phi float [ 0.000000e+00, %19 ], [ %558, %._crit_edge ]
  %119 = phi float [ 0.000000e+00, %19 ], [ %559, %._crit_edge ]
  %120 = phi float [ 0.000000e+00, %19 ], [ %560, %._crit_edge ]
  %121 = phi float [ 0.000000e+00, %19 ], [ %561, %._crit_edge ]
  %122 = phi float [ 0.000000e+00, %19 ], [ %562, %._crit_edge ]
  %123 = phi float [ 0.000000e+00, %19 ], [ %563, %._crit_edge ]
  %124 = phi float [ 0.000000e+00, %19 ], [ %564, %._crit_edge ]
  %125 = phi float [ 0.000000e+00, %19 ], [ %565, %._crit_edge ]
  %126 = phi float [ 0.000000e+00, %19 ], [ %566, %._crit_edge ]
  %127 = phi float [ 0.000000e+00, %19 ], [ %567, %._crit_edge ]
  %128 = phi float [ 0.000000e+00, %19 ], [ %568, %._crit_edge ]
  %129 = phi float [ 0.000000e+00, %19 ], [ %569, %._crit_edge ]
  %130 = phi float [ 0.000000e+00, %19 ], [ %570, %._crit_edge ]
  %131 = phi float [ 0.000000e+00, %19 ], [ %571, %._crit_edge ]
  %132 = phi float [ 0.000000e+00, %19 ], [ %572, %._crit_edge ]
  %133 = phi float [ 0.000000e+00, %19 ], [ %573, %._crit_edge ]
  %134 = phi float [ 0.000000e+00, %19 ], [ %574, %._crit_edge ]
  %135 = phi float [ 0.000000e+00, %19 ], [ %575, %._crit_edge ]
  %136 = phi float [ 0.000000e+00, %19 ], [ %576, %._crit_edge ]
  %137 = or disjoint i64 %indvars.iv, %38, !dbg !17
  %138 = icmp samesign ult i64 %137, 3072, !dbg !18
  %139 = trunc nuw nsw i64 %137 to i32, !dbg !19
  %140 = add i32 %36, %139, !dbg !19
  %141 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %142 = or disjoint i32 %33, %141, !dbg !19
  %143 = add i32 %142, %36, !dbg !19
  %144 = add i32 %37, %139, !dbg !19
  %145 = add i32 %142, %37, !dbg !19
  %146 = sext i32 %140 to i64, !dbg !20
  %147 = getelementptr bfloat, ptr addrspace(1) %0, i64 %146, !dbg !20
  %148 = sext i32 %143 to i64, !dbg !20
  %149 = getelementptr bfloat, ptr addrspace(1) %0, i64 %148, !dbg !20
  %150 = sext i32 %144 to i64, !dbg !20
  %151 = getelementptr bfloat, ptr addrspace(1) %0, i64 %150, !dbg !20
  %152 = sext i32 %145 to i64, !dbg !20
  %153 = getelementptr bfloat, ptr addrspace(1) %0, i64 %152, !dbg !20
  %154 = and i1 %28, %138, !dbg !21
  %155 = and i1 %29, %138, !dbg !21
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %147, i1 %154) #5, !dbg !22
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !22
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !22
  %159 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !22
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !22
  %161 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !22
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !22
  %163 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !22
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !22
  %165 = extractelement <2 x bfloat> %158, i64 0, !dbg !22
  %166 = extractelement <2 x bfloat> %158, i64 1, !dbg !22
  %167 = extractelement <2 x bfloat> %160, i64 0, !dbg !22
  %168 = extractelement <2 x bfloat> %160, i64 1, !dbg !22
  %169 = extractelement <2 x bfloat> %162, i64 0, !dbg !22
  %170 = extractelement <2 x bfloat> %162, i64 1, !dbg !22
  %171 = extractelement <2 x bfloat> %164, i64 0, !dbg !22
  %172 = extractelement <2 x bfloat> %164, i64 1, !dbg !22
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %149, i1 %154) #5, !dbg !22
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !22
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !22
  %176 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !22
  %177 = bitcast i32 %176 to <2 x bfloat>, !dbg !22
  %178 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !22
  %179 = bitcast i32 %178 to <2 x bfloat>, !dbg !22
  %180 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !22
  %181 = bitcast i32 %180 to <2 x bfloat>, !dbg !22
  %182 = extractelement <2 x bfloat> %175, i64 0, !dbg !22
  %183 = extractelement <2 x bfloat> %175, i64 1, !dbg !22
  %184 = extractelement <2 x bfloat> %177, i64 0, !dbg !22
  %185 = extractelement <2 x bfloat> %177, i64 1, !dbg !22
  %186 = extractelement <2 x bfloat> %179, i64 0, !dbg !22
  %187 = extractelement <2 x bfloat> %179, i64 1, !dbg !22
  %188 = extractelement <2 x bfloat> %181, i64 0, !dbg !22
  %189 = extractelement <2 x bfloat> %181, i64 1, !dbg !22
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %151, i1 %155) #5, !dbg !22
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !22
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !22
  %193 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !22
  %194 = bitcast i32 %193 to <2 x bfloat>, !dbg !22
  %195 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !22
  %196 = bitcast i32 %195 to <2 x bfloat>, !dbg !22
  %197 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !22
  %198 = bitcast i32 %197 to <2 x bfloat>, !dbg !22
  %199 = extractelement <2 x bfloat> %192, i64 0, !dbg !22
  %200 = extractelement <2 x bfloat> %192, i64 1, !dbg !22
  %201 = extractelement <2 x bfloat> %194, i64 0, !dbg !22
  %202 = extractelement <2 x bfloat> %194, i64 1, !dbg !22
  %203 = extractelement <2 x bfloat> %196, i64 0, !dbg !22
  %204 = extractelement <2 x bfloat> %196, i64 1, !dbg !22
  %205 = extractelement <2 x bfloat> %198, i64 0, !dbg !22
  %206 = extractelement <2 x bfloat> %198, i64 1, !dbg !22
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %153, i1 %155) #5, !dbg !22
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !22
  %209 = bitcast i32 %208 to <2 x bfloat>, !dbg !22
  %210 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !22
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !22
  %212 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !22
  %213 = bitcast i32 %212 to <2 x bfloat>, !dbg !22
  %214 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !22
  %215 = bitcast i32 %214 to <2 x bfloat>, !dbg !22
  %216 = extractelement <2 x bfloat> %209, i64 0, !dbg !22
  %217 = extractelement <2 x bfloat> %209, i64 1, !dbg !22
  %218 = extractelement <2 x bfloat> %211, i64 0, !dbg !22
  %219 = extractelement <2 x bfloat> %211, i64 1, !dbg !22
  %220 = extractelement <2 x bfloat> %213, i64 0, !dbg !22
  %221 = extractelement <2 x bfloat> %213, i64 1, !dbg !22
  %222 = extractelement <2 x bfloat> %215, i64 0, !dbg !22
  %223 = extractelement <2 x bfloat> %215, i64 1, !dbg !22
  %224 = fpext bfloat %165 to float, !dbg !23
  %225 = fpext bfloat %166 to float, !dbg !23
  %226 = fpext bfloat %167 to float, !dbg !23
  %227 = fpext bfloat %168 to float, !dbg !23
  %228 = fpext bfloat %169 to float, !dbg !23
  %229 = fpext bfloat %170 to float, !dbg !23
  %230 = fpext bfloat %171 to float, !dbg !23
  %231 = fpext bfloat %172 to float, !dbg !23
  %232 = fpext bfloat %182 to float, !dbg !23
  %233 = fpext bfloat %183 to float, !dbg !23
  %234 = fpext bfloat %184 to float, !dbg !23
  %235 = fpext bfloat %185 to float, !dbg !23
  %236 = fpext bfloat %186 to float, !dbg !23
  %237 = fpext bfloat %187 to float, !dbg !23
  %238 = fpext bfloat %188 to float, !dbg !23
  %239 = fpext bfloat %189 to float, !dbg !23
  %240 = fpext bfloat %199 to float, !dbg !23
  %241 = fpext bfloat %200 to float, !dbg !23
  %242 = fpext bfloat %201 to float, !dbg !23
  %243 = fpext bfloat %202 to float, !dbg !23
  %244 = fpext bfloat %203 to float, !dbg !23
  %245 = fpext bfloat %204 to float, !dbg !23
  %246 = fpext bfloat %205 to float, !dbg !23
  %247 = fpext bfloat %206 to float, !dbg !23
  %248 = fpext bfloat %216 to float, !dbg !23
  %249 = fpext bfloat %217 to float, !dbg !23
  %250 = fpext bfloat %218 to float, !dbg !23
  %251 = fpext bfloat %219 to float, !dbg !23
  %252 = fpext bfloat %220 to float, !dbg !23
  %253 = fpext bfloat %221 to float, !dbg !23
  %254 = fpext bfloat %222 to float, !dbg !23
  %255 = fpext bfloat %223 to float, !dbg !23
  br i1 %40, label %._crit_edge, label %256, !dbg !24

256:                                              ; preds = %39
  %257 = fsub float %224, %105, !dbg !28
  %258 = fsub float %225, %106, !dbg !28
  %259 = fsub float %226, %107, !dbg !28
  %260 = fsub float %227, %108, !dbg !28
  %261 = fsub float %228, %109, !dbg !28
  %262 = fsub float %229, %110, !dbg !28
  %263 = fsub float %230, %111, !dbg !28
  %264 = fsub float %231, %112, !dbg !28
  %265 = fsub float %232, %113, !dbg !28
  %266 = fsub float %233, %114, !dbg !28
  %267 = fsub float %234, %115, !dbg !28
  %268 = fsub float %235, %116, !dbg !28
  %269 = fsub float %236, %117, !dbg !28
  %270 = fsub float %237, %118, !dbg !28
  %271 = fsub float %238, %119, !dbg !28
  %272 = fsub float %239, %120, !dbg !28
  %273 = fsub float %240, %121, !dbg !28
  %274 = fsub float %241, %122, !dbg !28
  %275 = fsub float %242, %123, !dbg !28
  %276 = fsub float %243, %124, !dbg !28
  %277 = fsub float %244, %125, !dbg !28
  %278 = fsub float %245, %126, !dbg !28
  %279 = fsub float %246, %127, !dbg !28
  %280 = fsub float %247, %128, !dbg !28
  %281 = fsub float %248, %129, !dbg !28
  %282 = fsub float %249, %130, !dbg !28
  %283 = fsub float %250, %131, !dbg !28
  %284 = fsub float %251, %132, !dbg !28
  %285 = fsub float %252, %133, !dbg !28
  %286 = fsub float %253, %134, !dbg !28
  %287 = fsub float %254, %135, !dbg !28
  %288 = fsub float %255, %136, !dbg !28
  %289 = fadd float %41, 1.000000e+00, !dbg !29
  %290 = fadd float %42, 1.000000e+00, !dbg !29
  %291 = fadd float %43, 1.000000e+00, !dbg !29
  %292 = fadd float %44, 1.000000e+00, !dbg !29
  %293 = fadd float %45, 1.000000e+00, !dbg !29
  %294 = fadd float %46, 1.000000e+00, !dbg !29
  %295 = fadd float %47, 1.000000e+00, !dbg !29
  %296 = fadd float %48, 1.000000e+00, !dbg !29
  %297 = fadd float %49, 1.000000e+00, !dbg !29
  %298 = fadd float %50, 1.000000e+00, !dbg !29
  %299 = fadd float %51, 1.000000e+00, !dbg !29
  %300 = fadd float %52, 1.000000e+00, !dbg !29
  %301 = fadd float %53, 1.000000e+00, !dbg !29
  %302 = fadd float %54, 1.000000e+00, !dbg !29
  %303 = fadd float %55, 1.000000e+00, !dbg !29
  %304 = fadd float %56, 1.000000e+00, !dbg !29
  %305 = fadd float %57, 1.000000e+00, !dbg !29
  %306 = fadd float %58, 1.000000e+00, !dbg !29
  %307 = fadd float %59, 1.000000e+00, !dbg !29
  %308 = fadd float %60, 1.000000e+00, !dbg !29
  %309 = fadd float %61, 1.000000e+00, !dbg !29
  %310 = fadd float %62, 1.000000e+00, !dbg !29
  %311 = fadd float %63, 1.000000e+00, !dbg !29
  %312 = fadd float %64, 1.000000e+00, !dbg !29
  %313 = fadd float %65, 1.000000e+00, !dbg !29
  %314 = fadd float %66, 1.000000e+00, !dbg !29
  %315 = fadd float %67, 1.000000e+00, !dbg !29
  %316 = fadd float %68, 1.000000e+00, !dbg !29
  %317 = fadd float %69, 1.000000e+00, !dbg !29
  %318 = fadd float %70, 1.000000e+00, !dbg !29
  %319 = fadd float %71, 1.000000e+00, !dbg !29
  %320 = fadd float %72, 1.000000e+00, !dbg !29
  %321 = tail call float @llvm.nvvm.div.full(float %257, float %289), !dbg !30
  %322 = tail call float @llvm.nvvm.div.full(float %258, float %290), !dbg !30
  %323 = tail call float @llvm.nvvm.div.full(float %259, float %291), !dbg !30
  %324 = tail call float @llvm.nvvm.div.full(float %260, float %292), !dbg !30
  %325 = tail call float @llvm.nvvm.div.full(float %261, float %293), !dbg !30
  %326 = tail call float @llvm.nvvm.div.full(float %262, float %294), !dbg !30
  %327 = tail call float @llvm.nvvm.div.full(float %263, float %295), !dbg !30
  %328 = tail call float @llvm.nvvm.div.full(float %264, float %296), !dbg !30
  %329 = tail call float @llvm.nvvm.div.full(float %265, float %297), !dbg !30
  %330 = tail call float @llvm.nvvm.div.full(float %266, float %298), !dbg !30
  %331 = tail call float @llvm.nvvm.div.full(float %267, float %299), !dbg !30
  %332 = tail call float @llvm.nvvm.div.full(float %268, float %300), !dbg !30
  %333 = tail call float @llvm.nvvm.div.full(float %269, float %301), !dbg !30
  %334 = tail call float @llvm.nvvm.div.full(float %270, float %302), !dbg !30
  %335 = tail call float @llvm.nvvm.div.full(float %271, float %303), !dbg !30
  %336 = tail call float @llvm.nvvm.div.full(float %272, float %304), !dbg !30
  %337 = tail call float @llvm.nvvm.div.full(float %273, float %305), !dbg !30
  %338 = tail call float @llvm.nvvm.div.full(float %274, float %306), !dbg !30
  %339 = tail call float @llvm.nvvm.div.full(float %275, float %307), !dbg !30
  %340 = tail call float @llvm.nvvm.div.full(float %276, float %308), !dbg !30
  %341 = tail call float @llvm.nvvm.div.full(float %277, float %309), !dbg !30
  %342 = tail call float @llvm.nvvm.div.full(float %278, float %310), !dbg !30
  %343 = tail call float @llvm.nvvm.div.full(float %279, float %311), !dbg !30
  %344 = tail call float @llvm.nvvm.div.full(float %280, float %312), !dbg !30
  %345 = tail call float @llvm.nvvm.div.full(float %281, float %313), !dbg !30
  %346 = tail call float @llvm.nvvm.div.full(float %282, float %314), !dbg !30
  %347 = tail call float @llvm.nvvm.div.full(float %283, float %315), !dbg !30
  %348 = tail call float @llvm.nvvm.div.full(float %284, float %316), !dbg !30
  %349 = tail call float @llvm.nvvm.div.full(float %285, float %317), !dbg !30
  %350 = tail call float @llvm.nvvm.div.full(float %286, float %318), !dbg !30
  %351 = tail call float @llvm.nvvm.div.full(float %287, float %319), !dbg !30
  %352 = tail call float @llvm.nvvm.div.full(float %288, float %320), !dbg !30
  %353 = fadd float %105, %321, !dbg !31
  %354 = fadd float %106, %322, !dbg !31
  %355 = fadd float %107, %323, !dbg !31
  %356 = fadd float %108, %324, !dbg !31
  %357 = fadd float %109, %325, !dbg !31
  %358 = fadd float %110, %326, !dbg !31
  %359 = fadd float %111, %327, !dbg !31
  %360 = fadd float %112, %328, !dbg !31
  %361 = fadd float %113, %329, !dbg !31
  %362 = fadd float %114, %330, !dbg !31
  %363 = fadd float %115, %331, !dbg !31
  %364 = fadd float %116, %332, !dbg !31
  %365 = fadd float %117, %333, !dbg !31
  %366 = fadd float %118, %334, !dbg !31
  %367 = fadd float %119, %335, !dbg !31
  %368 = fadd float %120, %336, !dbg !31
  %369 = fadd float %121, %337, !dbg !31
  %370 = fadd float %122, %338, !dbg !31
  %371 = fadd float %123, %339, !dbg !31
  %372 = fadd float %124, %340, !dbg !31
  %373 = fadd float %125, %341, !dbg !31
  %374 = fadd float %126, %342, !dbg !31
  %375 = fadd float %127, %343, !dbg !31
  %376 = fadd float %128, %344, !dbg !31
  %377 = fadd float %129, %345, !dbg !31
  %378 = fadd float %130, %346, !dbg !31
  %379 = fadd float %131, %347, !dbg !31
  %380 = fadd float %132, %348, !dbg !31
  %381 = fadd float %133, %349, !dbg !31
  %382 = fadd float %134, %350, !dbg !31
  %383 = fadd float %135, %351, !dbg !31
  %384 = fadd float %136, %352, !dbg !31
  %385 = fsub float %224, %353, !dbg !32
  %386 = fsub float %225, %354, !dbg !32
  %387 = fsub float %226, %355, !dbg !32
  %388 = fsub float %227, %356, !dbg !32
  %389 = fsub float %228, %357, !dbg !32
  %390 = fsub float %229, %358, !dbg !32
  %391 = fsub float %230, %359, !dbg !32
  %392 = fsub float %231, %360, !dbg !32
  %393 = fsub float %232, %361, !dbg !32
  %394 = fsub float %233, %362, !dbg !32
  %395 = fsub float %234, %363, !dbg !32
  %396 = fsub float %235, %364, !dbg !32
  %397 = fsub float %236, %365, !dbg !32
  %398 = fsub float %237, %366, !dbg !32
  %399 = fsub float %238, %367, !dbg !32
  %400 = fsub float %239, %368, !dbg !32
  %401 = fsub float %240, %369, !dbg !32
  %402 = fsub float %241, %370, !dbg !32
  %403 = fsub float %242, %371, !dbg !32
  %404 = fsub float %243, %372, !dbg !32
  %405 = fsub float %244, %373, !dbg !32
  %406 = fsub float %245, %374, !dbg !32
  %407 = fsub float %246, %375, !dbg !32
  %408 = fsub float %247, %376, !dbg !32
  %409 = fsub float %248, %377, !dbg !32
  %410 = fsub float %249, %378, !dbg !32
  %411 = fsub float %250, %379, !dbg !32
  %412 = fsub float %251, %380, !dbg !32
  %413 = fsub float %252, %381, !dbg !32
  %414 = fsub float %253, %382, !dbg !32
  %415 = fsub float %254, %383, !dbg !32
  %416 = fsub float %255, %384, !dbg !32
  %417 = fmul float %257, %385, !dbg !33
  %418 = fmul float %258, %386, !dbg !33
  %419 = fmul float %259, %387, !dbg !33
  %420 = fmul float %260, %388, !dbg !33
  %421 = fmul float %261, %389, !dbg !33
  %422 = fmul float %262, %390, !dbg !33
  %423 = fmul float %263, %391, !dbg !33
  %424 = fmul float %264, %392, !dbg !33
  %425 = fmul float %265, %393, !dbg !33
  %426 = fmul float %266, %394, !dbg !33
  %427 = fmul float %267, %395, !dbg !33
  %428 = fmul float %268, %396, !dbg !33
  %429 = fmul float %269, %397, !dbg !33
  %430 = fmul float %270, %398, !dbg !33
  %431 = fmul float %271, %399, !dbg !33
  %432 = fmul float %272, %400, !dbg !33
  %433 = fmul float %273, %401, !dbg !33
  %434 = fmul float %274, %402, !dbg !33
  %435 = fmul float %275, %403, !dbg !33
  %436 = fmul float %276, %404, !dbg !33
  %437 = fmul float %277, %405, !dbg !33
  %438 = fmul float %278, %406, !dbg !33
  %439 = fmul float %279, %407, !dbg !33
  %440 = fmul float %280, %408, !dbg !33
  %441 = fmul float %281, %409, !dbg !33
  %442 = fmul float %282, %410, !dbg !33
  %443 = fmul float %283, %411, !dbg !33
  %444 = fmul float %284, %412, !dbg !33
  %445 = fmul float %285, %413, !dbg !33
  %446 = fmul float %286, %414, !dbg !33
  %447 = fmul float %287, %415, !dbg !33
  %448 = fmul float %288, %416, !dbg !33
  %449 = fadd float %73, %417, !dbg !34
  %450 = fadd float %74, %418, !dbg !34
  %451 = fadd float %75, %419, !dbg !34
  %452 = fadd float %76, %420, !dbg !34
  %453 = fadd float %77, %421, !dbg !34
  %454 = fadd float %78, %422, !dbg !34
  %455 = fadd float %79, %423, !dbg !34
  %456 = fadd float %80, %424, !dbg !34
  %457 = fadd float %81, %425, !dbg !34
  %458 = fadd float %82, %426, !dbg !34
  %459 = fadd float %83, %427, !dbg !34
  %460 = fadd float %84, %428, !dbg !34
  %461 = fadd float %85, %429, !dbg !34
  %462 = fadd float %86, %430, !dbg !34
  %463 = fadd float %87, %431, !dbg !34
  %464 = fadd float %88, %432, !dbg !34
  %465 = fadd float %89, %433, !dbg !34
  %466 = fadd float %90, %434, !dbg !34
  %467 = fadd float %91, %435, !dbg !34
  %468 = fadd float %92, %436, !dbg !34
  %469 = fadd float %93, %437, !dbg !34
  %470 = fadd float %94, %438, !dbg !34
  %471 = fadd float %95, %439, !dbg !34
  %472 = fadd float %96, %440, !dbg !34
  %473 = fadd float %97, %441, !dbg !34
  %474 = fadd float %98, %442, !dbg !34
  %475 = fadd float %99, %443, !dbg !34
  %476 = fadd float %100, %444, !dbg !34
  %477 = fadd float %101, %445, !dbg !34
  %478 = fadd float %102, %446, !dbg !34
  %479 = fadd float %103, %447, !dbg !34
  %480 = fadd float %104, %448, !dbg !34
  br label %._crit_edge, !dbg !24

._crit_edge:                                      ; preds = %39, %256
  %481 = phi float [ %449, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %482 = phi float [ %450, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %483 = phi float [ %451, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %484 = phi float [ %452, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %485 = phi float [ %453, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %486 = phi float [ %454, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %487 = phi float [ %455, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %488 = phi float [ %456, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %489 = phi float [ %457, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %490 = phi float [ %458, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %491 = phi float [ %459, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %492 = phi float [ %460, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %493 = phi float [ %461, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %494 = phi float [ %462, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %495 = phi float [ %463, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %496 = phi float [ %464, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %497 = phi float [ %465, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %498 = phi float [ %466, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %499 = phi float [ %467, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %500 = phi float [ %468, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %501 = phi float [ %469, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %502 = phi float [ %470, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %503 = phi float [ %471, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %504 = phi float [ %472, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %505 = phi float [ %473, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %506 = phi float [ %474, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %507 = phi float [ %475, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %508 = phi float [ %476, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %509 = phi float [ %477, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %510 = phi float [ %478, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %511 = phi float [ %479, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %512 = phi float [ %480, %256 ], [ 0.000000e+00, %39 ], !dbg !27
  %.pn104 = phi float [ %353, %256 ], [ %224, %39 ]
  %.pn102 = phi float [ %354, %256 ], [ %225, %39 ]
  %.pn100 = phi float [ %355, %256 ], [ %226, %39 ]
  %.pn98 = phi float [ %356, %256 ], [ %227, %39 ]
  %.pn96 = phi float [ %357, %256 ], [ %228, %39 ]
  %.pn94 = phi float [ %358, %256 ], [ %229, %39 ]
  %.pn92 = phi float [ %359, %256 ], [ %230, %39 ]
  %.pn90 = phi float [ %360, %256 ], [ %231, %39 ]
  %.pn88 = phi float [ %361, %256 ], [ %232, %39 ]
  %.pn86 = phi float [ %362, %256 ], [ %233, %39 ]
  %.pn84 = phi float [ %363, %256 ], [ %234, %39 ]
  %.pn82 = phi float [ %364, %256 ], [ %235, %39 ]
  %.pn80 = phi float [ %365, %256 ], [ %236, %39 ]
  %.pn78 = phi float [ %366, %256 ], [ %237, %39 ]
  %.pn76 = phi float [ %367, %256 ], [ %238, %39 ]
  %.pn74 = phi float [ %368, %256 ], [ %239, %39 ]
  %.pn72 = phi float [ %369, %256 ], [ %240, %39 ]
  %.pn70 = phi float [ %370, %256 ], [ %241, %39 ]
  %.pn68 = phi float [ %371, %256 ], [ %242, %39 ]
  %.pn66 = phi float [ %372, %256 ], [ %243, %39 ]
  %.pn64 = phi float [ %373, %256 ], [ %244, %39 ]
  %.pn62 = phi float [ %374, %256 ], [ %245, %39 ]
  %.pn60 = phi float [ %375, %256 ], [ %246, %39 ]
  %.pn58 = phi float [ %376, %256 ], [ %247, %39 ]
  %.pn56 = phi float [ %377, %256 ], [ %248, %39 ]
  %.pn54 = phi float [ %378, %256 ], [ %249, %39 ]
  %.pn52 = phi float [ %379, %256 ], [ %250, %39 ]
  %.pn50 = phi float [ %380, %256 ], [ %251, %39 ]
  %.pn48 = phi float [ %381, %256 ], [ %252, %39 ]
  %.pn46 = phi float [ %382, %256 ], [ %253, %39 ]
  %.pn44 = phi float [ %383, %256 ], [ %254, %39 ]
  %.pn42 = phi float [ %384, %256 ], [ %255, %39 ]
  %513 = phi float [ %289, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %514 = phi float [ %290, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %515 = phi float [ %291, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %516 = phi float [ %292, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %517 = phi float [ %293, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %518 = phi float [ %294, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %519 = phi float [ %295, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %520 = phi float [ %296, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %521 = phi float [ %297, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %522 = phi float [ %298, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %523 = phi float [ %299, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %524 = phi float [ %300, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %525 = phi float [ %301, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %526 = phi float [ %302, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %527 = phi float [ %303, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %528 = phi float [ %304, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %529 = phi float [ %305, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %530 = phi float [ %306, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %531 = phi float [ %307, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %532 = phi float [ %308, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %533 = phi float [ %309, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %534 = phi float [ %310, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %535 = phi float [ %311, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %536 = phi float [ %312, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %537 = phi float [ %313, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %538 = phi float [ %314, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %539 = phi float [ %315, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %540 = phi float [ %316, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %541 = phi float [ %317, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %542 = phi float [ %318, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %543 = phi float [ %319, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %544 = phi float [ %320, %256 ], [ 1.000000e+00, %39 ], !dbg !27
  %545 = select i1 %154, float %.pn104, float %105, !dbg !35
  %546 = select i1 %154, float %.pn102, float %106, !dbg !35
  %547 = select i1 %154, float %.pn100, float %107, !dbg !35
  %548 = select i1 %154, float %.pn98, float %108, !dbg !35
  %549 = select i1 %154, float %.pn96, float %109, !dbg !35
  %550 = select i1 %154, float %.pn94, float %110, !dbg !35
  %551 = select i1 %154, float %.pn92, float %111, !dbg !35
  %552 = select i1 %154, float %.pn90, float %112, !dbg !35
  %553 = select i1 %154, float %.pn88, float %113, !dbg !35
  %554 = select i1 %154, float %.pn86, float %114, !dbg !35
  %555 = select i1 %154, float %.pn84, float %115, !dbg !35
  %556 = select i1 %154, float %.pn82, float %116, !dbg !35
  %557 = select i1 %154, float %.pn80, float %117, !dbg !35
  %558 = select i1 %154, float %.pn78, float %118, !dbg !35
  %559 = select i1 %154, float %.pn76, float %119, !dbg !35
  %560 = select i1 %154, float %.pn74, float %120, !dbg !35
  %561 = select i1 %155, float %.pn72, float %121, !dbg !35
  %562 = select i1 %155, float %.pn70, float %122, !dbg !35
  %563 = select i1 %155, float %.pn68, float %123, !dbg !35
  %564 = select i1 %155, float %.pn66, float %124, !dbg !35
  %565 = select i1 %155, float %.pn64, float %125, !dbg !35
  %566 = select i1 %155, float %.pn62, float %126, !dbg !35
  %567 = select i1 %155, float %.pn60, float %127, !dbg !35
  %568 = select i1 %155, float %.pn58, float %128, !dbg !35
  %569 = select i1 %155, float %.pn56, float %129, !dbg !35
  %570 = select i1 %155, float %.pn54, float %130, !dbg !35
  %571 = select i1 %155, float %.pn52, float %131, !dbg !35
  %572 = select i1 %155, float %.pn50, float %132, !dbg !35
  %573 = select i1 %155, float %.pn48, float %133, !dbg !35
  %574 = select i1 %155, float %.pn46, float %134, !dbg !35
  %575 = select i1 %155, float %.pn44, float %135, !dbg !35
  %576 = select i1 %155, float %.pn42, float %136, !dbg !35
  %577 = select i1 %154, float %481, float %73, !dbg !36
  %578 = select i1 %154, float %482, float %74, !dbg !36
  %579 = select i1 %154, float %483, float %75, !dbg !36
  %580 = select i1 %154, float %484, float %76, !dbg !36
  %581 = select i1 %154, float %485, float %77, !dbg !36
  %582 = select i1 %154, float %486, float %78, !dbg !36
  %583 = select i1 %154, float %487, float %79, !dbg !36
  %584 = select i1 %154, float %488, float %80, !dbg !36
  %585 = select i1 %154, float %489, float %81, !dbg !36
  %586 = select i1 %154, float %490, float %82, !dbg !36
  %587 = select i1 %154, float %491, float %83, !dbg !36
  %588 = select i1 %154, float %492, float %84, !dbg !36
  %589 = select i1 %154, float %493, float %85, !dbg !36
  %590 = select i1 %154, float %494, float %86, !dbg !36
  %591 = select i1 %154, float %495, float %87, !dbg !36
  %592 = select i1 %154, float %496, float %88, !dbg !36
  %593 = select i1 %155, float %497, float %89, !dbg !36
  %594 = select i1 %155, float %498, float %90, !dbg !36
  %595 = select i1 %155, float %499, float %91, !dbg !36
  %596 = select i1 %155, float %500, float %92, !dbg !36
  %597 = select i1 %155, float %501, float %93, !dbg !36
  %598 = select i1 %155, float %502, float %94, !dbg !36
  %599 = select i1 %155, float %503, float %95, !dbg !36
  %600 = select i1 %155, float %504, float %96, !dbg !36
  %601 = select i1 %155, float %505, float %97, !dbg !36
  %602 = select i1 %155, float %506, float %98, !dbg !36
  %603 = select i1 %155, float %507, float %99, !dbg !36
  %604 = select i1 %155, float %508, float %100, !dbg !36
  %605 = select i1 %155, float %509, float %101, !dbg !36
  %606 = select i1 %155, float %510, float %102, !dbg !36
  %607 = select i1 %155, float %511, float %103, !dbg !36
  %608 = select i1 %155, float %512, float %104, !dbg !36
  %609 = select i1 %154, float %513, float %41, !dbg !37
  %610 = select i1 %154, float %514, float %42, !dbg !37
  %611 = select i1 %154, float %515, float %43, !dbg !37
  %612 = select i1 %154, float %516, float %44, !dbg !37
  %613 = select i1 %154, float %517, float %45, !dbg !37
  %614 = select i1 %154, float %518, float %46, !dbg !37
  %615 = select i1 %154, float %519, float %47, !dbg !37
  %616 = select i1 %154, float %520, float %48, !dbg !37
  %617 = select i1 %154, float %521, float %49, !dbg !37
  %618 = select i1 %154, float %522, float %50, !dbg !37
  %619 = select i1 %154, float %523, float %51, !dbg !37
  %620 = select i1 %154, float %524, float %52, !dbg !37
  %621 = select i1 %154, float %525, float %53, !dbg !37
  %622 = select i1 %154, float %526, float %54, !dbg !37
  %623 = select i1 %154, float %527, float %55, !dbg !37
  %624 = select i1 %154, float %528, float %56, !dbg !37
  %625 = select i1 %155, float %529, float %57, !dbg !37
  %626 = select i1 %155, float %530, float %58, !dbg !37
  %627 = select i1 %155, float %531, float %59, !dbg !37
  %628 = select i1 %155, float %532, float %60, !dbg !37
  %629 = select i1 %155, float %533, float %61, !dbg !37
  %630 = select i1 %155, float %534, float %62, !dbg !37
  %631 = select i1 %155, float %535, float %63, !dbg !37
  %632 = select i1 %155, float %536, float %64, !dbg !37
  %633 = select i1 %155, float %537, float %65, !dbg !37
  %634 = select i1 %155, float %538, float %66, !dbg !37
  %635 = select i1 %155, float %539, float %67, !dbg !37
  %636 = select i1 %155, float %540, float %68, !dbg !37
  %637 = select i1 %155, float %541, float %69, !dbg !37
  %638 = select i1 %155, float %542, float %70, !dbg !37
  %639 = select i1 %155, float %543, float %71, !dbg !37
  %640 = select i1 %155, float %544, float %72, !dbg !37
  br i1 %40, label %39, label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %641 = lshr i32 %22, 5, !dbg !11
  %642 = and i32 %22, 3, !dbg !11
  %643 = or disjoint i32 %21, %642, !dbg !12
  %644 = icmp slt i32 %643, 4112, !dbg !13
  %645 = or disjoint i32 %35, 4, !dbg !14
  %646 = fsub float %546, %545, !dbg !38
  %647 = fadd float %609, %610, !dbg !41
  %648 = fcmp oeq float %647, 0.000000e+00, !dbg !42
  %649 = tail call float @llvm.nvvm.div.full(float %610, float %647), !dbg !43
  %650 = select i1 %648, float 0.000000e+00, float %649, !dbg !44
  %651 = fmul float %646, %650, !dbg !45
  %652 = fadd float %545, %651, !dbg !46
  %653 = fadd float %577, %578, !dbg !47
  %654 = fmul float %646, %646, !dbg !48
  %655 = fmul float %654, %609, !dbg !49
  %656 = fmul float %655, %650, !dbg !50
  %657 = fadd float %653, %656, !dbg !51
  %658 = fsub float %547, %652, !dbg !38
  %659 = fadd float %611, %647, !dbg !41
  %660 = fcmp oeq float %659, 0.000000e+00, !dbg !42
  %661 = tail call float @llvm.nvvm.div.full(float %611, float %659), !dbg !43
  %662 = select i1 %660, float 0.000000e+00, float %661, !dbg !44
  %663 = fmul float %662, %658, !dbg !45
  %664 = fadd float %652, %663, !dbg !46
  %665 = fadd float %579, %657, !dbg !47
  %666 = fmul float %658, %658, !dbg !48
  %667 = fmul float %647, %666, !dbg !49
  %668 = fmul float %662, %667, !dbg !50
  %669 = fadd float %665, %668, !dbg !51
  %670 = fsub float %548, %664, !dbg !38
  %671 = fadd float %612, %659, !dbg !41
  %672 = fcmp oeq float %671, 0.000000e+00, !dbg !42
  %673 = tail call float @llvm.nvvm.div.full(float %612, float %671), !dbg !43
  %674 = select i1 %672, float 0.000000e+00, float %673, !dbg !44
  %675 = fmul float %674, %670, !dbg !45
  %676 = fadd float %664, %675, !dbg !46
  %677 = fadd float %580, %669, !dbg !47
  %678 = fmul float %670, %670, !dbg !48
  %679 = fmul float %659, %678, !dbg !49
  %680 = fmul float %674, %679, !dbg !50
  %681 = fadd float %677, %680, !dbg !51
  %682 = fsub float %549, %676, !dbg !38
  %683 = fadd float %613, %671, !dbg !41
  %684 = fcmp oeq float %683, 0.000000e+00, !dbg !42
  %685 = tail call float @llvm.nvvm.div.full(float %613, float %683), !dbg !43
  %686 = select i1 %684, float 0.000000e+00, float %685, !dbg !44
  %687 = fmul float %686, %682, !dbg !45
  %688 = fadd float %676, %687, !dbg !46
  %689 = fadd float %581, %681, !dbg !47
  %690 = fmul float %682, %682, !dbg !48
  %691 = fmul float %671, %690, !dbg !49
  %692 = fmul float %686, %691, !dbg !50
  %693 = fadd float %689, %692, !dbg !51
  %694 = fsub float %550, %688, !dbg !38
  %695 = fadd float %614, %683, !dbg !41
  %696 = fcmp oeq float %695, 0.000000e+00, !dbg !42
  %697 = tail call float @llvm.nvvm.div.full(float %614, float %695), !dbg !43
  %698 = select i1 %696, float 0.000000e+00, float %697, !dbg !44
  %699 = fmul float %698, %694, !dbg !45
  %700 = fadd float %688, %699, !dbg !46
  %701 = fadd float %582, %693, !dbg !47
  %702 = fmul float %694, %694, !dbg !48
  %703 = fmul float %683, %702, !dbg !49
  %704 = fmul float %698, %703, !dbg !50
  %705 = fadd float %701, %704, !dbg !51
  %706 = fsub float %551, %700, !dbg !38
  %707 = fadd float %615, %695, !dbg !41
  %708 = fcmp oeq float %707, 0.000000e+00, !dbg !42
  %709 = tail call float @llvm.nvvm.div.full(float %615, float %707), !dbg !43
  %710 = select i1 %708, float 0.000000e+00, float %709, !dbg !44
  %711 = fmul float %710, %706, !dbg !45
  %712 = fadd float %700, %711, !dbg !46
  %713 = fadd float %583, %705, !dbg !47
  %714 = fmul float %706, %706, !dbg !48
  %715 = fmul float %695, %714, !dbg !49
  %716 = fmul float %710, %715, !dbg !50
  %717 = fadd float %713, %716, !dbg !51
  %718 = fsub float %552, %712, !dbg !38
  %719 = fadd float %616, %707, !dbg !41
  %720 = fcmp oeq float %719, 0.000000e+00, !dbg !42
  %721 = tail call float @llvm.nvvm.div.full(float %616, float %719), !dbg !43
  %722 = select i1 %720, float 0.000000e+00, float %721, !dbg !44
  %723 = fmul float %722, %718, !dbg !45
  %724 = fadd float %712, %723, !dbg !46
  %725 = fadd float %584, %717, !dbg !47
  %726 = fmul float %718, %718, !dbg !48
  %727 = fmul float %707, %726, !dbg !49
  %728 = fmul float %722, %727, !dbg !50
  %729 = fadd float %725, %728, !dbg !51
  %730 = fsub float %553, %724, !dbg !38
  %731 = fadd float %617, %719, !dbg !41
  %732 = fcmp oeq float %731, 0.000000e+00, !dbg !42
  %733 = tail call float @llvm.nvvm.div.full(float %617, float %731), !dbg !43
  %734 = select i1 %732, float 0.000000e+00, float %733, !dbg !44
  %735 = fmul float %734, %730, !dbg !45
  %736 = fadd float %724, %735, !dbg !46
  %737 = fadd float %585, %729, !dbg !47
  %738 = fmul float %730, %730, !dbg !48
  %739 = fmul float %719, %738, !dbg !49
  %740 = fmul float %734, %739, !dbg !50
  %741 = fadd float %737, %740, !dbg !51
  %742 = fsub float %554, %736, !dbg !38
  %743 = fadd float %618, %731, !dbg !41
  %744 = fcmp oeq float %743, 0.000000e+00, !dbg !42
  %745 = tail call float @llvm.nvvm.div.full(float %618, float %743), !dbg !43
  %746 = select i1 %744, float 0.000000e+00, float %745, !dbg !44
  %747 = fmul float %746, %742, !dbg !45
  %748 = fadd float %736, %747, !dbg !46
  %749 = fadd float %586, %741, !dbg !47
  %750 = fmul float %742, %742, !dbg !48
  %751 = fmul float %731, %750, !dbg !49
  %752 = fmul float %746, %751, !dbg !50
  %753 = fadd float %749, %752, !dbg !51
  %754 = fsub float %555, %748, !dbg !38
  %755 = fadd float %619, %743, !dbg !41
  %756 = fcmp oeq float %755, 0.000000e+00, !dbg !42
  %757 = tail call float @llvm.nvvm.div.full(float %619, float %755), !dbg !43
  %758 = select i1 %756, float 0.000000e+00, float %757, !dbg !44
  %759 = fmul float %758, %754, !dbg !45
  %760 = fadd float %748, %759, !dbg !46
  %761 = fadd float %587, %753, !dbg !47
  %762 = fmul float %754, %754, !dbg !48
  %763 = fmul float %743, %762, !dbg !49
  %764 = fmul float %758, %763, !dbg !50
  %765 = fadd float %761, %764, !dbg !51
  %766 = fsub float %556, %760, !dbg !38
  %767 = fadd float %620, %755, !dbg !41
  %768 = fcmp oeq float %767, 0.000000e+00, !dbg !42
  %769 = tail call float @llvm.nvvm.div.full(float %620, float %767), !dbg !43
  %770 = select i1 %768, float 0.000000e+00, float %769, !dbg !44
  %771 = fmul float %770, %766, !dbg !45
  %772 = fadd float %760, %771, !dbg !46
  %773 = fadd float %588, %765, !dbg !47
  %774 = fmul float %766, %766, !dbg !48
  %775 = fmul float %755, %774, !dbg !49
  %776 = fmul float %770, %775, !dbg !50
  %777 = fadd float %773, %776, !dbg !51
  %778 = fsub float %557, %772, !dbg !38
  %779 = fadd float %621, %767, !dbg !41
  %780 = fcmp oeq float %779, 0.000000e+00, !dbg !42
  %781 = tail call float @llvm.nvvm.div.full(float %621, float %779), !dbg !43
  %782 = select i1 %780, float 0.000000e+00, float %781, !dbg !44
  %783 = fmul float %782, %778, !dbg !45
  %784 = fadd float %772, %783, !dbg !46
  %785 = fadd float %589, %777, !dbg !47
  %786 = fmul float %778, %778, !dbg !48
  %787 = fmul float %767, %786, !dbg !49
  %788 = fmul float %782, %787, !dbg !50
  %789 = fadd float %785, %788, !dbg !51
  %790 = fsub float %558, %784, !dbg !38
  %791 = fadd float %622, %779, !dbg !41
  %792 = fcmp oeq float %791, 0.000000e+00, !dbg !42
  %793 = tail call float @llvm.nvvm.div.full(float %622, float %791), !dbg !43
  %794 = select i1 %792, float 0.000000e+00, float %793, !dbg !44
  %795 = fmul float %794, %790, !dbg !45
  %796 = fadd float %784, %795, !dbg !46
  %797 = fadd float %590, %789, !dbg !47
  %798 = fmul float %790, %790, !dbg !48
  %799 = fmul float %779, %798, !dbg !49
  %800 = fmul float %794, %799, !dbg !50
  %801 = fadd float %797, %800, !dbg !51
  %802 = fsub float %559, %796, !dbg !38
  %803 = fadd float %623, %791, !dbg !41
  %804 = fcmp oeq float %803, 0.000000e+00, !dbg !42
  %805 = tail call float @llvm.nvvm.div.full(float %623, float %803), !dbg !43
  %806 = select i1 %804, float 0.000000e+00, float %805, !dbg !44
  %807 = fmul float %806, %802, !dbg !45
  %808 = fadd float %796, %807, !dbg !46
  %809 = fadd float %591, %801, !dbg !47
  %810 = fmul float %802, %802, !dbg !48
  %811 = fmul float %791, %810, !dbg !49
  %812 = fmul float %806, %811, !dbg !50
  %813 = fadd float %809, %812, !dbg !51
  %814 = fsub float %560, %808, !dbg !38
  %815 = fadd float %624, %803, !dbg !41
  %816 = fcmp oeq float %815, 0.000000e+00, !dbg !42
  %817 = tail call float @llvm.nvvm.div.full(float %624, float %815), !dbg !43
  %818 = select i1 %816, float 0.000000e+00, float %817, !dbg !44
  %819 = fmul float %818, %814, !dbg !45
  %820 = fadd float %808, %819, !dbg !46
  %821 = fadd float %592, %813, !dbg !47
  %822 = fmul float %814, %814, !dbg !48
  %823 = fmul float %803, %822, !dbg !49
  %824 = fmul float %818, %823, !dbg !50
  %825 = fadd float %821, %824, !dbg !51
  %826 = fsub float %562, %561, !dbg !38
  %827 = fadd float %625, %626, !dbg !41
  %828 = fcmp oeq float %827, 0.000000e+00, !dbg !42
  %829 = tail call float @llvm.nvvm.div.full(float %626, float %827), !dbg !43
  %830 = select i1 %828, float 0.000000e+00, float %829, !dbg !44
  %831 = fmul float %826, %830, !dbg !45
  %832 = fadd float %561, %831, !dbg !46
  %833 = fadd float %593, %594, !dbg !47
  %834 = fmul float %826, %826, !dbg !48
  %835 = fmul float %834, %625, !dbg !49
  %836 = fmul float %835, %830, !dbg !50
  %837 = fadd float %833, %836, !dbg !51
  %838 = fsub float %563, %832, !dbg !38
  %839 = fadd float %627, %827, !dbg !41
  %840 = fcmp oeq float %839, 0.000000e+00, !dbg !42
  %841 = tail call float @llvm.nvvm.div.full(float %627, float %839), !dbg !43
  %842 = select i1 %840, float 0.000000e+00, float %841, !dbg !44
  %843 = fmul float %842, %838, !dbg !45
  %844 = fadd float %832, %843, !dbg !46
  %845 = fadd float %595, %837, !dbg !47
  %846 = fmul float %838, %838, !dbg !48
  %847 = fmul float %827, %846, !dbg !49
  %848 = fmul float %842, %847, !dbg !50
  %849 = fadd float %845, %848, !dbg !51
  %850 = fsub float %564, %844, !dbg !38
  %851 = fadd float %628, %839, !dbg !41
  %852 = fcmp oeq float %851, 0.000000e+00, !dbg !42
  %853 = tail call float @llvm.nvvm.div.full(float %628, float %851), !dbg !43
  %854 = select i1 %852, float 0.000000e+00, float %853, !dbg !44
  %855 = fmul float %854, %850, !dbg !45
  %856 = fadd float %844, %855, !dbg !46
  %857 = fadd float %596, %849, !dbg !47
  %858 = fmul float %850, %850, !dbg !48
  %859 = fmul float %839, %858, !dbg !49
  %860 = fmul float %854, %859, !dbg !50
  %861 = fadd float %857, %860, !dbg !51
  %862 = fsub float %565, %856, !dbg !38
  %863 = fadd float %629, %851, !dbg !41
  %864 = fcmp oeq float %863, 0.000000e+00, !dbg !42
  %865 = tail call float @llvm.nvvm.div.full(float %629, float %863), !dbg !43
  %866 = select i1 %864, float 0.000000e+00, float %865, !dbg !44
  %867 = fmul float %866, %862, !dbg !45
  %868 = fadd float %856, %867, !dbg !46
  %869 = fadd float %597, %861, !dbg !47
  %870 = fmul float %862, %862, !dbg !48
  %871 = fmul float %851, %870, !dbg !49
  %872 = fmul float %866, %871, !dbg !50
  %873 = fadd float %869, %872, !dbg !51
  %874 = fsub float %566, %868, !dbg !38
  %875 = fadd float %630, %863, !dbg !41
  %876 = fcmp oeq float %875, 0.000000e+00, !dbg !42
  %877 = tail call float @llvm.nvvm.div.full(float %630, float %875), !dbg !43
  %878 = select i1 %876, float 0.000000e+00, float %877, !dbg !44
  %879 = fmul float %878, %874, !dbg !45
  %880 = fadd float %868, %879, !dbg !46
  %881 = fadd float %598, %873, !dbg !47
  %882 = fmul float %874, %874, !dbg !48
  %883 = fmul float %863, %882, !dbg !49
  %884 = fmul float %878, %883, !dbg !50
  %885 = fadd float %881, %884, !dbg !51
  %886 = fsub float %567, %880, !dbg !38
  %887 = fadd float %631, %875, !dbg !41
  %888 = fcmp oeq float %887, 0.000000e+00, !dbg !42
  %889 = tail call float @llvm.nvvm.div.full(float %631, float %887), !dbg !43
  %890 = select i1 %888, float 0.000000e+00, float %889, !dbg !44
  %891 = fmul float %890, %886, !dbg !45
  %892 = fadd float %880, %891, !dbg !46
  %893 = fadd float %599, %885, !dbg !47
  %894 = fmul float %886, %886, !dbg !48
  %895 = fmul float %875, %894, !dbg !49
  %896 = fmul float %890, %895, !dbg !50
  %897 = fadd float %893, %896, !dbg !51
  %898 = fsub float %568, %892, !dbg !38
  %899 = fadd float %632, %887, !dbg !41
  %900 = fcmp oeq float %899, 0.000000e+00, !dbg !42
  %901 = tail call float @llvm.nvvm.div.full(float %632, float %899), !dbg !43
  %902 = select i1 %900, float 0.000000e+00, float %901, !dbg !44
  %903 = fmul float %902, %898, !dbg !45
  %904 = fadd float %892, %903, !dbg !46
  %905 = fadd float %600, %897, !dbg !47
  %906 = fmul float %898, %898, !dbg !48
  %907 = fmul float %887, %906, !dbg !49
  %908 = fmul float %902, %907, !dbg !50
  %909 = fadd float %905, %908, !dbg !51
  %910 = fsub float %569, %904, !dbg !38
  %911 = fadd float %633, %899, !dbg !41
  %912 = fcmp oeq float %911, 0.000000e+00, !dbg !42
  %913 = tail call float @llvm.nvvm.div.full(float %633, float %911), !dbg !43
  %914 = select i1 %912, float 0.000000e+00, float %913, !dbg !44
  %915 = fmul float %914, %910, !dbg !45
  %916 = fadd float %904, %915, !dbg !46
  %917 = fadd float %601, %909, !dbg !47
  %918 = fmul float %910, %910, !dbg !48
  %919 = fmul float %899, %918, !dbg !49
  %920 = fmul float %914, %919, !dbg !50
  %921 = fadd float %917, %920, !dbg !51
  %922 = fsub float %570, %916, !dbg !38
  %923 = fadd float %634, %911, !dbg !41
  %924 = fcmp oeq float %923, 0.000000e+00, !dbg !42
  %925 = tail call float @llvm.nvvm.div.full(float %634, float %923), !dbg !43
  %926 = select i1 %924, float 0.000000e+00, float %925, !dbg !44
  %927 = fmul float %926, %922, !dbg !45
  %928 = fadd float %916, %927, !dbg !46
  %929 = fadd float %602, %921, !dbg !47
  %930 = fmul float %922, %922, !dbg !48
  %931 = fmul float %911, %930, !dbg !49
  %932 = fmul float %926, %931, !dbg !50
  %933 = fadd float %929, %932, !dbg !51
  %934 = fsub float %571, %928, !dbg !38
  %935 = fadd float %635, %923, !dbg !41
  %936 = fcmp oeq float %935, 0.000000e+00, !dbg !42
  %937 = tail call float @llvm.nvvm.div.full(float %635, float %935), !dbg !43
  %938 = select i1 %936, float 0.000000e+00, float %937, !dbg !44
  %939 = fmul float %938, %934, !dbg !45
  %940 = fadd float %928, %939, !dbg !46
  %941 = fadd float %603, %933, !dbg !47
  %942 = fmul float %934, %934, !dbg !48
  %943 = fmul float %923, %942, !dbg !49
  %944 = fmul float %938, %943, !dbg !50
  %945 = fadd float %941, %944, !dbg !51
  %946 = fsub float %572, %940, !dbg !38
  %947 = fadd float %636, %935, !dbg !41
  %948 = fcmp oeq float %947, 0.000000e+00, !dbg !42
  %949 = tail call float @llvm.nvvm.div.full(float %636, float %947), !dbg !43
  %950 = select i1 %948, float 0.000000e+00, float %949, !dbg !44
  %951 = fmul float %950, %946, !dbg !45
  %952 = fadd float %940, %951, !dbg !46
  %953 = fadd float %604, %945, !dbg !47
  %954 = fmul float %946, %946, !dbg !48
  %955 = fmul float %935, %954, !dbg !49
  %956 = fmul float %950, %955, !dbg !50
  %957 = fadd float %953, %956, !dbg !51
  %958 = fsub float %573, %952, !dbg !38
  %959 = fadd float %637, %947, !dbg !41
  %960 = fcmp oeq float %959, 0.000000e+00, !dbg !42
  %961 = tail call float @llvm.nvvm.div.full(float %637, float %959), !dbg !43
  %962 = select i1 %960, float 0.000000e+00, float %961, !dbg !44
  %963 = fmul float %962, %958, !dbg !45
  %964 = fadd float %952, %963, !dbg !46
  %965 = fadd float %605, %957, !dbg !47
  %966 = fmul float %958, %958, !dbg !48
  %967 = fmul float %947, %966, !dbg !49
  %968 = fmul float %962, %967, !dbg !50
  %969 = fadd float %965, %968, !dbg !51
  %970 = fsub float %574, %964, !dbg !38
  %971 = fadd float %638, %959, !dbg !41
  %972 = fcmp oeq float %971, 0.000000e+00, !dbg !42
  %973 = tail call float @llvm.nvvm.div.full(float %638, float %971), !dbg !43
  %974 = select i1 %972, float 0.000000e+00, float %973, !dbg !44
  %975 = fmul float %974, %970, !dbg !45
  %976 = fadd float %964, %975, !dbg !46
  %977 = fadd float %606, %969, !dbg !47
  %978 = fmul float %970, %970, !dbg !48
  %979 = fmul float %959, %978, !dbg !49
  %980 = fmul float %974, %979, !dbg !50
  %981 = fadd float %977, %980, !dbg !51
  %982 = fsub float %575, %976, !dbg !38
  %983 = fadd float %639, %971, !dbg !41
  %984 = fcmp oeq float %983, 0.000000e+00, !dbg !42
  %985 = tail call float @llvm.nvvm.div.full(float %639, float %983), !dbg !43
  %986 = select i1 %984, float 0.000000e+00, float %985, !dbg !44
  %987 = fmul float %986, %982, !dbg !45
  %988 = fadd float %976, %987, !dbg !46
  %989 = fadd float %607, %981, !dbg !47
  %990 = fmul float %982, %982, !dbg !48
  %991 = fmul float %971, %990, !dbg !49
  %992 = fmul float %986, %991, !dbg !50
  %993 = fadd float %989, %992, !dbg !51
  %994 = fsub float %576, %988, !dbg !38
  %995 = fadd float %640, %983, !dbg !41
  %996 = fcmp oeq float %995, 0.000000e+00, !dbg !42
  %997 = tail call float @llvm.nvvm.div.full(float %640, float %995), !dbg !43
  %998 = select i1 %996, float 0.000000e+00, float %997, !dbg !44
  %999 = fmul float %998, %994, !dbg !45
  %1000 = fadd float %988, %999, !dbg !46
  %1001 = fadd float %608, %993, !dbg !47
  %1002 = fmul float %994, %994, !dbg !48
  %1003 = fmul float %983, %1002, !dbg !49
  %1004 = fmul float %998, %1003, !dbg !50
  %1005 = fadd float %1001, %1004, !dbg !51
  %1006 = bitcast float %820 to i32, !dbg !52
  %1007 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1006, i32 16, i32 31), !dbg !52
  %1008 = bitcast i32 %1007 to float, !dbg !52
  %1009 = bitcast float %825 to i32, !dbg !52
  %1010 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1009, i32 16, i32 31), !dbg !52
  %1011 = bitcast i32 %1010 to float, !dbg !52
  %1012 = bitcast float %815 to i32, !dbg !52
  %1013 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1012, i32 16, i32 31), !dbg !52
  %1014 = bitcast i32 %1013 to float, !dbg !52
  %1015 = fsub float %1008, %820, !dbg !38
  %1016 = fadd float %815, %1014, !dbg !41
  %1017 = fcmp oeq float %1016, 0.000000e+00, !dbg !42
  %1018 = tail call float @llvm.nvvm.div.full(float %1014, float %1016), !dbg !43
  %1019 = select i1 %1017, float 0.000000e+00, float %1018, !dbg !44
  %1020 = fmul float %1019, %1015, !dbg !45
  %1021 = fadd float %820, %1020, !dbg !46
  %1022 = fadd float %825, %1011, !dbg !47
  %1023 = fmul float %1015, %1015, !dbg !48
  %1024 = fmul float %815, %1023, !dbg !49
  %1025 = fmul float %1019, %1024, !dbg !50
  %1026 = fadd float %1022, %1025, !dbg !51
  %1027 = bitcast float %1021 to i32, !dbg !52
  %1028 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1027, i32 8, i32 31), !dbg !52
  %1029 = bitcast i32 %1028 to float, !dbg !52
  %1030 = bitcast float %1026 to i32, !dbg !52
  %1031 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1030, i32 8, i32 31), !dbg !52
  %1032 = bitcast i32 %1031 to float, !dbg !52
  %1033 = bitcast float %1016 to i32, !dbg !52
  %1034 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1033, i32 8, i32 31), !dbg !52
  %1035 = bitcast i32 %1034 to float, !dbg !52
  %1036 = fsub float %1029, %1021, !dbg !38
  %1037 = fadd float %1016, %1035, !dbg !41
  %1038 = fcmp oeq float %1037, 0.000000e+00, !dbg !42
  %1039 = tail call float @llvm.nvvm.div.full(float %1035, float %1037), !dbg !43
  %1040 = select i1 %1038, float 0.000000e+00, float %1039, !dbg !44
  %1041 = fmul float %1040, %1036, !dbg !45
  %1042 = fadd float %1021, %1041, !dbg !46
  %1043 = fadd float %1026, %1032, !dbg !47
  %1044 = fmul float %1036, %1036, !dbg !48
  %1045 = fmul float %1016, %1044, !dbg !49
  %1046 = fmul float %1040, %1045, !dbg !50
  %1047 = fadd float %1043, %1046, !dbg !51
  %1048 = bitcast float %1042 to i32, !dbg !52
  %1049 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1048, i32 4, i32 31), !dbg !52
  %1050 = bitcast i32 %1049 to float, !dbg !52
  %1051 = bitcast float %1047 to i32, !dbg !52
  %1052 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1051, i32 4, i32 31), !dbg !52
  %1053 = bitcast i32 %1052 to float, !dbg !52
  %1054 = bitcast float %1037 to i32, !dbg !52
  %1055 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1054, i32 4, i32 31), !dbg !52
  %1056 = bitcast i32 %1055 to float, !dbg !52
  %1057 = fsub float %1050, %1042, !dbg !38
  %1058 = fadd float %1037, %1056, !dbg !41
  %1059 = fcmp oeq float %1058, 0.000000e+00, !dbg !42
  %1060 = tail call float @llvm.nvvm.div.full(float %1056, float %1058), !dbg !43
  %1061 = select i1 %1059, float 0.000000e+00, float %1060, !dbg !44
  %1062 = fmul float %1061, %1057, !dbg !45
  %1063 = fadd float %1042, %1062, !dbg !46
  %1064 = fadd float %1047, %1053, !dbg !47
  %1065 = fmul float %1057, %1057, !dbg !48
  %1066 = fmul float %1037, %1065, !dbg !49
  %1067 = fmul float %1061, %1066, !dbg !50
  %1068 = fadd float %1064, %1067, !dbg !51
  %1069 = bitcast float %1063 to i32, !dbg !52
  %1070 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1069, i32 2, i32 31), !dbg !52
  %1071 = bitcast i32 %1070 to float, !dbg !52
  %1072 = bitcast float %1068 to i32, !dbg !52
  %1073 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1072, i32 2, i32 31), !dbg !52
  %1074 = bitcast i32 %1073 to float, !dbg !52
  %1075 = bitcast float %1058 to i32, !dbg !52
  %1076 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1075, i32 2, i32 31), !dbg !52
  %1077 = bitcast i32 %1076 to float, !dbg !52
  %1078 = fsub float %1071, %1063, !dbg !38
  %1079 = fadd float %1058, %1077, !dbg !41
  %1080 = fcmp oeq float %1079, 0.000000e+00, !dbg !42
  %1081 = tail call float @llvm.nvvm.div.full(float %1077, float %1079), !dbg !43
  %1082 = select i1 %1080, float 0.000000e+00, float %1081, !dbg !44
  %1083 = fmul float %1082, %1078, !dbg !45
  %1084 = fadd float %1063, %1083, !dbg !46
  %1085 = fadd float %1068, %1074, !dbg !47
  %1086 = fmul float %1078, %1078, !dbg !48
  %1087 = fmul float %1058, %1086, !dbg !49
  %1088 = fmul float %1082, %1087, !dbg !50
  %1089 = fadd float %1085, %1088, !dbg !51
  %1090 = bitcast float %1084 to i32, !dbg !52
  %1091 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1090, i32 1, i32 31), !dbg !52
  %1092 = bitcast i32 %1091 to float, !dbg !52
  %1093 = bitcast float %1089 to i32, !dbg !52
  %1094 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1093, i32 1, i32 31), !dbg !52
  %1095 = bitcast i32 %1094 to float, !dbg !52
  %1096 = bitcast float %1079 to i32, !dbg !52
  %1097 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1096, i32 1, i32 31), !dbg !52
  %1098 = bitcast i32 %1097 to float, !dbg !52
  %1099 = fsub float %1092, %1084, !dbg !38
  %1100 = fadd float %1079, %1098, !dbg !41
  %1101 = fcmp oeq float %1100, 0.000000e+00, !dbg !42
  %1102 = tail call float @llvm.nvvm.div.full(float %1098, float %1100), !dbg !43
  %1103 = select i1 %1101, float 0.000000e+00, float %1102, !dbg !44
  %1104 = fmul float %1103, %1099, !dbg !45
  %1105 = fadd float %1084, %1104, !dbg !46
  %1106 = fadd float %1089, %1095, !dbg !47
  %1107 = fmul float %1099, %1099, !dbg !48
  %1108 = fmul float %1079, %1107, !dbg !49
  %1109 = fmul float %1103, %1108, !dbg !50
  %1110 = fadd float %1106, %1109, !dbg !51
  %1111 = bitcast float %1000 to i32, !dbg !52
  %1112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1111, i32 16, i32 31), !dbg !52
  %1113 = bitcast i32 %1112 to float, !dbg !52
  %1114 = bitcast float %1005 to i32, !dbg !52
  %1115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1114, i32 16, i32 31), !dbg !52
  %1116 = bitcast i32 %1115 to float, !dbg !52
  %1117 = bitcast float %995 to i32, !dbg !52
  %1118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1117, i32 16, i32 31), !dbg !52
  %1119 = bitcast i32 %1118 to float, !dbg !52
  %1120 = fsub float %1113, %1000, !dbg !38
  %1121 = fadd float %995, %1119, !dbg !41
  %1122 = fcmp oeq float %1121, 0.000000e+00, !dbg !42
  %1123 = tail call float @llvm.nvvm.div.full(float %1119, float %1121), !dbg !43
  %1124 = select i1 %1122, float 0.000000e+00, float %1123, !dbg !44
  %1125 = fmul float %1124, %1120, !dbg !45
  %1126 = fadd float %1000, %1125, !dbg !46
  %1127 = fadd float %1005, %1116, !dbg !47
  %1128 = fmul float %1120, %1120, !dbg !48
  %1129 = fmul float %995, %1128, !dbg !49
  %1130 = fmul float %1124, %1129, !dbg !50
  %1131 = fadd float %1127, %1130, !dbg !51
  %1132 = bitcast float %1126 to i32, !dbg !52
  %1133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1132, i32 8, i32 31), !dbg !52
  %1134 = bitcast i32 %1133 to float, !dbg !52
  %1135 = bitcast float %1131 to i32, !dbg !52
  %1136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1135, i32 8, i32 31), !dbg !52
  %1137 = bitcast i32 %1136 to float, !dbg !52
  %1138 = bitcast float %1121 to i32, !dbg !52
  %1139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1138, i32 8, i32 31), !dbg !52
  %1140 = bitcast i32 %1139 to float, !dbg !52
  %1141 = fsub float %1134, %1126, !dbg !38
  %1142 = fadd float %1121, %1140, !dbg !41
  %1143 = fcmp oeq float %1142, 0.000000e+00, !dbg !42
  %1144 = tail call float @llvm.nvvm.div.full(float %1140, float %1142), !dbg !43
  %1145 = select i1 %1143, float 0.000000e+00, float %1144, !dbg !44
  %1146 = fmul float %1145, %1141, !dbg !45
  %1147 = fadd float %1126, %1146, !dbg !46
  %1148 = fadd float %1131, %1137, !dbg !47
  %1149 = fmul float %1141, %1141, !dbg !48
  %1150 = fmul float %1121, %1149, !dbg !49
  %1151 = fmul float %1145, %1150, !dbg !50
  %1152 = fadd float %1148, %1151, !dbg !51
  %1153 = bitcast float %1147 to i32, !dbg !52
  %1154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1153, i32 4, i32 31), !dbg !52
  %1155 = bitcast i32 %1154 to float, !dbg !52
  %1156 = bitcast float %1152 to i32, !dbg !52
  %1157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1156, i32 4, i32 31), !dbg !52
  %1158 = bitcast i32 %1157 to float, !dbg !52
  %1159 = bitcast float %1142 to i32, !dbg !52
  %1160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1159, i32 4, i32 31), !dbg !52
  %1161 = bitcast i32 %1160 to float, !dbg !52
  %1162 = fsub float %1155, %1147, !dbg !38
  %1163 = fadd float %1142, %1161, !dbg !41
  %1164 = fcmp oeq float %1163, 0.000000e+00, !dbg !42
  %1165 = tail call float @llvm.nvvm.div.full(float %1161, float %1163), !dbg !43
  %1166 = select i1 %1164, float 0.000000e+00, float %1165, !dbg !44
  %1167 = fmul float %1166, %1162, !dbg !45
  %1168 = fadd float %1147, %1167, !dbg !46
  %1169 = fadd float %1152, %1158, !dbg !47
  %1170 = fmul float %1162, %1162, !dbg !48
  %1171 = fmul float %1142, %1170, !dbg !49
  %1172 = fmul float %1166, %1171, !dbg !50
  %1173 = fadd float %1169, %1172, !dbg !51
  %1174 = bitcast float %1168 to i32, !dbg !52
  %1175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1174, i32 2, i32 31), !dbg !52
  %1176 = bitcast i32 %1175 to float, !dbg !52
  %1177 = bitcast float %1173 to i32, !dbg !52
  %1178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1177, i32 2, i32 31), !dbg !52
  %1179 = bitcast i32 %1178 to float, !dbg !52
  %1180 = bitcast float %1163 to i32, !dbg !52
  %1181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1180, i32 2, i32 31), !dbg !52
  %1182 = bitcast i32 %1181 to float, !dbg !52
  %1183 = fsub float %1176, %1168, !dbg !38
  %1184 = fadd float %1163, %1182, !dbg !41
  %1185 = fcmp oeq float %1184, 0.000000e+00, !dbg !42
  %1186 = tail call float @llvm.nvvm.div.full(float %1182, float %1184), !dbg !43
  %1187 = select i1 %1185, float 0.000000e+00, float %1186, !dbg !44
  %1188 = fmul float %1187, %1183, !dbg !45
  %1189 = fadd float %1168, %1188, !dbg !46
  %1190 = fadd float %1173, %1179, !dbg !47
  %1191 = fmul float %1183, %1183, !dbg !48
  %1192 = fmul float %1163, %1191, !dbg !49
  %1193 = fmul float %1187, %1192, !dbg !50
  %1194 = fadd float %1190, %1193, !dbg !51
  %1195 = bitcast float %1189 to i32, !dbg !52
  %1196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1195, i32 1, i32 31), !dbg !52
  %1197 = bitcast i32 %1196 to float, !dbg !52
  %1198 = bitcast float %1194 to i32, !dbg !52
  %1199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1198, i32 1, i32 31), !dbg !52
  %1200 = bitcast i32 %1199 to float, !dbg !52
  %1201 = bitcast float %1184 to i32, !dbg !52
  %1202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1201, i32 1, i32 31), !dbg !52
  %1203 = bitcast i32 %1202 to float, !dbg !52
  %1204 = fsub float %1197, %1189, !dbg !38
  %1205 = fadd float %1184, %1203, !dbg !41
  %1206 = fcmp oeq float %1205, 0.000000e+00, !dbg !42
  %1207 = tail call float @llvm.nvvm.div.full(float %1203, float %1205), !dbg !43
  %1208 = select i1 %1206, float 0.000000e+00, float %1207, !dbg !44
  %1209 = fmul float %1208, %1204, !dbg !45
  %1210 = fadd float %1189, %1209, !dbg !46
  %1211 = fadd float %1194, %1200, !dbg !47
  %1212 = fmul float %1204, %1204, !dbg !48
  %1213 = fmul float %1184, %1212, !dbg !49
  %1214 = fmul float %1208, %1213, !dbg !50
  %1215 = fadd float %1211, %1214, !dbg !51
  %1216 = and i32 %641, 3, !dbg !52
  %1217 = icmp eq i32 %25, 0, !dbg !52
  %1218 = lshr exact i32 %23, 5, !dbg !52
  %1219 = or disjoint i32 %1218, %1216, !dbg !52
  %1220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1219, !dbg !52
  %1221 = bitcast float %1105 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1220, <1 x i32> %1221, i1 %1217) #5, !dbg !52
  %1222 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1219, !dbg !52
  %1223 = bitcast float %1110 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1222, <1 x i32> %1223, i1 %1217) #5, !dbg !52
  %1224 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1219, !dbg !52
  %1225 = bitcast float %1100 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1224, <1 x i32> %1225, i1 %1217) #5, !dbg !52
  %1226 = shl nuw nsw i32 %24, 2, !dbg !52
  %1227 = or disjoint i32 %1226, %1216, !dbg !52
  %1228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1227, !dbg !52
  %1229 = bitcast float %1210 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1228, <1 x i32> %1229, i1 %1217) #5, !dbg !52
  %1230 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1227, !dbg !52
  %1231 = bitcast float %1215 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1230, <1 x i32> %1231, i1 %1217) #5, !dbg !52
  %1232 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1227, !dbg !52
  %1233 = bitcast float %1205 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1232, <1 x i32> %1233, i1 %1217) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %1234 = icmp slt i32 %22, 16, !dbg !52
  %1235 = getelementptr float, ptr addrspace(3) @global_smem, i32 %22, !dbg !52
  %1236 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1235, i1 %1234) #5, !dbg !52
  %1237 = bitcast i32 %1236 to float, !dbg !52
  %1238 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %22, !dbg !52
  %1239 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1238, i1 %1234) #5, !dbg !52
  %1240 = bitcast i32 %1239 to float, !dbg !52
  %1241 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %22, !dbg !52
  %1242 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1241, i1 %1234) #5, !dbg !52
  %1243 = bitcast i32 %1242 to float, !dbg !52
  %1244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1236, i32 2, i32 31), !dbg !52
  %1245 = bitcast i32 %1244 to float, !dbg !52
  %1246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1239, i32 2, i32 31), !dbg !52
  %1247 = bitcast i32 %1246 to float, !dbg !52
  %1248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1242, i32 2, i32 31), !dbg !52
  %1249 = bitcast i32 %1248 to float, !dbg !52
  %1250 = fsub float %1245, %1237, !dbg !38
  %1251 = fadd float %1243, %1249, !dbg !41
  %1252 = fcmp oeq float %1251, 0.000000e+00, !dbg !42
  %1253 = tail call float @llvm.nvvm.div.full(float %1249, float %1251), !dbg !43
  %1254 = select i1 %1252, float 0.000000e+00, float %1253, !dbg !44
  %1255 = fmul float %1250, %1254, !dbg !45
  %1256 = fadd float %1255, %1237, !dbg !46
  %1257 = fadd float %1240, %1247, !dbg !47
  %1258 = fmul float %1250, %1250, !dbg !48
  %1259 = fmul float %1258, %1243, !dbg !49
  %1260 = fmul float %1259, %1254, !dbg !50
  %1261 = fadd float %1257, %1260, !dbg !51
  %1262 = bitcast float %1256 to i32, !dbg !52
  %1263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1262, i32 1, i32 31), !dbg !52
  %1264 = bitcast i32 %1263 to float, !dbg !52
  %1265 = bitcast float %1261 to i32, !dbg !52
  %1266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1265, i32 1, i32 31), !dbg !52
  %1267 = bitcast i32 %1266 to float, !dbg !52
  %1268 = bitcast float %1251 to i32, !dbg !52
  %1269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1268, i32 1, i32 31), !dbg !52
  %1270 = bitcast i32 %1269 to float, !dbg !52
  %1271 = fsub float %1264, %1256, !dbg !38
  %1272 = fadd float %1251, %1270, !dbg !41
  %1273 = fcmp oeq float %1272, 0.000000e+00, !dbg !42
  %1274 = tail call float @llvm.nvvm.div.full(float %1270, float %1272), !dbg !43
  %1275 = select i1 %1273, float 0.000000e+00, float %1274, !dbg !44
  %1276 = fmul float %1271, %1275, !dbg !45
  %1277 = fadd float %1256, %1276, !dbg !46
  %1278 = fadd float %1261, %1267, !dbg !47
  %1279 = fmul float %1271, %1271, !dbg !48
  %1280 = fmul float %1251, %1279, !dbg !49
  %1281 = fmul float %1275, %1280, !dbg !50
  %1282 = fadd float %1278, %1281, !dbg !51
  %1283 = icmp eq i32 %642, 0, !dbg !52
  %1284 = and i1 %1234, %1283, !dbg !52
  %1285 = bitcast float %1277 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1235, <1 x i32> %1285, i1 %1284) #5, !dbg !52
  %1286 = bitcast float %1282 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1238, <1 x i32> %1286, i1 %1284) #5, !dbg !52
  %1287 = bitcast float %1272 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1241, <1 x i32> %1287, i1 %1284) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %1288 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1218, !dbg !52
  %1289 = load float, ptr addrspace(3) %1288, align 16, !dbg !52
  %1290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1226, !dbg !52
  %1291 = load float, ptr addrspace(3) %1290, align 16, !dbg !52
  %1292 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1218, !dbg !52
  %1293 = load float, ptr addrspace(3) %1292, align 16, !dbg !52
  %1294 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1226, !dbg !52
  %1295 = load float, ptr addrspace(3) %1294, align 16, !dbg !52
  %1296 = mul i32 %20, 12288, !dbg !53
  %1297 = or disjoint i32 %1296, 3072, !dbg !53
  %1298 = add i32 %1296, 6144, !dbg !53
  %1299 = add i32 %1296, 9216, !dbg !53
  %1300 = tail call float @llvm.nvvm.div.full(float %1293, float 3.072000e+03), !dbg !54
  %1301 = tail call float @llvm.nvvm.div.full(float %1295, float 3.072000e+03), !dbg !54
  %1302 = fadd float %1300, 0x3EB0C6F7A0000000, !dbg !55
  %1303 = fadd float %1301, 0x3EB0C6F7A0000000, !dbg !55
  %1304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %.not.i147 = icmp eq i32 %1319, 0, !dbg !56
  br i1 %.not.i147, label %1322, label %1320, !dbg !56

1320:                                             ; preds = %__nv_rsqrtf.exit
  %1321 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1302), !dbg !56
  br label %__nv_rsqrtf.exit149, !dbg !56

1322:                                             ; preds = %__nv_rsqrtf.exit
  %1323 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1302), !dbg !56
  br label %__nv_rsqrtf.exit149, !dbg !56

__nv_rsqrtf.exit149:                              ; preds = %1320, %1322
  %.0.i148 = phi float [ %1321, %1320 ], [ %1323, %1322 ], !dbg !56
  %1324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1332 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %1339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %.not.i195 = icmp eq i32 %1339, 0, !dbg !56
  br i1 %.not.i195, label %1342, label %1340, !dbg !56

1340:                                             ; preds = %__nv_rsqrtf.exit149
  %1341 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1303), !dbg !56
  br label %__nv_rsqrtf.exit197, !dbg !56

1342:                                             ; preds = %__nv_rsqrtf.exit149
  %1343 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1303), !dbg !56
  br label %__nv_rsqrtf.exit197, !dbg !56

__nv_rsqrtf.exit197:                              ; preds = %1340, %1342
  %.0.i196 = phi float [ %1341, %1340 ], [ %1343, %1342 ], !dbg !56
  %1344 = and i32 %31, 4080
  %1345 = lshr i32 %31, 9
  %1346 = and i32 %1345, 4
  %1347 = or disjoint i32 %1346, %1344
  %1348 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1347
  %1349 = or disjoint i32 %1344, 4
  %1350 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1346
  %1351 = getelementptr inbounds nuw float, ptr addrspace(3) %1350, i32 %1349
  %1352 = or disjoint i32 %1347, 8
  %1353 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1352
  %1354 = or disjoint i32 %1344, 12
  %1355 = getelementptr inbounds nuw float, ptr addrspace(3) %1350, i32 %1354
  %1356 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %35
  %1357 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %645
  %1358 = or disjoint i32 %35, 2048
  %gep = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %1358
  %1359 = or disjoint i32 %35, 2052
  %gep202 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %1359
  %1360 = zext nneg i32 %645 to i64, !dbg !57
  %1361 = zext nneg i32 %35 to i64, !dbg !57
  %1362 = sext i32 %1296 to i64, !dbg !57
  %1363 = getelementptr inbounds nuw i8, ptr addrspace(3) %1356, i32 8
  %1364 = getelementptr inbounds nuw i8, ptr addrspace(3) %1357, i32 8
  %1365 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep, i32 8
  br label %1366, !dbg !57

1366:                                             ; preds = %__nv_rsqrtf.exit197, %1366
  %1367 = phi i1 [ true, %__nv_rsqrtf.exit197 ], [ false, %1366 ]
  %indvars.iv362 = phi i64 [ 0, %__nv_rsqrtf.exit197 ], [ 2048, %1366 ]
  %1368 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit197 ], [ %1773, %1366 ]
  %1369 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit197 ], [ %1774, %1366 ]
  %1370 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit197 ], [ %1808, %1366 ]
  %1371 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit197 ], [ %1804, %1366 ]
  %1372 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit197 ], [ %1805, %1366 ]
  %1373 = phi <32 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit197 ], [ %1811, %1366 ]
  %1374 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit197 ], [ %1783, %1366 ]
  %1375 = phi <16 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit197 ], [ %1777, %1366 ]
  %1376 = or disjoint i64 %indvars.iv362, %1361, !dbg !58
  %1377 = or disjoint i64 %indvars.iv362, %1360, !dbg !58
  %1378 = or disjoint i64 %indvars.iv362, %38, !dbg !58
  %1379 = icmp samesign ult i64 %1376, 3072, !dbg !59
  %1380 = icmp samesign ult i64 %1378, 3072, !dbg !59
  %1381 = trunc nuw nsw i64 %1378 to i32, !dbg !60
  %1382 = add i32 %36, %1381, !dbg !60
  %1383 = trunc nuw nsw i64 %indvars.iv362 to i32, !dbg !60
  %1384 = or disjoint i32 %33, %1383, !dbg !60
  %1385 = add i32 %1384, %36, !dbg !60
  %1386 = add i32 %37, %1381, !dbg !60
  %1387 = add i32 %1384, %37, !dbg !60
  %1388 = or disjoint i64 %1376, %1362, !dbg !60
  %1389 = trunc nuw nsw i64 %1376 to i32, !dbg !60
  %1390 = add i32 %1297, %1389, !dbg !60
  %1391 = add i32 %1298, %1389, !dbg !60
  %1392 = add i32 %1299, %1389, !dbg !60
  %1393 = sext i32 %1382 to i64, !dbg !61
  %1394 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1393, !dbg !61
  %1395 = sext i32 %1385 to i64, !dbg !61
  %1396 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1395, !dbg !61
  %1397 = sext i32 %1386 to i64, !dbg !61
  %1398 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1397, !dbg !61
  %1399 = sext i32 %1387 to i64, !dbg !61
  %1400 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1399, !dbg !61
  %1401 = and i1 %30, %1379, !dbg !62
  %1402 = and i1 %28, %1380, !dbg !62
  %1403 = and i1 %29, %1380, !dbg !62
  %1404 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1394, i1 %1402) #5, !dbg !63
  %1405 = extractvalue { i32, i32, i32, i32 } %1404, 0, !dbg !63
  %1406 = bitcast i32 %1405 to <2 x bfloat>, !dbg !63
  %1407 = extractvalue { i32, i32, i32, i32 } %1404, 1, !dbg !63
  %1408 = bitcast i32 %1407 to <2 x bfloat>, !dbg !63
  %1409 = extractvalue { i32, i32, i32, i32 } %1404, 2, !dbg !63
  %1410 = bitcast i32 %1409 to <2 x bfloat>, !dbg !63
  %1411 = extractvalue { i32, i32, i32, i32 } %1404, 3, !dbg !63
  %1412 = bitcast i32 %1411 to <2 x bfloat>, !dbg !63
  %1413 = extractelement <2 x bfloat> %1406, i64 0, !dbg !63
  %1414 = extractelement <2 x bfloat> %1406, i64 1, !dbg !63
  %1415 = extractelement <2 x bfloat> %1408, i64 0, !dbg !63
  %1416 = extractelement <2 x bfloat> %1408, i64 1, !dbg !63
  %1417 = extractelement <2 x bfloat> %1410, i64 0, !dbg !63
  %1418 = extractelement <2 x bfloat> %1410, i64 1, !dbg !63
  %1419 = extractelement <2 x bfloat> %1412, i64 0, !dbg !63
  %1420 = extractelement <2 x bfloat> %1412, i64 1, !dbg !63
  %1421 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1396, i1 %1402) #5, !dbg !63
  %1422 = extractvalue { i32, i32, i32, i32 } %1421, 0, !dbg !63
  %1423 = bitcast i32 %1422 to <2 x bfloat>, !dbg !63
  %1424 = extractvalue { i32, i32, i32, i32 } %1421, 1, !dbg !63
  %1425 = bitcast i32 %1424 to <2 x bfloat>, !dbg !63
  %1426 = extractvalue { i32, i32, i32, i32 } %1421, 2, !dbg !63
  %1427 = bitcast i32 %1426 to <2 x bfloat>, !dbg !63
  %1428 = extractvalue { i32, i32, i32, i32 } %1421, 3, !dbg !63
  %1429 = bitcast i32 %1428 to <2 x bfloat>, !dbg !63
  %1430 = extractelement <2 x bfloat> %1423, i64 0, !dbg !63
  %1431 = extractelement <2 x bfloat> %1423, i64 1, !dbg !63
  %1432 = extractelement <2 x bfloat> %1425, i64 0, !dbg !63
  %1433 = extractelement <2 x bfloat> %1425, i64 1, !dbg !63
  %1434 = extractelement <2 x bfloat> %1427, i64 0, !dbg !63
  %1435 = extractelement <2 x bfloat> %1427, i64 1, !dbg !63
  %1436 = extractelement <2 x bfloat> %1429, i64 0, !dbg !63
  %1437 = extractelement <2 x bfloat> %1429, i64 1, !dbg !63
  %1438 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1398, i1 %1403) #5, !dbg !63
  %1439 = extractvalue { i32, i32, i32, i32 } %1438, 0, !dbg !63
  %1440 = bitcast i32 %1439 to <2 x bfloat>, !dbg !63
  %1441 = extractvalue { i32, i32, i32, i32 } %1438, 1, !dbg !63
  %1442 = bitcast i32 %1441 to <2 x bfloat>, !dbg !63
  %1443 = extractvalue { i32, i32, i32, i32 } %1438, 2, !dbg !63
  %1444 = bitcast i32 %1443 to <2 x bfloat>, !dbg !63
  %1445 = extractvalue { i32, i32, i32, i32 } %1438, 3, !dbg !63
  %1446 = bitcast i32 %1445 to <2 x bfloat>, !dbg !63
  %1447 = extractelement <2 x bfloat> %1440, i64 0, !dbg !63
  %1448 = extractelement <2 x bfloat> %1440, i64 1, !dbg !63
  %1449 = extractelement <2 x bfloat> %1442, i64 0, !dbg !63
  %1450 = extractelement <2 x bfloat> %1442, i64 1, !dbg !63
  %1451 = extractelement <2 x bfloat> %1444, i64 0, !dbg !63
  %1452 = extractelement <2 x bfloat> %1444, i64 1, !dbg !63
  %1453 = extractelement <2 x bfloat> %1446, i64 0, !dbg !63
  %1454 = extractelement <2 x bfloat> %1446, i64 1, !dbg !63
  %1455 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1400, i1 %1403) #5, !dbg !63
  %1456 = extractvalue { i32, i32, i32, i32 } %1455, 0, !dbg !63
  %1457 = bitcast i32 %1456 to <2 x bfloat>, !dbg !63
  %1458 = extractvalue { i32, i32, i32, i32 } %1455, 1, !dbg !63
  %1459 = bitcast i32 %1458 to <2 x bfloat>, !dbg !63
  %1460 = extractvalue { i32, i32, i32, i32 } %1455, 2, !dbg !63
  %1461 = bitcast i32 %1460 to <2 x bfloat>, !dbg !63
  %1462 = extractvalue { i32, i32, i32, i32 } %1455, 3, !dbg !63
  %1463 = bitcast i32 %1462 to <2 x bfloat>, !dbg !63
  %1464 = extractelement <2 x bfloat> %1457, i64 0, !dbg !63
  %1465 = extractelement <2 x bfloat> %1457, i64 1, !dbg !63
  %1466 = extractelement <2 x bfloat> %1459, i64 0, !dbg !63
  %1467 = extractelement <2 x bfloat> %1459, i64 1, !dbg !63
  %1468 = extractelement <2 x bfloat> %1461, i64 0, !dbg !63
  %1469 = extractelement <2 x bfloat> %1461, i64 1, !dbg !63
  %1470 = extractelement <2 x bfloat> %1463, i64 0, !dbg !63
  %1471 = extractelement <2 x bfloat> %1463, i64 1, !dbg !63
  %1472 = fpext bfloat %1413 to float, !dbg !64
  %1473 = fpext bfloat %1414 to float, !dbg !64
  %1474 = fpext bfloat %1415 to float, !dbg !64
  %1475 = fpext bfloat %1416 to float, !dbg !64
  %1476 = fpext bfloat %1417 to float, !dbg !64
  %1477 = fpext bfloat %1418 to float, !dbg !64
  %1478 = fpext bfloat %1419 to float, !dbg !64
  %1479 = fpext bfloat %1420 to float, !dbg !64
  %1480 = fpext bfloat %1430 to float, !dbg !64
  %1481 = fpext bfloat %1431 to float, !dbg !64
  %1482 = fpext bfloat %1432 to float, !dbg !64
  %1483 = fpext bfloat %1433 to float, !dbg !64
  %1484 = fpext bfloat %1434 to float, !dbg !64
  %1485 = fpext bfloat %1435 to float, !dbg !64
  %1486 = fpext bfloat %1436 to float, !dbg !64
  %1487 = fpext bfloat %1437 to float, !dbg !64
  %1488 = fpext bfloat %1447 to float, !dbg !64
  %1489 = fpext bfloat %1448 to float, !dbg !64
  %1490 = fpext bfloat %1449 to float, !dbg !64
  %1491 = fpext bfloat %1450 to float, !dbg !64
  %1492 = fpext bfloat %1451 to float, !dbg !64
  %1493 = fpext bfloat %1452 to float, !dbg !64
  %1494 = fpext bfloat %1453 to float, !dbg !64
  %1495 = fpext bfloat %1454 to float, !dbg !64
  %1496 = fpext bfloat %1464 to float, !dbg !64
  %1497 = fpext bfloat %1465 to float, !dbg !64
  %1498 = fpext bfloat %1466 to float, !dbg !64
  %1499 = fpext bfloat %1467 to float, !dbg !64
  %1500 = fpext bfloat %1468 to float, !dbg !64
  %1501 = fpext bfloat %1469 to float, !dbg !64
  %1502 = fpext bfloat %1470 to float, !dbg !64
  %1503 = fpext bfloat %1471 to float, !dbg !64
  %1504 = add nuw nsw i64 %1376, 3072, !dbg !65
  %1505 = getelementptr float, ptr addrspace(1) %1, i64 %1504, !dbg !66
  %1506 = getelementptr float, ptr addrspace(1) %1, i64 %1377, !dbg !66
  %1507 = getelementptr i8, ptr addrspace(1) %1506, i64 12288, !dbg !66
  %1508 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1505, i1 %1379) #5, !dbg !67
  %1509 = extractvalue { i32, i32, i32, i32 } %1508, 0, !dbg !67
  %1510 = extractvalue { i32, i32, i32, i32 } %1508, 1, !dbg !67
  %1511 = extractvalue { i32, i32, i32, i32 } %1508, 2, !dbg !67
  %1512 = extractvalue { i32, i32, i32, i32 } %1508, 3, !dbg !67
  %1513 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1507, i1 %1379) #5, !dbg !67
  %1514 = extractvalue { i32, i32, i32, i32 } %1513, 0, !dbg !67
  %1515 = extractvalue { i32, i32, i32, i32 } %1513, 1, !dbg !67
  %1516 = extractvalue { i32, i32, i32, i32 } %1513, 2, !dbg !67
  %1517 = extractvalue { i32, i32, i32, i32 } %1513, 3, !dbg !67
  %1518 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1504, !dbg !68
  %1519 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1518, i1 %1379) #5, !dbg !69
  %1520 = extractvalue { i32, i32, i32, i32 } %1519, 0, !dbg !69
  %1521 = bitcast i32 %1520 to <2 x bfloat>, !dbg !69
  %1522 = extractvalue { i32, i32, i32, i32 } %1519, 1, !dbg !69
  %1523 = bitcast i32 %1522 to <2 x bfloat>, !dbg !69
  %1524 = extractvalue { i32, i32, i32, i32 } %1519, 2, !dbg !69
  %1525 = bitcast i32 %1524 to <2 x bfloat>, !dbg !69
  %1526 = extractvalue { i32, i32, i32, i32 } %1519, 3, !dbg !69
  %1527 = bitcast i32 %1526 to <2 x bfloat>, !dbg !69
  %1528 = getelementptr float, ptr addrspace(1) %1, i64 %1376, !dbg !70
  %1529 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1528, i1 %1379) #5, !dbg !71
  %1530 = extractvalue { i32, i32, i32, i32 } %1529, 0, !dbg !71
  %1531 = extractvalue { i32, i32, i32, i32 } %1529, 1, !dbg !71
  %1532 = extractvalue { i32, i32, i32, i32 } %1529, 2, !dbg !71
  %1533 = extractvalue { i32, i32, i32, i32 } %1529, 3, !dbg !71
  %1534 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1506, i1 %1379) #5, !dbg !71
  %1535 = extractvalue { i32, i32, i32, i32 } %1534, 0, !dbg !71
  %1536 = extractvalue { i32, i32, i32, i32 } %1534, 1, !dbg !71
  %1537 = extractvalue { i32, i32, i32, i32 } %1534, 2, !dbg !71
  %1538 = extractvalue { i32, i32, i32, i32 } %1534, 3, !dbg !71
  %1539 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1376, !dbg !72
  %1540 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1539, i1 %1379) #5, !dbg !73
  %1541 = extractvalue { i32, i32, i32, i32 } %1540, 0, !dbg !73
  %1542 = bitcast i32 %1541 to <2 x bfloat>, !dbg !73
  %1543 = extractvalue { i32, i32, i32, i32 } %1540, 1, !dbg !73
  %1544 = bitcast i32 %1543 to <2 x bfloat>, !dbg !73
  %1545 = extractvalue { i32, i32, i32, i32 } %1540, 2, !dbg !73
  %1546 = bitcast i32 %1545 to <2 x bfloat>, !dbg !73
  %1547 = extractvalue { i32, i32, i32, i32 } %1540, 3, !dbg !73
  %1548 = bitcast i32 %1547 to <2 x bfloat>, !dbg !73
  %1549 = fsub float %1472, %1289, !dbg !74
  %1550 = fsub float %1473, %1289, !dbg !74
  %1551 = fsub float %1474, %1289, !dbg !74
  %1552 = fsub float %1475, %1289, !dbg !74
  %1553 = fsub float %1476, %1289, !dbg !74
  %1554 = fsub float %1477, %1289, !dbg !74
  %1555 = fsub float %1478, %1289, !dbg !74
  %1556 = fsub float %1479, %1289, !dbg !74
  %1557 = fsub float %1480, %1289, !dbg !74
  %1558 = fsub float %1481, %1289, !dbg !74
  %1559 = fsub float %1482, %1289, !dbg !74
  %1560 = fsub float %1483, %1289, !dbg !74
  %1561 = fsub float %1484, %1289, !dbg !74
  %1562 = fsub float %1485, %1289, !dbg !74
  %1563 = fsub float %1486, %1289, !dbg !74
  %1564 = fsub float %1487, %1289, !dbg !74
  %1565 = fsub float %1488, %1291, !dbg !74
  %1566 = fsub float %1489, %1291, !dbg !74
  %1567 = fsub float %1490, %1291, !dbg !74
  %1568 = fsub float %1491, %1291, !dbg !74
  %1569 = fsub float %1492, %1291, !dbg !74
  %1570 = fsub float %1493, %1291, !dbg !74
  %1571 = fsub float %1494, %1291, !dbg !74
  %1572 = fsub float %1495, %1291, !dbg !74
  %1573 = fsub float %1496, %1291, !dbg !74
  %1574 = fsub float %1497, %1291, !dbg !74
  %1575 = fsub float %1498, %1291, !dbg !74
  %1576 = fsub float %1499, %1291, !dbg !74
  %1577 = fsub float %1500, %1291, !dbg !74
  %1578 = fsub float %1501, %1291, !dbg !74
  %1579 = fsub float %1502, %1291, !dbg !74
  %1580 = fsub float %1503, %1291, !dbg !74
  %1581 = fmul float %.0.i148, %1549, !dbg !75
  %1582 = fmul float %.0.i148, %1550, !dbg !75
  %1583 = fmul float %.0.i148, %1551, !dbg !75
  %1584 = fmul float %.0.i148, %1552, !dbg !75
  %1585 = fmul float %.0.i148, %1553, !dbg !75
  %1586 = fmul float %.0.i148, %1554, !dbg !75
  %1587 = fmul float %.0.i148, %1555, !dbg !75
  %1588 = fmul float %.0.i148, %1556, !dbg !75
  %1589 = fmul float %.0.i148, %1557, !dbg !75
  %1590 = fmul float %.0.i148, %1558, !dbg !75
  %1591 = fmul float %.0.i148, %1559, !dbg !75
  %1592 = fmul float %.0.i148, %1560, !dbg !75
  %1593 = fmul float %.0.i148, %1561, !dbg !75
  %1594 = fmul float %.0.i148, %1562, !dbg !75
  %1595 = fmul float %.0.i148, %1563, !dbg !75
  %1596 = fmul float %.0.i148, %1564, !dbg !75
  %1597 = fmul float %.0.i196, %1565, !dbg !75
  %1598 = fmul float %.0.i196, %1566, !dbg !75
  %1599 = fmul float %.0.i196, %1567, !dbg !75
  %1600 = fmul float %.0.i196, %1568, !dbg !75
  %1601 = fmul float %.0.i196, %1569, !dbg !75
  %1602 = fmul float %.0.i196, %1570, !dbg !75
  %1603 = fmul float %.0.i196, %1571, !dbg !75
  %1604 = fmul float %.0.i196, %1572, !dbg !75
  %1605 = fmul float %.0.i196, %1573, !dbg !75
  %1606 = fmul float %.0.i196, %1574, !dbg !75
  %1607 = fmul float %.0.i196, %1575, !dbg !75
  %1608 = fmul float %.0.i196, %1576, !dbg !75
  %1609 = fmul float %.0.i196, %1577, !dbg !75
  %1610 = fmul float %.0.i196, %1578, !dbg !75
  %1611 = fmul float %.0.i196, %1579, !dbg !75
  %1612 = fmul float %.0.i196, %1580, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1613 = bitcast float %1581 to i32, !dbg !75
  %1614 = bitcast float %1582 to i32, !dbg !75
  %1615 = bitcast float %1583 to i32, !dbg !75
  %1616 = bitcast float %1584 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1348, i32 %1613, i32 %1614, i32 %1615, i32 %1616, i1 true) #5, !dbg !75
  %1617 = bitcast float %1585 to i32, !dbg !75
  %1618 = bitcast float %1586 to i32, !dbg !75
  %1619 = bitcast float %1587 to i32, !dbg !75
  %1620 = bitcast float %1588 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1351, i32 %1617, i32 %1618, i32 %1619, i32 %1620, i1 true) #5, !dbg !75
  %1621 = bitcast float %1589 to i32, !dbg !75
  %1622 = bitcast float %1590 to i32, !dbg !75
  %1623 = bitcast float %1591 to i32, !dbg !75
  %1624 = bitcast float %1592 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1353, i32 %1621, i32 %1622, i32 %1623, i32 %1624, i1 true) #5, !dbg !75
  %1625 = bitcast float %1593 to i32, !dbg !75
  %1626 = bitcast float %1594 to i32, !dbg !75
  %1627 = bitcast float %1595 to i32, !dbg !75
  %1628 = bitcast float %1596 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1355, i32 %1625, i32 %1626, i32 %1627, i32 %1628, i1 true) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1629 = bitcast float %1597 to i32, !dbg !75
  %1630 = bitcast float %1598 to i32, !dbg !75
  %1631 = bitcast float %1599 to i32, !dbg !75
  %1632 = bitcast float %1600 to i32, !dbg !75
  %1633 = bitcast float %1601 to i32, !dbg !75
  %1634 = bitcast float %1602 to i32, !dbg !75
  %1635 = bitcast float %1603 to i32, !dbg !75
  %1636 = bitcast float %1604 to i32, !dbg !75
  %1637 = bitcast float %1605 to i32, !dbg !75
  %1638 = bitcast float %1606 to i32, !dbg !75
  %1639 = bitcast float %1607 to i32, !dbg !75
  %1640 = bitcast float %1608 to i32, !dbg !75
  %1641 = bitcast float %1609 to i32, !dbg !75
  %1642 = bitcast float %1610 to i32, !dbg !75
  %1643 = bitcast float %1611 to i32, !dbg !75
  %1644 = bitcast float %1612 to i32, !dbg !75
  %1645 = fcmp uno <32 x float> %1373, zeroinitializer, !dbg !76
  %1646 = fcmp uno <4 x float> %1374, zeroinitializer, !dbg !78
  %1647 = fcmp uno float %1368, 0.000000e+00, !dbg !78
  %1648 = fcmp uno float %1369, 0.000000e+00, !dbg !78
  %1649 = fcmp uno <16 x float> %1375, zeroinitializer, !dbg !78
  %1650 = fcmp uno <4 x float> %1372, zeroinitializer, !dbg !76
  %1651 = fcmp uno <4 x float> %1371, zeroinitializer, !dbg !76
  %1652 = fcmp uno <2 x float> %1370, zeroinitializer, !dbg !76
  %1653 = insertelement <2 x i32> poison, i32 %1509, i64 0, !dbg !67
  %1654 = insertelement <2 x i32> %1653, i32 %1510, i64 1, !dbg !67
  %1655 = bitcast <2 x i32> %1654 to <2 x float>, !dbg !67
  %1656 = fpext <2 x bfloat> %1521 to <2 x float>, !dbg !80
  %1657 = insertelement <2 x i32> poison, i32 %1530, i64 0, !dbg !71
  %1658 = insertelement <2 x i32> %1657, i32 %1531, i64 1, !dbg !71
  %1659 = bitcast <2 x i32> %1658 to <2 x float>, !dbg !71
  %1660 = fpext <2 x bfloat> %1542 to <2 x float>, !dbg !81
  %1661 = fadd <2 x float> %1655, %1656, !dbg !82
  %1662 = fadd <2 x float> %1661, splat (float 1.000000e+00), !dbg !83
  %1663 = shufflevector <2 x float> %1662, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !84
  %1664 = fadd <2 x float> %1659, %1660, !dbg !85
  %1665 = shufflevector <2 x float> %1664, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !86
  %1666 = insertelement <4 x i32> poison, i32 %1511, i64 0, !dbg !67
  %1667 = insertelement <4 x i32> %1666, i32 %1512, i64 1, !dbg !67
  %1668 = insertelement <4 x i32> %1667, i32 %1514, i64 2, !dbg !67
  %1669 = insertelement <4 x i32> %1668, i32 %1515, i64 3, !dbg !67
  %1670 = bitcast <4 x i32> %1669 to <4 x float>, !dbg !67
  %1671 = insertelement <2 x i32> poison, i32 %1516, i64 0, !dbg !67
  %1672 = insertelement <2 x i32> %1671, i32 %1517, i64 1, !dbg !67
  %1673 = bitcast <2 x i32> %1672 to <2 x float>, !dbg !67
  %1674 = shufflevector <2 x bfloat> %1523, <2 x bfloat> %1525, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !80
  %1675 = fpext <4 x bfloat> %1674 to <4 x float>, !dbg !80
  %1676 = fpext <2 x bfloat> %1527 to <2 x float>, !dbg !80
  %1677 = insertelement <4 x i32> poison, i32 %1532, i64 0, !dbg !71
  %1678 = insertelement <4 x i32> %1677, i32 %1533, i64 1, !dbg !71
  %1679 = insertelement <4 x i32> %1678, i32 %1535, i64 2, !dbg !71
  %1680 = insertelement <4 x i32> %1679, i32 %1536, i64 3, !dbg !71
  %1681 = bitcast <4 x i32> %1680 to <4 x float>, !dbg !71
  %1682 = insertelement <2 x i32> poison, i32 %1537, i64 0, !dbg !71
  %1683 = insertelement <2 x i32> %1682, i32 %1538, i64 1, !dbg !71
  %1684 = bitcast <2 x i32> %1683 to <2 x float>, !dbg !71
  %1685 = shufflevector <2 x bfloat> %1544, <2 x bfloat> %1546, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !81
  %1686 = fpext <4 x bfloat> %1685 to <4 x float>, !dbg !81
  %1687 = fpext <2 x bfloat> %1548 to <2 x float>, !dbg !81
  %1688 = load <8 x float>, ptr addrspace(3) %1356, align 16, !dbg !75
  %1689 = load <2 x float>, ptr addrspace(3) %1365, align 8, !dbg !75
  %1690 = load <4 x float>, ptr addrspace(3) %gep202, align 16, !dbg !75
  %1691 = fadd <4 x float> %1670, %1675, !dbg !82
  %1692 = fadd <2 x float> %1673, %1676, !dbg !82
  %1693 = fadd <4 x float> %1691, splat (float 1.000000e+00), !dbg !83
  %1694 = fadd <2 x float> %1692, splat (float 1.000000e+00), !dbg !83
  %1695 = fadd <4 x float> %1681, %1686, !dbg !85
  %1696 = fadd <2 x float> %1684, %1687, !dbg !85
  %1697 = shufflevector <2 x float> %1662, <2 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !84
  %1698 = shufflevector <4 x float> %1693, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1699 = shufflevector <8 x float> %1698, <8 x float> %1697, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 14, i32 15>, !dbg !84
  %1700 = shufflevector <2 x float> %1694, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1701 = shufflevector <8 x float> %1699, <8 x float> %1700, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 6, i32 7>, !dbg !84
  %1702 = shufflevector <8 x float> %1701, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>, !dbg !84
  %1703 = shufflevector <8 x float> %1688, <8 x float> poison, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1704 = shufflevector <8 x float> %1688, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1705 = shufflevector <32 x float> %1703, <32 x float> %1704, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39>, !dbg !84
  %1706 = shufflevector <4 x float> %1690, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1707 = shufflevector <32 x float> %1705, <32 x float> %1706, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 poison, i32 poison, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !84
  %1708 = shufflevector <2 x float> %1664, <2 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !86
  %1709 = shufflevector <4 x float> %1695, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1710 = shufflevector <8 x float> %1709, <8 x float> %1708, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 14, i32 15>, !dbg !86
  %1711 = shufflevector <2 x float> %1696, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1712 = shufflevector <8 x float> %1710, <8 x float> %1711, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 6, i32 7>, !dbg !86
  %1713 = shufflevector <8 x float> %1712, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5>, !dbg !86
  %1714 = load <2 x float>, ptr addrspace(3) %gep, align 16, !dbg !75
  %1715 = shufflevector <2 x float> %1714, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1348, i32 %1629, i32 %1630, i32 %1631, i32 %1632, i1 true) #5, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1351, i32 %1633, i32 %1634, i32 %1635, i32 %1636, i1 true) #5, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1353, i32 %1637, i32 %1638, i32 %1639, i32 %1640, i1 true) #5, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1355, i32 %1641, i32 %1642, i32 %1643, i32 %1644, i1 true) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1716 = load <2 x float>, ptr addrspace(3) %1356, align 16, !dbg !75
  %1717 = shufflevector <2 x float> %1716, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !75
  %1718 = shufflevector <2 x float> %1717, <2 x float> %1715, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %1719 = fmul <4 x float> %1663, %1718, !dbg !84
  %1720 = fadd <4 x float> %1665, %1719, !dbg !86
  %1721 = fcmp olt <4 x float> %1374, %1720, !dbg !87
  %1722 = or <4 x i1> %1646, %1721, !dbg !88
  %1723 = select <4 x i1> %1722, <4 x float> %1374, <4 x float> %1720, !dbg !89
  %1724 = load <4 x float>, ptr addrspace(3) %1363, align 8, !dbg !75
  %1725 = load <2 x float>, ptr addrspace(3) %1364, align 8, !dbg !75
  %1726 = load <2 x float>, ptr addrspace(3) %1365, align 8, !dbg !75
  %1727 = load <4 x float>, ptr addrspace(3) %gep202, align 16, !dbg !75
  %1728 = shufflevector <4 x float> %1724, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1729 = shufflevector <32 x float> %1707, <32 x float> %1728, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !84
  %1730 = shufflevector <4 x float> %1727, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1731 = shufflevector <32 x float> %1729, <32 x float> %1730, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 32, i32 33, i32 34, i32 35, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !84
  %1732 = shufflevector <2 x float> %1689, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1733 = shufflevector <32 x float> %1731, <32 x float> %1732, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 32, i32 33, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !84
  %1734 = shufflevector <2 x float> %1725, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1735 = shufflevector <32 x float> %1733, <32 x float> %1734, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 poison, i32 poison, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !84
  %1736 = shufflevector <2 x float> %1726, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1737 = shufflevector <32 x float> %1735, <32 x float> %1736, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 32, i32 33, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !84
  %1738 = fmul <32 x float> %1702, %1737, !dbg !84
  %1739 = fadd <32 x float> %1713, %1738, !dbg !86
  %1740 = extractelement <32 x float> %1739, i64 6, !dbg !90
  %1741 = fcmp olt float %1368, %1740, !dbg !87
  %1742 = extractelement <32 x float> %1739, i64 7, !dbg !90
  %1743 = fcmp olt float %1369, %1742, !dbg !87
  %1744 = extractelement <32 x float> %1739, i64 8, !dbg !90
  %1745 = extractelement <32 x float> %1739, i64 9, !dbg !90
  %1746 = extractelement <32 x float> %1739, i64 10, !dbg !90
  %1747 = extractelement <32 x float> %1739, i64 11, !dbg !90
  %1748 = extractelement <32 x float> %1739, i64 12, !dbg !90
  %1749 = extractelement <32 x float> %1739, i64 13, !dbg !90
  %1750 = extractelement <32 x float> %1739, i64 14, !dbg !90
  %1751 = extractelement <32 x float> %1739, i64 15, !dbg !90
  %1752 = extractelement <32 x float> %1739, i64 16, !dbg !90
  %1753 = extractelement <32 x float> %1739, i64 17, !dbg !90
  %1754 = extractelement <32 x float> %1739, i64 18, !dbg !90
  %1755 = extractelement <32 x float> %1739, i64 19, !dbg !90
  %1756 = extractelement <32 x float> %1739, i64 20, !dbg !90
  %1757 = extractelement <32 x float> %1739, i64 21, !dbg !90
  %1758 = extractelement <32 x float> %1739, i64 22, !dbg !90
  %1759 = extractelement <32 x float> %1739, i64 23, !dbg !90
  %1760 = or i1 %1647, %1741, !dbg !88
  %1761 = or i1 %1648, %1743, !dbg !88
  %1762 = select i1 %1760, float %1368, float %1740, !dbg !89
  %1763 = select i1 %1761, float %1369, float %1742, !dbg !89
  %1764 = shufflevector <32 x float> %1739, <32 x float> poison, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !87
  %1765 = fcmp olt <16 x float> %1375, %1764, !dbg !87
  %1766 = or <16 x i1> %1649, %1765, !dbg !88
  %1767 = select <16 x i1> %1766, <16 x float> %1375, <16 x float> %1764, !dbg !89
  %1768 = fcmp ogt <32 x float> %1373, %1739, !dbg !91
  %1769 = fcmp olt <32 x float> %1373, %1739, !dbg !91
  %1770 = shufflevector <32 x i1> %1768, <32 x i1> %1769, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>, !dbg !91
  %1771 = or <32 x i1> %1645, %1770, !dbg !92
  %1772 = select <32 x i1> %1771, <32 x float> %1373, <32 x float> %1739, !dbg !93
  %1773 = select i1 %1401, float %1762, float %1368, !dbg !94
  %1774 = select i1 %1401, float %1763, float %1369, !dbg !94
  %1775 = insertelement <16 x i1> poison, i1 %1401, i64 0, !dbg !94
  %1776 = shufflevector <16 x i1> %1775, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !94
  %1777 = select <16 x i1> %1776, <16 x float> %1767, <16 x float> %1375, !dbg !94
  %1778 = load <2 x float>, ptr addrspace(3) %gep, align 16, !dbg !75
  %1779 = fmul <2 x float> %1662, %1778, !dbg !84
  %1780 = fadd <2 x float> %1664, %1779, !dbg !86
  %1781 = insertelement <4 x i1> poison, i1 %1401, i64 0, !dbg !94
  %1782 = shufflevector <4 x i1> %1781, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !94
  %1783 = select <4 x i1> %1782, <4 x float> %1723, <4 x float> %1374, !dbg !94
  %1784 = fcmp ogt <2 x float> %1370, %1780, !dbg !91
  %1785 = or <2 x i1> %1652, %1784, !dbg !92
  %1786 = shufflevector <2 x float> %1780, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 0>, !dbg !91
  %1787 = shufflevector <4 x float> %1786, <4 x float> %1720, <4 x i32> <i32 4, i32 6, i32 poison, i32 3>, !dbg !91
  %1788 = shufflevector <32 x float> %1739, <32 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 25, i32 poison>, !dbg !91
  %1789 = shufflevector <4 x float> %1787, <4 x float> %1788, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !91
  %1790 = fcmp ogt <4 x float> %1372, %1789, !dbg !91
  %1791 = fcmp olt <4 x float> %1372, %1789, !dbg !91
  %1792 = shufflevector <4 x i1> %1790, <4 x i1> %1791, <4 x i32> <i32 0, i32 1, i32 2, i32 7>, !dbg !91
  %1793 = or <4 x i1> %1650, %1792, !dbg !92
  %1794 = select <4 x i1> %1793, <4 x float> %1372, <4 x float> %1789, !dbg !93
  %1795 = shufflevector <4 x float> %1786, <4 x float> %1720, <4 x i32> <i32 5, i32 7, i32 poison, i32 1>, !dbg !91
  %1796 = shufflevector <32 x float> %1739, <32 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 24, i32 poison>, !dbg !91
  %1797 = shufflevector <4 x float> %1795, <4 x float> %1796, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !91
  %1798 = fcmp ogt <4 x float> %1371, %1797, !dbg !91
  %1799 = fcmp olt <4 x float> %1371, %1797, !dbg !91
  %1800 = shufflevector <4 x i1> %1798, <4 x i1> %1799, <4 x i32> <i32 0, i32 1, i32 2, i32 7>, !dbg !91
  %1801 = or <4 x i1> %1651, %1800, !dbg !92
  %1802 = select <4 x i1> %1801, <4 x float> %1371, <4 x float> %1797, !dbg !93
  %1803 = select <2 x i1> %1785, <2 x float> %1370, <2 x float> %1780, !dbg !93
  %1804 = select <4 x i1> %1782, <4 x float> %1802, <4 x float> %1371, !dbg !95
  %1805 = select <4 x i1> %1782, <4 x float> %1794, <4 x float> %1372, !dbg !95
  %1806 = insertelement <2 x i1> poison, i1 %1401, i64 0, !dbg !95
  %1807 = shufflevector <2 x i1> %1806, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !95
  %1808 = select <2 x i1> %1807, <2 x float> %1803, <2 x float> %1370, !dbg !95
  %1809 = insertelement <32 x i1> poison, i1 %1401, i64 0, !dbg !95
  %1810 = shufflevector <32 x i1> %1809, <32 x i1> poison, <32 x i32> zeroinitializer, !dbg !95
  %1811 = select <32 x i1> %1810, <32 x float> %1772, <32 x float> %1373, !dbg !95
  %1812 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1388, !dbg !96
  %1813 = sext i32 %1390 to i64, !dbg !96
  %1814 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1813, !dbg !96
  %1815 = sext i32 %1391 to i64, !dbg !96
  %1816 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1815, !dbg !96
  %1817 = sext i32 %1392 to i64, !dbg !96
  %1818 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1817, !dbg !96
  %1819 = extractelement <32 x float> %1739, i64 24, !dbg !90
  %1820 = fptrunc float %1819 to bfloat, !dbg !90
  %1821 = extractelement <32 x float> %1739, i64 25, !dbg !90
  %1822 = fptrunc float %1821 to bfloat, !dbg !90
  %1823 = extractelement <32 x float> %1739, i64 0, !dbg !90
  %1824 = fptrunc float %1823 to bfloat, !dbg !90
  %1825 = extractelement <32 x float> %1739, i64 1, !dbg !90
  %1826 = fptrunc float %1825 to bfloat, !dbg !90
  %1827 = extractelement <32 x float> %1739, i64 2, !dbg !90
  %1828 = fptrunc float %1827 to bfloat, !dbg !90
  %1829 = extractelement <32 x float> %1739, i64 3, !dbg !90
  %1830 = fptrunc float %1829 to bfloat, !dbg !90
  %1831 = extractelement <32 x float> %1739, i64 4, !dbg !90
  %1832 = fptrunc float %1831 to bfloat, !dbg !90
  %1833 = extractelement <32 x float> %1739, i64 5, !dbg !90
  %1834 = fptrunc float %1833 to bfloat, !dbg !90
  %1835 = extractelement <4 x float> %1720, i64 3, !dbg !90
  %1836 = fptrunc float %1835 to bfloat, !dbg !90
  %1837 = extractelement <4 x float> %1720, i64 2, !dbg !90
  %1838 = fptrunc float %1837 to bfloat, !dbg !90
  %1839 = fptrunc float %1740 to bfloat, !dbg !90
  %1840 = fptrunc float %1742 to bfloat, !dbg !90
  %1841 = fptrunc float %1744 to bfloat, !dbg !90
  %1842 = fptrunc float %1745 to bfloat, !dbg !90
  %1843 = fptrunc float %1746 to bfloat, !dbg !90
  %1844 = fptrunc float %1747 to bfloat, !dbg !90
  %1845 = extractelement <4 x float> %1720, i64 1, !dbg !90
  %1846 = fptrunc float %1845 to bfloat, !dbg !90
  %1847 = extractelement <4 x float> %1720, i64 0, !dbg !90
  %1848 = fptrunc float %1847 to bfloat, !dbg !90
  %1849 = fptrunc float %1748 to bfloat, !dbg !90
  %1850 = fptrunc float %1749 to bfloat, !dbg !90
  %1851 = fptrunc float %1750 to bfloat, !dbg !90
  %1852 = fptrunc float %1751 to bfloat, !dbg !90
  %1853 = fptrunc float %1752 to bfloat, !dbg !90
  %1854 = fptrunc float %1753 to bfloat, !dbg !90
  %1855 = fptrunc <2 x float> %1780 to <2 x bfloat>, !dbg !90
  %1856 = fptrunc float %1754 to bfloat, !dbg !90
  %1857 = fptrunc float %1755 to bfloat, !dbg !90
  %1858 = fptrunc float %1756 to bfloat, !dbg !90
  %1859 = fptrunc float %1757 to bfloat, !dbg !90
  %1860 = fptrunc float %1758 to bfloat, !dbg !90
  %1861 = fptrunc float %1759 to bfloat, !dbg !90
  %1862 = insertelement <2 x bfloat> poison, bfloat %1820, i64 0, !dbg !90
  %1863 = insertelement <2 x bfloat> %1862, bfloat %1822, i64 1, !dbg !90
  %1864 = bitcast <2 x bfloat> %1863 to i32, !dbg !90
  %1865 = insertelement <2 x bfloat> poison, bfloat %1824, i64 0, !dbg !90
  %1866 = insertelement <2 x bfloat> %1865, bfloat %1826, i64 1, !dbg !90
  %1867 = bitcast <2 x bfloat> %1866 to i32, !dbg !90
  %1868 = insertelement <2 x bfloat> poison, bfloat %1828, i64 0, !dbg !90
  %1869 = insertelement <2 x bfloat> %1868, bfloat %1830, i64 1, !dbg !90
  %1870 = bitcast <2 x bfloat> %1869 to i32, !dbg !90
  %1871 = insertelement <2 x bfloat> poison, bfloat %1832, i64 0, !dbg !90
  %1872 = insertelement <2 x bfloat> %1871, bfloat %1834, i64 1, !dbg !90
  %1873 = bitcast <2 x bfloat> %1872 to i32, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1864, i32 %1867, i32 %1870, i32 %1873, ptr addrspace(1) %1812, i1 %1401) #5, !dbg !90
  %1874 = insertelement <2 x bfloat> poison, bfloat %1836, i64 0, !dbg !90
  %1875 = insertelement <2 x bfloat> %1874, bfloat %1838, i64 1, !dbg !90
  %1876 = bitcast <2 x bfloat> %1875 to i32, !dbg !90
  %1877 = insertelement <2 x bfloat> poison, bfloat %1839, i64 0, !dbg !90
  %1878 = insertelement <2 x bfloat> %1877, bfloat %1840, i64 1, !dbg !90
  %1879 = bitcast <2 x bfloat> %1878 to i32, !dbg !90
  %1880 = insertelement <2 x bfloat> poison, bfloat %1841, i64 0, !dbg !90
  %1881 = insertelement <2 x bfloat> %1880, bfloat %1842, i64 1, !dbg !90
  %1882 = bitcast <2 x bfloat> %1881 to i32, !dbg !90
  %1883 = insertelement <2 x bfloat> poison, bfloat %1843, i64 0, !dbg !90
  %1884 = insertelement <2 x bfloat> %1883, bfloat %1844, i64 1, !dbg !90
  %1885 = bitcast <2 x bfloat> %1884 to i32, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1876, i32 %1879, i32 %1882, i32 %1885, ptr addrspace(1) %1814, i1 %1401) #5, !dbg !90
  %1886 = insertelement <2 x bfloat> poison, bfloat %1846, i64 0, !dbg !90
  %1887 = insertelement <2 x bfloat> %1886, bfloat %1848, i64 1, !dbg !90
  %1888 = bitcast <2 x bfloat> %1887 to i32, !dbg !90
  %1889 = insertelement <2 x bfloat> poison, bfloat %1849, i64 0, !dbg !90
  %1890 = insertelement <2 x bfloat> %1889, bfloat %1850, i64 1, !dbg !90
  %1891 = bitcast <2 x bfloat> %1890 to i32, !dbg !90
  %1892 = insertelement <2 x bfloat> poison, bfloat %1851, i64 0, !dbg !90
  %1893 = insertelement <2 x bfloat> %1892, bfloat %1852, i64 1, !dbg !90
  %1894 = bitcast <2 x bfloat> %1893 to i32, !dbg !90
  %1895 = insertelement <2 x bfloat> poison, bfloat %1853, i64 0, !dbg !90
  %1896 = insertelement <2 x bfloat> %1895, bfloat %1854, i64 1, !dbg !90
  %1897 = bitcast <2 x bfloat> %1896 to i32, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1888, i32 %1891, i32 %1894, i32 %1897, ptr addrspace(1) %1816, i1 %1401) #5, !dbg !90
  %1898 = bitcast <2 x bfloat> %1855 to i32, !dbg !90
  %1899 = insertelement <2 x bfloat> poison, bfloat %1856, i64 0, !dbg !90
  %1900 = insertelement <2 x bfloat> %1899, bfloat %1857, i64 1, !dbg !90
  %1901 = bitcast <2 x bfloat> %1900 to i32, !dbg !90
  %1902 = insertelement <2 x bfloat> poison, bfloat %1858, i64 0, !dbg !90
  %1903 = insertelement <2 x bfloat> %1902, bfloat %1859, i64 1, !dbg !90
  %1904 = bitcast <2 x bfloat> %1903 to i32, !dbg !90
  %1905 = insertelement <2 x bfloat> poison, bfloat %1860, i64 0, !dbg !90
  %1906 = insertelement <2 x bfloat> %1905, bfloat %1861, i64 1, !dbg !90
  %1907 = bitcast <2 x bfloat> %1906 to i32, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1898, i32 %1901, i32 %1904, i32 %1907, ptr addrspace(1) %1818, i1 %1401) #5, !dbg !90
  br i1 %1367, label %1366, label %1908, !dbg !57

1908:                                             ; preds = %1366
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %1909 = extractelement <32 x float> %1811, i64 24, !dbg !99
  %1910 = extractelement <32 x float> %1811, i64 25, !dbg !99
  %1911 = fcmp olt float %1909, %1910, !dbg !99
  %1912 = fcmp uno float %1909, 0.000000e+00, !dbg !100
  %1913 = or i1 %1911, %1912, !dbg !101
  %1914 = select i1 %1913, float %1909, float %1910, !dbg !102
  %1915 = extractelement <32 x float> %1811, i64 26, !dbg !99
  %1916 = fcmp olt float %1914, %1915, !dbg !99
  %1917 = fcmp uno float %1914, 0.000000e+00, !dbg !100
  %1918 = or i1 %1916, %1917, !dbg !101
  %1919 = select i1 %1918, float %1914, float %1915, !dbg !102
  %1920 = extractelement <32 x float> %1811, i64 27, !dbg !99
  %1921 = fcmp olt float %1919, %1920, !dbg !99
  %1922 = fcmp uno float %1919, 0.000000e+00, !dbg !100
  %1923 = or i1 %1921, %1922, !dbg !101
  %1924 = select i1 %1923, float %1919, float %1920, !dbg !102
  %1925 = extractelement <32 x float> %1811, i64 28, !dbg !99
  %1926 = fcmp olt float %1924, %1925, !dbg !99
  %1927 = fcmp uno float %1924, 0.000000e+00, !dbg !100
  %1928 = or i1 %1926, %1927, !dbg !101
  %1929 = select i1 %1928, float %1924, float %1925, !dbg !102
  %1930 = extractelement <32 x float> %1811, i64 29, !dbg !99
  %1931 = fcmp olt float %1929, %1930, !dbg !99
  %1932 = fcmp uno float %1929, 0.000000e+00, !dbg !100
  %1933 = or i1 %1931, %1932, !dbg !101
  %1934 = select i1 %1933, float %1929, float %1930, !dbg !102
  %1935 = extractelement <32 x float> %1811, i64 30, !dbg !99
  %1936 = fcmp olt float %1934, %1935, !dbg !99
  %1937 = fcmp uno float %1934, 0.000000e+00, !dbg !100
  %1938 = or i1 %1936, %1937, !dbg !101
  %1939 = select i1 %1938, float %1934, float %1935, !dbg !102
  %1940 = extractelement <32 x float> %1811, i64 31, !dbg !99
  %1941 = fcmp olt float %1939, %1940, !dbg !99
  %1942 = fcmp uno float %1939, 0.000000e+00, !dbg !100
  %1943 = or i1 %1941, %1942, !dbg !101
  %1944 = select i1 %1943, float %1939, float %1940, !dbg !102
  %1945 = extractelement <4 x float> %1783, i64 2, !dbg !99
  %1946 = extractelement <4 x float> %1783, i64 3, !dbg !99
  %1947 = fcmp olt float %1946, %1945, !dbg !99
  %1948 = fcmp uno float %1946, 0.000000e+00, !dbg !100
  %1949 = or i1 %1947, %1948, !dbg !101
  %1950 = select i1 %1949, float %1946, float %1945, !dbg !102
  %1951 = fcmp olt float %1950, %1773, !dbg !99
  %1952 = fcmp uno float %1950, 0.000000e+00, !dbg !100
  %1953 = or i1 %1951, %1952, !dbg !101
  %1954 = select i1 %1953, float %1950, float %1773, !dbg !102
  %1955 = fcmp olt float %1954, %1774, !dbg !99
  %1956 = fcmp uno float %1954, 0.000000e+00, !dbg !100
  %1957 = or i1 %1955, %1956, !dbg !101
  %1958 = select i1 %1957, float %1954, float %1774, !dbg !102
  %1959 = extractelement <16 x float> %1777, i64 0, !dbg !99
  %1960 = fcmp olt float %1958, %1959, !dbg !99
  %1961 = fcmp uno float %1958, 0.000000e+00, !dbg !100
  %1962 = or i1 %1960, %1961, !dbg !101
  %1963 = select i1 %1962, float %1958, float %1959, !dbg !102
  %1964 = extractelement <16 x float> %1777, i64 1, !dbg !99
  %1965 = fcmp olt float %1963, %1964, !dbg !99
  %1966 = fcmp uno float %1963, 0.000000e+00, !dbg !100
  %1967 = or i1 %1965, %1966, !dbg !101
  %1968 = select i1 %1967, float %1963, float %1964, !dbg !102
  %1969 = extractelement <16 x float> %1777, i64 2, !dbg !99
  %1970 = fcmp olt float %1968, %1969, !dbg !99
  %1971 = fcmp uno float %1968, 0.000000e+00, !dbg !100
  %1972 = or i1 %1970, %1971, !dbg !101
  %1973 = select i1 %1972, float %1968, float %1969, !dbg !102
  %1974 = extractelement <16 x float> %1777, i64 3, !dbg !99
  %1975 = fcmp olt float %1973, %1974, !dbg !99
  %1976 = fcmp uno float %1973, 0.000000e+00, !dbg !100
  %1977 = or i1 %1975, %1976, !dbg !101
  %1978 = select i1 %1977, float %1973, float %1974, !dbg !102
  %1979 = extractelement <4 x float> %1783, i64 0, !dbg !99
  %1980 = extractelement <4 x float> %1783, i64 1, !dbg !99
  %1981 = fcmp olt float %1980, %1979, !dbg !99
  %1982 = fcmp uno float %1980, 0.000000e+00, !dbg !100
  %1983 = or i1 %1981, %1982, !dbg !101
  %1984 = select i1 %1983, float %1980, float %1979, !dbg !102
  %1985 = extractelement <16 x float> %1777, i64 4, !dbg !99
  %1986 = fcmp olt float %1984, %1985, !dbg !99
  %1987 = fcmp uno float %1984, 0.000000e+00, !dbg !100
  %1988 = or i1 %1986, %1987, !dbg !101
  %1989 = select i1 %1988, float %1984, float %1985, !dbg !102
  %1990 = extractelement <16 x float> %1777, i64 5, !dbg !99
  %1991 = fcmp olt float %1989, %1990, !dbg !99
  %1992 = fcmp uno float %1989, 0.000000e+00, !dbg !100
  %1993 = or i1 %1991, %1992, !dbg !101
  %1994 = select i1 %1993, float %1989, float %1990, !dbg !102
  %1995 = extractelement <16 x float> %1777, i64 6, !dbg !99
  %1996 = fcmp olt float %1994, %1995, !dbg !99
  %1997 = fcmp uno float %1994, 0.000000e+00, !dbg !100
  %1998 = or i1 %1996, %1997, !dbg !101
  %1999 = select i1 %1998, float %1994, float %1995, !dbg !102
  %2000 = extractelement <16 x float> %1777, i64 7, !dbg !99
  %2001 = fcmp olt float %1999, %2000, !dbg !99
  %2002 = fcmp uno float %1999, 0.000000e+00, !dbg !100
  %2003 = or i1 %2001, %2002, !dbg !101
  %2004 = select i1 %2003, float %1999, float %2000, !dbg !102
  %2005 = extractelement <16 x float> %1777, i64 8, !dbg !99
  %2006 = fcmp olt float %2004, %2005, !dbg !99
  %2007 = fcmp uno float %2004, 0.000000e+00, !dbg !100
  %2008 = or i1 %2006, %2007, !dbg !101
  %2009 = select i1 %2008, float %2004, float %2005, !dbg !102
  %2010 = extractelement <16 x float> %1777, i64 9, !dbg !99
  %2011 = fcmp olt float %2009, %2010, !dbg !99
  %2012 = fcmp uno float %2009, 0.000000e+00, !dbg !100
  %2013 = or i1 %2011, %2012, !dbg !101
  %2014 = select i1 %2013, float %2009, float %2010, !dbg !102
  %2015 = fcmp ogt <4 x float> %1804, %1805, !dbg !103
  %2016 = extractelement <4 x float> %1805, i64 3, !dbg !100
  %2017 = fcmp uno float %2016, 0.000000e+00, !dbg !100
  %2018 = extractelement <4 x i1> %2015, i64 3, !dbg !101
  %2019 = or i1 %2018, %2017, !dbg !101
  %2020 = extractelement <4 x float> %1804, i64 3, !dbg !102
  %2021 = select i1 %2019, float %2016, float %2020, !dbg !102
  %2022 = extractelement <16 x float> %1777, i64 10, !dbg !99
  %2023 = fcmp olt float %2021, %2022, !dbg !99
  %2024 = fcmp uno float %2021, 0.000000e+00, !dbg !100
  %2025 = or i1 %2023, %2024, !dbg !101
  %2026 = select i1 %2025, float %2021, float %2022, !dbg !102
  %2027 = extractelement <16 x float> %1777, i64 11, !dbg !99
  %2028 = fcmp olt float %2026, %2027, !dbg !99
  %2029 = fcmp uno float %2026, 0.000000e+00, !dbg !100
  %2030 = or i1 %2028, %2029, !dbg !101
  %2031 = select i1 %2030, float %2026, float %2027, !dbg !102
  %2032 = extractelement <16 x float> %1777, i64 12, !dbg !99
  %2033 = fcmp olt float %2031, %2032, !dbg !99
  %2034 = fcmp uno float %2031, 0.000000e+00, !dbg !100
  %2035 = or i1 %2033, %2034, !dbg !101
  %2036 = select i1 %2035, float %2031, float %2032, !dbg !102
  %2037 = extractelement <16 x float> %1777, i64 13, !dbg !99
  %2038 = fcmp olt float %2036, %2037, !dbg !99
  %2039 = fcmp uno float %2036, 0.000000e+00, !dbg !100
  %2040 = or i1 %2038, %2039, !dbg !101
  %2041 = select i1 %2040, float %2036, float %2037, !dbg !102
  %2042 = extractelement <16 x float> %1777, i64 14, !dbg !99
  %2043 = fcmp olt float %2041, %2042, !dbg !99
  %2044 = fcmp uno float %2041, 0.000000e+00, !dbg !100
  %2045 = or i1 %2043, %2044, !dbg !101
  %2046 = select i1 %2045, float %2041, float %2042, !dbg !102
  %2047 = extractelement <16 x float> %1777, i64 15, !dbg !99
  %2048 = fcmp olt float %2046, %2047, !dbg !99
  %2049 = fcmp uno float %2046, 0.000000e+00, !dbg !100
  %2050 = or i1 %2048, %2049, !dbg !101
  %2051 = select i1 %2050, float %2046, float %2047, !dbg !102
  %2052 = bitcast float %1944 to i32, !dbg !97
  %2053 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2052, i32 16, i32 31), !dbg !97
  %2054 = bitcast i32 %2053 to float, !dbg !97
  %2055 = fcmp olt float %1944, %2054, !dbg !99
  %2056 = fcmp uno float %1944, 0.000000e+00, !dbg !100
  %2057 = or i1 %2056, %2055, !dbg !101
  %2058 = select i1 %2057, float %1944, float %2054, !dbg !102
  %2059 = bitcast float %2058 to i32, !dbg !97
  %2060 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2059, i32 8, i32 31), !dbg !97
  %2061 = bitcast i32 %2060 to float, !dbg !97
  %2062 = fcmp olt float %2058, %2061, !dbg !99
  %2063 = fcmp uno float %2058, 0.000000e+00, !dbg !100
  %2064 = or i1 %2062, %2063, !dbg !101
  %2065 = select i1 %2064, float %2058, float %2061, !dbg !102
  %2066 = bitcast float %2065 to i32, !dbg !97
  %2067 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2066, i32 4, i32 31), !dbg !97
  %2068 = bitcast i32 %2067 to float, !dbg !97
  %2069 = fcmp olt float %2065, %2068, !dbg !99
  %2070 = fcmp uno float %2065, 0.000000e+00, !dbg !100
  %2071 = or i1 %2069, %2070, !dbg !101
  %2072 = select i1 %2071, float %2065, float %2068, !dbg !102
  %2073 = bitcast float %2072 to i32, !dbg !97
  %2074 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2073, i32 2, i32 31), !dbg !97
  %2075 = bitcast i32 %2074 to float, !dbg !97
  %2076 = fcmp olt float %2072, %2075, !dbg !99
  %2077 = fcmp uno float %2072, 0.000000e+00, !dbg !100
  %2078 = or i1 %2076, %2077, !dbg !101
  %2079 = select i1 %2078, float %2072, float %2075, !dbg !102
  %2080 = bitcast float %2079 to i32, !dbg !97
  %2081 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2080, i32 1, i32 31), !dbg !97
  %2082 = bitcast i32 %2081 to float, !dbg !97
  %2083 = fcmp olt float %2079, %2082, !dbg !99
  %2084 = fcmp uno float %2079, 0.000000e+00, !dbg !100
  %2085 = or i1 %2083, %2084, !dbg !101
  %2086 = bitcast float %1978 to i32, !dbg !97
  %2087 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2086, i32 16, i32 31), !dbg !97
  %2088 = bitcast i32 %2087 to float, !dbg !97
  %2089 = fcmp olt float %1978, %2088, !dbg !99
  %2090 = fcmp uno float %1978, 0.000000e+00, !dbg !100
  %2091 = or i1 %2090, %2089, !dbg !101
  %2092 = select i1 %2091, float %1978, float %2088, !dbg !102
  %2093 = bitcast float %2092 to i32, !dbg !97
  %2094 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2093, i32 8, i32 31), !dbg !97
  %2095 = bitcast i32 %2094 to float, !dbg !97
  %2096 = fcmp olt float %2092, %2095, !dbg !99
  %2097 = fcmp uno float %2092, 0.000000e+00, !dbg !100
  %2098 = or i1 %2096, %2097, !dbg !101
  %2099 = select i1 %2098, float %2092, float %2095, !dbg !102
  %2100 = bitcast float %2099 to i32, !dbg !97
  %2101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2100, i32 4, i32 31), !dbg !97
  %2102 = bitcast i32 %2101 to float, !dbg !97
  %2103 = fcmp olt float %2099, %2102, !dbg !99
  %2104 = fcmp uno float %2099, 0.000000e+00, !dbg !100
  %2105 = or i1 %2103, %2104, !dbg !101
  %2106 = select i1 %2105, float %2099, float %2102, !dbg !102
  %2107 = bitcast float %2106 to i32, !dbg !97
  %2108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2107, i32 2, i32 31), !dbg !97
  %2109 = bitcast i32 %2108 to float, !dbg !97
  %2110 = fcmp olt float %2106, %2109, !dbg !99
  %2111 = fcmp uno float %2106, 0.000000e+00, !dbg !100
  %2112 = or i1 %2110, %2111, !dbg !101
  %2113 = select i1 %2112, float %2106, float %2109, !dbg !102
  %2114 = bitcast float %2113 to i32, !dbg !97
  %2115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2114, i32 1, i32 31), !dbg !97
  %2116 = bitcast i32 %2115 to float, !dbg !97
  %2117 = fcmp olt float %2113, %2116, !dbg !99
  %2118 = fcmp uno float %2113, 0.000000e+00, !dbg !100
  %2119 = or i1 %2117, %2118, !dbg !101
  %2120 = bitcast float %2014 to i32, !dbg !97
  %2121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2120, i32 16, i32 31), !dbg !97
  %2122 = bitcast i32 %2121 to float, !dbg !97
  %2123 = fcmp olt float %2014, %2122, !dbg !99
  %2124 = fcmp uno float %2014, 0.000000e+00, !dbg !100
  %2125 = or i1 %2124, %2123, !dbg !101
  %2126 = select i1 %2125, float %2014, float %2122, !dbg !102
  %2127 = bitcast float %2126 to i32, !dbg !97
  %2128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2127, i32 8, i32 31), !dbg !97
  %2129 = bitcast i32 %2128 to float, !dbg !97
  %2130 = fcmp olt float %2126, %2129, !dbg !99
  %2131 = fcmp uno float %2126, 0.000000e+00, !dbg !100
  %2132 = or i1 %2130, %2131, !dbg !101
  %2133 = select i1 %2132, float %2126, float %2129, !dbg !102
  %2134 = bitcast float %2133 to i32, !dbg !97
  %2135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2134, i32 4, i32 31), !dbg !97
  %2136 = bitcast i32 %2135 to float, !dbg !97
  %2137 = fcmp olt float %2133, %2136, !dbg !99
  %2138 = fcmp uno float %2133, 0.000000e+00, !dbg !100
  %2139 = or i1 %2137, %2138, !dbg !101
  %2140 = select i1 %2139, float %2133, float %2136, !dbg !102
  %2141 = bitcast float %2140 to i32, !dbg !97
  %2142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2141, i32 2, i32 31), !dbg !97
  %2143 = bitcast i32 %2142 to float, !dbg !97
  %2144 = fcmp olt float %2140, %2143, !dbg !99
  %2145 = fcmp uno float %2140, 0.000000e+00, !dbg !100
  %2146 = or i1 %2144, %2145, !dbg !101
  %2147 = select i1 %2146, float %2140, float %2143, !dbg !102
  %2148 = bitcast float %2147 to i32, !dbg !97
  %2149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2148, i32 1, i32 31), !dbg !97
  %2150 = bitcast i32 %2149 to float, !dbg !97
  %2151 = fcmp olt float %2147, %2150, !dbg !99
  %2152 = fcmp uno float %2147, 0.000000e+00, !dbg !100
  %2153 = or i1 %2151, %2152, !dbg !101
  %2154 = bitcast float %2051 to i32, !dbg !97
  %2155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2154, i32 16, i32 31), !dbg !97
  %2156 = bitcast i32 %2155 to float, !dbg !97
  %2157 = fcmp olt float %2051, %2156, !dbg !99
  %2158 = fcmp uno float %2051, 0.000000e+00, !dbg !100
  %2159 = or i1 %2158, %2157, !dbg !101
  %2160 = select i1 %2159, float %2051, float %2156, !dbg !102
  %2161 = bitcast float %2160 to i32, !dbg !97
  %2162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2161, i32 8, i32 31), !dbg !97
  %2163 = bitcast i32 %2162 to float, !dbg !97
  %2164 = fcmp olt float %2160, %2163, !dbg !99
  %2165 = fcmp uno float %2160, 0.000000e+00, !dbg !100
  %2166 = or i1 %2164, %2165, !dbg !101
  %2167 = select i1 %2166, float %2160, float %2163, !dbg !102
  %2168 = bitcast float %2167 to i32, !dbg !97
  %2169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2168, i32 4, i32 31), !dbg !97
  %2170 = bitcast i32 %2169 to float, !dbg !97
  %2171 = fcmp olt float %2167, %2170, !dbg !99
  %2172 = fcmp uno float %2167, 0.000000e+00, !dbg !100
  %2173 = or i1 %2171, %2172, !dbg !101
  %2174 = select i1 %2173, float %2167, float %2170, !dbg !102
  %2175 = bitcast float %2174 to i32, !dbg !97
  %2176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2175, i32 2, i32 31), !dbg !97
  %2177 = bitcast i32 %2176 to float, !dbg !97
  %2178 = fcmp olt float %2174, %2177, !dbg !99
  %2179 = fcmp uno float %2174, 0.000000e+00, !dbg !100
  %2180 = or i1 %2178, %2179, !dbg !101
  %2181 = select i1 %2180, float %2174, float %2177, !dbg !102
  %2182 = bitcast float %2181 to i32, !dbg !97
  %2183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2182, i32 1, i32 31), !dbg !97
  %2184 = bitcast i32 %2183 to float, !dbg !97
  %2185 = fcmp olt float %2181, %2184, !dbg !99
  %2186 = fcmp uno float %2181, 0.000000e+00, !dbg !100
  %2187 = or i1 %2185, %2186, !dbg !101
  %2188 = and i32 %641, 7, !dbg !97
  %2189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2188, !dbg !97
  %2190 = select i1 %2085, i32 %2080, i32 %2081, !dbg !102
  %2191 = insertelement <1 x i32> poison, i32 %2190, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2189, <1 x i32> %2191, i1 %1217) #5, !dbg !97
  %2192 = or disjoint i32 %2188, 8, !dbg !97
  %2193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2192, !dbg !97
  %2194 = select i1 %2119, i32 %2114, i32 %2115, !dbg !102
  %2195 = insertelement <1 x i32> poison, i32 %2194, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2193, <1 x i32> %2195, i1 %1217) #5, !dbg !97
  %2196 = or disjoint i32 %2188, 16, !dbg !97
  %2197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2196, !dbg !97
  %2198 = select i1 %2153, i32 %2148, i32 %2149, !dbg !102
  %2199 = insertelement <1 x i32> poison, i32 %2198, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2197, <1 x i32> %2199, i1 %1217) #5, !dbg !97
  %2200 = or disjoint i32 %2188, 24, !dbg !97
  %2201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %2200, !dbg !97
  %2202 = select i1 %2187, i32 %2182, i32 %2183, !dbg !102
  %2203 = insertelement <1 x i32> poison, i32 %2202, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2201, <1 x i32> %2203, i1 %1217) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %2204 = icmp slt i32 %22, 32, !dbg !97
  %2205 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1235, i1 %2204) #5, !dbg !97
  %2206 = bitcast i32 %2205 to float, !dbg !97
  %2207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2205, i32 4, i32 31), !dbg !97
  %2208 = bitcast i32 %2207 to float, !dbg !97
  %2209 = fcmp olt float %2206, %2208, !dbg !99
  %2210 = fcmp uno float %2206, 0.000000e+00, !dbg !100
  %2211 = or i1 %2210, %2209, !dbg !101
  %2212 = select i1 %2211, float %2206, float %2208, !dbg !102
  %2213 = bitcast float %2212 to i32, !dbg !97
  %2214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2213, i32 2, i32 31), !dbg !97
  %2215 = bitcast i32 %2214 to float, !dbg !97
  %2216 = fcmp olt float %2212, %2215, !dbg !99
  %2217 = fcmp uno float %2212, 0.000000e+00, !dbg !100
  %2218 = or i1 %2216, %2217, !dbg !101
  %2219 = select i1 %2218, float %2212, float %2215, !dbg !102
  %2220 = bitcast float %2219 to i32, !dbg !97
  %2221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2220, i32 1, i32 31), !dbg !97
  %2222 = bitcast i32 %2221 to float, !dbg !97
  %2223 = fcmp olt float %2219, %2222, !dbg !99
  %2224 = fcmp uno float %2219, 0.000000e+00, !dbg !100
  %2225 = or i1 %2223, %2224, !dbg !101
  %2226 = and i32 %22, 7, !dbg !97
  %2227 = icmp eq i32 %2226, 0, !dbg !97
  %2228 = and i1 %2204, %2227, !dbg !97
  %2229 = select i1 %2225, i32 %2220, i32 %2221, !dbg !102
  %2230 = insertelement <1 x i32> poison, i32 %2229, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1235, <1 x i32> %2230, i1 %2228) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %2231 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !97
  %2232 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !97
  %2233 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !97
  %2234 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %2235 = bitcast float %2231 to i32, !dbg !105
  %2236 = bitcast float %2232 to i32, !dbg !105
  %2237 = bitcast float %2233 to i32, !dbg !105
  %2238 = bitcast float %2234 to i32, !dbg !105
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2235, i32 %2236, i32 %2237, i32 %2238, i1 true) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %2239 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %642, !dbg !105
  %2240 = load float, ptr addrspace(3) %2239, align 4, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %2241 = extractelement <4 x float> %1804, i64 2, !dbg !107
  %2242 = fcmp uno float %2241, 0.000000e+00, !dbg !107
  %2243 = extractelement <4 x i1> %2015, i64 2, !dbg !108
  %2244 = or i1 %2243, %2242, !dbg !108
  %2245 = extractelement <4 x float> %1805, i64 2, !dbg !109
  %2246 = select i1 %2244, float %2241, float %2245, !dbg !109
  %2247 = extractelement <32 x float> %1811, i64 0, !dbg !103
  %2248 = fcmp ogt float %2246, %2247, !dbg !103
  %2249 = fcmp uno float %2246, 0.000000e+00, !dbg !107
  %2250 = or i1 %2248, %2249, !dbg !108
  %2251 = select i1 %2250, float %2246, float %2247, !dbg !109
  %2252 = extractelement <32 x float> %1811, i64 1, !dbg !103
  %2253 = fcmp ogt float %2251, %2252, !dbg !103
  %2254 = fcmp uno float %2251, 0.000000e+00, !dbg !107
  %2255 = or i1 %2253, %2254, !dbg !108
  %2256 = select i1 %2255, float %2251, float %2252, !dbg !109
  %2257 = extractelement <32 x float> %1811, i64 2, !dbg !103
  %2258 = fcmp ogt float %2256, %2257, !dbg !103
  %2259 = fcmp uno float %2256, 0.000000e+00, !dbg !107
  %2260 = or i1 %2258, %2259, !dbg !108
  %2261 = select i1 %2260, float %2256, float %2257, !dbg !109
  %2262 = extractelement <32 x float> %1811, i64 3, !dbg !103
  %2263 = fcmp ogt float %2261, %2262, !dbg !103
  %2264 = fcmp uno float %2261, 0.000000e+00, !dbg !107
  %2265 = or i1 %2263, %2264, !dbg !108
  %2266 = select i1 %2265, float %2261, float %2262, !dbg !109
  %2267 = extractelement <32 x float> %1811, i64 4, !dbg !103
  %2268 = fcmp ogt float %2266, %2267, !dbg !103
  %2269 = fcmp uno float %2266, 0.000000e+00, !dbg !107
  %2270 = or i1 %2268, %2269, !dbg !108
  %2271 = select i1 %2270, float %2266, float %2267, !dbg !109
  %2272 = extractelement <32 x float> %1811, i64 5, !dbg !103
  %2273 = fcmp ogt float %2271, %2272, !dbg !103
  %2274 = fcmp uno float %2271, 0.000000e+00, !dbg !107
  %2275 = or i1 %2273, %2274, !dbg !108
  %2276 = select i1 %2275, float %2271, float %2272, !dbg !109
  %2277 = extractelement <4 x float> %1804, i64 1, !dbg !107
  %2278 = fcmp uno float %2277, 0.000000e+00, !dbg !107
  %2279 = extractelement <4 x i1> %2015, i64 1, !dbg !108
  %2280 = or i1 %2279, %2278, !dbg !108
  %2281 = extractelement <4 x float> %1805, i64 1, !dbg !109
  %2282 = select i1 %2280, float %2277, float %2281, !dbg !109
  %2283 = extractelement <32 x float> %1811, i64 6, !dbg !103
  %2284 = fcmp ogt float %2282, %2283, !dbg !103
  %2285 = fcmp uno float %2282, 0.000000e+00, !dbg !107
  %2286 = or i1 %2284, %2285, !dbg !108
  %2287 = select i1 %2286, float %2282, float %2283, !dbg !109
  %2288 = extractelement <32 x float> %1811, i64 7, !dbg !103
  %2289 = fcmp ogt float %2287, %2288, !dbg !103
  %2290 = fcmp uno float %2287, 0.000000e+00, !dbg !107
  %2291 = or i1 %2289, %2290, !dbg !108
  %2292 = select i1 %2291, float %2287, float %2288, !dbg !109
  %2293 = extractelement <32 x float> %1811, i64 8, !dbg !103
  %2294 = fcmp ogt float %2292, %2293, !dbg !103
  %2295 = fcmp uno float %2292, 0.000000e+00, !dbg !107
  %2296 = or i1 %2294, %2295, !dbg !108
  %2297 = select i1 %2296, float %2292, float %2293, !dbg !109
  %2298 = extractelement <32 x float> %1811, i64 9, !dbg !103
  %2299 = fcmp ogt float %2297, %2298, !dbg !103
  %2300 = fcmp uno float %2297, 0.000000e+00, !dbg !107
  %2301 = or i1 %2299, %2300, !dbg !108
  %2302 = select i1 %2301, float %2297, float %2298, !dbg !109
  %2303 = extractelement <32 x float> %1811, i64 10, !dbg !103
  %2304 = fcmp ogt float %2302, %2303, !dbg !103
  %2305 = fcmp uno float %2302, 0.000000e+00, !dbg !107
  %2306 = or i1 %2304, %2305, !dbg !108
  %2307 = select i1 %2306, float %2302, float %2303, !dbg !109
  %2308 = extractelement <32 x float> %1811, i64 11, !dbg !103
  %2309 = fcmp ogt float %2307, %2308, !dbg !103
  %2310 = fcmp uno float %2307, 0.000000e+00, !dbg !107
  %2311 = or i1 %2309, %2310, !dbg !108
  %2312 = select i1 %2311, float %2307, float %2308, !dbg !109
  %2313 = extractelement <4 x float> %1804, i64 0, !dbg !107
  %2314 = fcmp uno float %2313, 0.000000e+00, !dbg !107
  %2315 = extractelement <4 x i1> %2015, i64 0, !dbg !108
  %2316 = or i1 %2315, %2314, !dbg !108
  %2317 = extractelement <4 x float> %1805, i64 0, !dbg !109
  %2318 = select i1 %2316, float %2313, float %2317, !dbg !109
  %2319 = extractelement <32 x float> %1811, i64 12, !dbg !103
  %2320 = fcmp ogt float %2318, %2319, !dbg !103
  %2321 = fcmp uno float %2318, 0.000000e+00, !dbg !107
  %2322 = or i1 %2320, %2321, !dbg !108
  %2323 = select i1 %2322, float %2318, float %2319, !dbg !109
  %2324 = extractelement <32 x float> %1811, i64 13, !dbg !103
  %2325 = fcmp ogt float %2323, %2324, !dbg !103
  %2326 = fcmp uno float %2323, 0.000000e+00, !dbg !107
  %2327 = or i1 %2325, %2326, !dbg !108
  %2328 = select i1 %2327, float %2323, float %2324, !dbg !109
  %2329 = extractelement <32 x float> %1811, i64 14, !dbg !103
  %2330 = fcmp ogt float %2328, %2329, !dbg !103
  %2331 = fcmp uno float %2328, 0.000000e+00, !dbg !107
  %2332 = or i1 %2330, %2331, !dbg !108
  %2333 = select i1 %2332, float %2328, float %2329, !dbg !109
  %2334 = extractelement <32 x float> %1811, i64 15, !dbg !103
  %2335 = fcmp ogt float %2333, %2334, !dbg !103
  %2336 = fcmp uno float %2333, 0.000000e+00, !dbg !107
  %2337 = or i1 %2335, %2336, !dbg !108
  %2338 = select i1 %2337, float %2333, float %2334, !dbg !109
  %2339 = extractelement <32 x float> %1811, i64 16, !dbg !103
  %2340 = fcmp ogt float %2338, %2339, !dbg !103
  %2341 = fcmp uno float %2338, 0.000000e+00, !dbg !107
  %2342 = or i1 %2340, %2341, !dbg !108
  %2343 = select i1 %2342, float %2338, float %2339, !dbg !109
  %2344 = extractelement <32 x float> %1811, i64 17, !dbg !103
  %2345 = fcmp ogt float %2343, %2344, !dbg !103
  %2346 = fcmp uno float %2343, 0.000000e+00, !dbg !107
  %2347 = or i1 %2345, %2346, !dbg !108
  %2348 = select i1 %2347, float %2343, float %2344, !dbg !109
  %2349 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1808, <2 x i32> <i32 0, i32 2>, !dbg !103
  %2350 = fcmp ogt <2 x float> %2349, %1808, !dbg !103
  %2351 = fcmp uno <2 x float> %2349, %1808, !dbg !103
  %shift = shufflevector <2 x i1> %2350, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !108
  %2352 = or <2 x i1> %shift, %2351, !dbg !108
  %2353 = extractelement <2 x i1> %2352, i64 0, !dbg !108
  %2354 = extractelement <2 x float> %1808, i64 0, !dbg !109
  %2355 = extractelement <2 x float> %1808, i64 1, !dbg !109
  %2356 = select i1 %2353, float %2354, float %2355, !dbg !109
  %2357 = extractelement <32 x float> %1811, i64 18, !dbg !103
  %2358 = fcmp ogt float %2356, %2357, !dbg !103
  %2359 = fcmp uno float %2356, 0.000000e+00, !dbg !107
  %2360 = or i1 %2358, %2359, !dbg !108
  %2361 = select i1 %2360, float %2356, float %2357, !dbg !109
  %2362 = extractelement <32 x float> %1811, i64 19, !dbg !103
  %2363 = fcmp ogt float %2361, %2362, !dbg !103
  %2364 = fcmp uno float %2361, 0.000000e+00, !dbg !107
  %2365 = or i1 %2363, %2364, !dbg !108
  %2366 = select i1 %2365, float %2361, float %2362, !dbg !109
  %2367 = extractelement <32 x float> %1811, i64 20, !dbg !103
  %2368 = fcmp ogt float %2366, %2367, !dbg !103
  %2369 = fcmp uno float %2366, 0.000000e+00, !dbg !107
  %2370 = or i1 %2368, %2369, !dbg !108
  %2371 = select i1 %2370, float %2366, float %2367, !dbg !109
  %2372 = extractelement <32 x float> %1811, i64 21, !dbg !103
  %2373 = fcmp ogt float %2371, %2372, !dbg !103
  %2374 = fcmp uno float %2371, 0.000000e+00, !dbg !107
  %2375 = or i1 %2373, %2374, !dbg !108
  %2376 = select i1 %2375, float %2371, float %2372, !dbg !109
  %2377 = extractelement <32 x float> %1811, i64 22, !dbg !103
  %2378 = fcmp ogt float %2376, %2377, !dbg !103
  %2379 = fcmp uno float %2376, 0.000000e+00, !dbg !107
  %2380 = or i1 %2378, %2379, !dbg !108
  %2381 = select i1 %2380, float %2376, float %2377, !dbg !109
  %2382 = extractelement <32 x float> %1811, i64 23, !dbg !103
  %2383 = fcmp ogt float %2381, %2382, !dbg !103
  %2384 = fcmp uno float %2381, 0.000000e+00, !dbg !107
  %2385 = or i1 %2383, %2384, !dbg !108
  %2386 = select i1 %2385, float %2381, float %2382, !dbg !109
  %2387 = bitcast float %2276 to i32, !dbg !106
  %2388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2387, i32 16, i32 31), !dbg !106
  %2389 = bitcast i32 %2388 to float, !dbg !106
  %2390 = fcmp ogt float %2276, %2389, !dbg !103
  %2391 = fcmp uno float %2276, 0.000000e+00, !dbg !107
  %2392 = or i1 %2391, %2390, !dbg !108
  %2393 = select i1 %2392, float %2276, float %2389, !dbg !109
  %2394 = bitcast float %2393 to i32, !dbg !106
  %2395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2394, i32 8, i32 31), !dbg !106
  %2396 = bitcast i32 %2395 to float, !dbg !106
  %2397 = fcmp ogt float %2393, %2396, !dbg !103
  %2398 = fcmp uno float %2393, 0.000000e+00, !dbg !107
  %2399 = or i1 %2397, %2398, !dbg !108
  %2400 = select i1 %2399, float %2393, float %2396, !dbg !109
  %2401 = bitcast float %2400 to i32, !dbg !106
  %2402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2401, i32 4, i32 31), !dbg !106
  %2403 = bitcast i32 %2402 to float, !dbg !106
  %2404 = fcmp ogt float %2400, %2403, !dbg !103
  %2405 = fcmp uno float %2400, 0.000000e+00, !dbg !107
  %2406 = or i1 %2404, %2405, !dbg !108
  %2407 = select i1 %2406, float %2400, float %2403, !dbg !109
  %2408 = bitcast float %2407 to i32, !dbg !106
  %2409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2408, i32 2, i32 31), !dbg !106
  %2410 = bitcast i32 %2409 to float, !dbg !106
  %2411 = fcmp ogt float %2407, %2410, !dbg !103
  %2412 = fcmp uno float %2407, 0.000000e+00, !dbg !107
  %2413 = or i1 %2411, %2412, !dbg !108
  %2414 = select i1 %2413, float %2407, float %2410, !dbg !109
  %2415 = bitcast float %2414 to i32, !dbg !106
  %2416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2415, i32 1, i32 31), !dbg !106
  %2417 = bitcast i32 %2416 to float, !dbg !106
  %2418 = fcmp ogt float %2414, %2417, !dbg !103
  %2419 = fcmp uno float %2414, 0.000000e+00, !dbg !107
  %2420 = or i1 %2418, %2419, !dbg !108
  %2421 = bitcast float %2312 to i32, !dbg !106
  %2422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2421, i32 16, i32 31), !dbg !106
  %2423 = bitcast i32 %2422 to float, !dbg !106
  %2424 = fcmp ogt float %2312, %2423, !dbg !103
  %2425 = fcmp uno float %2312, 0.000000e+00, !dbg !107
  %2426 = or i1 %2425, %2424, !dbg !108
  %2427 = select i1 %2426, float %2312, float %2423, !dbg !109
  %2428 = bitcast float %2427 to i32, !dbg !106
  %2429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2428, i32 8, i32 31), !dbg !106
  %2430 = bitcast i32 %2429 to float, !dbg !106
  %2431 = fcmp ogt float %2427, %2430, !dbg !103
  %2432 = fcmp uno float %2427, 0.000000e+00, !dbg !107
  %2433 = or i1 %2431, %2432, !dbg !108
  %2434 = select i1 %2433, float %2427, float %2430, !dbg !109
  %2435 = bitcast float %2434 to i32, !dbg !106
  %2436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2435, i32 4, i32 31), !dbg !106
  %2437 = bitcast i32 %2436 to float, !dbg !106
  %2438 = fcmp ogt float %2434, %2437, !dbg !103
  %2439 = fcmp uno float %2434, 0.000000e+00, !dbg !107
  %2440 = or i1 %2438, %2439, !dbg !108
  %2441 = select i1 %2440, float %2434, float %2437, !dbg !109
  %2442 = bitcast float %2441 to i32, !dbg !106
  %2443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2442, i32 2, i32 31), !dbg !106
  %2444 = bitcast i32 %2443 to float, !dbg !106
  %2445 = fcmp ogt float %2441, %2444, !dbg !103
  %2446 = fcmp uno float %2441, 0.000000e+00, !dbg !107
  %2447 = or i1 %2445, %2446, !dbg !108
  %2448 = select i1 %2447, float %2441, float %2444, !dbg !109
  %2449 = bitcast float %2448 to i32, !dbg !106
  %2450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2449, i32 1, i32 31), !dbg !106
  %2451 = bitcast i32 %2450 to float, !dbg !106
  %2452 = fcmp ogt float %2448, %2451, !dbg !103
  %2453 = fcmp uno float %2448, 0.000000e+00, !dbg !107
  %2454 = or i1 %2452, %2453, !dbg !108
  %2455 = bitcast float %2348 to i32, !dbg !106
  %2456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2455, i32 16, i32 31), !dbg !106
  %2457 = bitcast i32 %2456 to float, !dbg !106
  %2458 = fcmp ogt float %2348, %2457, !dbg !103
  %2459 = fcmp uno float %2348, 0.000000e+00, !dbg !107
  %2460 = or i1 %2459, %2458, !dbg !108
  %2461 = select i1 %2460, float %2348, float %2457, !dbg !109
  %2462 = bitcast float %2461 to i32, !dbg !106
  %2463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2462, i32 8, i32 31), !dbg !106
  %2464 = bitcast i32 %2463 to float, !dbg !106
  %2465 = fcmp ogt float %2461, %2464, !dbg !103
  %2466 = fcmp uno float %2461, 0.000000e+00, !dbg !107
  %2467 = or i1 %2465, %2466, !dbg !108
  %2468 = select i1 %2467, float %2461, float %2464, !dbg !109
  %2469 = bitcast float %2468 to i32, !dbg !106
  %2470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2469, i32 4, i32 31), !dbg !106
  %2471 = bitcast i32 %2470 to float, !dbg !106
  %2472 = fcmp ogt float %2468, %2471, !dbg !103
  %2473 = fcmp uno float %2468, 0.000000e+00, !dbg !107
  %2474 = or i1 %2472, %2473, !dbg !108
  %2475 = select i1 %2474, float %2468, float %2471, !dbg !109
  %2476 = bitcast float %2475 to i32, !dbg !106
  %2477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2476, i32 2, i32 31), !dbg !106
  %2478 = bitcast i32 %2477 to float, !dbg !106
  %2479 = fcmp ogt float %2475, %2478, !dbg !103
  %2480 = fcmp uno float %2475, 0.000000e+00, !dbg !107
  %2481 = or i1 %2479, %2480, !dbg !108
  %2482 = select i1 %2481, float %2475, float %2478, !dbg !109
  %2483 = bitcast float %2482 to i32, !dbg !106
  %2484 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2483, i32 1, i32 31), !dbg !106
  %2485 = bitcast i32 %2484 to float, !dbg !106
  %2486 = fcmp ogt float %2482, %2485, !dbg !103
  %2487 = fcmp uno float %2482, 0.000000e+00, !dbg !107
  %2488 = or i1 %2486, %2487, !dbg !108
  %2489 = bitcast float %2386 to i32, !dbg !106
  %2490 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2489, i32 16, i32 31), !dbg !106
  %2491 = bitcast i32 %2490 to float, !dbg !106
  %2492 = fcmp ogt float %2386, %2491, !dbg !103
  %2493 = fcmp uno float %2386, 0.000000e+00, !dbg !107
  %2494 = or i1 %2493, %2492, !dbg !108
  %2495 = select i1 %2494, float %2386, float %2491, !dbg !109
  %2496 = bitcast float %2495 to i32, !dbg !106
  %2497 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2496, i32 8, i32 31), !dbg !106
  %2498 = bitcast i32 %2497 to float, !dbg !106
  %2499 = fcmp ogt float %2495, %2498, !dbg !103
  %2500 = fcmp uno float %2495, 0.000000e+00, !dbg !107
  %2501 = or i1 %2499, %2500, !dbg !108
  %2502 = select i1 %2501, float %2495, float %2498, !dbg !109
  %2503 = bitcast float %2502 to i32, !dbg !106
  %2504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2503, i32 4, i32 31), !dbg !106
  %2505 = bitcast i32 %2504 to float, !dbg !106
  %2506 = fcmp ogt float %2502, %2505, !dbg !103
  %2507 = fcmp uno float %2502, 0.000000e+00, !dbg !107
  %2508 = or i1 %2506, %2507, !dbg !108
  %2509 = select i1 %2508, float %2502, float %2505, !dbg !109
  %2510 = bitcast float %2509 to i32, !dbg !106
  %2511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2510, i32 2, i32 31), !dbg !106
  %2512 = bitcast i32 %2511 to float, !dbg !106
  %2513 = fcmp ogt float %2509, %2512, !dbg !103
  %2514 = fcmp uno float %2509, 0.000000e+00, !dbg !107
  %2515 = or i1 %2513, %2514, !dbg !108
  %2516 = select i1 %2515, float %2509, float %2512, !dbg !109
  %2517 = bitcast float %2516 to i32, !dbg !106
  %2518 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2517, i32 1, i32 31), !dbg !106
  %2519 = bitcast i32 %2518 to float, !dbg !106
  %2520 = fcmp ogt float %2516, %2519, !dbg !103
  %2521 = fcmp uno float %2516, 0.000000e+00, !dbg !107
  %2522 = or i1 %2520, %2521, !dbg !108
  %2523 = select i1 %2420, i32 %2415, i32 %2416, !dbg !109
  %2524 = insertelement <1 x i32> poison, i32 %2523, i64 0, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2189, <1 x i32> %2524, i1 %1217) #5, !dbg !106
  %2525 = select i1 %2454, i32 %2449, i32 %2450, !dbg !109
  %2526 = insertelement <1 x i32> poison, i32 %2525, i64 0, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2193, <1 x i32> %2526, i1 %1217) #5, !dbg !106
  %2527 = select i1 %2488, i32 %2483, i32 %2484, !dbg !109
  %2528 = insertelement <1 x i32> poison, i32 %2527, i64 0, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2197, <1 x i32> %2528, i1 %1217) #5, !dbg !106
  %2529 = select i1 %2522, i32 %2517, i32 %2518, !dbg !109
  %2530 = insertelement <1 x i32> poison, i32 %2529, i64 0, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %2201, <1 x i32> %2530, i1 %1217) #5, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %2531 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1235, i1 %2204) #5, !dbg !106
  %2532 = bitcast i32 %2531 to float, !dbg !106
  %2533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2531, i32 4, i32 31), !dbg !106
  %2534 = bitcast i32 %2533 to float, !dbg !106
  %2535 = fcmp ogt float %2532, %2534, !dbg !103
  %2536 = fcmp uno float %2532, 0.000000e+00, !dbg !107
  %2537 = or i1 %2536, %2535, !dbg !108
  %2538 = select i1 %2537, float %2532, float %2534, !dbg !109
  %2539 = bitcast float %2538 to i32, !dbg !106
  %2540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2539, i32 2, i32 31), !dbg !106
  %2541 = bitcast i32 %2540 to float, !dbg !106
  %2542 = fcmp ogt float %2538, %2541, !dbg !103
  %2543 = fcmp uno float %2538, 0.000000e+00, !dbg !107
  %2544 = or i1 %2542, %2543, !dbg !108
  %2545 = select i1 %2544, float %2538, float %2541, !dbg !109
  %2546 = bitcast float %2545 to i32, !dbg !106
  %2547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2546, i32 1, i32 31), !dbg !106
  %2548 = bitcast i32 %2547 to float, !dbg !106
  %2549 = fcmp ogt float %2545, %2548, !dbg !103
  %2550 = fcmp uno float %2545, 0.000000e+00, !dbg !107
  %2551 = or i1 %2549, %2550, !dbg !108
  %2552 = select i1 %2551, i32 %2546, i32 %2547, !dbg !109
  %2553 = insertelement <1 x i32> poison, i32 %2552, i64 0, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1235, <1 x i32> %2553, i1 %2228) #5, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %2554 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !106
  %2555 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !106
  %2556 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !106
  %2557 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !110
  %2558 = bitcast float %2554 to i32, !dbg !110
  %2559 = bitcast float %2555 to i32, !dbg !110
  %2560 = bitcast float %2556 to i32, !dbg !110
  %2561 = bitcast float %2557 to i32, !dbg !110
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2558, i32 %2559, i32 %2560, i32 %2561, i1 true) #5, !dbg !110
  tail call void @llvm.nvvm.barrier0(), !dbg !110
  %2562 = load float, ptr addrspace(3) %2239, align 4, !dbg !110
  %2563 = sext i32 %643 to i64, !dbg !111
  %2564 = getelementptr bfloat, ptr addrspace(1) %4, i64 %2563, !dbg !111
  %2565 = fptrunc float %2240 to bfloat, !dbg !105
  %2566 = and i32 %22, 252, !dbg !105
  %2567 = icmp eq i32 %2566, 0, !dbg !105
  %2568 = bitcast bfloat %2565 to i16, !dbg !105
  %2569 = and i1 %2567, %644, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2568, ptr addrspace(1) %2564, i1 %2569) #5, !dbg !105
  %2570 = getelementptr bfloat, ptr addrspace(1) %5, i64 %2563, !dbg !112
  %2571 = fptrunc float %2562 to bfloat, !dbg !110
  %2572 = bitcast bfloat %2571 to i16, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2572, ptr addrspace(1) %2570, i1 %2569) #5, !dbg !110
  %2573 = getelementptr bfloat, ptr addrspace(1) %6, i64 %2563, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2568, ptr addrspace(1) %2573, i1 %2569) #5, !dbg !114
  %2574 = getelementptr bfloat, ptr addrspace(1) %7, i64 %2563, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2572, ptr addrspace(1) %2574, i1 %2569) #5, !dbg !116
  %2575 = getelementptr bfloat, ptr addrspace(1) %8, i64 %2563, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2568, ptr addrspace(1) %2575, i1 %2569) #5, !dbg !118
  %2576 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2563, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2572, ptr addrspace(1) %2576, i1 %2569) #5, !dbg !120
  %2577 = getelementptr bfloat, ptr addrspace(1) %10, i64 %2563, !dbg !121
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2568, ptr addrspace(1) %2577, i1 %2569) #5, !dbg !122
  %2578 = getelementptr bfloat, ptr addrspace(1) %11, i64 %2563, !dbg !123
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2572, ptr addrspace(1) %2578, i1 %2569) #5, !dbg !124
  %2579 = insertelement <4 x float> poison, float %2234, i64 0, !dbg !125
  %2580 = insertelement <4 x float> %2579, float %2233, i64 1, !dbg !125
  %2581 = insertelement <4 x float> %2580, float %2232, i64 2, !dbg !125
  %2582 = insertelement <4 x float> %2581, float %2231, i64 3, !dbg !125
  %2583 = fcmp oge <4 x float> %2582, zeroinitializer, !dbg !125
  %2584 = select <4 x i1> %2583, <4 x float> zeroinitializer, <4 x float> %2582, !dbg !125
  %2585 = fsub <4 x float> zeroinitializer, %2584, !dbg !127
  %2586 = insertelement <4 x float> poison, float %2557, i64 0, !dbg !128
  %2587 = insertelement <4 x float> %2586, float %2556, i64 1, !dbg !128
  %2588 = insertelement <4 x float> %2587, float %2555, i64 2, !dbg !128
  %2589 = insertelement <4 x float> %2588, float %2554, i64 3, !dbg !128
  %2590 = fcmp ole <4 x float> %2589, zeroinitializer, !dbg !128
  %2591 = select <4 x i1> %2590, <4 x float> zeroinitializer, <4 x float> %2589, !dbg !128
  %2592 = fcmp ogt <4 x float> %2585, %2591, !dbg !130
  %2593 = fcmp uno <4 x float> %2585, zeroinitializer, !dbg !132
  %2594 = or <4 x i1> %2593, %2592, !dbg !133
  %2595 = select <4 x i1> %2594, <4 x float> %2585, <4 x float> %2591, !dbg !134
  %2596 = fmul <4 x float> %2595, splat (float 0x3F80204080000000), !dbg !135
  %2597 = fcmp ogt <4 x float> %2596, splat (float 0x3EE4F8B580000000), !dbg !136
  %2598 = extractelement <4 x float> %2596, i64 3, !dbg !138
  %2599 = fcmp uno float %2598, 0.000000e+00, !dbg !139
  %2600 = extractelement <4 x float> %2596, i64 2, !dbg !138
  %2601 = fcmp uno float %2600, 0.000000e+00, !dbg !139
  %2602 = extractelement <4 x float> %2596, i64 1, !dbg !138
  %2603 = fcmp uno float %2602, 0.000000e+00, !dbg !139
  %2604 = extractelement <4 x float> %2596, i64 0, !dbg !138
  %2605 = fcmp uno float %2604, 0.000000e+00, !dbg !139
  %2606 = extractelement <4 x i1> %2597, i64 3, !dbg !140
  %2607 = or i1 %2606, %2599, !dbg !140
  %2608 = extractelement <4 x i1> %2597, i64 2, !dbg !140
  %2609 = or i1 %2608, %2601, !dbg !140
  %2610 = extractelement <4 x i1> %2597, i64 1, !dbg !140
  %2611 = or i1 %2610, %2603, !dbg !140
  %2612 = extractelement <4 x i1> %2597, i64 0, !dbg !140
  %2613 = or i1 %2612, %2605, !dbg !140
  %2614 = select i1 %2607, float %2598, float 0x3EE4F8B580000000, !dbg !138
  %2615 = select i1 %2609, float %2600, float 0x3EE4F8B580000000, !dbg !138
  %2616 = select i1 %2611, float %2602, float 0x3EE4F8B580000000, !dbg !138
  %2617 = select i1 %2613, float %2604, float 0x3EE4F8B580000000, !dbg !138
  %2618 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2614), !dbg !141
  %2619 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2615), !dbg !141
  %2620 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2616), !dbg !141
  %2621 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2617), !dbg !141
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %2622 = bitcast float %2618 to <1 x i32>, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2622, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2622, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2622, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2622, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2622, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2622, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2622, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2622, i1 true) #5, !dbg !142
  %2623 = bitcast float %2619 to <1 x i32>, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2623, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2623, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2623, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2623, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2623, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2623, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2623, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2623, i1 true) #5, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %2624 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !142
  %2625 = load float, ptr addrspace(3) %2624, align 4, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %2626 = bitcast float %2620 to <1 x i32>, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2626, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2626, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2626, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2626, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2626, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2626, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2626, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2626, i1 true) #5, !dbg !142
  %2627 = bitcast float %2621 to <1 x i32>, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2627, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2627, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2627, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2627, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2627, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2627, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2627, i1 true) #5, !dbg !142
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2627, i1 true) #5, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %2628 = load float, ptr addrspace(3) %2624, align 4, !dbg !142
  br label %2629, !dbg !143

2629:                                             ; preds = %1908, %2629
  %2630 = phi i1 [ true, %1908 ], [ false, %2629 ]
  %indvars.iv364 = phi i64 [ 0, %1908 ], [ 2048, %2629 ]
  %2631 = or disjoint i64 %indvars.iv364, %38, !dbg !144
  %2632 = icmp samesign ult i64 %2631, 3072, !dbg !145
  %2633 = trunc nuw nsw i64 %2631 to i32, !dbg !146
  %2634 = add i32 %36, %2633, !dbg !146
  %2635 = trunc nuw nsw i64 %indvars.iv364 to i32, !dbg !146
  %2636 = or disjoint i32 %33, %2635, !dbg !146
  %2637 = add i32 %2636, %36, !dbg !146
  %2638 = add i32 %37, %2633, !dbg !146
  %2639 = add i32 %2636, %37, !dbg !146
  %2640 = sext i32 %2634 to i64, !dbg !147
  %2641 = getelementptr bfloat, ptr addrspace(1) %3, i64 %2640, !dbg !147
  %2642 = sext i32 %2637 to i64, !dbg !147
  %2643 = getelementptr bfloat, ptr addrspace(1) %3, i64 %2642, !dbg !147
  %2644 = sext i32 %2638 to i64, !dbg !147
  %2645 = getelementptr bfloat, ptr addrspace(1) %3, i64 %2644, !dbg !147
  %2646 = sext i32 %2639 to i64, !dbg !147
  %2647 = getelementptr bfloat, ptr addrspace(1) %3, i64 %2646, !dbg !147
  %2648 = and i1 %28, %2632, !dbg !148
  %2649 = and i1 %29, %2632, !dbg !148
  %2650 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2641, i1 %2648) #5, !dbg !149
  %2651 = extractvalue { i32, i32, i32, i32 } %2650, 0, !dbg !149
  %2652 = bitcast i32 %2651 to <2 x bfloat>, !dbg !149
  %2653 = extractvalue { i32, i32, i32, i32 } %2650, 1, !dbg !149
  %2654 = bitcast i32 %2653 to <2 x bfloat>, !dbg !149
  %2655 = extractvalue { i32, i32, i32, i32 } %2650, 2, !dbg !149
  %2656 = bitcast i32 %2655 to <2 x bfloat>, !dbg !149
  %2657 = extractvalue { i32, i32, i32, i32 } %2650, 3, !dbg !149
  %2658 = bitcast i32 %2657 to <2 x bfloat>, !dbg !149
  %2659 = extractelement <2 x bfloat> %2652, i64 0, !dbg !149
  %2660 = extractelement <2 x bfloat> %2652, i64 1, !dbg !149
  %2661 = extractelement <2 x bfloat> %2654, i64 0, !dbg !149
  %2662 = extractelement <2 x bfloat> %2654, i64 1, !dbg !149
  %2663 = extractelement <2 x bfloat> %2656, i64 0, !dbg !149
  %2664 = extractelement <2 x bfloat> %2656, i64 1, !dbg !149
  %2665 = extractelement <2 x bfloat> %2658, i64 0, !dbg !149
  %2666 = extractelement <2 x bfloat> %2658, i64 1, !dbg !149
  %2667 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2643, i1 %2648) #5, !dbg !149
  %2668 = extractvalue { i32, i32, i32, i32 } %2667, 0, !dbg !149
  %2669 = bitcast i32 %2668 to <2 x bfloat>, !dbg !149
  %2670 = extractvalue { i32, i32, i32, i32 } %2667, 1, !dbg !149
  %2671 = bitcast i32 %2670 to <2 x bfloat>, !dbg !149
  %2672 = extractvalue { i32, i32, i32, i32 } %2667, 2, !dbg !149
  %2673 = bitcast i32 %2672 to <2 x bfloat>, !dbg !149
  %2674 = extractvalue { i32, i32, i32, i32 } %2667, 3, !dbg !149
  %2675 = bitcast i32 %2674 to <2 x bfloat>, !dbg !149
  %2676 = extractelement <2 x bfloat> %2669, i64 0, !dbg !149
  %2677 = extractelement <2 x bfloat> %2669, i64 1, !dbg !149
  %2678 = extractelement <2 x bfloat> %2671, i64 0, !dbg !149
  %2679 = extractelement <2 x bfloat> %2671, i64 1, !dbg !149
  %2680 = extractelement <2 x bfloat> %2673, i64 0, !dbg !149
  %2681 = extractelement <2 x bfloat> %2673, i64 1, !dbg !149
  %2682 = extractelement <2 x bfloat> %2675, i64 0, !dbg !149
  %2683 = extractelement <2 x bfloat> %2675, i64 1, !dbg !149
  %2684 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2645, i1 %2649) #5, !dbg !149
  %2685 = extractvalue { i32, i32, i32, i32 } %2684, 0, !dbg !149
  %2686 = bitcast i32 %2685 to <2 x bfloat>, !dbg !149
  %2687 = extractvalue { i32, i32, i32, i32 } %2684, 1, !dbg !149
  %2688 = bitcast i32 %2687 to <2 x bfloat>, !dbg !149
  %2689 = extractvalue { i32, i32, i32, i32 } %2684, 2, !dbg !149
  %2690 = bitcast i32 %2689 to <2 x bfloat>, !dbg !149
  %2691 = extractvalue { i32, i32, i32, i32 } %2684, 3, !dbg !149
  %2692 = bitcast i32 %2691 to <2 x bfloat>, !dbg !149
  %2693 = extractelement <2 x bfloat> %2686, i64 0, !dbg !149
  %2694 = extractelement <2 x bfloat> %2686, i64 1, !dbg !149
  %2695 = extractelement <2 x bfloat> %2688, i64 0, !dbg !149
  %2696 = extractelement <2 x bfloat> %2688, i64 1, !dbg !149
  %2697 = extractelement <2 x bfloat> %2690, i64 0, !dbg !149
  %2698 = extractelement <2 x bfloat> %2690, i64 1, !dbg !149
  %2699 = extractelement <2 x bfloat> %2692, i64 0, !dbg !149
  %2700 = extractelement <2 x bfloat> %2692, i64 1, !dbg !149
  %2701 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2647, i1 %2649) #5, !dbg !149
  %2702 = extractvalue { i32, i32, i32, i32 } %2701, 0, !dbg !149
  %2703 = bitcast i32 %2702 to <2 x bfloat>, !dbg !149
  %2704 = extractvalue { i32, i32, i32, i32 } %2701, 1, !dbg !149
  %2705 = bitcast i32 %2704 to <2 x bfloat>, !dbg !149
  %2706 = extractvalue { i32, i32, i32, i32 } %2701, 2, !dbg !149
  %2707 = bitcast i32 %2706 to <2 x bfloat>, !dbg !149
  %2708 = extractvalue { i32, i32, i32, i32 } %2701, 3, !dbg !149
  %2709 = bitcast i32 %2708 to <2 x bfloat>, !dbg !149
  %2710 = extractelement <2 x bfloat> %2703, i64 0, !dbg !149
  %2711 = extractelement <2 x bfloat> %2703, i64 1, !dbg !149
  %2712 = extractelement <2 x bfloat> %2705, i64 0, !dbg !149
  %2713 = extractelement <2 x bfloat> %2705, i64 1, !dbg !149
  %2714 = extractelement <2 x bfloat> %2707, i64 0, !dbg !149
  %2715 = extractelement <2 x bfloat> %2707, i64 1, !dbg !149
  %2716 = extractelement <2 x bfloat> %2709, i64 0, !dbg !149
  %2717 = extractelement <2 x bfloat> %2709, i64 1, !dbg !149
  %2718 = fpext bfloat %2659 to float, !dbg !150
  %2719 = fpext bfloat %2660 to float, !dbg !150
  %2720 = fpext bfloat %2661 to float, !dbg !150
  %2721 = fpext bfloat %2662 to float, !dbg !150
  %2722 = fpext bfloat %2663 to float, !dbg !150
  %2723 = fpext bfloat %2664 to float, !dbg !150
  %2724 = fpext bfloat %2665 to float, !dbg !150
  %2725 = fpext bfloat %2666 to float, !dbg !150
  %2726 = fpext bfloat %2676 to float, !dbg !150
  %2727 = fpext bfloat %2677 to float, !dbg !150
  %2728 = fpext bfloat %2678 to float, !dbg !150
  %2729 = fpext bfloat %2679 to float, !dbg !150
  %2730 = fpext bfloat %2680 to float, !dbg !150
  %2731 = fpext bfloat %2681 to float, !dbg !150
  %2732 = fpext bfloat %2682 to float, !dbg !150
  %2733 = fpext bfloat %2683 to float, !dbg !150
  %2734 = fpext bfloat %2693 to float, !dbg !150
  %2735 = fpext bfloat %2694 to float, !dbg !150
  %2736 = fpext bfloat %2695 to float, !dbg !150
  %2737 = fpext bfloat %2696 to float, !dbg !150
  %2738 = fpext bfloat %2697 to float, !dbg !150
  %2739 = fpext bfloat %2698 to float, !dbg !150
  %2740 = fpext bfloat %2699 to float, !dbg !150
  %2741 = fpext bfloat %2700 to float, !dbg !150
  %2742 = fpext bfloat %2710 to float, !dbg !150
  %2743 = fpext bfloat %2711 to float, !dbg !150
  %2744 = fpext bfloat %2712 to float, !dbg !150
  %2745 = fpext bfloat %2713 to float, !dbg !150
  %2746 = fpext bfloat %2714 to float, !dbg !150
  %2747 = fpext bfloat %2715 to float, !dbg !150
  %2748 = fpext bfloat %2716 to float, !dbg !150
  %2749 = fpext bfloat %2717 to float, !dbg !150
  %2750 = fmul float %2625, %2718, !dbg !142
  %2751 = fmul float %2625, %2719, !dbg !142
  %2752 = fmul float %2625, %2720, !dbg !142
  %2753 = fmul float %2625, %2721, !dbg !142
  %2754 = fmul float %2625, %2722, !dbg !142
  %2755 = fmul float %2625, %2723, !dbg !142
  %2756 = fmul float %2625, %2724, !dbg !142
  %2757 = fmul float %2625, %2725, !dbg !142
  %2758 = fmul float %2625, %2726, !dbg !142
  %2759 = fmul float %2625, %2727, !dbg !142
  %2760 = fmul float %2625, %2728, !dbg !142
  %2761 = fmul float %2625, %2729, !dbg !142
  %2762 = fmul float %2625, %2730, !dbg !142
  %2763 = fmul float %2625, %2731, !dbg !142
  %2764 = fmul float %2625, %2732, !dbg !142
  %2765 = fmul float %2625, %2733, !dbg !142
  %2766 = fmul float %2628, %2734, !dbg !142
  %2767 = fmul float %2628, %2735, !dbg !142
  %2768 = fmul float %2628, %2736, !dbg !142
  %2769 = fmul float %2628, %2737, !dbg !142
  %2770 = fmul float %2628, %2738, !dbg !142
  %2771 = fmul float %2628, %2739, !dbg !142
  %2772 = fmul float %2628, %2740, !dbg !142
  %2773 = fmul float %2628, %2741, !dbg !142
  %2774 = fmul float %2628, %2742, !dbg !142
  %2775 = fmul float %2628, %2743, !dbg !142
  %2776 = fmul float %2628, %2744, !dbg !142
  %2777 = fmul float %2628, %2745, !dbg !142
  %2778 = fmul float %2628, %2746, !dbg !142
  %2779 = fmul float %2628, %2747, !dbg !142
  %2780 = fmul float %2628, %2748, !dbg !142
  %2781 = fmul float %2628, %2749, !dbg !142
  %2782 = tail call float @llvm.nvvm.round.f(float %2750) #5, !dbg !151
  %2783 = tail call float @llvm.nvvm.round.f(float %2751) #5, !dbg !151
  %2784 = tail call float @llvm.nvvm.round.f(float %2752) #5, !dbg !151
  %2785 = tail call float @llvm.nvvm.round.f(float %2753) #5, !dbg !151
  %2786 = tail call float @llvm.nvvm.round.f(float %2754) #5, !dbg !151
  %2787 = tail call float @llvm.nvvm.round.f(float %2755) #5, !dbg !151
  %2788 = tail call float @llvm.nvvm.round.f(float %2756) #5, !dbg !151
  %2789 = tail call float @llvm.nvvm.round.f(float %2757) #5, !dbg !151
  %2790 = tail call float @llvm.nvvm.round.f(float %2758) #5, !dbg !151
  %2791 = tail call float @llvm.nvvm.round.f(float %2759) #5, !dbg !151
  %2792 = tail call float @llvm.nvvm.round.f(float %2760) #5, !dbg !151
  %2793 = tail call float @llvm.nvvm.round.f(float %2761) #5, !dbg !151
  %2794 = tail call float @llvm.nvvm.round.f(float %2762) #5, !dbg !151
  %2795 = tail call float @llvm.nvvm.round.f(float %2763) #5, !dbg !151
  %2796 = tail call float @llvm.nvvm.round.f(float %2764) #5, !dbg !151
  %2797 = tail call float @llvm.nvvm.round.f(float %2765) #5, !dbg !151
  %2798 = tail call float @llvm.nvvm.round.f(float %2766) #5, !dbg !151
  %2799 = tail call float @llvm.nvvm.round.f(float %2767) #5, !dbg !151
  %2800 = tail call float @llvm.nvvm.round.f(float %2768) #5, !dbg !151
  %2801 = tail call float @llvm.nvvm.round.f(float %2769) #5, !dbg !151
  %2802 = tail call float @llvm.nvvm.round.f(float %2770) #5, !dbg !151
  %2803 = tail call float @llvm.nvvm.round.f(float %2771) #5, !dbg !151
  %2804 = tail call float @llvm.nvvm.round.f(float %2772) #5, !dbg !151
  %2805 = tail call float @llvm.nvvm.round.f(float %2773) #5, !dbg !151
  %2806 = tail call float @llvm.nvvm.round.f(float %2774) #5, !dbg !151
  %2807 = tail call float @llvm.nvvm.round.f(float %2775) #5, !dbg !151
  %2808 = tail call float @llvm.nvvm.round.f(float %2776) #5, !dbg !151
  %2809 = tail call float @llvm.nvvm.round.f(float %2777) #5, !dbg !151
  %2810 = tail call float @llvm.nvvm.round.f(float %2778) #5, !dbg !151
  %2811 = tail call float @llvm.nvvm.round.f(float %2779) #5, !dbg !151
  %2812 = tail call float @llvm.nvvm.round.f(float %2780) #5, !dbg !151
  %2813 = tail call float @llvm.nvvm.round.f(float %2781) #5, !dbg !151
  %2814 = insertelement <4 x float> poison, float %2782, i64 0, !dbg !152
  %2815 = insertelement <4 x float> %2814, float %2783, i64 1, !dbg !152
  %2816 = insertelement <4 x float> %2815, float %2784, i64 2, !dbg !152
  %2817 = insertelement <4 x float> %2816, float %2785, i64 3, !dbg !152
  %2818 = fcmp ogt <4 x float> %2817, splat (float -1.270000e+02), !dbg !152
  %2819 = fcmp uno <4 x float> %2817, zeroinitializer, !dbg !154
  %2820 = or <4 x i1> %2818, %2819, !dbg !155
  %2821 = select <4 x i1> %2820, <4 x float> %2817, <4 x float> splat (float -1.270000e+02), !dbg !156
  %2822 = fcmp olt <4 x float> %2821, splat (float 1.270000e+02), !dbg !157
  %2823 = fcmp uno <4 x float> %2821, zeroinitializer, !dbg !159
  %2824 = or <4 x i1> %2822, %2823, !dbg !160
  %2825 = fptosi <4 x float> %2821 to <4 x i8>, !dbg !161
  %2826 = select <4 x i1> %2824, <4 x i8> %2825, <4 x i8> splat (i8 127), !dbg !162
  %2827 = insertelement <4 x float> poison, float %2786, i64 0, !dbg !152
  %2828 = insertelement <4 x float> %2827, float %2787, i64 1, !dbg !152
  %2829 = insertelement <4 x float> %2828, float %2788, i64 2, !dbg !152
  %2830 = insertelement <4 x float> %2829, float %2789, i64 3, !dbg !152
  %2831 = fcmp ogt <4 x float> %2830, splat (float -1.270000e+02), !dbg !152
  %2832 = fcmp uno <4 x float> %2830, zeroinitializer, !dbg !154
  %2833 = or <4 x i1> %2831, %2832, !dbg !155
  %2834 = select <4 x i1> %2833, <4 x float> %2830, <4 x float> splat (float -1.270000e+02), !dbg !156
  %2835 = fcmp olt <4 x float> %2834, splat (float 1.270000e+02), !dbg !157
  %2836 = fcmp uno <4 x float> %2834, zeroinitializer, !dbg !159
  %2837 = or <4 x i1> %2835, %2836, !dbg !160
  %2838 = fptosi <4 x float> %2834 to <4 x i8>, !dbg !161
  %2839 = select <4 x i1> %2837, <4 x i8> %2838, <4 x i8> splat (i8 127), !dbg !162
  %2840 = insertelement <4 x float> poison, float %2790, i64 0, !dbg !152
  %2841 = insertelement <4 x float> %2840, float %2791, i64 1, !dbg !152
  %2842 = insertelement <4 x float> %2841, float %2792, i64 2, !dbg !152
  %2843 = insertelement <4 x float> %2842, float %2793, i64 3, !dbg !152
  %2844 = fcmp ogt <4 x float> %2843, splat (float -1.270000e+02), !dbg !152
  %2845 = fcmp uno <4 x float> %2843, zeroinitializer, !dbg !154
  %2846 = or <4 x i1> %2844, %2845, !dbg !155
  %2847 = select <4 x i1> %2846, <4 x float> %2843, <4 x float> splat (float -1.270000e+02), !dbg !156
  %2848 = fcmp olt <4 x float> %2847, splat (float 1.270000e+02), !dbg !157
  %2849 = fcmp uno <4 x float> %2847, zeroinitializer, !dbg !159
  %2850 = or <4 x i1> %2848, %2849, !dbg !160
  %2851 = fptosi <4 x float> %2847 to <4 x i8>, !dbg !161
  %2852 = select <4 x i1> %2850, <4 x i8> %2851, <4 x i8> splat (i8 127), !dbg !162
  %2853 = insertelement <4 x float> poison, float %2794, i64 0, !dbg !152
  %2854 = insertelement <4 x float> %2853, float %2795, i64 1, !dbg !152
  %2855 = insertelement <4 x float> %2854, float %2796, i64 2, !dbg !152
  %2856 = insertelement <4 x float> %2855, float %2797, i64 3, !dbg !152
  %2857 = fcmp ogt <4 x float> %2856, splat (float -1.270000e+02), !dbg !152
  %2858 = fcmp uno <4 x float> %2856, zeroinitializer, !dbg !154
  %2859 = or <4 x i1> %2857, %2858, !dbg !155
  %2860 = select <4 x i1> %2859, <4 x float> %2856, <4 x float> splat (float -1.270000e+02), !dbg !156
  %2861 = fcmp olt <4 x float> %2860, splat (float 1.270000e+02), !dbg !157
  %2862 = fcmp uno <4 x float> %2860, zeroinitializer, !dbg !159
  %2863 = or <4 x i1> %2861, %2862, !dbg !160
  %2864 = fptosi <4 x float> %2860 to <4 x i8>, !dbg !161
  %2865 = select <4 x i1> %2863, <4 x i8> %2864, <4 x i8> splat (i8 127), !dbg !162
  %2866 = insertelement <4 x float> poison, float %2798, i64 0, !dbg !152
  %2867 = insertelement <4 x float> %2866, float %2799, i64 1, !dbg !152
  %2868 = insertelement <4 x float> %2867, float %2800, i64 2, !dbg !152
  %2869 = insertelement <4 x float> %2868, float %2801, i64 3, !dbg !152
  %2870 = fcmp ogt <4 x float> %2869, splat (float -1.270000e+02), !dbg !152
  %2871 = fcmp uno <4 x float> %2869, zeroinitializer, !dbg !154
  %2872 = or <4 x i1> %2870, %2871, !dbg !155
  %2873 = select <4 x i1> %2872, <4 x float> %2869, <4 x float> splat (float -1.270000e+02), !dbg !156
  %2874 = fcmp olt <4 x float> %2873, splat (float 1.270000e+02), !dbg !157
  %2875 = fcmp uno <4 x float> %2873, zeroinitializer, !dbg !159
  %2876 = or <4 x i1> %2874, %2875, !dbg !160
  %2877 = fptosi <4 x float> %2873 to <4 x i8>, !dbg !161
  %2878 = select <4 x i1> %2876, <4 x i8> %2877, <4 x i8> splat (i8 127), !dbg !162
  %2879 = insertelement <4 x float> poison, float %2802, i64 0, !dbg !152
  %2880 = insertelement <4 x float> %2879, float %2803, i64 1, !dbg !152
  %2881 = insertelement <4 x float> %2880, float %2804, i64 2, !dbg !152
  %2882 = insertelement <4 x float> %2881, float %2805, i64 3, !dbg !152
  %2883 = fcmp ogt <4 x float> %2882, splat (float -1.270000e+02), !dbg !152
  %2884 = fcmp uno <4 x float> %2882, zeroinitializer, !dbg !154
  %2885 = or <4 x i1> %2883, %2884, !dbg !155
  %2886 = select <4 x i1> %2885, <4 x float> %2882, <4 x float> splat (float -1.270000e+02), !dbg !156
  %2887 = fcmp olt <4 x float> %2886, splat (float 1.270000e+02), !dbg !157
  %2888 = fcmp uno <4 x float> %2886, zeroinitializer, !dbg !159
  %2889 = or <4 x i1> %2887, %2888, !dbg !160
  %2890 = fptosi <4 x float> %2886 to <4 x i8>, !dbg !161
  %2891 = select <4 x i1> %2889, <4 x i8> %2890, <4 x i8> splat (i8 127), !dbg !162
  %2892 = insertelement <4 x float> poison, float %2806, i64 0, !dbg !152
  %2893 = insertelement <4 x float> %2892, float %2807, i64 1, !dbg !152
  %2894 = insertelement <4 x float> %2893, float %2808, i64 2, !dbg !152
  %2895 = insertelement <4 x float> %2894, float %2809, i64 3, !dbg !152
  %2896 = fcmp ogt <4 x float> %2895, splat (float -1.270000e+02), !dbg !152
  %2897 = fcmp uno <4 x float> %2895, zeroinitializer, !dbg !154
  %2898 = or <4 x i1> %2896, %2897, !dbg !155
  %2899 = select <4 x i1> %2898, <4 x float> %2895, <4 x float> splat (float -1.270000e+02), !dbg !156
  %2900 = fcmp olt <4 x float> %2899, splat (float 1.270000e+02), !dbg !157
  %2901 = fcmp uno <4 x float> %2899, zeroinitializer, !dbg !159
  %2902 = or <4 x i1> %2900, %2901, !dbg !160
  %2903 = fptosi <4 x float> %2899 to <4 x i8>, !dbg !161
  %2904 = select <4 x i1> %2902, <4 x i8> %2903, <4 x i8> splat (i8 127), !dbg !162
  %2905 = insertelement <4 x float> poison, float %2810, i64 0, !dbg !152
  %2906 = insertelement <4 x float> %2905, float %2811, i64 1, !dbg !152
  %2907 = insertelement <4 x float> %2906, float %2812, i64 2, !dbg !152
  %2908 = insertelement <4 x float> %2907, float %2813, i64 3, !dbg !152
  %2909 = fcmp ogt <4 x float> %2908, splat (float -1.270000e+02), !dbg !152
  %2910 = fcmp uno <4 x float> %2908, zeroinitializer, !dbg !154
  %2911 = or <4 x i1> %2909, %2910, !dbg !155
  %2912 = select <4 x i1> %2911, <4 x float> %2908, <4 x float> splat (float -1.270000e+02), !dbg !156
  %2913 = fcmp olt <4 x float> %2912, splat (float 1.270000e+02), !dbg !157
  %2914 = fcmp uno <4 x float> %2912, zeroinitializer, !dbg !159
  %2915 = or <4 x i1> %2913, %2914, !dbg !160
  %2916 = fptosi <4 x float> %2912 to <4 x i8>, !dbg !161
  %2917 = select <4 x i1> %2915, <4 x i8> %2916, <4 x i8> splat (i8 127), !dbg !162
  %2918 = getelementptr i8, ptr addrspace(1) %12, i64 %2640, !dbg !163
  %2919 = getelementptr i8, ptr addrspace(1) %12, i64 %2644, !dbg !163
  %2920 = bitcast <4 x i8> %2826 to i32, !dbg !164
  %2921 = bitcast <4 x i8> %2839 to i32, !dbg !164
  %2922 = bitcast <4 x i8> %2852 to i32, !dbg !164
  %2923 = bitcast <4 x i8> %2865 to i32, !dbg !164
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2920, i32 %2921, i32 %2922, i32 %2923, ptr addrspace(1) %2918, i1 %2648) #5, !dbg !164
  %2924 = bitcast <4 x i8> %2878 to i32, !dbg !164
  %2925 = bitcast <4 x i8> %2891 to i32, !dbg !164
  %2926 = bitcast <4 x i8> %2904 to i32, !dbg !164
  %2927 = bitcast <4 x i8> %2917 to i32, !dbg !164
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2924, i32 %2925, i32 %2926, i32 %2927, ptr addrspace(1) %2919, i1 %2649) #5, !dbg !164
  %2928 = getelementptr i8, ptr addrspace(1) %13, i64 %2640, !dbg !165
  %2929 = getelementptr i8, ptr addrspace(1) %13, i64 %2644, !dbg !165
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2920, i32 %2921, i32 %2922, i32 %2923, ptr addrspace(1) %2928, i1 %2648) #5, !dbg !166
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2924, i32 %2925, i32 %2926, i32 %2927, ptr addrspace(1) %2929, i1 %2649) #5, !dbg !166
  %2930 = getelementptr i8, ptr addrspace(1) %14, i64 %2640, !dbg !167
  %2931 = getelementptr i8, ptr addrspace(1) %14, i64 %2644, !dbg !167
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2920, i32 %2921, i32 %2922, i32 %2923, ptr addrspace(1) %2930, i1 %2648) #5, !dbg !168
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2924, i32 %2925, i32 %2926, i32 %2927, ptr addrspace(1) %2931, i1 %2649) #5, !dbg !168
  %2932 = getelementptr i8, ptr addrspace(1) %15, i64 %2640, !dbg !169
  %2933 = getelementptr i8, ptr addrspace(1) %15, i64 %2644, !dbg !169
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2920, i32 %2921, i32 %2922, i32 %2923, ptr addrspace(1) %2932, i1 %2648) #5, !dbg !170
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2924, i32 %2925, i32 %2926, i32 %2927, ptr addrspace(1) %2933, i1 %2649) #5, !dbg !170
  br i1 %2630, label %2629, label %2934, !dbg !143

2934:                                             ; preds = %2629
  ret void, !dbg !171
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 32, column: 40, scope: !6)
!17 = !DILocation(line: 33, column: 31, scope: !6)
!18 = !DILocation(line: 34, column: 29, scope: !6)
!19 = !DILocation(line: 38, column: 41, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 61, scope: !6)
!22 = !DILocation(line: 38, column: 51, scope: !6)
!23 = !DILocation(line: 38, column: 112, scope: !6)
!24 = !DILocation(line: 203, column: 7, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 42, column: 51, scope: !6)
!28 = !DILocation(line: 208, column: 24, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 209, column: 30, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 210, column: 34, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 210, column: 26, scope: !25, inlinedAt: !27)
!32 = !DILocation(line: 211, column: 39, scope: !25, inlinedAt: !27)
!33 = !DILocation(line: 211, column: 31, scope: !25, inlinedAt: !27)
!34 = !DILocation(line: 211, column: 22, scope: !25, inlinedAt: !27)
!35 = !DILocation(line: 44, column: 62, scope: !6)
!36 = !DILocation(line: 45, column: 58, scope: !6)
!37 = !DILocation(line: 46, column: 66, scope: !6)
!38 = !DILocation(line: 217, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!40 = !DILocation(line: 47, column: 79, scope: !6)
!41 = !DILocation(line: 218, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 219, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 219, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 219, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 221, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 221, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 222, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 222, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 222, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 222, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 222, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 229, column: 46, scope: !25, inlinedAt: !40)
!53 = !DILocation(line: 59, column: 46, scope: !6)
!54 = !DILocation(line: 67, column: 24, scope: !6)
!55 = !DILocation(line: 69, column: 24, scope: !6)
!56 = !DILocation(line: 70, column: 32, scope: !6)
!57 = !DILocation(line: 53, column: 40, scope: !6)
!58 = !DILocation(line: 54, column: 31, scope: !6)
!59 = !DILocation(line: 55, column: 29, scope: !6)
!60 = !DILocation(line: 59, column: 41, scope: !6)
!61 = !DILocation(line: 59, column: 34, scope: !6)
!62 = !DILocation(line: 59, column: 61, scope: !6)
!63 = !DILocation(line: 59, column: 51, scope: !6)
!64 = !DILocation(line: 59, column: 113, scope: !6)
!65 = !DILocation(line: 60, column: 42, scope: !6)
!66 = !DILocation(line: 60, column: 35, scope: !6)
!67 = !DILocation(line: 60, column: 49, scope: !6)
!68 = !DILocation(line: 61, column: 35, scope: !6)
!69 = !DILocation(line: 61, column: 49, scope: !6)
!70 = !DILocation(line: 62, column: 35, scope: !6)
!71 = !DILocation(line: 62, column: 42, scope: !6)
!72 = !DILocation(line: 63, column: 35, scope: !6)
!73 = !DILocation(line: 63, column: 42, scope: !6)
!74 = !DILocation(line: 65, column: 24, scope: !6)
!75 = !DILocation(line: 71, column: 24, scope: !6)
!76 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !77)
!77 = !DILocation(line: 84, column: 47, scope: !6)
!78 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !79)
!79 = !DILocation(line: 82, column: 47, scope: !6)
!80 = !DILocation(line: 61, column: 102, scope: !6)
!81 = !DILocation(line: 63, column: 95, scope: !6)
!82 = !DILocation(line: 74, column: 24, scope: !6)
!83 = !DILocation(line: 76, column: 24, scope: !6)
!84 = !DILocation(line: 77, column: 24, scope: !6)
!85 = !DILocation(line: 79, column: 24, scope: !6)
!86 = !DILocation(line: 80, column: 24, scope: !6)
!87 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !79)
!88 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !79)
!89 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !79)
!90 = !DILocation(line: 86, column: 53, scope: !6)
!91 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !77)
!92 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !77)
!93 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !77)
!94 = !DILocation(line: 83, column: 50, scope: !6)
!95 = !DILocation(line: 85, column: 50, scope: !6)
!96 = !DILocation(line: 86, column: 29, scope: !6)
!97 = !DILocation(line: 110, column: 29, scope: !25, inlinedAt: !98)
!98 = !DILocation(line: 87, column: 40, scope: !6)
!99 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !98)
!100 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !98)
!101 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !98)
!102 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !98)
!103 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !104)
!104 = !DILocation(line: 88, column: 40, scope: !6)
!105 = !DILocation(line: 89, column: 37, scope: !6)
!106 = !DILocation(line: 115, column: 29, scope: !25, inlinedAt: !104)
!107 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !104)
!108 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !104)
!109 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !104)
!110 = !DILocation(line: 90, column: 37, scope: !6)
!111 = !DILocation(line: 89, column: 25, scope: !6)
!112 = !DILocation(line: 90, column: 25, scope: !6)
!113 = !DILocation(line: 91, column: 25, scope: !6)
!114 = !DILocation(line: 91, column: 37, scope: !6)
!115 = !DILocation(line: 92, column: 25, scope: !6)
!116 = !DILocation(line: 92, column: 37, scope: !6)
!117 = !DILocation(line: 93, column: 25, scope: !6)
!118 = !DILocation(line: 93, column: 37, scope: !6)
!119 = !DILocation(line: 94, column: 25, scope: !6)
!120 = !DILocation(line: 94, column: 37, scope: !6)
!121 = !DILocation(line: 95, column: 25, scope: !6)
!122 = !DILocation(line: 95, column: 37, scope: !6)
!123 = !DILocation(line: 96, column: 26, scope: !6)
!124 = !DILocation(line: 96, column: 38, scope: !6)
!125 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !126)
!126 = !DILocation(line: 105, column: 46, scope: !6)
!127 = !DILocation(line: 106, column: 17, scope: !6)
!128 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !129)
!129 = !DILocation(line: 107, column: 46, scope: !6)
!130 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !131)
!131 = !DILocation(line: 108, column: 46, scope: !6)
!132 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !131)
!133 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !131)
!134 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !131)
!135 = !DILocation(line: 110, column: 24, scope: !6)
!136 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !137)
!137 = !DILocation(line: 113, column: 46, scope: !6)
!138 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !137)
!139 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !137)
!140 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !137)
!141 = !DILocation(line: 116, column: 25, scope: !6)
!142 = !DILocation(line: 119, column: 24, scope: !6)
!143 = !DILocation(line: 97, column: 40, scope: !6)
!144 = !DILocation(line: 98, column: 31, scope: !6)
!145 = !DILocation(line: 99, column: 29, scope: !6)
!146 = !DILocation(line: 103, column: 43, scope: !6)
!147 = !DILocation(line: 103, column: 36, scope: !6)
!148 = !DILocation(line: 103, column: 63, scope: !6)
!149 = !DILocation(line: 103, column: 53, scope: !6)
!150 = !DILocation(line: 103, column: 115, scope: !6)
!151 = !DILocation(line: 120, column: 36, scope: !6)
!152 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !153)
!153 = !DILocation(line: 123, column: 46, scope: !6)
!154 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !153)
!155 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !153)
!156 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !153)
!157 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !158)
!158 = !DILocation(line: 125, column: 46, scope: !6)
!159 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !158)
!160 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !158)
!161 = !DILocation(line: 127, column: 25, scope: !6)
!162 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !158)
!163 = !DILocation(line: 128, column: 30, scope: !6)
!164 = !DILocation(line: 128, column: 54, scope: !6)
!165 = !DILocation(line: 129, column: 30, scope: !6)
!166 = !DILocation(line: 129, column: 54, scope: !6)
!167 = !DILocation(line: 130, column: 30, scope: !6)
!168 = !DILocation(line: 130, column: 54, scope: !6)
!169 = !DILocation(line: 131, column: 30, scope: !6)
!170 = !DILocation(line: 131, column: 54, scope: !6)
!171 = !DILocation(line: 97, column: 4, scope: !6)
