; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 32, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 4, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 32, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 3, !dbg !19
  %23 = or disjoint i32 %20, %22, !dbg !19
  %24 = or disjoint i32 %23, 32, !dbg !19
  %25 = or disjoint i32 %23, 64, !dbg !19
  %26 = or disjoint i32 %23, 96, !dbg !19
  %27 = lshr i32 %15, 4, !dbg !19
  %28 = and i32 %27, 15, !dbg !19
  %29 = shl i32 %15, 3, !dbg !19
  %30 = and i32 %29, 8, !dbg !19
  %31 = and i32 %29, 16, !dbg !19
  %32 = and i32 %29, 24, !dbg !19
  %33 = and i32 %29, 32, !dbg !19
  %34 = and i32 %29, 56, !dbg !19
  %35 = shl nuw nsw i32 %16, 3, !dbg !19
  %36 = or disjoint i32 %34, %35, !dbg !19
  %37 = or disjoint i32 %14, %23, !dbg !20
  %38 = or disjoint i32 %14, %24, !dbg !20
  %39 = or disjoint i32 %14, %25, !dbg !20
  %40 = or disjoint i32 %14, %26, !dbg !20
  %41 = or disjoint i32 %14, %28, !dbg !20
  %42 = or disjoint i32 %41, 16, !dbg !20
  %43 = or disjoint i32 %41, 32, !dbg !20
  %44 = or disjoint i32 %41, 48, !dbg !20
  %45 = or disjoint i32 %41, 64, !dbg !20
  %46 = or disjoint i32 %41, 80, !dbg !20
  %47 = or disjoint i32 %41, 96, !dbg !20
  %48 = or disjoint i32 %41, 112, !dbg !20
  %49 = shl nsw i32 %13, 7, !dbg !21
  %50 = or disjoint i32 %49, %23, !dbg !22
  %51 = or disjoint i32 %49, %24, !dbg !22
  %52 = or disjoint i32 %49, %25, !dbg !22
  %53 = or disjoint i32 %49, %26, !dbg !22
  %54 = or disjoint i32 %49, %36, !dbg !22
  %55 = srem i32 %37, 512, !dbg !23
  %56 = srem i32 %38, 512, !dbg !23
  %57 = srem i32 %39, 512, !dbg !23
  %58 = srem i32 %40, 512, !dbg !23
  %59 = srem i32 %50, 512, !dbg !24
  %.lhs.trunc = trunc i32 %51 to i16, !dbg !24
  %60 = srem i16 %.lhs.trunc, 512, !dbg !24
  %.sext = sext i16 %60 to i32, !dbg !24
  %.lhs.trunc99 = trunc i32 %52 to i16, !dbg !24
  %61 = srem i16 %.lhs.trunc99, 512, !dbg !24
  %.sext100 = sext i16 %61 to i32, !dbg !24
  %.lhs.trunc101 = trunc i32 %53 to i16, !dbg !24
  %62 = srem i16 %.lhs.trunc101, 512, !dbg !24
  %.sext102 = sext i16 %62 to i32, !dbg !24
  %63 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !25
  %64 = shl nsw i32 %55, 12, !dbg !26
  %65 = shl nsw i32 %56, 12, !dbg !26
  %66 = shl nsw i32 %57, 12, !dbg !26
  %67 = shl nsw i32 %58, 12, !dbg !26
  %68 = shl i32 %63, 6, !dbg !27
  %69 = or disjoint i32 %34, %68, !dbg !28
  %70 = add i32 %69, %64, !dbg !29
  %71 = add i32 %69, %65, !dbg !29
  %72 = add i32 %69, %66, !dbg !29
  %73 = add i32 %69, %67, !dbg !29
  %74 = sext i32 %70 to i64, !dbg !30
  %75 = getelementptr bfloat, ptr addrspace(1) %0, i64 %74, !dbg !30
  %76 = sext i32 %71 to i64, !dbg !30
  %77 = getelementptr bfloat, ptr addrspace(1) %0, i64 %76, !dbg !30
  %78 = sext i32 %72 to i64, !dbg !30
  %79 = getelementptr bfloat, ptr addrspace(1) %0, i64 %78, !dbg !30
  %80 = sext i32 %73 to i64, !dbg !30
  %81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %80, !dbg !30
  %82 = shl nsw i32 %59, 12, !dbg !31
  %83 = shl nsw i32 %.sext, 12, !dbg !31
  %84 = shl nsw i32 %.sext100, 12, !dbg !31
  %85 = shl nsw i32 %.sext102, 12, !dbg !31
  %86 = add i32 %69, %82, !dbg !32
  %87 = add i32 %69, %83, !dbg !32
  %88 = add i32 %69, %84, !dbg !32
  %89 = add i32 %69, %85, !dbg !32
  %90 = sext i32 %86 to i64, !dbg !33
  %91 = getelementptr bfloat, ptr addrspace(1) %1, i64 %90, !dbg !33
  %92 = sext i32 %87 to i64, !dbg !33
  %93 = getelementptr bfloat, ptr addrspace(1) %1, i64 %92, !dbg !33
  %94 = sext i32 %88 to i64, !dbg !33
  %95 = getelementptr bfloat, ptr addrspace(1) %1, i64 %94, !dbg !33
  %96 = sext i32 %89 to i64, !dbg !33
  %97 = getelementptr bfloat, ptr addrspace(1) %1, i64 %96, !dbg !33
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %75) #2, !dbg !34
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !34
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !34
  %101 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !34
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !34
  %103 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !34
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !34
  %105 = shufflevector <2 x bfloat> %104, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %106 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !34
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !34
  %108 = shufflevector <2 x bfloat> %107, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %77) #2, !dbg !34
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !34
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !34
  %112 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !34
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !34
  %114 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !34
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !34
  %116 = shufflevector <2 x bfloat> %115, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %117 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !34
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !34
  %119 = shufflevector <2 x bfloat> %118, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %79) #2, !dbg !34
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !34
  %122 = bitcast i32 %121 to <2 x bfloat>, !dbg !34
  %123 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !34
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !34
  %125 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !34
  %126 = bitcast i32 %125 to <2 x bfloat>, !dbg !34
  %127 = shufflevector <2 x bfloat> %126, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %128 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !34
  %129 = bitcast i32 %128 to <2 x bfloat>, !dbg !34
  %130 = shufflevector <2 x bfloat> %129, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %81) #2, !dbg !34
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !34
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !34
  %134 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !34
  %135 = bitcast i32 %134 to <2 x bfloat>, !dbg !34
  %136 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !34
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !34
  %138 = shufflevector <2 x bfloat> %137, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %139 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !34
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !34
  %141 = shufflevector <2 x bfloat> %140, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %and.ra = and i32 %15, 24, !dbg !34
  %142 = xor i32 %34, %and.ra, !dbg !34
  %143 = xor i32 %142, %18, !dbg !34
  %144 = shl nuw nsw i32 %23, 6, !dbg !34
  %145 = or disjoint i32 %143, %144, !dbg !34
  %146 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %145, !dbg !34
  %147 = shufflevector <2 x bfloat> %100, <2 x bfloat> %102, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %148 = shufflevector <8 x bfloat> %147, <8 x bfloat> %105, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %149 = shufflevector <8 x bfloat> %148, <8 x bfloat> %108, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %149, ptr addrspace(3) %146, align 16, !dbg !34
  %150 = or disjoint i32 %145, 2048, !dbg !34
  %151 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %150, !dbg !34
  %152 = shufflevector <2 x bfloat> %111, <2 x bfloat> %113, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %153 = shufflevector <8 x bfloat> %152, <8 x bfloat> %116, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %154 = shufflevector <8 x bfloat> %153, <8 x bfloat> %119, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %154, ptr addrspace(3) %151, align 16, !dbg !34
  %155 = or disjoint i32 %145, 4096, !dbg !34
  %156 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %155, !dbg !34
  %157 = shufflevector <2 x bfloat> %122, <2 x bfloat> %124, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %158 = shufflevector <8 x bfloat> %157, <8 x bfloat> %127, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %159 = shufflevector <8 x bfloat> %158, <8 x bfloat> %130, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %159, ptr addrspace(3) %156, align 16, !dbg !34
  %160 = or disjoint i32 %145, 6144, !dbg !34
  %161 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %160, !dbg !34
  %162 = shufflevector <2 x bfloat> %133, <2 x bfloat> %135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %163 = shufflevector <8 x bfloat> %162, <8 x bfloat> %138, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !34
  %164 = shufflevector <8 x bfloat> %163, <8 x bfloat> %141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !34
  store <8 x bfloat> %164, ptr addrspace(3) %161, align 16, !dbg !34
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %91) #2, !dbg !35
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !35
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !35
  %168 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !35
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !35
  %170 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !35
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !35
  %172 = shufflevector <2 x bfloat> %171, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %173 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !35
  %174 = bitcast i32 %173 to <2 x bfloat>, !dbg !35
  %175 = shufflevector <2 x bfloat> %174, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %93) #2, !dbg !35
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !35
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !35
  %179 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !35
  %180 = bitcast i32 %179 to <2 x bfloat>, !dbg !35
  %181 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !35
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !35
  %183 = shufflevector <2 x bfloat> %182, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %184 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !35
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !35
  %186 = shufflevector <2 x bfloat> %185, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %95) #2, !dbg !35
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !35
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !35
  %190 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !35
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !35
  %192 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !35
  %193 = bitcast i32 %192 to <2 x bfloat>, !dbg !35
  %194 = shufflevector <2 x bfloat> %193, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %195 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !35
  %196 = bitcast i32 %195 to <2 x bfloat>, !dbg !35
  %197 = shufflevector <2 x bfloat> %196, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %97) #2, !dbg !35
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !35
  %200 = bitcast i32 %199 to <2 x bfloat>, !dbg !35
  %201 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !35
  %202 = bitcast i32 %201 to <2 x bfloat>, !dbg !35
  %203 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !35
  %204 = bitcast i32 %203 to <2 x bfloat>, !dbg !35
  %205 = shufflevector <2 x bfloat> %204, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %206 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !35
  %207 = bitcast i32 %206 to <2 x bfloat>, !dbg !35
  %208 = shufflevector <2 x bfloat> %207, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %209 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %145, !dbg !35
  %210 = shufflevector <2 x bfloat> %167, <2 x bfloat> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %211 = shufflevector <8 x bfloat> %210, <8 x bfloat> %172, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %212 = shufflevector <8 x bfloat> %211, <8 x bfloat> %175, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %212, ptr addrspace(3) %209, align 16, !dbg !35
  %213 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %150, !dbg !35
  %214 = shufflevector <2 x bfloat> %178, <2 x bfloat> %180, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %215 = shufflevector <8 x bfloat> %214, <8 x bfloat> %183, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %216 = shufflevector <8 x bfloat> %215, <8 x bfloat> %186, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %216, ptr addrspace(3) %213, align 16, !dbg !35
  %217 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %155, !dbg !35
  %218 = shufflevector <2 x bfloat> %189, <2 x bfloat> %191, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %219 = shufflevector <8 x bfloat> %218, <8 x bfloat> %194, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %220 = shufflevector <8 x bfloat> %219, <8 x bfloat> %197, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %220, ptr addrspace(3) %217, align 16, !dbg !35
  %221 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %160, !dbg !35
  %222 = shufflevector <2 x bfloat> %200, <2 x bfloat> %202, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %223 = shufflevector <8 x bfloat> %222, <8 x bfloat> %205, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %224 = shufflevector <8 x bfloat> %223, <8 x bfloat> %208, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %224, ptr addrspace(3) %221, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %225 = and i32 %15, 7, !dbg !34
  %226 = and i32 %15, 15, !dbg !34
  %227 = lshr exact i32 %17, 1, !dbg !34
  %228 = xor i32 %34, %227, !dbg !34
  %229 = or disjoint i32 %22, %226, !dbg !34
  %230 = shl nuw nsw i32 %229, 6, !dbg !34
  %231 = or disjoint i32 %230, %228, !dbg !34
  %232 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %231, !dbg !34
  %233 = ptrtoint ptr addrspace(3) %232 to i32, !dbg !34
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %233) #2, !dbg !34
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !34
  %236 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !34
  %237 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !34
  %238 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !34
  %239 = or disjoint i32 %30, 16, !dbg !34
  %240 = xor i32 %239, %31, !dbg !34
  %241 = or disjoint i32 %240, %33, !dbg !34
  %242 = xor i32 %241, %227, !dbg !34
  %243 = or disjoint i32 %242, %230, !dbg !34
  %244 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %243, !dbg !34
  %245 = ptrtoint ptr addrspace(3) %244 to i32, !dbg !34
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %245) #2, !dbg !34
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !34
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !34
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !34
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !34
  %251 = or disjoint i32 %32, 32, !dbg !34
  %252 = xor i32 %251, %33, !dbg !34
  %253 = xor i32 %252, %227, !dbg !34
  %254 = or disjoint i32 %253, %230, !dbg !34
  %255 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %254, !dbg !34
  %256 = ptrtoint ptr addrspace(3) %255 to i32, !dbg !34
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %256) #2, !dbg !34
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !34
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !34
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !34
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !34
  %262 = or disjoint i32 %30, 48, !dbg !34
  %and.ra166 = and i32 %29, 48, !dbg !34
  %263 = or disjoint i32 %227, %and.ra166, !dbg !34
  %264 = xor i32 %263, %262, !dbg !34
  %265 = or disjoint i32 %264, %230, !dbg !34
  %266 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %265, !dbg !34
  %267 = ptrtoint ptr addrspace(3) %266 to i32, !dbg !34
  %268 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %267) #2, !dbg !34
  %269 = extractvalue { i32, i32, i32, i32 } %268, 0, !dbg !34
  %270 = extractvalue { i32, i32, i32, i32 } %268, 1, !dbg !34
  %271 = extractvalue { i32, i32, i32, i32 } %268, 2, !dbg !34
  %272 = extractvalue { i32, i32, i32, i32 } %268, 3, !dbg !34
  %273 = or disjoint i32 %225, 32, !dbg !34
  %274 = or disjoint i32 %22, %16, !dbg !34
  %275 = or disjoint i32 %274, %273, !dbg !34
  %276 = shl nuw nsw i32 %275, 6, !dbg !34
  %277 = or disjoint i32 %276, %228, !dbg !34
  %278 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %277, !dbg !34
  %279 = ptrtoint ptr addrspace(3) %278 to i32, !dbg !34
  %280 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %279) #2, !dbg !34
  %281 = extractvalue { i32, i32, i32, i32 } %280, 0, !dbg !34
  %282 = extractvalue { i32, i32, i32, i32 } %280, 1, !dbg !34
  %283 = extractvalue { i32, i32, i32, i32 } %280, 2, !dbg !34
  %284 = extractvalue { i32, i32, i32, i32 } %280, 3, !dbg !34
  %285 = or disjoint i32 %242, %276, !dbg !34
  %286 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %285, !dbg !34
  %287 = ptrtoint ptr addrspace(3) %286 to i32, !dbg !34
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %287) #2, !dbg !34
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !34
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !34
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !34
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !34
  %293 = or disjoint i32 %253, %276, !dbg !34
  %294 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %293, !dbg !34
  %295 = ptrtoint ptr addrspace(3) %294 to i32, !dbg !34
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %295) #2, !dbg !34
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !34
  %298 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !34
  %299 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !34
  %300 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !34
  %301 = or disjoint i32 %264, %276, !dbg !34
  %302 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %301, !dbg !34
  %303 = ptrtoint ptr addrspace(3) %302 to i32, !dbg !34
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %303) #2, !dbg !34
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !34
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !34
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !34
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !34
  %309 = or disjoint i32 %225, 64, !dbg !34
  %310 = or disjoint i32 %274, %309, !dbg !34
  %311 = shl nuw nsw i32 %310, 6, !dbg !34
  %312 = or disjoint i32 %311, %228, !dbg !34
  %313 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %312, !dbg !34
  %314 = ptrtoint ptr addrspace(3) %313 to i32, !dbg !34
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %314) #2, !dbg !34
  %316 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !34
  %317 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !34
  %318 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !34
  %319 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !34
  %320 = or disjoint i32 %242, %311, !dbg !34
  %321 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %320, !dbg !34
  %322 = ptrtoint ptr addrspace(3) %321 to i32, !dbg !34
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %322) #2, !dbg !34
  %324 = extractvalue { i32, i32, i32, i32 } %323, 0, !dbg !34
  %325 = extractvalue { i32, i32, i32, i32 } %323, 1, !dbg !34
  %326 = extractvalue { i32, i32, i32, i32 } %323, 2, !dbg !34
  %327 = extractvalue { i32, i32, i32, i32 } %323, 3, !dbg !34
  %328 = or disjoint i32 %253, %311, !dbg !34
  %329 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %328, !dbg !34
  %330 = ptrtoint ptr addrspace(3) %329 to i32, !dbg !34
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %330) #2, !dbg !34
  %332 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !34
  %333 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !34
  %334 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !34
  %335 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !34
  %336 = or disjoint i32 %264, %311, !dbg !34
  %337 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %336, !dbg !34
  %338 = ptrtoint ptr addrspace(3) %337 to i32, !dbg !34
  %339 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %338) #2, !dbg !34
  %340 = extractvalue { i32, i32, i32, i32 } %339, 0, !dbg !34
  %341 = extractvalue { i32, i32, i32, i32 } %339, 1, !dbg !34
  %342 = extractvalue { i32, i32, i32, i32 } %339, 2, !dbg !34
  %343 = extractvalue { i32, i32, i32, i32 } %339, 3, !dbg !34
  %344 = or disjoint i32 %225, 96, !dbg !34
  %345 = or disjoint i32 %274, %344, !dbg !34
  %346 = shl nuw nsw i32 %345, 6, !dbg !34
  %347 = or disjoint i32 %346, %228, !dbg !34
  %348 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %347, !dbg !34
  %349 = ptrtoint ptr addrspace(3) %348 to i32, !dbg !34
  %350 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %349) #2, !dbg !34
  %351 = extractvalue { i32, i32, i32, i32 } %350, 0, !dbg !34
  %352 = extractvalue { i32, i32, i32, i32 } %350, 1, !dbg !34
  %353 = extractvalue { i32, i32, i32, i32 } %350, 2, !dbg !34
  %354 = extractvalue { i32, i32, i32, i32 } %350, 3, !dbg !34
  %355 = or disjoint i32 %242, %346, !dbg !34
  %356 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %355, !dbg !34
  %357 = ptrtoint ptr addrspace(3) %356 to i32, !dbg !34
  %358 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %357) #2, !dbg !34
  %359 = extractvalue { i32, i32, i32, i32 } %358, 0, !dbg !34
  %360 = extractvalue { i32, i32, i32, i32 } %358, 1, !dbg !34
  %361 = extractvalue { i32, i32, i32, i32 } %358, 2, !dbg !34
  %362 = extractvalue { i32, i32, i32, i32 } %358, 3, !dbg !34
  %363 = or disjoint i32 %253, %346, !dbg !34
  %364 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %363, !dbg !34
  %365 = ptrtoint ptr addrspace(3) %364 to i32, !dbg !34
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %365) #2, !dbg !34
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !34
  %368 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !34
  %369 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !34
  %370 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !34
  %371 = or disjoint i32 %264, %346, !dbg !34
  %372 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %371, !dbg !34
  %373 = ptrtoint ptr addrspace(3) %372 to i32, !dbg !34
  %374 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %373) #2, !dbg !34
  %375 = extractvalue { i32, i32, i32, i32 } %374, 0, !dbg !34
  %376 = extractvalue { i32, i32, i32, i32 } %374, 1, !dbg !34
  %377 = extractvalue { i32, i32, i32, i32 } %374, 2, !dbg !34
  %378 = extractvalue { i32, i32, i32, i32 } %374, 3, !dbg !34
  %379 = lshr i32 %15, 2, !dbg !35
  %380 = and i32 %379, 24, !dbg !35
  %381 = or disjoint i32 %380, %225, !dbg !35
  %382 = shl nuw nsw i32 %381, 6, !dbg !35
  %383 = or disjoint i32 %382, %142, !dbg !35
  %384 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %383, !dbg !35
  %385 = ptrtoint ptr addrspace(3) %384 to i32, !dbg !35
  %386 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %385) #2, !dbg !35
  %387 = extractvalue { i32, i32, i32, i32 } %386, 0, !dbg !35
  %388 = extractvalue { i32, i32, i32, i32 } %386, 1, !dbg !35
  %389 = extractvalue { i32, i32, i32, i32 } %386, 2, !dbg !35
  %390 = extractvalue { i32, i32, i32, i32 } %386, 3, !dbg !35
  %391 = xor i32 %252, %and.ra, !dbg !35
  %392 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %391, !dbg !35
  %393 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %392, i32 %382, !dbg !35
  %394 = ptrtoint ptr addrspace(3) %393 to i32, !dbg !35
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %394) #2, !dbg !35
  %396 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !35
  %397 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !35
  %398 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !35
  %399 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !35
  %400 = or disjoint i32 %380, %273, !dbg !35
  %401 = shl nuw nsw i32 %400, 6, !dbg !35
  %402 = or disjoint i32 %401, %142, !dbg !35
  %403 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %402, !dbg !35
  %404 = ptrtoint ptr addrspace(3) %403 to i32, !dbg !35
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %404) #2, !dbg !35
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !35
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !35
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !35
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !35
  %410 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %392, i32 %401, !dbg !35
  %411 = ptrtoint ptr addrspace(3) %410 to i32, !dbg !35
  %412 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %411) #2, !dbg !35
  %413 = extractvalue { i32, i32, i32, i32 } %412, 0, !dbg !35
  %414 = extractvalue { i32, i32, i32, i32 } %412, 1, !dbg !35
  %415 = extractvalue { i32, i32, i32, i32 } %412, 2, !dbg !35
  %416 = extractvalue { i32, i32, i32, i32 } %412, 3, !dbg !35
  %417 = or disjoint i32 %380, %309, !dbg !35
  %418 = shl nuw nsw i32 %417, 6, !dbg !35
  %419 = or disjoint i32 %418, %142, !dbg !35
  %420 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %419, !dbg !35
  %421 = ptrtoint ptr addrspace(3) %420 to i32, !dbg !35
  %422 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %421) #2, !dbg !35
  %423 = extractvalue { i32, i32, i32, i32 } %422, 0, !dbg !35
  %424 = extractvalue { i32, i32, i32, i32 } %422, 1, !dbg !35
  %425 = extractvalue { i32, i32, i32, i32 } %422, 2, !dbg !35
  %426 = extractvalue { i32, i32, i32, i32 } %422, 3, !dbg !35
  %427 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %392, i32 %418, !dbg !35
  %428 = ptrtoint ptr addrspace(3) %427 to i32, !dbg !35
  %429 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %428) #2, !dbg !35
  %430 = extractvalue { i32, i32, i32, i32 } %429, 0, !dbg !35
  %431 = extractvalue { i32, i32, i32, i32 } %429, 1, !dbg !35
  %432 = extractvalue { i32, i32, i32, i32 } %429, 2, !dbg !35
  %433 = extractvalue { i32, i32, i32, i32 } %429, 3, !dbg !35
  %434 = or disjoint i32 %380, %344, !dbg !35
  %435 = shl nuw nsw i32 %434, 6, !dbg !35
  %436 = or disjoint i32 %435, %142, !dbg !35
  %437 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %436, !dbg !35
  %438 = ptrtoint ptr addrspace(3) %437 to i32, !dbg !35
  %439 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %438) #2, !dbg !35
  %440 = extractvalue { i32, i32, i32, i32 } %439, 0, !dbg !35
  %441 = extractvalue { i32, i32, i32, i32 } %439, 1, !dbg !35
  %442 = extractvalue { i32, i32, i32, i32 } %439, 2, !dbg !35
  %443 = extractvalue { i32, i32, i32, i32 } %439, 3, !dbg !35
  %444 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %392, i32 %435, !dbg !35
  %445 = ptrtoint ptr addrspace(3) %444 to i32, !dbg !35
  %446 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %445) #2, !dbg !35
  %447 = extractvalue { i32, i32, i32, i32 } %446, 0, !dbg !35
  %448 = extractvalue { i32, i32, i32, i32 } %446, 1, !dbg !35
  %449 = extractvalue { i32, i32, i32, i32 } %446, 2, !dbg !35
  %450 = extractvalue { i32, i32, i32, i32 } %446, 3, !dbg !35
  %451 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %235, i32 %236, i32 %237, i32 %238, i32 %387, i32 %388) #2, !dbg !36
  %452 = extractvalue { float, float, float, float } %451, 0, !dbg !36
  %453 = extractvalue { float, float, float, float } %451, 1, !dbg !36
  %454 = extractvalue { float, float, float, float } %451, 2, !dbg !36
  %455 = extractvalue { float, float, float, float } %451, 3, !dbg !36
  %456 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %235, i32 %236, i32 %237, i32 %238, i32 %406, i32 %407) #2, !dbg !36
  %457 = extractvalue { float, float, float, float } %456, 0, !dbg !36
  %458 = extractvalue { float, float, float, float } %456, 1, !dbg !36
  %459 = extractvalue { float, float, float, float } %456, 2, !dbg !36
  %460 = extractvalue { float, float, float, float } %456, 3, !dbg !36
  %461 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %235, i32 %236, i32 %237, i32 %238, i32 %423, i32 %424) #2, !dbg !36
  %462 = extractvalue { float, float, float, float } %461, 0, !dbg !36
  %463 = extractvalue { float, float, float, float } %461, 1, !dbg !36
  %464 = extractvalue { float, float, float, float } %461, 2, !dbg !36
  %465 = extractvalue { float, float, float, float } %461, 3, !dbg !36
  %466 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %235, i32 %236, i32 %237, i32 %238, i32 %440, i32 %441) #2, !dbg !36
  %467 = extractvalue { float, float, float, float } %466, 0, !dbg !36
  %468 = extractvalue { float, float, float, float } %466, 1, !dbg !36
  %469 = extractvalue { float, float, float, float } %466, 2, !dbg !36
  %470 = extractvalue { float, float, float, float } %466, 3, !dbg !36
  %471 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %281, i32 %282, i32 %283, i32 %284, i32 %387, i32 %388) #2, !dbg !36
  %472 = extractvalue { float, float, float, float } %471, 0, !dbg !36
  %473 = extractvalue { float, float, float, float } %471, 1, !dbg !36
  %474 = extractvalue { float, float, float, float } %471, 2, !dbg !36
  %475 = extractvalue { float, float, float, float } %471, 3, !dbg !36
  %476 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %281, i32 %282, i32 %283, i32 %284, i32 %406, i32 %407) #2, !dbg !36
  %477 = extractvalue { float, float, float, float } %476, 0, !dbg !36
  %478 = extractvalue { float, float, float, float } %476, 1, !dbg !36
  %479 = extractvalue { float, float, float, float } %476, 2, !dbg !36
  %480 = extractvalue { float, float, float, float } %476, 3, !dbg !36
  %481 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %281, i32 %282, i32 %283, i32 %284, i32 %423, i32 %424) #2, !dbg !36
  %482 = extractvalue { float, float, float, float } %481, 0, !dbg !36
  %483 = extractvalue { float, float, float, float } %481, 1, !dbg !36
  %484 = extractvalue { float, float, float, float } %481, 2, !dbg !36
  %485 = extractvalue { float, float, float, float } %481, 3, !dbg !36
  %486 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %281, i32 %282, i32 %283, i32 %284, i32 %440, i32 %441) #2, !dbg !36
  %487 = extractvalue { float, float, float, float } %486, 0, !dbg !36
  %488 = extractvalue { float, float, float, float } %486, 1, !dbg !36
  %489 = extractvalue { float, float, float, float } %486, 2, !dbg !36
  %490 = extractvalue { float, float, float, float } %486, 3, !dbg !36
  %491 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %316, i32 %317, i32 %318, i32 %319, i32 %387, i32 %388) #2, !dbg !36
  %492 = extractvalue { float, float, float, float } %491, 0, !dbg !36
  %493 = extractvalue { float, float, float, float } %491, 1, !dbg !36
  %494 = extractvalue { float, float, float, float } %491, 2, !dbg !36
  %495 = extractvalue { float, float, float, float } %491, 3, !dbg !36
  %496 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %316, i32 %317, i32 %318, i32 %319, i32 %406, i32 %407) #2, !dbg !36
  %497 = extractvalue { float, float, float, float } %496, 0, !dbg !36
  %498 = extractvalue { float, float, float, float } %496, 1, !dbg !36
  %499 = extractvalue { float, float, float, float } %496, 2, !dbg !36
  %500 = extractvalue { float, float, float, float } %496, 3, !dbg !36
  %501 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %316, i32 %317, i32 %318, i32 %319, i32 %423, i32 %424) #2, !dbg !36
  %502 = extractvalue { float, float, float, float } %501, 0, !dbg !36
  %503 = extractvalue { float, float, float, float } %501, 1, !dbg !36
  %504 = extractvalue { float, float, float, float } %501, 2, !dbg !36
  %505 = extractvalue { float, float, float, float } %501, 3, !dbg !36
  %506 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %316, i32 %317, i32 %318, i32 %319, i32 %440, i32 %441) #2, !dbg !36
  %507 = extractvalue { float, float, float, float } %506, 0, !dbg !36
  %508 = extractvalue { float, float, float, float } %506, 1, !dbg !36
  %509 = extractvalue { float, float, float, float } %506, 2, !dbg !36
  %510 = extractvalue { float, float, float, float } %506, 3, !dbg !36
  %511 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %351, i32 %352, i32 %353, i32 %354, i32 %387, i32 %388) #2, !dbg !36
  %512 = extractvalue { float, float, float, float } %511, 0, !dbg !36
  %513 = extractvalue { float, float, float, float } %511, 1, !dbg !36
  %514 = extractvalue { float, float, float, float } %511, 2, !dbg !36
  %515 = extractvalue { float, float, float, float } %511, 3, !dbg !36
  %516 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %351, i32 %352, i32 %353, i32 %354, i32 %406, i32 %407) #2, !dbg !36
  %517 = extractvalue { float, float, float, float } %516, 0, !dbg !36
  %518 = extractvalue { float, float, float, float } %516, 1, !dbg !36
  %519 = extractvalue { float, float, float, float } %516, 2, !dbg !36
  %520 = extractvalue { float, float, float, float } %516, 3, !dbg !36
  %521 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %351, i32 %352, i32 %353, i32 %354, i32 %423, i32 %424) #2, !dbg !36
  %522 = extractvalue { float, float, float, float } %521, 0, !dbg !36
  %523 = extractvalue { float, float, float, float } %521, 1, !dbg !36
  %524 = extractvalue { float, float, float, float } %521, 2, !dbg !36
  %525 = extractvalue { float, float, float, float } %521, 3, !dbg !36
  %526 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %351, i32 %352, i32 %353, i32 %354, i32 %440, i32 %441) #2, !dbg !36
  %527 = extractvalue { float, float, float, float } %526, 0, !dbg !36
  %528 = extractvalue { float, float, float, float } %526, 1, !dbg !36
  %529 = extractvalue { float, float, float, float } %526, 2, !dbg !36
  %530 = extractvalue { float, float, float, float } %526, 3, !dbg !36
  %531 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %452, float %453, float %454, float %455, i32 %247, i32 %248, i32 %249, i32 %250, i32 %389, i32 %390) #2, !dbg !36
  %532 = extractvalue { float, float, float, float } %531, 0, !dbg !36
  %533 = extractvalue { float, float, float, float } %531, 1, !dbg !36
  %534 = extractvalue { float, float, float, float } %531, 2, !dbg !36
  %535 = extractvalue { float, float, float, float } %531, 3, !dbg !36
  %536 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %457, float %458, float %459, float %460, i32 %247, i32 %248, i32 %249, i32 %250, i32 %408, i32 %409) #2, !dbg !36
  %537 = extractvalue { float, float, float, float } %536, 0, !dbg !36
  %538 = extractvalue { float, float, float, float } %536, 1, !dbg !36
  %539 = extractvalue { float, float, float, float } %536, 2, !dbg !36
  %540 = extractvalue { float, float, float, float } %536, 3, !dbg !36
  %541 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %462, float %463, float %464, float %465, i32 %247, i32 %248, i32 %249, i32 %250, i32 %425, i32 %426) #2, !dbg !36
  %542 = extractvalue { float, float, float, float } %541, 0, !dbg !36
  %543 = extractvalue { float, float, float, float } %541, 1, !dbg !36
  %544 = extractvalue { float, float, float, float } %541, 2, !dbg !36
  %545 = extractvalue { float, float, float, float } %541, 3, !dbg !36
  %546 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %467, float %468, float %469, float %470, i32 %247, i32 %248, i32 %249, i32 %250, i32 %442, i32 %443) #2, !dbg !36
  %547 = extractvalue { float, float, float, float } %546, 0, !dbg !36
  %548 = extractvalue { float, float, float, float } %546, 1, !dbg !36
  %549 = extractvalue { float, float, float, float } %546, 2, !dbg !36
  %550 = extractvalue { float, float, float, float } %546, 3, !dbg !36
  %551 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %472, float %473, float %474, float %475, i32 %289, i32 %290, i32 %291, i32 %292, i32 %389, i32 %390) #2, !dbg !36
  %552 = extractvalue { float, float, float, float } %551, 0, !dbg !36
  %553 = extractvalue { float, float, float, float } %551, 1, !dbg !36
  %554 = extractvalue { float, float, float, float } %551, 2, !dbg !36
  %555 = extractvalue { float, float, float, float } %551, 3, !dbg !36
  %556 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %477, float %478, float %479, float %480, i32 %289, i32 %290, i32 %291, i32 %292, i32 %408, i32 %409) #2, !dbg !36
  %557 = extractvalue { float, float, float, float } %556, 0, !dbg !36
  %558 = extractvalue { float, float, float, float } %556, 1, !dbg !36
  %559 = extractvalue { float, float, float, float } %556, 2, !dbg !36
  %560 = extractvalue { float, float, float, float } %556, 3, !dbg !36
  %561 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %482, float %483, float %484, float %485, i32 %289, i32 %290, i32 %291, i32 %292, i32 %425, i32 %426) #2, !dbg !36
  %562 = extractvalue { float, float, float, float } %561, 0, !dbg !36
  %563 = extractvalue { float, float, float, float } %561, 1, !dbg !36
  %564 = extractvalue { float, float, float, float } %561, 2, !dbg !36
  %565 = extractvalue { float, float, float, float } %561, 3, !dbg !36
  %566 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %487, float %488, float %489, float %490, i32 %289, i32 %290, i32 %291, i32 %292, i32 %442, i32 %443) #2, !dbg !36
  %567 = extractvalue { float, float, float, float } %566, 0, !dbg !36
  %568 = extractvalue { float, float, float, float } %566, 1, !dbg !36
  %569 = extractvalue { float, float, float, float } %566, 2, !dbg !36
  %570 = extractvalue { float, float, float, float } %566, 3, !dbg !36
  %571 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %492, float %493, float %494, float %495, i32 %324, i32 %325, i32 %326, i32 %327, i32 %389, i32 %390) #2, !dbg !36
  %572 = extractvalue { float, float, float, float } %571, 0, !dbg !36
  %573 = extractvalue { float, float, float, float } %571, 1, !dbg !36
  %574 = extractvalue { float, float, float, float } %571, 2, !dbg !36
  %575 = extractvalue { float, float, float, float } %571, 3, !dbg !36
  %576 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %497, float %498, float %499, float %500, i32 %324, i32 %325, i32 %326, i32 %327, i32 %408, i32 %409) #2, !dbg !36
  %577 = extractvalue { float, float, float, float } %576, 0, !dbg !36
  %578 = extractvalue { float, float, float, float } %576, 1, !dbg !36
  %579 = extractvalue { float, float, float, float } %576, 2, !dbg !36
  %580 = extractvalue { float, float, float, float } %576, 3, !dbg !36
  %581 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %502, float %503, float %504, float %505, i32 %324, i32 %325, i32 %326, i32 %327, i32 %425, i32 %426) #2, !dbg !36
  %582 = extractvalue { float, float, float, float } %581, 0, !dbg !36
  %583 = extractvalue { float, float, float, float } %581, 1, !dbg !36
  %584 = extractvalue { float, float, float, float } %581, 2, !dbg !36
  %585 = extractvalue { float, float, float, float } %581, 3, !dbg !36
  %586 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %507, float %508, float %509, float %510, i32 %324, i32 %325, i32 %326, i32 %327, i32 %442, i32 %443) #2, !dbg !36
  %587 = extractvalue { float, float, float, float } %586, 0, !dbg !36
  %588 = extractvalue { float, float, float, float } %586, 1, !dbg !36
  %589 = extractvalue { float, float, float, float } %586, 2, !dbg !36
  %590 = extractvalue { float, float, float, float } %586, 3, !dbg !36
  %591 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %512, float %513, float %514, float %515, i32 %359, i32 %360, i32 %361, i32 %362, i32 %389, i32 %390) #2, !dbg !36
  %592 = extractvalue { float, float, float, float } %591, 0, !dbg !36
  %593 = extractvalue { float, float, float, float } %591, 1, !dbg !36
  %594 = extractvalue { float, float, float, float } %591, 2, !dbg !36
  %595 = extractvalue { float, float, float, float } %591, 3, !dbg !36
  %596 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %517, float %518, float %519, float %520, i32 %359, i32 %360, i32 %361, i32 %362, i32 %408, i32 %409) #2, !dbg !36
  %597 = extractvalue { float, float, float, float } %596, 0, !dbg !36
  %598 = extractvalue { float, float, float, float } %596, 1, !dbg !36
  %599 = extractvalue { float, float, float, float } %596, 2, !dbg !36
  %600 = extractvalue { float, float, float, float } %596, 3, !dbg !36
  %601 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %522, float %523, float %524, float %525, i32 %359, i32 %360, i32 %361, i32 %362, i32 %425, i32 %426) #2, !dbg !36
  %602 = extractvalue { float, float, float, float } %601, 0, !dbg !36
  %603 = extractvalue { float, float, float, float } %601, 1, !dbg !36
  %604 = extractvalue { float, float, float, float } %601, 2, !dbg !36
  %605 = extractvalue { float, float, float, float } %601, 3, !dbg !36
  %606 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %527, float %528, float %529, float %530, i32 %359, i32 %360, i32 %361, i32 %362, i32 %442, i32 %443) #2, !dbg !36
  %607 = extractvalue { float, float, float, float } %606, 0, !dbg !36
  %608 = extractvalue { float, float, float, float } %606, 1, !dbg !36
  %609 = extractvalue { float, float, float, float } %606, 2, !dbg !36
  %610 = extractvalue { float, float, float, float } %606, 3, !dbg !36
  %611 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %532, float %533, float %534, float %535, i32 %258, i32 %259, i32 %260, i32 %261, i32 %396, i32 %397) #2, !dbg !36
  %612 = extractvalue { float, float, float, float } %611, 0, !dbg !36
  %613 = extractvalue { float, float, float, float } %611, 1, !dbg !36
  %614 = extractvalue { float, float, float, float } %611, 2, !dbg !36
  %615 = extractvalue { float, float, float, float } %611, 3, !dbg !36
  %616 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %537, float %538, float %539, float %540, i32 %258, i32 %259, i32 %260, i32 %261, i32 %413, i32 %414) #2, !dbg !36
  %617 = extractvalue { float, float, float, float } %616, 0, !dbg !36
  %618 = extractvalue { float, float, float, float } %616, 1, !dbg !36
  %619 = extractvalue { float, float, float, float } %616, 2, !dbg !36
  %620 = extractvalue { float, float, float, float } %616, 3, !dbg !36
  %621 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %542, float %543, float %544, float %545, i32 %258, i32 %259, i32 %260, i32 %261, i32 %430, i32 %431) #2, !dbg !36
  %622 = extractvalue { float, float, float, float } %621, 0, !dbg !36
  %623 = extractvalue { float, float, float, float } %621, 1, !dbg !36
  %624 = extractvalue { float, float, float, float } %621, 2, !dbg !36
  %625 = extractvalue { float, float, float, float } %621, 3, !dbg !36
  %626 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %547, float %548, float %549, float %550, i32 %258, i32 %259, i32 %260, i32 %261, i32 %447, i32 %448) #2, !dbg !36
  %627 = extractvalue { float, float, float, float } %626, 0, !dbg !36
  %628 = extractvalue { float, float, float, float } %626, 1, !dbg !36
  %629 = extractvalue { float, float, float, float } %626, 2, !dbg !36
  %630 = extractvalue { float, float, float, float } %626, 3, !dbg !36
  %631 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %552, float %553, float %554, float %555, i32 %297, i32 %298, i32 %299, i32 %300, i32 %396, i32 %397) #2, !dbg !36
  %632 = extractvalue { float, float, float, float } %631, 0, !dbg !36
  %633 = extractvalue { float, float, float, float } %631, 1, !dbg !36
  %634 = extractvalue { float, float, float, float } %631, 2, !dbg !36
  %635 = extractvalue { float, float, float, float } %631, 3, !dbg !36
  %636 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %557, float %558, float %559, float %560, i32 %297, i32 %298, i32 %299, i32 %300, i32 %413, i32 %414) #2, !dbg !36
  %637 = extractvalue { float, float, float, float } %636, 0, !dbg !36
  %638 = extractvalue { float, float, float, float } %636, 1, !dbg !36
  %639 = extractvalue { float, float, float, float } %636, 2, !dbg !36
  %640 = extractvalue { float, float, float, float } %636, 3, !dbg !36
  %641 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %562, float %563, float %564, float %565, i32 %297, i32 %298, i32 %299, i32 %300, i32 %430, i32 %431) #2, !dbg !36
  %642 = extractvalue { float, float, float, float } %641, 0, !dbg !36
  %643 = extractvalue { float, float, float, float } %641, 1, !dbg !36
  %644 = extractvalue { float, float, float, float } %641, 2, !dbg !36
  %645 = extractvalue { float, float, float, float } %641, 3, !dbg !36
  %646 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %567, float %568, float %569, float %570, i32 %297, i32 %298, i32 %299, i32 %300, i32 %447, i32 %448) #2, !dbg !36
  %647 = extractvalue { float, float, float, float } %646, 0, !dbg !36
  %648 = extractvalue { float, float, float, float } %646, 1, !dbg !36
  %649 = extractvalue { float, float, float, float } %646, 2, !dbg !36
  %650 = extractvalue { float, float, float, float } %646, 3, !dbg !36
  %651 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %572, float %573, float %574, float %575, i32 %332, i32 %333, i32 %334, i32 %335, i32 %396, i32 %397) #2, !dbg !36
  %652 = extractvalue { float, float, float, float } %651, 0, !dbg !36
  %653 = extractvalue { float, float, float, float } %651, 1, !dbg !36
  %654 = extractvalue { float, float, float, float } %651, 2, !dbg !36
  %655 = extractvalue { float, float, float, float } %651, 3, !dbg !36
  %656 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %577, float %578, float %579, float %580, i32 %332, i32 %333, i32 %334, i32 %335, i32 %413, i32 %414) #2, !dbg !36
  %657 = extractvalue { float, float, float, float } %656, 0, !dbg !36
  %658 = extractvalue { float, float, float, float } %656, 1, !dbg !36
  %659 = extractvalue { float, float, float, float } %656, 2, !dbg !36
  %660 = extractvalue { float, float, float, float } %656, 3, !dbg !36
  %661 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %582, float %583, float %584, float %585, i32 %332, i32 %333, i32 %334, i32 %335, i32 %430, i32 %431) #2, !dbg !36
  %662 = extractvalue { float, float, float, float } %661, 0, !dbg !36
  %663 = extractvalue { float, float, float, float } %661, 1, !dbg !36
  %664 = extractvalue { float, float, float, float } %661, 2, !dbg !36
  %665 = extractvalue { float, float, float, float } %661, 3, !dbg !36
  %666 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %587, float %588, float %589, float %590, i32 %332, i32 %333, i32 %334, i32 %335, i32 %447, i32 %448) #2, !dbg !36
  %667 = extractvalue { float, float, float, float } %666, 0, !dbg !36
  %668 = extractvalue { float, float, float, float } %666, 1, !dbg !36
  %669 = extractvalue { float, float, float, float } %666, 2, !dbg !36
  %670 = extractvalue { float, float, float, float } %666, 3, !dbg !36
  %671 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %592, float %593, float %594, float %595, i32 %367, i32 %368, i32 %369, i32 %370, i32 %396, i32 %397) #2, !dbg !36
  %672 = extractvalue { float, float, float, float } %671, 0, !dbg !36
  %673 = extractvalue { float, float, float, float } %671, 1, !dbg !36
  %674 = extractvalue { float, float, float, float } %671, 2, !dbg !36
  %675 = extractvalue { float, float, float, float } %671, 3, !dbg !36
  %676 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %597, float %598, float %599, float %600, i32 %367, i32 %368, i32 %369, i32 %370, i32 %413, i32 %414) #2, !dbg !36
  %677 = extractvalue { float, float, float, float } %676, 0, !dbg !36
  %678 = extractvalue { float, float, float, float } %676, 1, !dbg !36
  %679 = extractvalue { float, float, float, float } %676, 2, !dbg !36
  %680 = extractvalue { float, float, float, float } %676, 3, !dbg !36
  %681 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %602, float %603, float %604, float %605, i32 %367, i32 %368, i32 %369, i32 %370, i32 %430, i32 %431) #2, !dbg !36
  %682 = extractvalue { float, float, float, float } %681, 0, !dbg !36
  %683 = extractvalue { float, float, float, float } %681, 1, !dbg !36
  %684 = extractvalue { float, float, float, float } %681, 2, !dbg !36
  %685 = extractvalue { float, float, float, float } %681, 3, !dbg !36
  %686 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %607, float %608, float %609, float %610, i32 %367, i32 %368, i32 %369, i32 %370, i32 %447, i32 %448) #2, !dbg !36
  %687 = extractvalue { float, float, float, float } %686, 0, !dbg !36
  %688 = extractvalue { float, float, float, float } %686, 1, !dbg !36
  %689 = extractvalue { float, float, float, float } %686, 2, !dbg !36
  %690 = extractvalue { float, float, float, float } %686, 3, !dbg !36
  %691 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %612, float %613, float %614, float %615, i32 %269, i32 %270, i32 %271, i32 %272, i32 %398, i32 %399) #2, !dbg !36
  %692 = extractvalue { float, float, float, float } %691, 0, !dbg !36
  %693 = extractvalue { float, float, float, float } %691, 1, !dbg !36
  %694 = extractvalue { float, float, float, float } %691, 2, !dbg !36
  %695 = extractvalue { float, float, float, float } %691, 3, !dbg !36
  %696 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %617, float %618, float %619, float %620, i32 %269, i32 %270, i32 %271, i32 %272, i32 %415, i32 %416) #2, !dbg !36
  %697 = extractvalue { float, float, float, float } %696, 0, !dbg !36
  %698 = extractvalue { float, float, float, float } %696, 1, !dbg !36
  %699 = extractvalue { float, float, float, float } %696, 2, !dbg !36
  %700 = extractvalue { float, float, float, float } %696, 3, !dbg !36
  %701 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %622, float %623, float %624, float %625, i32 %269, i32 %270, i32 %271, i32 %272, i32 %432, i32 %433) #2, !dbg !36
  %702 = extractvalue { float, float, float, float } %701, 0, !dbg !36
  %703 = extractvalue { float, float, float, float } %701, 1, !dbg !36
  %704 = extractvalue { float, float, float, float } %701, 2, !dbg !36
  %705 = extractvalue { float, float, float, float } %701, 3, !dbg !36
  %706 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %627, float %628, float %629, float %630, i32 %269, i32 %270, i32 %271, i32 %272, i32 %449, i32 %450) #2, !dbg !36
  %707 = extractvalue { float, float, float, float } %706, 0, !dbg !36
  %708 = extractvalue { float, float, float, float } %706, 1, !dbg !36
  %709 = extractvalue { float, float, float, float } %706, 2, !dbg !36
  %710 = extractvalue { float, float, float, float } %706, 3, !dbg !36
  %711 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %632, float %633, float %634, float %635, i32 %305, i32 %306, i32 %307, i32 %308, i32 %398, i32 %399) #2, !dbg !36
  %712 = extractvalue { float, float, float, float } %711, 0, !dbg !36
  %713 = extractvalue { float, float, float, float } %711, 1, !dbg !36
  %714 = extractvalue { float, float, float, float } %711, 2, !dbg !36
  %715 = extractvalue { float, float, float, float } %711, 3, !dbg !36
  %716 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %637, float %638, float %639, float %640, i32 %305, i32 %306, i32 %307, i32 %308, i32 %415, i32 %416) #2, !dbg !36
  %717 = extractvalue { float, float, float, float } %716, 0, !dbg !36
  %718 = extractvalue { float, float, float, float } %716, 1, !dbg !36
  %719 = extractvalue { float, float, float, float } %716, 2, !dbg !36
  %720 = extractvalue { float, float, float, float } %716, 3, !dbg !36
  %721 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %642, float %643, float %644, float %645, i32 %305, i32 %306, i32 %307, i32 %308, i32 %432, i32 %433) #2, !dbg !36
  %722 = extractvalue { float, float, float, float } %721, 0, !dbg !36
  %723 = extractvalue { float, float, float, float } %721, 1, !dbg !36
  %724 = extractvalue { float, float, float, float } %721, 2, !dbg !36
  %725 = extractvalue { float, float, float, float } %721, 3, !dbg !36
  %726 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %647, float %648, float %649, float %650, i32 %305, i32 %306, i32 %307, i32 %308, i32 %449, i32 %450) #2, !dbg !36
  %727 = extractvalue { float, float, float, float } %726, 0, !dbg !36
  %728 = extractvalue { float, float, float, float } %726, 1, !dbg !36
  %729 = extractvalue { float, float, float, float } %726, 2, !dbg !36
  %730 = extractvalue { float, float, float, float } %726, 3, !dbg !36
  %731 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %652, float %653, float %654, float %655, i32 %340, i32 %341, i32 %342, i32 %343, i32 %398, i32 %399) #2, !dbg !36
  %732 = extractvalue { float, float, float, float } %731, 0, !dbg !36
  %733 = extractvalue { float, float, float, float } %731, 1, !dbg !36
  %734 = extractvalue { float, float, float, float } %731, 2, !dbg !36
  %735 = extractvalue { float, float, float, float } %731, 3, !dbg !36
  %736 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %657, float %658, float %659, float %660, i32 %340, i32 %341, i32 %342, i32 %343, i32 %415, i32 %416) #2, !dbg !36
  %737 = extractvalue { float, float, float, float } %736, 0, !dbg !36
  %738 = extractvalue { float, float, float, float } %736, 1, !dbg !36
  %739 = extractvalue { float, float, float, float } %736, 2, !dbg !36
  %740 = extractvalue { float, float, float, float } %736, 3, !dbg !36
  %741 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %662, float %663, float %664, float %665, i32 %340, i32 %341, i32 %342, i32 %343, i32 %432, i32 %433) #2, !dbg !36
  %742 = extractvalue { float, float, float, float } %741, 0, !dbg !36
  %743 = extractvalue { float, float, float, float } %741, 1, !dbg !36
  %744 = extractvalue { float, float, float, float } %741, 2, !dbg !36
  %745 = extractvalue { float, float, float, float } %741, 3, !dbg !36
  %746 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %667, float %668, float %669, float %670, i32 %340, i32 %341, i32 %342, i32 %343, i32 %449, i32 %450) #2, !dbg !36
  %747 = extractvalue { float, float, float, float } %746, 0, !dbg !36
  %748 = extractvalue { float, float, float, float } %746, 1, !dbg !36
  %749 = extractvalue { float, float, float, float } %746, 2, !dbg !36
  %750 = extractvalue { float, float, float, float } %746, 3, !dbg !36
  %751 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %672, float %673, float %674, float %675, i32 %375, i32 %376, i32 %377, i32 %378, i32 %398, i32 %399) #2, !dbg !36
  %752 = extractvalue { float, float, float, float } %751, 0, !dbg !36
  %753 = extractvalue { float, float, float, float } %751, 1, !dbg !36
  %754 = extractvalue { float, float, float, float } %751, 2, !dbg !36
  %755 = extractvalue { float, float, float, float } %751, 3, !dbg !36
  %756 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %677, float %678, float %679, float %680, i32 %375, i32 %376, i32 %377, i32 %378, i32 %415, i32 %416) #2, !dbg !36
  %757 = extractvalue { float, float, float, float } %756, 0, !dbg !36
  %758 = extractvalue { float, float, float, float } %756, 1, !dbg !36
  %759 = extractvalue { float, float, float, float } %756, 2, !dbg !36
  %760 = extractvalue { float, float, float, float } %756, 3, !dbg !36
  %761 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %682, float %683, float %684, float %685, i32 %375, i32 %376, i32 %377, i32 %378, i32 %432, i32 %433) #2, !dbg !36
  %762 = extractvalue { float, float, float, float } %761, 0, !dbg !36
  %763 = extractvalue { float, float, float, float } %761, 1, !dbg !36
  %764 = extractvalue { float, float, float, float } %761, 2, !dbg !36
  %765 = extractvalue { float, float, float, float } %761, 3, !dbg !36
  %766 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %687, float %688, float %689, float %690, i32 %375, i32 %376, i32 %377, i32 %378, i32 %449, i32 %450) #2, !dbg !36
  %767 = extractvalue { float, float, float, float } %766, 0, !dbg !36
  %768 = extractvalue { float, float, float, float } %766, 1, !dbg !36
  %769 = extractvalue { float, float, float, float } %766, 2, !dbg !36
  %770 = extractvalue { float, float, float, float } %766, 3, !dbg !36
  %771 = icmp slt i32 %41, 512, !dbg !37
  %772 = icmp slt i32 %42, 512, !dbg !37
  %773 = icmp slt i32 %43, 512, !dbg !37
  %774 = icmp slt i32 %44, 512, !dbg !37
  %775 = icmp slt i32 %45, 512, !dbg !37
  %776 = icmp slt i32 %46, 512, !dbg !37
  %777 = icmp slt i32 %47, 512, !dbg !37
  %778 = icmp slt i32 %48, 512, !dbg !37
  %779 = icmp slt i32 %54, 512, !dbg !38
  %780 = and i1 %771, %779, !dbg !39
  %781 = and i1 %772, %779, !dbg !39
  %782 = and i1 %773, %779, !dbg !39
  %783 = and i1 %774, %779, !dbg !39
  %784 = and i1 %775, %779, !dbg !39
  %785 = and i1 %776, %779, !dbg !39
  %786 = and i1 %777, %779, !dbg !39
  %787 = and i1 %778, %779, !dbg !39
  %788 = shl i32 %41, 9, !dbg !40
  %789 = shl i32 %42, 9, !dbg !40
  %790 = shl i32 %43, 9, !dbg !40
  %791 = shl i32 %44, 9, !dbg !40
  %792 = shl i32 %45, 9, !dbg !40
  %793 = shl i32 %46, 9, !dbg !40
  %794 = shl i32 %47, 9, !dbg !40
  %795 = shl i32 %48, 9, !dbg !40
  %796 = shl i32 %63, 18, !dbg !41
  %797 = add i32 %54, %796, !dbg !42
  %798 = add i32 %797, %788, !dbg !43
  %799 = add i32 %789, %796, !dbg !42
  %800 = add i32 %799, %54, !dbg !43
  %801 = add i32 %790, %796, !dbg !42
  %802 = add i32 %801, %54, !dbg !43
  %803 = add i32 %791, %796, !dbg !42
  %804 = add i32 %803, %54, !dbg !43
  %805 = add i32 %792, %796, !dbg !42
  %806 = add i32 %805, %54, !dbg !43
  %807 = add i32 %793, %796, !dbg !42
  %808 = add i32 %807, %54, !dbg !43
  %809 = add i32 %794, %796, !dbg !42
  %810 = add i32 %809, %54, !dbg !43
  %811 = add i32 %795, %796, !dbg !42
  %812 = add i32 %811, %54, !dbg !43
  %813 = sext i32 %798 to i64, !dbg !44
  %814 = getelementptr bfloat, ptr addrspace(1) %2, i64 %813, !dbg !44
  %815 = sext i32 %800 to i64, !dbg !44
  %816 = getelementptr bfloat, ptr addrspace(1) %2, i64 %815, !dbg !44
  %817 = sext i32 %802 to i64, !dbg !44
  %818 = getelementptr bfloat, ptr addrspace(1) %2, i64 %817, !dbg !44
  %819 = sext i32 %804 to i64, !dbg !44
  %820 = getelementptr bfloat, ptr addrspace(1) %2, i64 %819, !dbg !44
  %821 = sext i32 %806 to i64, !dbg !44
  %822 = getelementptr bfloat, ptr addrspace(1) %2, i64 %821, !dbg !44
  %823 = sext i32 %808 to i64, !dbg !44
  %824 = getelementptr bfloat, ptr addrspace(1) %2, i64 %823, !dbg !44
  %825 = sext i32 %810 to i64, !dbg !44
  %826 = getelementptr bfloat, ptr addrspace(1) %2, i64 %825, !dbg !44
  %827 = sext i32 %812 to i64, !dbg !44
  %828 = getelementptr bfloat, ptr addrspace(1) %2, i64 %827, !dbg !44
  %829 = fptrunc float %692 to bfloat, !dbg !45
  %830 = fptrunc float %693 to bfloat, !dbg !45
  %831 = fptrunc float %694 to bfloat, !dbg !45
  %832 = fptrunc float %695 to bfloat, !dbg !45
  %833 = fptrunc float %697 to bfloat, !dbg !45
  %834 = fptrunc float %698 to bfloat, !dbg !45
  %835 = fptrunc float %699 to bfloat, !dbg !45
  %836 = fptrunc float %700 to bfloat, !dbg !45
  %837 = fptrunc float %702 to bfloat, !dbg !45
  %838 = fptrunc float %703 to bfloat, !dbg !45
  %839 = fptrunc float %704 to bfloat, !dbg !45
  %840 = fptrunc float %705 to bfloat, !dbg !45
  %841 = fptrunc float %707 to bfloat, !dbg !45
  %842 = fptrunc float %708 to bfloat, !dbg !45
  %843 = fptrunc float %709 to bfloat, !dbg !45
  %844 = fptrunc float %710 to bfloat, !dbg !45
  %845 = fptrunc float %712 to bfloat, !dbg !45
  %846 = fptrunc float %713 to bfloat, !dbg !45
  %847 = fptrunc float %714 to bfloat, !dbg !45
  %848 = fptrunc float %715 to bfloat, !dbg !45
  %849 = fptrunc float %717 to bfloat, !dbg !45
  %850 = fptrunc float %718 to bfloat, !dbg !45
  %851 = fptrunc float %719 to bfloat, !dbg !45
  %852 = fptrunc float %720 to bfloat, !dbg !45
  %853 = fptrunc float %722 to bfloat, !dbg !45
  %854 = fptrunc float %723 to bfloat, !dbg !45
  %855 = fptrunc float %724 to bfloat, !dbg !45
  %856 = fptrunc float %725 to bfloat, !dbg !45
  %857 = fptrunc float %727 to bfloat, !dbg !45
  %858 = fptrunc float %728 to bfloat, !dbg !45
  %859 = fptrunc float %729 to bfloat, !dbg !45
  %860 = fptrunc float %730 to bfloat, !dbg !45
  %861 = fptrunc float %732 to bfloat, !dbg !45
  %862 = fptrunc float %733 to bfloat, !dbg !45
  %863 = fptrunc float %734 to bfloat, !dbg !45
  %864 = fptrunc float %735 to bfloat, !dbg !45
  %865 = fptrunc float %737 to bfloat, !dbg !45
  %866 = fptrunc float %738 to bfloat, !dbg !45
  %867 = fptrunc float %739 to bfloat, !dbg !45
  %868 = fptrunc float %740 to bfloat, !dbg !45
  %869 = fptrunc float %742 to bfloat, !dbg !45
  %870 = fptrunc float %743 to bfloat, !dbg !45
  %871 = fptrunc float %744 to bfloat, !dbg !45
  %872 = fptrunc float %745 to bfloat, !dbg !45
  %873 = fptrunc float %747 to bfloat, !dbg !45
  %874 = fptrunc float %748 to bfloat, !dbg !45
  %875 = fptrunc float %749 to bfloat, !dbg !45
  %876 = fptrunc float %750 to bfloat, !dbg !45
  %877 = fptrunc float %752 to bfloat, !dbg !45
  %878 = fptrunc float %753 to bfloat, !dbg !45
  %879 = fptrunc float %754 to bfloat, !dbg !45
  %880 = fptrunc float %755 to bfloat, !dbg !45
  %881 = fptrunc float %757 to bfloat, !dbg !45
  %882 = fptrunc float %758 to bfloat, !dbg !45
  %883 = fptrunc float %759 to bfloat, !dbg !45
  %884 = fptrunc float %760 to bfloat, !dbg !45
  %885 = fptrunc float %762 to bfloat, !dbg !45
  %886 = fptrunc float %763 to bfloat, !dbg !45
  %887 = fptrunc float %764 to bfloat, !dbg !45
  %888 = fptrunc float %765 to bfloat, !dbg !45
  %889 = fptrunc float %767 to bfloat, !dbg !45
  %890 = fptrunc float %768 to bfloat, !dbg !45
  %891 = fptrunc float %769 to bfloat, !dbg !45
  %892 = fptrunc float %770 to bfloat, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %893 = shl i32 %15, 1, !dbg !45
  %894 = and i32 %893, 6, !dbg !45
  %895 = shl i32 %15, 5, !dbg !45
  %896 = and i32 %895, 384, !dbg !45
  %897 = or disjoint i32 %896, %894, !dbg !45
  %898 = shl nuw nsw i32 %17, 5, !dbg !45
  %899 = or disjoint i32 %897, %898, !dbg !45
  %900 = shl nuw nsw i32 %21, 4, !dbg !45
  %901 = or disjoint i32 %899, %900, !dbg !45
  %902 = or disjoint i32 %380, %901, !dbg !45
  %903 = and i32 %29, 2040, !dbg !45
  %904 = lshr i32 %901, 4, !dbg !45
  %905 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %904, !dbg !45
  %906 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %905, i32 %902, !dbg !45
  %907 = bitcast bfloat %829 to i16, !dbg !45
  %908 = bitcast bfloat %830 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %906, i16 %907, i16 %908, i1 true) #2, !dbg !45
  %909 = or disjoint i32 %902, 1024, !dbg !45
  %910 = lshr i32 %909, 4, !dbg !45
  %911 = and i32 %910, 268435448, !dbg !45
  %912 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %911, !dbg !45
  %913 = getelementptr bfloat, ptr addrspace(3) %912, i32 %909, !dbg !45
  %914 = bitcast bfloat %831 to i16, !dbg !45
  %915 = bitcast bfloat %832 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %913, i16 %914, i16 %915, i1 true) #2, !dbg !45
  %916 = or disjoint i32 %902, 32, !dbg !45
  %917 = getelementptr bfloat, ptr addrspace(3) %905, i32 %916, !dbg !45
  %918 = bitcast bfloat %833 to i16, !dbg !45
  %919 = bitcast bfloat %834 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %917, i16 %918, i16 %919, i1 true) #2, !dbg !45
  %920 = or disjoint i32 %902, 1056, !dbg !45
  %921 = lshr i32 %920, 4, !dbg !45
  %922 = and i32 %921, 268435448, !dbg !45
  %923 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %922, !dbg !45
  %924 = getelementptr bfloat, ptr addrspace(3) %923, i32 %920, !dbg !45
  %925 = bitcast bfloat %835 to i16, !dbg !45
  %926 = bitcast bfloat %836 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %924, i16 %925, i16 %926, i1 true) #2, !dbg !45
  %927 = or disjoint i32 %902, 64, !dbg !45
  %928 = getelementptr bfloat, ptr addrspace(3) %905, i32 %927, !dbg !45
  %929 = bitcast bfloat %837 to i16, !dbg !45
  %930 = bitcast bfloat %838 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %928, i16 %929, i16 %930, i1 true) #2, !dbg !45
  %931 = or disjoint i32 %902, 1088, !dbg !45
  %932 = lshr i32 %931, 4, !dbg !45
  %933 = and i32 %932, 268435448, !dbg !45
  %934 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %933, !dbg !45
  %935 = getelementptr bfloat, ptr addrspace(3) %934, i32 %931, !dbg !45
  %936 = bitcast bfloat %839 to i16, !dbg !45
  %937 = bitcast bfloat %840 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %935, i16 %936, i16 %937, i1 true) #2, !dbg !45
  %938 = or disjoint i32 %902, 96, !dbg !45
  %939 = getelementptr bfloat, ptr addrspace(3) %905, i32 %938, !dbg !45
  %940 = bitcast bfloat %841 to i16, !dbg !45
  %941 = bitcast bfloat %842 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %939, i16 %940, i16 %941, i1 true) #2, !dbg !45
  %942 = or disjoint i32 %902, 1120, !dbg !45
  %943 = lshr i32 %942, 4, !dbg !45
  %944 = and i32 %943, 268435448, !dbg !45
  %945 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %944, !dbg !45
  %946 = getelementptr bfloat, ptr addrspace(3) %945, i32 %942, !dbg !45
  %947 = bitcast bfloat %843 to i16, !dbg !45
  %948 = bitcast bfloat %844 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %946, i16 %947, i16 %948, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %949 = lshr i32 %29, 4, !dbg !45
  %950 = and i32 %949, 120, !dbg !45
  %951 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %950, !dbg !45
  %952 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %951, i32 %903, !dbg !45
  %953 = load <4 x i32>, ptr addrspace(3) %952, align 16, !dbg !45
  %954 = or disjoint i32 %903, 2048, !dbg !45
  %955 = lshr i32 %954, 4, !dbg !45
  %956 = and i32 %955, 248, !dbg !45
  %957 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %956, !dbg !45
  %958 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %957, i32 %954, !dbg !45
  %959 = load <4 x i32>, ptr addrspace(3) %958, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %960 = bitcast bfloat %845 to i16, !dbg !45
  %961 = bitcast bfloat %846 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %906, i16 %960, i16 %961, i1 true) #2, !dbg !45
  %962 = bitcast bfloat %847 to i16, !dbg !45
  %963 = bitcast bfloat %848 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %913, i16 %962, i16 %963, i1 true) #2, !dbg !45
  %964 = bitcast bfloat %849 to i16, !dbg !45
  %965 = bitcast bfloat %850 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %917, i16 %964, i16 %965, i1 true) #2, !dbg !45
  %966 = bitcast bfloat %851 to i16, !dbg !45
  %967 = bitcast bfloat %852 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %924, i16 %966, i16 %967, i1 true) #2, !dbg !45
  %968 = bitcast bfloat %853 to i16, !dbg !45
  %969 = bitcast bfloat %854 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %928, i16 %968, i16 %969, i1 true) #2, !dbg !45
  %970 = bitcast bfloat %855 to i16, !dbg !45
  %971 = bitcast bfloat %856 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %935, i16 %970, i16 %971, i1 true) #2, !dbg !45
  %972 = bitcast bfloat %857 to i16, !dbg !45
  %973 = bitcast bfloat %858 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %939, i16 %972, i16 %973, i1 true) #2, !dbg !45
  %974 = bitcast bfloat %859 to i16, !dbg !45
  %975 = bitcast bfloat %860 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %946, i16 %974, i16 %975, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %976 = load <4 x i32>, ptr addrspace(3) %952, align 16, !dbg !45
  %977 = load <4 x i32>, ptr addrspace(3) %958, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %978 = bitcast bfloat %861 to i16, !dbg !45
  %979 = bitcast bfloat %862 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %906, i16 %978, i16 %979, i1 true) #2, !dbg !45
  %980 = bitcast bfloat %863 to i16, !dbg !45
  %981 = bitcast bfloat %864 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %913, i16 %980, i16 %981, i1 true) #2, !dbg !45
  %982 = bitcast bfloat %865 to i16, !dbg !45
  %983 = bitcast bfloat %866 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %917, i16 %982, i16 %983, i1 true) #2, !dbg !45
  %984 = bitcast bfloat %867 to i16, !dbg !45
  %985 = bitcast bfloat %868 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %924, i16 %984, i16 %985, i1 true) #2, !dbg !45
  %986 = bitcast bfloat %869 to i16, !dbg !45
  %987 = bitcast bfloat %870 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %928, i16 %986, i16 %987, i1 true) #2, !dbg !45
  %988 = bitcast bfloat %871 to i16, !dbg !45
  %989 = bitcast bfloat %872 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %935, i16 %988, i16 %989, i1 true) #2, !dbg !45
  %990 = bitcast bfloat %873 to i16, !dbg !45
  %991 = bitcast bfloat %874 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %939, i16 %990, i16 %991, i1 true) #2, !dbg !45
  %992 = bitcast bfloat %875 to i16, !dbg !45
  %993 = bitcast bfloat %876 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %946, i16 %992, i16 %993, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %994 = load <4 x i32>, ptr addrspace(3) %952, align 16, !dbg !45
  %995 = load <4 x i32>, ptr addrspace(3) %958, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %996 = bitcast bfloat %877 to i16, !dbg !45
  %997 = bitcast bfloat %878 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %906, i16 %996, i16 %997, i1 true) #2, !dbg !45
  %998 = bitcast bfloat %879 to i16, !dbg !45
  %999 = bitcast bfloat %880 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %913, i16 %998, i16 %999, i1 true) #2, !dbg !45
  %1000 = bitcast bfloat %881 to i16, !dbg !45
  %1001 = bitcast bfloat %882 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %917, i16 %1000, i16 %1001, i1 true) #2, !dbg !45
  %1002 = bitcast bfloat %883 to i16, !dbg !45
  %1003 = bitcast bfloat %884 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %924, i16 %1002, i16 %1003, i1 true) #2, !dbg !45
  %1004 = bitcast bfloat %885 to i16, !dbg !45
  %1005 = bitcast bfloat %886 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %928, i16 %1004, i16 %1005, i1 true) #2, !dbg !45
  %1006 = bitcast bfloat %887 to i16, !dbg !45
  %1007 = bitcast bfloat %888 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %935, i16 %1006, i16 %1007, i1 true) #2, !dbg !45
  %1008 = bitcast bfloat %889 to i16, !dbg !45
  %1009 = bitcast bfloat %890 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %939, i16 %1008, i16 %1009, i1 true) #2, !dbg !45
  %1010 = bitcast bfloat %891 to i16, !dbg !45
  %1011 = bitcast bfloat %892 to i16, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %946, i16 %1010, i16 %1011, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1012 = load <4 x i32>, ptr addrspace(3) %952, align 16, !dbg !45
  %1013 = load <4 x i32>, ptr addrspace(3) %958, align 16, !dbg !45
  %.extract = extractelement <4 x i32> %953, i64 0, !dbg !45
  %.extract105 = extractelement <4 x i32> %953, i64 1, !dbg !45
  %.extract107 = extractelement <4 x i32> %953, i64 2, !dbg !45
  %.extract109 = extractelement <4 x i32> %953, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract105, i32 %.extract107, i32 %.extract109, ptr addrspace(1) %814, i1 %780) #2, !dbg !45
  %.extract111 = extractelement <4 x i32> %959, i64 0, !dbg !45
  %.extract113 = extractelement <4 x i32> %959, i64 1, !dbg !45
  %.extract115 = extractelement <4 x i32> %959, i64 2, !dbg !45
  %.extract117 = extractelement <4 x i32> %959, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract111, i32 %.extract113, i32 %.extract115, i32 %.extract117, ptr addrspace(1) %816, i1 %781) #2, !dbg !45
  %.extract119 = extractelement <4 x i32> %976, i64 0, !dbg !45
  %.extract121 = extractelement <4 x i32> %976, i64 1, !dbg !45
  %.extract123 = extractelement <4 x i32> %976, i64 2, !dbg !45
  %.extract125 = extractelement <4 x i32> %976, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract119, i32 %.extract121, i32 %.extract123, i32 %.extract125, ptr addrspace(1) %818, i1 %782) #2, !dbg !45
  %.extract127 = extractelement <4 x i32> %977, i64 0, !dbg !45
  %.extract129 = extractelement <4 x i32> %977, i64 1, !dbg !45
  %.extract131 = extractelement <4 x i32> %977, i64 2, !dbg !45
  %.extract133 = extractelement <4 x i32> %977, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract127, i32 %.extract129, i32 %.extract131, i32 %.extract133, ptr addrspace(1) %820, i1 %783) #2, !dbg !45
  %.extract135 = extractelement <4 x i32> %994, i64 0, !dbg !45
  %.extract137 = extractelement <4 x i32> %994, i64 1, !dbg !45
  %.extract139 = extractelement <4 x i32> %994, i64 2, !dbg !45
  %.extract141 = extractelement <4 x i32> %994, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract135, i32 %.extract137, i32 %.extract139, i32 %.extract141, ptr addrspace(1) %822, i1 %784) #2, !dbg !45
  %.extract143 = extractelement <4 x i32> %995, i64 0, !dbg !45
  %.extract145 = extractelement <4 x i32> %995, i64 1, !dbg !45
  %.extract147 = extractelement <4 x i32> %995, i64 2, !dbg !45
  %.extract149 = extractelement <4 x i32> %995, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract143, i32 %.extract145, i32 %.extract147, i32 %.extract149, ptr addrspace(1) %824, i1 %785) #2, !dbg !45
  %.extract151 = extractelement <4 x i32> %1012, i64 0, !dbg !45
  %.extract153 = extractelement <4 x i32> %1012, i64 1, !dbg !45
  %.extract155 = extractelement <4 x i32> %1012, i64 2, !dbg !45
  %.extract157 = extractelement <4 x i32> %1012, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract151, i32 %.extract153, i32 %.extract155, i32 %.extract157, ptr addrspace(1) %826, i1 %786) #2, !dbg !45
  %.extract159 = extractelement <4 x i32> %1013, i64 0, !dbg !45
  %.extract161 = extractelement <4 x i32> %1013, i64 1, !dbg !45
  %.extract163 = extractelement <4 x i32> %1013, i64 2, !dbg !45
  %.extract165 = extractelement <4 x i32> %1013, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract159, i32 %.extract161, i32 %.extract163, i32 %.extract165, ptr addrspace(1) %828, i1 %787) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwkhcrtuc2bd77jchekls26lzzuw2nxjxs5fdtzfr3wuz4lfdyyy.py", directory: "/tmp/torchinductor_root/wk")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 27, scope: !6)
!23 = !DILocation(line: 57, column: 19, scope: !6)
!24 = !DILocation(line: 61, column: 19, scope: !6)
!25 = !DILocation(line: 65, column: 26, scope: !6)
!26 = !DILocation(line: 66, column: 28, scope: !6)
!27 = !DILocation(line: 66, column: 72, scope: !6)
!28 = !DILocation(line: 66, column: 40, scope: !6)
!29 = !DILocation(line: 66, column: 66, scope: !6)
!30 = !DILocation(line: 66, column: 13, scope: !6)
!31 = !DILocation(line: 67, column: 54, scope: !6)
!32 = !DILocation(line: 67, column: 66, scope: !6)
!33 = !DILocation(line: 67, column: 13, scope: !6)
!34 = !DILocation(line: 72, column: 24, scope: !6)
!35 = !DILocation(line: 73, column: 24, scope: !6)
!36 = !DILocation(line: 77, column: 25, scope: !6)
!37 = !DILocation(line: 87, column: 20, scope: !6)
!38 = !DILocation(line: 87, column: 34, scope: !6)
!39 = !DILocation(line: 87, column: 26, scope: !6)
!40 = !DILocation(line: 90, column: 25, scope: !6)
!41 = !DILocation(line: 90, column: 40, scope: !6)
!42 = !DILocation(line: 90, column: 21, scope: !6)
!43 = !DILocation(line: 90, column: 33, scope: !6)
!44 = !DILocation(line: 91, column: 25, scope: !6)
!45 = !DILocation(line: 91, column: 67, scope: !6)
!46 = !DILocation(line: 91, column: 4, scope: !6)
