; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_6(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 3, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = or disjoint i32 %10, %7, !dbg !12
  %12 = shl i32 %8, 3, !dbg !13
  %13 = and i32 %12, 56, !dbg !13
  %14 = sdiv i32 %11, 24, !dbg !14
  %15 = mul i32 %14, 24, !dbg !15
  %.decomposed = sub i32 %11, %15, !dbg !15
  %16 = shl nsw i32 %.decomposed, 7, !dbg !16
  %17 = mul i32 %14, 9216, !dbg !17
  %18 = add nsw i32 %16, 3072
  %19 = add i32 %18, %17
  %20 = or disjoint i32 %19, %13, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr bfloat, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %22, i1 true) #3, !dbg !20
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !20
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !20
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !20
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !20
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !20
  %32 = or disjoint i32 %13, 64, !dbg !21
  %33 = or disjoint i32 %19, %32, !dbg !18
  %34 = sext i32 %33 to i64, !dbg !19
  %35 = getelementptr bfloat, ptr addrspace(1) %0, i64 %34, !dbg !19
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !20
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !20
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !20
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !20
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !20
  %45 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !22
  %46 = fmul <2 x float> %45, %45, !dbg !23
  %47 = fpext <2 x bfloat> %38 to <2 x float>, !dbg !22
  %48 = fmul <2 x float> %47, %47, !dbg !23
  %49 = fadd <2 x float> %46, %48, !dbg !24
  %50 = fpext <2 x bfloat> %27 to <2 x float>, !dbg !22
  %51 = fmul <2 x float> %50, %50, !dbg !23
  %52 = fpext <2 x bfloat> %40 to <2 x float>, !dbg !22
  %53 = fmul <2 x float> %52, %52, !dbg !23
  %54 = fadd <2 x float> %51, %53, !dbg !24
  %55 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !22
  %56 = fmul <2 x float> %55, %55, !dbg !23
  %57 = fpext <2 x bfloat> %42 to <2 x float>, !dbg !22
  %58 = fmul <2 x float> %57, %57, !dbg !23
  %59 = fadd <2 x float> %56, %58, !dbg !24
  %60 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !22
  %61 = fmul <2 x float> %60, %60, !dbg !23
  %62 = fpext <2 x bfloat> %44 to <2 x float>, !dbg !22
  %63 = fmul <2 x float> %62, %62, !dbg !23
  %64 = fadd <2 x float> %61, %63, !dbg !24
  %65 = and i32 %8, 63, !dbg !11
  %66 = or disjoint i32 %7, %65, !dbg !12
  %shift = shufflevector <2 x float> %49, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %67 = fadd <2 x float> %49, %shift, !dbg !25
  %68 = fadd <2 x float> %54, %67, !dbg !25
  %shift10 = shufflevector <2 x float> %54, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %69 = fadd <2 x float> %shift10, %68, !dbg !25
  %70 = fadd <2 x float> %59, %69, !dbg !25
  %shift11 = shufflevector <2 x float> %59, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %71 = fadd <2 x float> %shift11, %70, !dbg !25
  %72 = fadd <2 x float> %64, %71, !dbg !25
  %shift12 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %73 = fadd <2 x float> %shift12, %72, !dbg !25
  %74 = extractelement <2 x float> %73, i64 0, !dbg !25
  %75 = bitcast float %74 to i32, !dbg !30
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 4, i32 31), !dbg !30
  %77 = bitcast i32 %76 to float, !dbg !30
  %78 = fadd float %74, %77, !dbg !25
  %79 = bitcast float %78 to i32, !dbg !30
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !30
  %81 = bitcast i32 %80 to float, !dbg !30
  %82 = fadd float %78, %81, !dbg !25
  %83 = bitcast float %82 to i32, !dbg !30
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !30
  %85 = bitcast i32 %84 to float, !dbg !30
  %86 = fadd float %82, %85, !dbg !25
  %87 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  %88 = bitcast float %86 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %89 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %65, !dbg !31
  %90 = load i32, ptr addrspace(3) %89, align 4, !dbg !31
  %91 = sext i32 %66 to i64, !dbg !32
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !32
  %93 = and i32 %8, 448, !dbg !33
  %94 = icmp eq i32 %93, 0, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %92, i1 %94) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cje5i6h6nslytjpaxyr4k6oy6wtyf2cqfq7evbeovzlja6vnpphg.py", directory: "/tmp/torchinductor_root/je")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_6, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_6", linkageName: "triton_red_fused__to_copy_mean_pow_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 19, scope: !6)
!15 = !DILocation(line: 28, column: 19, scope: !6)
!16 = !DILocation(line: 38, column: 52, scope: !6)
!17 = !DILocation(line: 38, column: 62, scope: !6)
!18 = !DILocation(line: 38, column: 57, scope: !6)
!19 = !DILocation(line: 38, column: 34, scope: !6)
!20 = !DILocation(line: 38, column: 67, scope: !6)
!21 = !DILocation(line: 33, column: 31, scope: !6)
!22 = !DILocation(line: 38, column: 121, scope: !6)
!23 = !DILocation(line: 40, column: 22, scope: !6)
!24 = !DILocation(line: 42, column: 23, scope: !6)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !6, file: !27, discriminator: 0)
!29 = !DILocation(line: 44, column: 25, scope: !6)
!30 = !DILocation(line: 286, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 44, column: 28, scope: !6)
!32 = !DILocation(line: 45, column: 25, scope: !6)
!33 = !DILocation(line: 45, column: 36, scope: !6)
!34 = !DILocation(line: 45, column: 4, scope: !6)
