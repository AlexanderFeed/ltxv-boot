; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_cat_mul_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 10, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 3, !dbg !11
  %13 = and i32 %12, 1016, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = or disjoint i32 %14, 2, !dbg !12
  %16 = or disjoint i32 %14, 4, !dbg !12
  %17 = or disjoint i32 %14, 6, !dbg !12
  %18 = srem i32 %14, 526336, !dbg !13
  %19 = srem i32 %16, 526336, !dbg !13
  %20 = sdiv i32 %14, 128, !dbg !14
  %21 = mul i32 %20, 128, !dbg !15
  %.decomposed = sub i32 %14, %21, !dbg !15
  %22 = srem i32 %15, 128, !dbg !15
  %23 = srem i32 %16, 128, !dbg !15
  %24 = srem i32 %17, 128, !dbg !15
  %25 = sext i32 %14 to i64, !dbg !16
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %26) #1, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !17
  %36 = sext i32 %18 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !18
  %38 = sext i32 %19 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !18
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %37) #1, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !19
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %39) #1, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !19
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !20
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !20
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %50) #1, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !21
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !21
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %51) #1, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !21
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !21
  %62 = getelementptr bfloat, ptr addrspace(1) %3, i64 %25, !dbg !22
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %62) #1, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !23
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !23
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !23
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !23
  %70 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !23
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !23
  %72 = insertelement <4 x i32> poison, i32 %14, i64 0, !dbg !12
  %73 = shufflevector <4 x i32> %72, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !12
  %74 = or disjoint <4 x i32> %73, <i32 7, i32 5, i32 3, i32 1>, !dbg !12
  %75 = extractelement <4 x i32> %74, i64 3, !dbg !15
  %76 = srem i32 %75, 128, !dbg !15
  %77 = extractelement <4 x i32> %74, i64 2, !dbg !15
  %78 = srem i32 %77, 128, !dbg !15
  %79 = extractelement <4 x i32> %74, i64 1, !dbg !15
  %80 = srem i32 %79, 128, !dbg !15
  %81 = extractelement <4 x i32> %74, i64 0, !dbg !15
  %82 = srem i32 %81, 128, !dbg !15
  %83 = srem <4 x i32> %74, splat (i32 2), !dbg !24
  %84 = icmp slt <4 x i32> %83, splat (i32 1), !dbg !25
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !26
  %85 = ashr exact i8 %.lhs.trunc, 1, !dbg !26
  %.sext = sext i8 %85 to i32, !dbg !26
  %.lhs.trunc1 = trunc nsw i32 %76 to i8, !dbg !26
  %86 = sdiv i8 %.lhs.trunc1, 2, !dbg !26
  %.sext2 = sext i8 %86 to i32, !dbg !26
  %.lhs.trunc3 = trunc nsw i32 %22 to i8, !dbg !26
  %87 = ashr exact i8 %.lhs.trunc3, 1, !dbg !26
  %.sext4 = sext i8 %87 to i32, !dbg !26
  %.lhs.trunc5 = trunc nsw i32 %78 to i8, !dbg !26
  %88 = sdiv i8 %.lhs.trunc5, 2, !dbg !26
  %.sext6 = sext i8 %88 to i32, !dbg !26
  %.lhs.trunc7 = trunc nsw i32 %23 to i8, !dbg !26
  %89 = ashr exact i8 %.lhs.trunc7, 1, !dbg !26
  %.sext8 = sext i8 %89 to i32, !dbg !26
  %.lhs.trunc9 = trunc nsw i32 %80 to i8, !dbg !26
  %90 = sdiv i8 %.lhs.trunc9, 2, !dbg !26
  %.sext10 = sext i8 %90 to i32, !dbg !26
  %.lhs.trunc11 = trunc nsw i32 %24 to i8, !dbg !26
  %91 = ashr exact i8 %.lhs.trunc11, 1, !dbg !26
  %.sext12 = sext i8 %91 to i32, !dbg !26
  %.lhs.trunc13 = trunc nsw i32 %82 to i8, !dbg !26
  %92 = sdiv i8 %.lhs.trunc13, 2, !dbg !26
  %.sext14 = sext i8 %92 to i32, !dbg !26
  %93 = shl nsw i32 %.sext, 1, !dbg !27
  %94 = shl nsw i32 %.sext2, 1, !dbg !27
  %95 = shl nsw i32 %.sext4, 1, !dbg !27
  %96 = shl nsw i32 %.sext6, 1, !dbg !27
  %97 = shl nsw i32 %.sext8, 1, !dbg !27
  %98 = shl nsw i32 %.sext10, 1, !dbg !27
  %99 = shl nsw i32 %.sext12, 1, !dbg !27
  %100 = shl nsw i32 %.sext14, 1, !dbg !27
  %101 = shl nsw i32 %20, 7, !dbg !28
  %102 = or disjoint i32 %101, 1, !dbg !29
  %103 = add i32 %102, %93, !dbg !30
  %104 = add i32 %102, %94, !dbg !30
  %105 = add i32 %102, %95, !dbg !30
  %106 = add i32 %102, %96, !dbg !30
  %107 = add i32 %102, %97, !dbg !30
  %108 = add i32 %102, %98, !dbg !30
  %109 = add i32 %102, %99, !dbg !30
  %110 = add i32 %102, %100, !dbg !30
  %111 = sext i32 %103 to i64, !dbg !31
  %112 = getelementptr bfloat, ptr addrspace(1) %0, i64 %111, !dbg !31
  %113 = sext i32 %104 to i64, !dbg !31
  %114 = getelementptr bfloat, ptr addrspace(1) %0, i64 %113, !dbg !31
  %115 = sext i32 %105 to i64, !dbg !31
  %116 = getelementptr bfloat, ptr addrspace(1) %0, i64 %115, !dbg !31
  %117 = sext i32 %106 to i64, !dbg !31
  %118 = getelementptr bfloat, ptr addrspace(1) %0, i64 %117, !dbg !31
  %119 = sext i32 %107 to i64, !dbg !31
  %120 = getelementptr bfloat, ptr addrspace(1) %0, i64 %119, !dbg !31
  %121 = sext i32 %108 to i64, !dbg !31
  %122 = getelementptr bfloat, ptr addrspace(1) %0, i64 %121, !dbg !31
  %123 = sext i32 %109 to i64, !dbg !31
  %124 = getelementptr bfloat, ptr addrspace(1) %0, i64 %123, !dbg !31
  %125 = sext i32 %110 to i64, !dbg !31
  %126 = getelementptr bfloat, ptr addrspace(1) %0, i64 %125, !dbg !31
  %127 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %112, i1 true) #1, !dbg !32
  %128 = bitcast i16 %127 to bfloat, !dbg !32
  %129 = extractelement <4 x i1> %84, i64 3, !dbg !32
  %130 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %114, i1 %129) #1, !dbg !32
  %131 = bitcast i16 %130 to bfloat, !dbg !32
  %132 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %116, i1 true) #1, !dbg !32
  %133 = bitcast i16 %132 to bfloat, !dbg !32
  %134 = extractelement <4 x i1> %84, i64 2, !dbg !32
  %135 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %118, i1 %134) #1, !dbg !32
  %136 = bitcast i16 %135 to bfloat, !dbg !32
  %137 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %120, i1 true) #1, !dbg !32
  %138 = bitcast i16 %137 to bfloat, !dbg !32
  %139 = extractelement <4 x i1> %84, i64 1, !dbg !32
  %140 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %122, i1 %139) #1, !dbg !32
  %141 = bitcast i16 %140 to bfloat, !dbg !32
  %142 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %124, i1 true) #1, !dbg !32
  %143 = bitcast i16 %142 to bfloat, !dbg !32
  %144 = extractelement <4 x i1> %84, i64 0, !dbg !32
  %145 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %126, i1 %144) #1, !dbg !32
  %146 = bitcast i16 %145 to bfloat, !dbg !32
  %147 = fpext bfloat %128 to float, !dbg !33
  %148 = fpext bfloat %131 to float, !dbg !33
  %149 = fpext bfloat %133 to float, !dbg !33
  %150 = fpext bfloat %136 to float, !dbg !33
  %151 = fpext bfloat %138 to float, !dbg !33
  %152 = fpext bfloat %141 to float, !dbg !33
  %153 = fpext bfloat %143 to float, !dbg !33
  %154 = fpext bfloat %146 to float, !dbg !33
  %155 = fsub float 0.000000e+00, %147, !dbg !34
  %156 = fsub float 0.000000e+00, %148, !dbg !34
  %157 = fsub float 0.000000e+00, %149, !dbg !34
  %158 = fsub float 0.000000e+00, %150, !dbg !34
  %159 = fsub float 0.000000e+00, %151, !dbg !34
  %160 = fsub float 0.000000e+00, %152, !dbg !34
  %161 = fsub float 0.000000e+00, %153, !dbg !34
  %162 = fsub float 0.000000e+00, %154, !dbg !34
  %163 = extractelement <4 x i32> %83, i64 3, !dbg !35
  %164 = icmp sgt i32 %163, 0, !dbg !35
  %165 = extractelement <4 x i32> %83, i64 2, !dbg !35
  %166 = icmp sgt i32 %165, 0, !dbg !35
  %167 = extractelement <4 x i32> %83, i64 1, !dbg !35
  %168 = icmp sgt i32 %167, 0, !dbg !35
  %169 = extractelement <4 x i32> %83, i64 0, !dbg !35
  %170 = icmp sgt i32 %169, 0, !dbg !35
  %171 = add i32 %93, %101, !dbg !36
  %172 = add i32 %94, %101, !dbg !36
  %173 = add i32 %95, %101, !dbg !36
  %174 = add i32 %96, %101, !dbg !36
  %175 = add i32 %97, %101, !dbg !36
  %176 = add i32 %98, %101, !dbg !36
  %177 = add i32 %99, %101, !dbg !36
  %178 = add i32 %100, %101, !dbg !36
  %179 = sext i32 %171 to i64, !dbg !37
  %180 = getelementptr bfloat, ptr addrspace(1) %0, i64 %179, !dbg !37
  %181 = sext i32 %172 to i64, !dbg !37
  %182 = getelementptr bfloat, ptr addrspace(1) %0, i64 %181, !dbg !37
  %183 = sext i32 %173 to i64, !dbg !37
  %184 = getelementptr bfloat, ptr addrspace(1) %0, i64 %183, !dbg !37
  %185 = sext i32 %174 to i64, !dbg !37
  %186 = getelementptr bfloat, ptr addrspace(1) %0, i64 %185, !dbg !37
  %187 = sext i32 %175 to i64, !dbg !37
  %188 = getelementptr bfloat, ptr addrspace(1) %0, i64 %187, !dbg !37
  %189 = sext i32 %176 to i64, !dbg !37
  %190 = getelementptr bfloat, ptr addrspace(1) %0, i64 %189, !dbg !37
  %191 = sext i32 %177 to i64, !dbg !37
  %192 = getelementptr bfloat, ptr addrspace(1) %0, i64 %191, !dbg !37
  %193 = sext i32 %178 to i64, !dbg !37
  %194 = getelementptr bfloat, ptr addrspace(1) %0, i64 %193, !dbg !37
  %195 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %180, i1 false) #1, !dbg !38
  %196 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %182, i1 %164) #1, !dbg !38
  %197 = bitcast i16 %196 to bfloat, !dbg !38
  %198 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %184, i1 false) #1, !dbg !38
  %199 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %186, i1 %166) #1, !dbg !38
  %200 = bitcast i16 %199 to bfloat, !dbg !38
  %201 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %188, i1 false) #1, !dbg !38
  %202 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %190, i1 %168) #1, !dbg !38
  %203 = bitcast i16 %202 to bfloat, !dbg !38
  %204 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %192, i1 false) #1, !dbg !38
  %205 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %194, i1 %170) #1, !dbg !38
  %206 = bitcast i16 %205 to bfloat, !dbg !38
  %207 = fpext bfloat %197 to float, !dbg !39
  %208 = fpext bfloat %200 to float, !dbg !39
  %209 = fpext bfloat %203 to float, !dbg !39
  %210 = fpext bfloat %206 to float, !dbg !39
  %211 = select i1 %129, float %156, float %207, !dbg !40
  %212 = select i1 %134, float %158, float %208, !dbg !40
  %213 = select i1 %139, float %160, float %209, !dbg !40
  %214 = select i1 %144, float %162, float %210, !dbg !40
  %215 = getelementptr bfloat, ptr addrspace(1) %3, i64 %111, !dbg !41
  %216 = getelementptr bfloat, ptr addrspace(1) %3, i64 %113, !dbg !41
  %217 = getelementptr bfloat, ptr addrspace(1) %3, i64 %115, !dbg !41
  %218 = getelementptr bfloat, ptr addrspace(1) %3, i64 %117, !dbg !41
  %219 = getelementptr bfloat, ptr addrspace(1) %3, i64 %119, !dbg !41
  %220 = getelementptr bfloat, ptr addrspace(1) %3, i64 %121, !dbg !41
  %221 = getelementptr bfloat, ptr addrspace(1) %3, i64 %123, !dbg !41
  %222 = getelementptr bfloat, ptr addrspace(1) %3, i64 %125, !dbg !41
  %223 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %215, i1 true) #1, !dbg !42
  %224 = bitcast i16 %223 to bfloat, !dbg !42
  %225 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %216, i1 %129) #1, !dbg !42
  %226 = bitcast i16 %225 to bfloat, !dbg !42
  %227 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %217, i1 true) #1, !dbg !42
  %228 = bitcast i16 %227 to bfloat, !dbg !42
  %229 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %218, i1 %134) #1, !dbg !42
  %230 = bitcast i16 %229 to bfloat, !dbg !42
  %231 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %219, i1 true) #1, !dbg !42
  %232 = bitcast i16 %231 to bfloat, !dbg !42
  %233 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %220, i1 %139) #1, !dbg !42
  %234 = bitcast i16 %233 to bfloat, !dbg !42
  %235 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %221, i1 true) #1, !dbg !42
  %236 = bitcast i16 %235 to bfloat, !dbg !42
  %237 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %222, i1 %144) #1, !dbg !42
  %238 = bitcast i16 %237 to bfloat, !dbg !42
  %239 = fpext bfloat %224 to float, !dbg !43
  %240 = fpext bfloat %226 to float, !dbg !43
  %241 = fpext bfloat %228 to float, !dbg !43
  %242 = fpext bfloat %230 to float, !dbg !43
  %243 = fpext bfloat %232 to float, !dbg !43
  %244 = fpext bfloat %234 to float, !dbg !43
  %245 = fpext bfloat %236 to float, !dbg !43
  %246 = fpext bfloat %238 to float, !dbg !43
  %247 = fsub float 0.000000e+00, %239, !dbg !44
  %248 = fsub float 0.000000e+00, %240, !dbg !44
  %249 = fsub float 0.000000e+00, %241, !dbg !44
  %250 = fsub float 0.000000e+00, %242, !dbg !44
  %251 = fsub float 0.000000e+00, %243, !dbg !44
  %252 = fsub float 0.000000e+00, %244, !dbg !44
  %253 = fsub float 0.000000e+00, %245, !dbg !44
  %254 = fsub float 0.000000e+00, %246, !dbg !44
  %255 = getelementptr bfloat, ptr addrspace(1) %3, i64 %179, !dbg !45
  %256 = getelementptr bfloat, ptr addrspace(1) %3, i64 %181, !dbg !45
  %257 = getelementptr bfloat, ptr addrspace(1) %3, i64 %183, !dbg !45
  %258 = getelementptr bfloat, ptr addrspace(1) %3, i64 %185, !dbg !45
  %259 = getelementptr bfloat, ptr addrspace(1) %3, i64 %187, !dbg !45
  %260 = getelementptr bfloat, ptr addrspace(1) %3, i64 %189, !dbg !45
  %261 = getelementptr bfloat, ptr addrspace(1) %3, i64 %191, !dbg !45
  %262 = getelementptr bfloat, ptr addrspace(1) %3, i64 %193, !dbg !45
  %263 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %255, i1 false) #1, !dbg !46
  %264 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %256, i1 %164) #1, !dbg !46
  %265 = bitcast i16 %264 to bfloat, !dbg !46
  %266 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %257, i1 false) #1, !dbg !46
  %267 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %258, i1 %166) #1, !dbg !46
  %268 = bitcast i16 %267 to bfloat, !dbg !46
  %269 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %259, i1 false) #1, !dbg !46
  %270 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %260, i1 %168) #1, !dbg !46
  %271 = bitcast i16 %270 to bfloat, !dbg !46
  %272 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %261, i1 false) #1, !dbg !46
  %273 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %262, i1 %170) #1, !dbg !46
  %274 = bitcast i16 %273 to bfloat, !dbg !46
  %275 = fpext bfloat %265 to float, !dbg !47
  %276 = fpext bfloat %268 to float, !dbg !47
  %277 = fpext bfloat %271 to float, !dbg !47
  %278 = fpext bfloat %274 to float, !dbg !47
  %279 = select i1 %129, float %248, float %275, !dbg !40
  %280 = select i1 %134, float %250, float %276, !dbg !40
  %281 = select i1 %139, float %252, float %277, !dbg !40
  %282 = select i1 %144, float %254, float %278, !dbg !40
  %283 = getelementptr bfloat, ptr addrspace(1) %4, i64 %25, !dbg !48
  %284 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !49
  %285 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !19
  %286 = insertelement <2 x i32> %285, i32 %42, i64 1, !dbg !19
  %287 = bitcast <2 x i32> %286 to <2 x float>, !dbg !19
  %288 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !21
  %289 = insertelement <2 x i32> %288, i32 %54, i64 1, !dbg !21
  %290 = bitcast <2 x i32> %289 to <2 x float>, !dbg !21
  %291 = fmul <2 x float> %287, %284, !dbg !50
  %292 = insertelement <2 x float> poison, float %155, i64 0, !dbg !51
  %293 = insertelement <2 x float> %292, float %211, i64 1, !dbg !51
  %294 = fmul <2 x float> %293, %290, !dbg !51
  %295 = fadd <2 x float> %291, %294, !dbg !52
  %296 = fptrunc <2 x float> %295 to <2 x bfloat>, !dbg !53
  %297 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !49
  %298 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !19
  %299 = insertelement <2 x i32> %298, i32 %44, i64 1, !dbg !19
  %300 = bitcast <2 x i32> %299 to <2 x float>, !dbg !19
  %301 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !21
  %302 = insertelement <2 x i32> %301, i32 %56, i64 1, !dbg !21
  %303 = bitcast <2 x i32> %302 to <2 x float>, !dbg !21
  %304 = fmul <2 x float> %300, %297, !dbg !50
  %305 = insertelement <2 x float> poison, float %157, i64 0, !dbg !51
  %306 = insertelement <2 x float> %305, float %212, i64 1, !dbg !51
  %307 = fmul <2 x float> %306, %303, !dbg !51
  %308 = fadd <2 x float> %304, %307, !dbg !52
  %309 = fptrunc <2 x float> %308 to <2 x bfloat>, !dbg !53
  %310 = fpext <2 x bfloat> %33 to <2 x float>, !dbg !49
  %311 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !19
  %312 = insertelement <2 x i32> %311, i32 %47, i64 1, !dbg !19
  %313 = bitcast <2 x i32> %312 to <2 x float>, !dbg !19
  %314 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !21
  %315 = insertelement <2 x i32> %314, i32 %59, i64 1, !dbg !21
  %316 = bitcast <2 x i32> %315 to <2 x float>, !dbg !21
  %317 = fmul <2 x float> %310, %313, !dbg !50
  %318 = insertelement <2 x float> poison, float %159, i64 0, !dbg !51
  %319 = insertelement <2 x float> %318, float %213, i64 1, !dbg !51
  %320 = fmul <2 x float> %319, %316, !dbg !51
  %321 = fadd <2 x float> %317, %320, !dbg !52
  %322 = fptrunc <2 x float> %321 to <2 x bfloat>, !dbg !53
  %323 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !49
  %324 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !19
  %325 = insertelement <2 x i32> %324, i32 %49, i64 1, !dbg !19
  %326 = bitcast <2 x i32> %325 to <2 x float>, !dbg !19
  %327 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !21
  %328 = insertelement <2 x i32> %327, i32 %61, i64 1, !dbg !21
  %329 = bitcast <2 x i32> %328 to <2 x float>, !dbg !21
  %330 = fmul <2 x float> %323, %326, !dbg !50
  %331 = insertelement <2 x float> poison, float %161, i64 0, !dbg !51
  %332 = insertelement <2 x float> %331, float %214, i64 1, !dbg !51
  %333 = fmul <2 x float> %332, %329, !dbg !51
  %334 = fadd <2 x float> %330, %333, !dbg !52
  %335 = fptrunc <2 x float> %334 to <2 x bfloat>, !dbg !53
  %336 = bitcast <2 x bfloat> %296 to i32, !dbg !53
  %337 = bitcast <2 x bfloat> %309 to i32, !dbg !53
  %338 = bitcast <2 x bfloat> %322 to i32, !dbg !53
  %339 = bitcast <2 x bfloat> %335 to i32, !dbg !53
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %336, i32 %337, i32 %338, i32 %339, ptr addrspace(1) %283) #1, !dbg !53
  %340 = getelementptr bfloat, ptr addrspace(1) %5, i64 %25, !dbg !54
  %341 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !55
  %342 = fmul <2 x float> %287, %341, !dbg !56
  %343 = insertelement <2 x float> poison, float %247, i64 0, !dbg !57
  %344 = insertelement <2 x float> %343, float %279, i64 1, !dbg !57
  %345 = fmul <2 x float> %344, %290, !dbg !57
  %346 = fadd <2 x float> %342, %345, !dbg !58
  %347 = fptrunc <2 x float> %346 to <2 x bfloat>, !dbg !59
  %348 = fpext <2 x bfloat> %67 to <2 x float>, !dbg !55
  %349 = fmul <2 x float> %300, %348, !dbg !56
  %350 = insertelement <2 x float> poison, float %249, i64 0, !dbg !57
  %351 = insertelement <2 x float> %350, float %280, i64 1, !dbg !57
  %352 = fmul <2 x float> %351, %303, !dbg !57
  %353 = fadd <2 x float> %349, %352, !dbg !58
  %354 = fptrunc <2 x float> %353 to <2 x bfloat>, !dbg !59
  %355 = fpext <2 x bfloat> %69 to <2 x float>, !dbg !55
  %356 = fmul <2 x float> %313, %355, !dbg !56
  %357 = insertelement <2 x float> poison, float %251, i64 0, !dbg !57
  %358 = insertelement <2 x float> %357, float %281, i64 1, !dbg !57
  %359 = fmul <2 x float> %358, %316, !dbg !57
  %360 = fadd <2 x float> %356, %359, !dbg !58
  %361 = fptrunc <2 x float> %360 to <2 x bfloat>, !dbg !59
  %362 = fpext <2 x bfloat> %71 to <2 x float>, !dbg !55
  %363 = fmul <2 x float> %326, %362, !dbg !56
  %364 = insertelement <2 x float> poison, float %253, i64 0, !dbg !57
  %365 = insertelement <2 x float> %364, float %282, i64 1, !dbg !57
  %366 = fmul <2 x float> %365, %329, !dbg !57
  %367 = fadd <2 x float> %363, %366, !dbg !58
  %368 = fptrunc <2 x float> %367 to <2 x bfloat>, !dbg !59
  %369 = bitcast <2 x bfloat> %347 to i32, !dbg !59
  %370 = bitcast <2 x bfloat> %354 to i32, !dbg !59
  %371 = bitcast <2 x bfloat> %361 to i32, !dbg !59
  %372 = bitcast <2 x bfloat> %368 to i32, !dbg !59
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %369, i32 %370, i32 %371, i32 %372, ptr addrspace(1) %340) #1, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2ddluou2vqsr7azkodwqvocapzpct73owxeup3snz7x4ooocngx.py", directory: "/tmp/torchinductor_root/2d")
!4 = !{ptr @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_cat_mul_9, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_cat_mul_9", linkageName: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_cat_mul_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 19, scope: !6)
!14 = !DILocation(line: 26, column: 19, scope: !6)
!15 = !DILocation(line: 25, column: 19, scope: !6)
!16 = !DILocation(line: 27, column: 30, scope: !6)
!17 = !DILocation(line: 27, column: 35, scope: !6)
!18 = !DILocation(line: 28, column: 30, scope: !6)
!19 = !DILocation(line: 28, column: 35, scope: !6)
!20 = !DILocation(line: 29, column: 31, scope: !6)
!21 = !DILocation(line: 29, column: 36, scope: !6)
!22 = !DILocation(line: 30, column: 31, scope: !6)
!23 = !DILocation(line: 30, column: 36, scope: !6)
!24 = !DILocation(line: 33, column: 17, scope: !6)
!25 = !DILocation(line: 37, column: 18, scope: !6)
!26 = !DILocation(line: 38, column: 43, scope: !6)
!27 = !DILocation(line: 38, column: 37, scope: !6)
!28 = !DILocation(line: 38, column: 52, scope: !6)
!29 = !DILocation(line: 38, column: 34, scope: !6)
!30 = !DILocation(line: 38, column: 48, scope: !6)
!31 = !DILocation(line: 38, column: 30, scope: !6)
!32 = !DILocation(line: 38, column: 57, scope: !6)
!33 = !DILocation(line: 38, column: 107, scope: !6)
!34 = !DILocation(line: 39, column: 13, scope: !6)
!35 = !DILocation(line: 42, column: 20, scope: !6)
!36 = !DILocation(line: 45, column: 45, scope: !6)
!37 = !DILocation(line: 45, column: 31, scope: !6)
!38 = !DILocation(line: 45, column: 54, scope: !6)
!39 = !DILocation(line: 45, column: 105, scope: !6)
!40 = !DILocation(line: 0, scope: !6)
!41 = !DILocation(line: 53, column: 31, scope: !6)
!42 = !DILocation(line: 53, column: 58, scope: !6)
!43 = !DILocation(line: 53, column: 108, scope: !6)
!44 = !DILocation(line: 54, column: 13, scope: !6)
!45 = !DILocation(line: 57, column: 31, scope: !6)
!46 = !DILocation(line: 57, column: 54, scope: !6)
!47 = !DILocation(line: 57, column: 105, scope: !6)
!48 = !DILocation(line: 63, column: 25, scope: !6)
!49 = !DILocation(line: 27, column: 44, scope: !6)
!50 = !DILocation(line: 32, column: 18, scope: !6)
!51 = !DILocation(line: 48, column: 20, scope: !6)
!52 = !DILocation(line: 49, column: 19, scope: !6)
!53 = !DILocation(line: 63, column: 37, scope: !6)
!54 = !DILocation(line: 64, column: 25, scope: !6)
!55 = !DILocation(line: 30, column: 45, scope: !6)
!56 = !DILocation(line: 52, column: 20, scope: !6)
!57 = !DILocation(line: 60, column: 20, scope: !6)
!58 = !DILocation(line: 61, column: 20, scope: !6)
!59 = !DILocation(line: 64, column: 37, scope: !6)
!60 = !DILocation(line: 64, column: 4, scope: !6)
