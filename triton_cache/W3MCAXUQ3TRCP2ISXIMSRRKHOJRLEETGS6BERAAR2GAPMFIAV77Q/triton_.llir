; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = shl i32 %5, 12, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = shl i32 %7, 3, !dbg !11
  %9 = and i32 %8, 1016, !dbg !11
  %10 = or disjoint i32 %9, %6, !dbg !12
  %11 = or disjoint i32 %10, 1024, !dbg !12
  %12 = or disjoint i32 %10, 2048, !dbg !12
  %13 = or disjoint i32 %10, 3072, !dbg !12
  %14 = icmp slt i32 %10, 236544, !dbg !13
  %15 = icmp slt i32 %11, 236544, !dbg !13
  %16 = icmp slt i32 %12, 236544, !dbg !13
  %17 = icmp slt i32 %13, 236544, !dbg !13
  %18 = srem i32 %10, 3072, !dbg !14
  %19 = srem i32 %11, 3072, !dbg !14
  %20 = srem i32 %12, 3072, !dbg !14
  %21 = srem i32 %13, 3072, !dbg !14
  %22 = sext i32 %10 to i64, !dbg !15
  %23 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = sext i32 %11 to i64, !dbg !15
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %24, !dbg !15
  %26 = sext i32 %12 to i64, !dbg !15
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !15
  %28 = sext i32 %13 to i64, !dbg !15
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !15
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 %14) #2, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !16
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !16
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !16
  %35 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !16
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !16
  %37 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !16
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !16
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %15) #2, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !16
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !16
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !16
  %44 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !16
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !16
  %46 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !16
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !16
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %16) #2, !dbg !16
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !16
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !16
  %51 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !16
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !16
  %53 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !16
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !16
  %55 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !16
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !16
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %17) #2, !dbg !16
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !16
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !16
  %60 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !16
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !16
  %62 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !16
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !16
  %64 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !16
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !16
  %66 = sext i32 %18 to i64, !dbg !17
  %67 = getelementptr bfloat, ptr addrspace(1) %1, i64 %66, !dbg !17
  %68 = sext i32 %19 to i64, !dbg !17
  %69 = getelementptr bfloat, ptr addrspace(1) %1, i64 %68, !dbg !17
  %70 = sext i32 %20 to i64, !dbg !17
  %71 = getelementptr bfloat, ptr addrspace(1) %1, i64 %70, !dbg !17
  %72 = sext i32 %21 to i64, !dbg !17
  %73 = getelementptr bfloat, ptr addrspace(1) %1, i64 %72, !dbg !17
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %14) #2, !dbg !18
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !18
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !18
  %77 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !18
  %78 = bitcast i32 %77 to <2 x bfloat>, !dbg !18
  %79 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !18
  %80 = bitcast i32 %79 to <2 x bfloat>, !dbg !18
  %81 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !18
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !18
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %15) #2, !dbg !18
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !18
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !18
  %86 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !18
  %87 = bitcast i32 %86 to <2 x bfloat>, !dbg !18
  %88 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !18
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !18
  %90 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !18
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !18
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %16) #2, !dbg !18
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !18
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !18
  %95 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !18
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !18
  %97 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !18
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !18
  %99 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !18
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !18
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %17) #2, !dbg !18
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !18
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !18
  %104 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !18
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !18
  %106 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !18
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !18
  %108 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !18
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !18
  %110 = fpext <2 x bfloat> %32 to <2 x float>, !dbg !19
  %111 = fpext <2 x bfloat> %76 to <2 x float>, !dbg !20
  %112 = fadd <2 x float> %110, %111, !dbg !21
  %113 = extractelement <2 x float> %112, i64 0, !dbg !22
  %114 = fmul float %113, 0x3FFB3B6460000000, !dbg !22
  %115 = extractelement <2 x float> %112, i64 1, !dbg !22
  %116 = fmul float %115, 0x3FFB3B6460000000, !dbg !22
  %117 = fsub float 0.000000e+00, %114, !dbg !23
  %118 = fsub float 0.000000e+00, %116, !dbg !23
  %119 = fmul float %117, 0x3FF7154760000000, !dbg !27
  %120 = tail call float @llvm.nvvm.ex2.approx.f(float %119), !dbg !27
  %121 = fmul float %118, 0x3FF7154760000000, !dbg !27
  %122 = tail call float @llvm.nvvm.ex2.approx.f(float %121), !dbg !27
  %123 = fadd float %120, 1.000000e+00, !dbg !28
  %124 = fadd float %122, 1.000000e+00, !dbg !28
  %125 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %123), !dbg !29
  %126 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %124), !dbg !29
  %127 = insertelement <2 x float> poison, float %125, i64 0, !dbg !30
  %128 = insertelement <2 x float> %127, float %126, i64 1, !dbg !30
  %129 = fmul <2 x float> %112, %128, !dbg !30
  %130 = fptrunc <2 x float> %129 to <2 x bfloat>, !dbg !31
  %131 = fpext <2 x bfloat> %34 to <2 x float>, !dbg !19
  %132 = fpext <2 x bfloat> %78 to <2 x float>, !dbg !20
  %133 = fadd <2 x float> %131, %132, !dbg !21
  %134 = extractelement <2 x float> %133, i64 0, !dbg !22
  %135 = fmul float %134, 0x3FFB3B6460000000, !dbg !22
  %136 = extractelement <2 x float> %133, i64 1, !dbg !22
  %137 = fmul float %136, 0x3FFB3B6460000000, !dbg !22
  %138 = fsub float 0.000000e+00, %135, !dbg !23
  %139 = fsub float 0.000000e+00, %137, !dbg !23
  %140 = fmul float %138, 0x3FF7154760000000, !dbg !27
  %141 = tail call float @llvm.nvvm.ex2.approx.f(float %140), !dbg !27
  %142 = fmul float %139, 0x3FF7154760000000, !dbg !27
  %143 = tail call float @llvm.nvvm.ex2.approx.f(float %142), !dbg !27
  %144 = fadd float %141, 1.000000e+00, !dbg !28
  %145 = fadd float %143, 1.000000e+00, !dbg !28
  %146 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %144), !dbg !29
  %147 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %145), !dbg !29
  %148 = insertelement <2 x float> poison, float %146, i64 0, !dbg !30
  %149 = insertelement <2 x float> %148, float %147, i64 1, !dbg !30
  %150 = fmul <2 x float> %133, %149, !dbg !30
  %151 = fptrunc <2 x float> %150 to <2 x bfloat>, !dbg !31
  %152 = fpext <2 x bfloat> %36 to <2 x float>, !dbg !19
  %153 = fpext <2 x bfloat> %80 to <2 x float>, !dbg !20
  %154 = fadd <2 x float> %152, %153, !dbg !21
  %155 = extractelement <2 x float> %154, i64 0, !dbg !22
  %156 = fmul float %155, 0x3FFB3B6460000000, !dbg !22
  %157 = extractelement <2 x float> %154, i64 1, !dbg !22
  %158 = fmul float %157, 0x3FFB3B6460000000, !dbg !22
  %159 = fsub float 0.000000e+00, %156, !dbg !23
  %160 = fsub float 0.000000e+00, %158, !dbg !23
  %161 = fmul float %159, 0x3FF7154760000000, !dbg !27
  %162 = tail call float @llvm.nvvm.ex2.approx.f(float %161), !dbg !27
  %163 = fmul float %160, 0x3FF7154760000000, !dbg !27
  %164 = tail call float @llvm.nvvm.ex2.approx.f(float %163), !dbg !27
  %165 = fadd float %162, 1.000000e+00, !dbg !28
  %166 = fadd float %164, 1.000000e+00, !dbg !28
  %167 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %165), !dbg !29
  %168 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %166), !dbg !29
  %169 = insertelement <2 x float> poison, float %167, i64 0, !dbg !30
  %170 = insertelement <2 x float> %169, float %168, i64 1, !dbg !30
  %171 = fmul <2 x float> %154, %170, !dbg !30
  %172 = fptrunc <2 x float> %171 to <2 x bfloat>, !dbg !31
  %173 = fpext <2 x bfloat> %38 to <2 x float>, !dbg !19
  %174 = fpext <2 x bfloat> %82 to <2 x float>, !dbg !20
  %175 = fadd <2 x float> %173, %174, !dbg !21
  %176 = extractelement <2 x float> %175, i64 0, !dbg !22
  %177 = fmul float %176, 0x3FFB3B6460000000, !dbg !22
  %178 = extractelement <2 x float> %175, i64 1, !dbg !22
  %179 = fmul float %178, 0x3FFB3B6460000000, !dbg !22
  %180 = fsub float 0.000000e+00, %177, !dbg !23
  %181 = fsub float 0.000000e+00, %179, !dbg !23
  %182 = fmul float %180, 0x3FF7154760000000, !dbg !27
  %183 = tail call float @llvm.nvvm.ex2.approx.f(float %182), !dbg !27
  %184 = fmul float %181, 0x3FF7154760000000, !dbg !27
  %185 = tail call float @llvm.nvvm.ex2.approx.f(float %184), !dbg !27
  %186 = fadd float %183, 1.000000e+00, !dbg !28
  %187 = fadd float %185, 1.000000e+00, !dbg !28
  %188 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %186), !dbg !29
  %189 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %187), !dbg !29
  %190 = insertelement <2 x float> poison, float %188, i64 0, !dbg !30
  %191 = insertelement <2 x float> %190, float %189, i64 1, !dbg !30
  %192 = fmul <2 x float> %175, %191, !dbg !30
  %193 = fptrunc <2 x float> %192 to <2 x bfloat>, !dbg !31
  %194 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !19
  %195 = fpext <2 x bfloat> %85 to <2 x float>, !dbg !20
  %196 = fadd <2 x float> %194, %195, !dbg !21
  %197 = extractelement <2 x float> %196, i64 0, !dbg !22
  %198 = fmul float %197, 0x3FFB3B6460000000, !dbg !22
  %199 = extractelement <2 x float> %196, i64 1, !dbg !22
  %200 = fmul float %199, 0x3FFB3B6460000000, !dbg !22
  %201 = fsub float 0.000000e+00, %198, !dbg !23
  %202 = fsub float 0.000000e+00, %200, !dbg !23
  %203 = fmul float %201, 0x3FF7154760000000, !dbg !27
  %204 = tail call float @llvm.nvvm.ex2.approx.f(float %203), !dbg !27
  %205 = fmul float %202, 0x3FF7154760000000, !dbg !27
  %206 = tail call float @llvm.nvvm.ex2.approx.f(float %205), !dbg !27
  %207 = fadd float %204, 1.000000e+00, !dbg !28
  %208 = fadd float %206, 1.000000e+00, !dbg !28
  %209 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %207), !dbg !29
  %210 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %208), !dbg !29
  %211 = insertelement <2 x float> poison, float %209, i64 0, !dbg !30
  %212 = insertelement <2 x float> %211, float %210, i64 1, !dbg !30
  %213 = fmul <2 x float> %196, %212, !dbg !30
  %214 = fptrunc <2 x float> %213 to <2 x bfloat>, !dbg !31
  %215 = fpext <2 x bfloat> %43 to <2 x float>, !dbg !19
  %216 = fpext <2 x bfloat> %87 to <2 x float>, !dbg !20
  %217 = fadd <2 x float> %215, %216, !dbg !21
  %218 = extractelement <2 x float> %217, i64 0, !dbg !22
  %219 = fmul float %218, 0x3FFB3B6460000000, !dbg !22
  %220 = extractelement <2 x float> %217, i64 1, !dbg !22
  %221 = fmul float %220, 0x3FFB3B6460000000, !dbg !22
  %222 = fsub float 0.000000e+00, %219, !dbg !23
  %223 = fsub float 0.000000e+00, %221, !dbg !23
  %224 = fmul float %222, 0x3FF7154760000000, !dbg !27
  %225 = tail call float @llvm.nvvm.ex2.approx.f(float %224), !dbg !27
  %226 = fmul float %223, 0x3FF7154760000000, !dbg !27
  %227 = tail call float @llvm.nvvm.ex2.approx.f(float %226), !dbg !27
  %228 = fadd float %225, 1.000000e+00, !dbg !28
  %229 = fadd float %227, 1.000000e+00, !dbg !28
  %230 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %228), !dbg !29
  %231 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %229), !dbg !29
  %232 = insertelement <2 x float> poison, float %230, i64 0, !dbg !30
  %233 = insertelement <2 x float> %232, float %231, i64 1, !dbg !30
  %234 = fmul <2 x float> %217, %233, !dbg !30
  %235 = fptrunc <2 x float> %234 to <2 x bfloat>, !dbg !31
  %236 = fpext <2 x bfloat> %45 to <2 x float>, !dbg !19
  %237 = fpext <2 x bfloat> %89 to <2 x float>, !dbg !20
  %238 = fadd <2 x float> %236, %237, !dbg !21
  %239 = extractelement <2 x float> %238, i64 0, !dbg !22
  %240 = fmul float %239, 0x3FFB3B6460000000, !dbg !22
  %241 = extractelement <2 x float> %238, i64 1, !dbg !22
  %242 = fmul float %241, 0x3FFB3B6460000000, !dbg !22
  %243 = fsub float 0.000000e+00, %240, !dbg !23
  %244 = fsub float 0.000000e+00, %242, !dbg !23
  %245 = fmul float %243, 0x3FF7154760000000, !dbg !27
  %246 = tail call float @llvm.nvvm.ex2.approx.f(float %245), !dbg !27
  %247 = fmul float %244, 0x3FF7154760000000, !dbg !27
  %248 = tail call float @llvm.nvvm.ex2.approx.f(float %247), !dbg !27
  %249 = fadd float %246, 1.000000e+00, !dbg !28
  %250 = fadd float %248, 1.000000e+00, !dbg !28
  %251 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %249), !dbg !29
  %252 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %250), !dbg !29
  %253 = insertelement <2 x float> poison, float %251, i64 0, !dbg !30
  %254 = insertelement <2 x float> %253, float %252, i64 1, !dbg !30
  %255 = fmul <2 x float> %238, %254, !dbg !30
  %256 = fptrunc <2 x float> %255 to <2 x bfloat>, !dbg !31
  %257 = fpext <2 x bfloat> %47 to <2 x float>, !dbg !19
  %258 = fpext <2 x bfloat> %91 to <2 x float>, !dbg !20
  %259 = fadd <2 x float> %257, %258, !dbg !21
  %260 = extractelement <2 x float> %259, i64 0, !dbg !22
  %261 = fmul float %260, 0x3FFB3B6460000000, !dbg !22
  %262 = extractelement <2 x float> %259, i64 1, !dbg !22
  %263 = fmul float %262, 0x3FFB3B6460000000, !dbg !22
  %264 = fsub float 0.000000e+00, %261, !dbg !23
  %265 = fsub float 0.000000e+00, %263, !dbg !23
  %266 = fmul float %264, 0x3FF7154760000000, !dbg !27
  %267 = tail call float @llvm.nvvm.ex2.approx.f(float %266), !dbg !27
  %268 = fmul float %265, 0x3FF7154760000000, !dbg !27
  %269 = tail call float @llvm.nvvm.ex2.approx.f(float %268), !dbg !27
  %270 = fadd float %267, 1.000000e+00, !dbg !28
  %271 = fadd float %269, 1.000000e+00, !dbg !28
  %272 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %270), !dbg !29
  %273 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %271), !dbg !29
  %274 = insertelement <2 x float> poison, float %272, i64 0, !dbg !30
  %275 = insertelement <2 x float> %274, float %273, i64 1, !dbg !30
  %276 = fmul <2 x float> %259, %275, !dbg !30
  %277 = fptrunc <2 x float> %276 to <2 x bfloat>, !dbg !31
  %278 = fpext <2 x bfloat> %50 to <2 x float>, !dbg !19
  %279 = fpext <2 x bfloat> %94 to <2 x float>, !dbg !20
  %280 = fadd <2 x float> %278, %279, !dbg !21
  %281 = extractelement <2 x float> %280, i64 0, !dbg !22
  %282 = fmul float %281, 0x3FFB3B6460000000, !dbg !22
  %283 = extractelement <2 x float> %280, i64 1, !dbg !22
  %284 = fmul float %283, 0x3FFB3B6460000000, !dbg !22
  %285 = fsub float 0.000000e+00, %282, !dbg !23
  %286 = fsub float 0.000000e+00, %284, !dbg !23
  %287 = fmul float %285, 0x3FF7154760000000, !dbg !27
  %288 = tail call float @llvm.nvvm.ex2.approx.f(float %287), !dbg !27
  %289 = fmul float %286, 0x3FF7154760000000, !dbg !27
  %290 = tail call float @llvm.nvvm.ex2.approx.f(float %289), !dbg !27
  %291 = fadd float %288, 1.000000e+00, !dbg !28
  %292 = fadd float %290, 1.000000e+00, !dbg !28
  %293 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %291), !dbg !29
  %294 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %292), !dbg !29
  %295 = insertelement <2 x float> poison, float %293, i64 0, !dbg !30
  %296 = insertelement <2 x float> %295, float %294, i64 1, !dbg !30
  %297 = fmul <2 x float> %280, %296, !dbg !30
  %298 = fptrunc <2 x float> %297 to <2 x bfloat>, !dbg !31
  %299 = fpext <2 x bfloat> %52 to <2 x float>, !dbg !19
  %300 = fpext <2 x bfloat> %96 to <2 x float>, !dbg !20
  %301 = fadd <2 x float> %299, %300, !dbg !21
  %302 = extractelement <2 x float> %301, i64 0, !dbg !22
  %303 = fmul float %302, 0x3FFB3B6460000000, !dbg !22
  %304 = extractelement <2 x float> %301, i64 1, !dbg !22
  %305 = fmul float %304, 0x3FFB3B6460000000, !dbg !22
  %306 = fsub float 0.000000e+00, %303, !dbg !23
  %307 = fsub float 0.000000e+00, %305, !dbg !23
  %308 = fmul float %306, 0x3FF7154760000000, !dbg !27
  %309 = tail call float @llvm.nvvm.ex2.approx.f(float %308), !dbg !27
  %310 = fmul float %307, 0x3FF7154760000000, !dbg !27
  %311 = tail call float @llvm.nvvm.ex2.approx.f(float %310), !dbg !27
  %312 = fadd float %309, 1.000000e+00, !dbg !28
  %313 = fadd float %311, 1.000000e+00, !dbg !28
  %314 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %312), !dbg !29
  %315 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %313), !dbg !29
  %316 = insertelement <2 x float> poison, float %314, i64 0, !dbg !30
  %317 = insertelement <2 x float> %316, float %315, i64 1, !dbg !30
  %318 = fmul <2 x float> %301, %317, !dbg !30
  %319 = fptrunc <2 x float> %318 to <2 x bfloat>, !dbg !31
  %320 = fpext <2 x bfloat> %54 to <2 x float>, !dbg !19
  %321 = fpext <2 x bfloat> %98 to <2 x float>, !dbg !20
  %322 = fadd <2 x float> %320, %321, !dbg !21
  %323 = extractelement <2 x float> %322, i64 0, !dbg !22
  %324 = fmul float %323, 0x3FFB3B6460000000, !dbg !22
  %325 = extractelement <2 x float> %322, i64 1, !dbg !22
  %326 = fmul float %325, 0x3FFB3B6460000000, !dbg !22
  %327 = fsub float 0.000000e+00, %324, !dbg !23
  %328 = fsub float 0.000000e+00, %326, !dbg !23
  %329 = fmul float %327, 0x3FF7154760000000, !dbg !27
  %330 = tail call float @llvm.nvvm.ex2.approx.f(float %329), !dbg !27
  %331 = fmul float %328, 0x3FF7154760000000, !dbg !27
  %332 = tail call float @llvm.nvvm.ex2.approx.f(float %331), !dbg !27
  %333 = fadd float %330, 1.000000e+00, !dbg !28
  %334 = fadd float %332, 1.000000e+00, !dbg !28
  %335 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %333), !dbg !29
  %336 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %334), !dbg !29
  %337 = insertelement <2 x float> poison, float %335, i64 0, !dbg !30
  %338 = insertelement <2 x float> %337, float %336, i64 1, !dbg !30
  %339 = fmul <2 x float> %322, %338, !dbg !30
  %340 = fptrunc <2 x float> %339 to <2 x bfloat>, !dbg !31
  %341 = fpext <2 x bfloat> %56 to <2 x float>, !dbg !19
  %342 = fpext <2 x bfloat> %100 to <2 x float>, !dbg !20
  %343 = fadd <2 x float> %341, %342, !dbg !21
  %344 = extractelement <2 x float> %343, i64 0, !dbg !22
  %345 = fmul float %344, 0x3FFB3B6460000000, !dbg !22
  %346 = extractelement <2 x float> %343, i64 1, !dbg !22
  %347 = fmul float %346, 0x3FFB3B6460000000, !dbg !22
  %348 = fsub float 0.000000e+00, %345, !dbg !23
  %349 = fsub float 0.000000e+00, %347, !dbg !23
  %350 = fmul float %348, 0x3FF7154760000000, !dbg !27
  %351 = tail call float @llvm.nvvm.ex2.approx.f(float %350), !dbg !27
  %352 = fmul float %349, 0x3FF7154760000000, !dbg !27
  %353 = tail call float @llvm.nvvm.ex2.approx.f(float %352), !dbg !27
  %354 = fadd float %351, 1.000000e+00, !dbg !28
  %355 = fadd float %353, 1.000000e+00, !dbg !28
  %356 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %354), !dbg !29
  %357 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %355), !dbg !29
  %358 = insertelement <2 x float> poison, float %356, i64 0, !dbg !30
  %359 = insertelement <2 x float> %358, float %357, i64 1, !dbg !30
  %360 = fmul <2 x float> %343, %359, !dbg !30
  %361 = fptrunc <2 x float> %360 to <2 x bfloat>, !dbg !31
  %362 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !19
  %363 = fpext <2 x bfloat> %103 to <2 x float>, !dbg !20
  %364 = fadd <2 x float> %362, %363, !dbg !21
  %365 = extractelement <2 x float> %364, i64 0, !dbg !22
  %366 = fmul float %365, 0x3FFB3B6460000000, !dbg !22
  %367 = extractelement <2 x float> %364, i64 1, !dbg !22
  %368 = fmul float %367, 0x3FFB3B6460000000, !dbg !22
  %369 = fsub float 0.000000e+00, %366, !dbg !23
  %370 = fsub float 0.000000e+00, %368, !dbg !23
  %371 = fmul float %369, 0x3FF7154760000000, !dbg !27
  %372 = tail call float @llvm.nvvm.ex2.approx.f(float %371), !dbg !27
  %373 = fmul float %370, 0x3FF7154760000000, !dbg !27
  %374 = tail call float @llvm.nvvm.ex2.approx.f(float %373), !dbg !27
  %375 = fadd float %372, 1.000000e+00, !dbg !28
  %376 = fadd float %374, 1.000000e+00, !dbg !28
  %377 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %375), !dbg !29
  %378 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %376), !dbg !29
  %379 = insertelement <2 x float> poison, float %377, i64 0, !dbg !30
  %380 = insertelement <2 x float> %379, float %378, i64 1, !dbg !30
  %381 = fmul <2 x float> %364, %380, !dbg !30
  %382 = fptrunc <2 x float> %381 to <2 x bfloat>, !dbg !31
  %383 = fpext <2 x bfloat> %61 to <2 x float>, !dbg !19
  %384 = fpext <2 x bfloat> %105 to <2 x float>, !dbg !20
  %385 = fadd <2 x float> %383, %384, !dbg !21
  %386 = extractelement <2 x float> %385, i64 0, !dbg !22
  %387 = fmul float %386, 0x3FFB3B6460000000, !dbg !22
  %388 = extractelement <2 x float> %385, i64 1, !dbg !22
  %389 = fmul float %388, 0x3FFB3B6460000000, !dbg !22
  %390 = fsub float 0.000000e+00, %387, !dbg !23
  %391 = fsub float 0.000000e+00, %389, !dbg !23
  %392 = fmul float %390, 0x3FF7154760000000, !dbg !27
  %393 = tail call float @llvm.nvvm.ex2.approx.f(float %392), !dbg !27
  %394 = fmul float %391, 0x3FF7154760000000, !dbg !27
  %395 = tail call float @llvm.nvvm.ex2.approx.f(float %394), !dbg !27
  %396 = fadd float %393, 1.000000e+00, !dbg !28
  %397 = fadd float %395, 1.000000e+00, !dbg !28
  %398 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %396), !dbg !29
  %399 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %397), !dbg !29
  %400 = insertelement <2 x float> poison, float %398, i64 0, !dbg !30
  %401 = insertelement <2 x float> %400, float %399, i64 1, !dbg !30
  %402 = fmul <2 x float> %385, %401, !dbg !30
  %403 = fptrunc <2 x float> %402 to <2 x bfloat>, !dbg !31
  %404 = fpext <2 x bfloat> %63 to <2 x float>, !dbg !19
  %405 = fpext <2 x bfloat> %107 to <2 x float>, !dbg !20
  %406 = fadd <2 x float> %404, %405, !dbg !21
  %407 = extractelement <2 x float> %406, i64 0, !dbg !22
  %408 = fmul float %407, 0x3FFB3B6460000000, !dbg !22
  %409 = extractelement <2 x float> %406, i64 1, !dbg !22
  %410 = fmul float %409, 0x3FFB3B6460000000, !dbg !22
  %411 = fsub float 0.000000e+00, %408, !dbg !23
  %412 = fsub float 0.000000e+00, %410, !dbg !23
  %413 = fmul float %411, 0x3FF7154760000000, !dbg !27
  %414 = tail call float @llvm.nvvm.ex2.approx.f(float %413), !dbg !27
  %415 = fmul float %412, 0x3FF7154760000000, !dbg !27
  %416 = tail call float @llvm.nvvm.ex2.approx.f(float %415), !dbg !27
  %417 = fadd float %414, 1.000000e+00, !dbg !28
  %418 = fadd float %416, 1.000000e+00, !dbg !28
  %419 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %417), !dbg !29
  %420 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %418), !dbg !29
  %421 = insertelement <2 x float> poison, float %419, i64 0, !dbg !30
  %422 = insertelement <2 x float> %421, float %420, i64 1, !dbg !30
  %423 = fmul <2 x float> %406, %422, !dbg !30
  %424 = fptrunc <2 x float> %423 to <2 x bfloat>, !dbg !31
  %425 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !19
  %426 = fpext <2 x bfloat> %109 to <2 x float>, !dbg !20
  %427 = fadd <2 x float> %425, %426, !dbg !21
  %428 = extractelement <2 x float> %427, i64 0, !dbg !22
  %429 = fmul float %428, 0x3FFB3B6460000000, !dbg !22
  %430 = extractelement <2 x float> %427, i64 1, !dbg !22
  %431 = fmul float %430, 0x3FFB3B6460000000, !dbg !22
  %432 = fsub float 0.000000e+00, %429, !dbg !23
  %433 = fsub float 0.000000e+00, %431, !dbg !23
  %434 = fmul float %432, 0x3FF7154760000000, !dbg !27
  %435 = tail call float @llvm.nvvm.ex2.approx.f(float %434), !dbg !27
  %436 = fmul float %433, 0x3FF7154760000000, !dbg !27
  %437 = tail call float @llvm.nvvm.ex2.approx.f(float %436), !dbg !27
  %438 = fadd float %435, 1.000000e+00, !dbg !28
  %439 = fadd float %437, 1.000000e+00, !dbg !28
  %440 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %438), !dbg !29
  %441 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %439), !dbg !29
  %442 = insertelement <2 x float> poison, float %440, i64 0, !dbg !30
  %443 = insertelement <2 x float> %442, float %441, i64 1, !dbg !30
  %444 = fmul <2 x float> %427, %443, !dbg !30
  %445 = fptrunc <2 x float> %444 to <2 x bfloat>, !dbg !31
  %446 = bitcast <2 x bfloat> %130 to i32, !dbg !31
  %447 = bitcast <2 x bfloat> %151 to i32, !dbg !31
  %448 = bitcast <2 x bfloat> %172 to i32, !dbg !31
  %449 = bitcast <2 x bfloat> %193 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %446, i32 %447, i32 %448, i32 %449, ptr addrspace(1) %23, i1 %14) #2, !dbg !31
  %450 = bitcast <2 x bfloat> %214 to i32, !dbg !31
  %451 = bitcast <2 x bfloat> %235 to i32, !dbg !31
  %452 = bitcast <2 x bfloat> %256 to i32, !dbg !31
  %453 = bitcast <2 x bfloat> %277 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %450, i32 %451, i32 %452, i32 %453, ptr addrspace(1) %25, i1 %15) #2, !dbg !31
  %454 = bitcast <2 x bfloat> %298 to i32, !dbg !31
  %455 = bitcast <2 x bfloat> %319 to i32, !dbg !31
  %456 = bitcast <2 x bfloat> %340 to i32, !dbg !31
  %457 = bitcast <2 x bfloat> %361 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %454, i32 %455, i32 %456, i32 %457, ptr addrspace(1) %27, i1 %16) #2, !dbg !31
  %458 = bitcast <2 x bfloat> %382 to i32, !dbg !31
  %459 = bitcast <2 x bfloat> %403 to i32, !dbg !31
  %460 = bitcast <2 x bfloat> %424 to i32, !dbg !31
  %461 = bitcast <2 x bfloat> %445 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %458, i32 %459, i32 %460, i32 %461, ptr addrspace(1) %29, i1 %17) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cays7uwl4mjrrpbn562uyt2hbd6b25qyzadsmdqftgdhj3yphang.py", directory: "/tmp/torchinductor_root/ay")
!4 = !{ptr @triton_, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 36, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 21, scope: !6)
!14 = !DILocation(line: 28, column: 19, scope: !6)
!15 = !DILocation(line: 29, column: 34, scope: !6)
!16 = !DILocation(line: 29, column: 39, scope: !6)
!17 = !DILocation(line: 30, column: 30, scope: !6)
!18 = !DILocation(line: 30, column: 35, scope: !6)
!19 = !DILocation(line: 29, column: 49, scope: !6)
!20 = !DILocation(line: 30, column: 75, scope: !6)
!21 = !DILocation(line: 31, column: 18, scope: !6)
!22 = !DILocation(line: 33, column: 18, scope: !6)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!26 = !DILocation(line: 34, column: 22, scope: !6)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 35, column: 18, scope: !6)
!31 = !DILocation(line: 36, column: 39, scope: !6)
!32 = !DILocation(line: 36, column: 4, scope: !6)
