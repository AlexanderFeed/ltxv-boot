; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused__to_copy_add_mean_pow_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 5, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 4, !dbg !11
  %15 = and i32 %14, 15, !dbg !11
  %16 = or disjoint i32 %15, 16, !dbg !11
  %17 = and i32 %13, 31, !dbg !11
  %18 = or disjoint i32 %15, %12, !dbg !12
  %19 = or disjoint i32 %16, %12, !dbg !12
  %20 = or disjoint i32 %12, %17, !dbg !12
  %21 = shl i32 %13, 3, !dbg !13
  %22 = and i32 %21, 120, !dbg !13
  %23 = or disjoint i32 %22, 4, !dbg !13
  %24 = sdiv i32 %18, 24, !dbg !14
  %25 = sdiv i32 %19, 24, !dbg !14
  %26 = mul i32 %24, 24, !dbg !15
  %.decomposed = sub i32 %18, %26, !dbg !15
  %27 = mul i32 %25, 24, !dbg !15
  %.decomposed12 = sub i32 %19, %27, !dbg !15
  %28 = shl i32 %18, 7, !dbg !16
  %29 = shl i32 %19, 7, !dbg !16
  %30 = or disjoint i32 %28, %22, !dbg !17
  %31 = or disjoint i32 %28, %23, !dbg !17
  %32 = or disjoint i32 %29, %22, !dbg !17
  %33 = or disjoint i32 %29, %23, !dbg !17
  %34 = sext i32 %30 to i64, !dbg !18
  %35 = getelementptr i32, ptr addrspace(1) %0, i64 %34, !dbg !18
  %36 = sext i32 %31 to i64, !dbg !18
  %37 = getelementptr i32, ptr addrspace(1) %0, i64 %36, !dbg !18
  %38 = sext i32 %32 to i64, !dbg !18
  %39 = getelementptr i32, ptr addrspace(1) %0, i64 %38, !dbg !18
  %40 = sext i32 %33 to i64, !dbg !18
  %41 = getelementptr i32, ptr addrspace(1) %0, i64 %40, !dbg !18
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %35) #3, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !19
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %37) #3, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !19
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !19
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !19
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %39) #3, !dbg !19
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !19
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !19
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !19
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !19
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %41) #3, !dbg !19
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !19
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !19
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !19
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !19
  %62 = sext i32 %24 to i64, !dbg !20
  %63 = getelementptr bfloat, ptr addrspace(1) %1, i64 %62, !dbg !20
  %64 = sext i32 %25 to i64, !dbg !20
  %65 = getelementptr bfloat, ptr addrspace(1) %1, i64 %64, !dbg !20
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %63) #3, !dbg !21
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %63) #3, !dbg !21
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %63) #3, !dbg !21
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %63) #3, !dbg !21
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %63) #3, !dbg !21
  %71 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %63) #3, !dbg !21
  %72 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %63) #3, !dbg !21
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %63) #3, !dbg !21
  %74 = bitcast i16 %73 to bfloat, !dbg !21
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %65) #3, !dbg !21
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %65) #3, !dbg !21
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %65) #3, !dbg !21
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %65) #3, !dbg !21
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %65) #3, !dbg !21
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %65) #3, !dbg !21
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %65) #3, !dbg !21
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %65) #3, !dbg !21
  %83 = bitcast i16 %82 to bfloat, !dbg !21
  %84 = getelementptr bfloat, ptr addrspace(1) %2, i64 %62, !dbg !22
  %85 = getelementptr bfloat, ptr addrspace(1) %2, i64 %64, !dbg !22
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %84) #3, !dbg !23
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %84) #3, !dbg !23
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %84) #3, !dbg !23
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %84) #3, !dbg !23
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %84) #3, !dbg !23
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %84) #3, !dbg !23
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %84) #3, !dbg !23
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %84) #3, !dbg !23
  %94 = bitcast i16 %93 to bfloat, !dbg !23
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #3, !dbg !23
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #3, !dbg !23
  %97 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #3, !dbg !23
  %98 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #3, !dbg !23
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #3, !dbg !23
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #3, !dbg !23
  %101 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #3, !dbg !23
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %85) #3, !dbg !23
  %103 = bitcast i16 %102 to bfloat, !dbg !23
  %104 = shl nsw i32 %.decomposed, 7, !dbg !24
  %105 = shl nsw i32 %.decomposed12, 7, !dbg !24
  %106 = or disjoint i32 %104, %22, !dbg !25
  %107 = or disjoint i32 %105, %22, !dbg !25
  %108 = sext i32 %106 to i64, !dbg !26
  %109 = getelementptr bfloat, ptr addrspace(1) %3, i64 %108, !dbg !26
  %110 = sext i32 %107 to i64, !dbg !26
  %111 = getelementptr bfloat, ptr addrspace(1) %3, i64 %110, !dbg !26
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %109) #3, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !27
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !27
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !27
  %117 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !27
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !27
  %119 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !27
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !27
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %111) #3, !dbg !27
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !27
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !27
  %124 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !27
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !27
  %126 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !27
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !27
  %128 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !27
  %129 = bitcast i32 %128 to <2 x bfloat>, !dbg !27
  %130 = getelementptr bfloat, ptr addrspace(1) %4, i64 %108, !dbg !28
  %131 = getelementptr bfloat, ptr addrspace(1) %4, i64 %110, !dbg !28
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %130) #3, !dbg !29
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !29
  %134 = bitcast i32 %133 to <2 x bfloat>, !dbg !29
  %135 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !29
  %136 = bitcast i32 %135 to <2 x bfloat>, !dbg !29
  %137 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !29
  %138 = bitcast i32 %137 to <2 x bfloat>, !dbg !29
  %139 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !29
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !29
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %131) #3, !dbg !29
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !29
  %143 = bitcast i32 %142 to <2 x bfloat>, !dbg !29
  %144 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !29
  %145 = bitcast i32 %144 to <2 x bfloat>, !dbg !29
  %146 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !29
  %147 = bitcast i32 %146 to <2 x bfloat>, !dbg !29
  %148 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !29
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !29
  %.inv = fcmp oge bfloat %74, 0xR0000, !dbg !30
  %150 = select i1 %.inv, bfloat 0xR0000, bfloat %74, !dbg !30
  %151 = fpext bfloat %150 to float, !dbg !30
  %.inv2 = fcmp oge bfloat %83, 0xR0000, !dbg !30
  %152 = select i1 %.inv2, bfloat 0xR0000, bfloat %83, !dbg !30
  %153 = fpext bfloat %152 to float, !dbg !30
  %154 = fsub float 0.000000e+00, %151, !dbg !34
  %155 = fsub float 0.000000e+00, %153, !dbg !34
  %.inv3 = fcmp ole bfloat %94, 0xR0000, !dbg !35
  %156 = select i1 %.inv3, bfloat 0xR0000, bfloat %94, !dbg !35
  %157 = fpext bfloat %156 to float, !dbg !35
  %.inv4 = fcmp ole bfloat %103, 0xR0000, !dbg !35
  %158 = select i1 %.inv4, bfloat 0xR0000, bfloat %103, !dbg !35
  %159 = fpext bfloat %158 to float, !dbg !35
  %160 = fcmp ogt float %154, %157, !dbg !37
  %161 = fcmp ogt float %155, %159, !dbg !37
  %162 = fcmp uno float %154, 0.000000e+00, !dbg !39
  %163 = fcmp uno float %155, 0.000000e+00, !dbg !39
  %164 = or i1 %162, %160, !dbg !40
  %165 = or i1 %163, %161, !dbg !40
  %166 = select i1 %164, float %154, float %157, !dbg !41
  %167 = select i1 %165, float %155, float %159, !dbg !41
  %168 = fmul float %166, 0x3F80204080000000, !dbg !42
  %169 = fmul float %167, 0x3F80204080000000, !dbg !42
  %170 = fcmp ogt float %168, 0x3EE4F8B580000000, !dbg !43
  %171 = fcmp ogt float %169, 0x3EE4F8B580000000, !dbg !43
  %172 = fcmp uno float %168, 0.000000e+00, !dbg !45
  %173 = fcmp uno float %169, 0.000000e+00, !dbg !45
  %174 = or i1 %170, %172, !dbg !46
  %175 = or i1 %171, %173, !dbg !46
  %176 = select i1 %174, float %168, float 0x3EE4F8B580000000, !dbg !47
  %177 = select i1 %175, float %169, float 0x3EE4F8B580000000, !dbg !47
  %178 = fpext <2 x bfloat> %114 to <2 x float>, !dbg !48
  %179 = fpext <2 x bfloat> %134 to <2 x float>, !dbg !49
  %180 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !50
  %181 = insertelement <2 x i32> %180, i32 %44, i64 1, !dbg !50
  %182 = sitofp <2 x i32> %181 to <2 x float>, !dbg !50
  %183 = insertelement <2 x float> poison, float %176, i64 0, !dbg !51
  %184 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  %185 = fmul <2 x float> %184, %182, !dbg !51
  %186 = fmul <2 x float> %185, %178, !dbg !52
  %187 = fadd <2 x float> %186, %179, !dbg !53
  %188 = fmul <2 x float> %187, %187, !dbg !54
  %189 = fpext <2 x bfloat> %116 to <2 x float>, !dbg !48
  %190 = fpext <2 x bfloat> %136 to <2 x float>, !dbg !49
  %191 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !50
  %192 = insertelement <2 x i32> %191, i32 %46, i64 1, !dbg !50
  %193 = sitofp <2 x i32> %192 to <2 x float>, !dbg !50
  %194 = fmul <2 x float> %184, %193, !dbg !51
  %195 = fmul <2 x float> %194, %189, !dbg !52
  %196 = fadd <2 x float> %195, %190, !dbg !53
  %197 = fmul <2 x float> %196, %196, !dbg !54
  %198 = fpext <2 x bfloat> %118 to <2 x float>, !dbg !48
  %199 = fpext <2 x bfloat> %138 to <2 x float>, !dbg !49
  %200 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !50
  %201 = insertelement <2 x i32> %200, i32 %49, i64 1, !dbg !50
  %202 = sitofp <2 x i32> %201 to <2 x float>, !dbg !50
  %203 = fmul <2 x float> %184, %202, !dbg !51
  %204 = fmul <2 x float> %203, %198, !dbg !52
  %205 = fadd <2 x float> %204, %199, !dbg !53
  %206 = fmul <2 x float> %205, %205, !dbg !54
  %207 = fpext <2 x bfloat> %120 to <2 x float>, !dbg !48
  %208 = fpext <2 x bfloat> %140 to <2 x float>, !dbg !49
  %209 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !50
  %210 = insertelement <2 x i32> %209, i32 %51, i64 1, !dbg !50
  %211 = sitofp <2 x i32> %210 to <2 x float>, !dbg !50
  %212 = fmul <2 x float> %184, %211, !dbg !51
  %213 = fmul <2 x float> %212, %207, !dbg !52
  %214 = fadd <2 x float> %213, %208, !dbg !53
  %215 = fmul <2 x float> %214, %214, !dbg !54
  %216 = fpext <2 x bfloat> %123 to <2 x float>, !dbg !48
  %217 = fpext <2 x bfloat> %143 to <2 x float>, !dbg !49
  %218 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !50
  %219 = insertelement <2 x i32> %218, i32 %54, i64 1, !dbg !50
  %220 = sitofp <2 x i32> %219 to <2 x float>, !dbg !50
  %221 = insertelement <2 x float> poison, float %177, i64 0, !dbg !51
  %222 = shufflevector <2 x float> %221, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  %223 = fmul <2 x float> %222, %220, !dbg !51
  %224 = fmul <2 x float> %223, %216, !dbg !52
  %225 = fadd <2 x float> %224, %217, !dbg !53
  %226 = fmul <2 x float> %225, %225, !dbg !54
  %227 = fpext <2 x bfloat> %125 to <2 x float>, !dbg !48
  %228 = fpext <2 x bfloat> %145 to <2 x float>, !dbg !49
  %229 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !50
  %230 = insertelement <2 x i32> %229, i32 %56, i64 1, !dbg !50
  %231 = sitofp <2 x i32> %230 to <2 x float>, !dbg !50
  %232 = fmul <2 x float> %222, %231, !dbg !51
  %233 = fmul <2 x float> %232, %227, !dbg !52
  %234 = fadd <2 x float> %233, %228, !dbg !53
  %235 = fmul <2 x float> %234, %234, !dbg !54
  %236 = fpext <2 x bfloat> %127 to <2 x float>, !dbg !48
  %237 = fpext <2 x bfloat> %147 to <2 x float>, !dbg !49
  %238 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !50
  %239 = insertelement <2 x i32> %238, i32 %59, i64 1, !dbg !50
  %240 = sitofp <2 x i32> %239 to <2 x float>, !dbg !50
  %241 = fmul <2 x float> %222, %240, !dbg !51
  %242 = fmul <2 x float> %241, %236, !dbg !52
  %243 = fadd <2 x float> %242, %237, !dbg !53
  %244 = fmul <2 x float> %243, %243, !dbg !54
  %245 = fpext <2 x bfloat> %129 to <2 x float>, !dbg !48
  %246 = fpext <2 x bfloat> %149 to <2 x float>, !dbg !49
  %247 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !50
  %248 = insertelement <2 x i32> %247, i32 %61, i64 1, !dbg !50
  %249 = sitofp <2 x i32> %248 to <2 x float>, !dbg !50
  %250 = fmul <2 x float> %222, %249, !dbg !51
  %251 = fmul <2 x float> %250, %245, !dbg !52
  %252 = fadd <2 x float> %251, %246, !dbg !53
  %253 = fmul <2 x float> %252, %252, !dbg !54
  %shift = shufflevector <2 x float> %188, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %254 = fadd <2 x float> %188, %shift, !dbg !55
  %255 = fadd <2 x float> %197, %254, !dbg !55
  %shift5 = shufflevector <2 x float> %197, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %256 = fadd <2 x float> %shift5, %255, !dbg !55
  %257 = fadd <2 x float> %206, %256, !dbg !55
  %shift6 = shufflevector <2 x float> %206, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %258 = fadd <2 x float> %shift6, %257, !dbg !55
  %259 = fadd <2 x float> %215, %258, !dbg !55
  %shift7 = shufflevector <2 x float> %215, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %260 = fadd <2 x float> %shift7, %259, !dbg !55
  %261 = extractelement <2 x float> %260, i64 0, !dbg !55
  %shift8 = shufflevector <2 x float> %226, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %262 = fadd <2 x float> %226, %shift8, !dbg !55
  %263 = fadd <2 x float> %235, %262, !dbg !55
  %shift9 = shufflevector <2 x float> %235, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %264 = fadd <2 x float> %shift9, %263, !dbg !55
  %265 = fadd <2 x float> %244, %264, !dbg !55
  %shift10 = shufflevector <2 x float> %244, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %266 = fadd <2 x float> %shift10, %265, !dbg !55
  %267 = fadd <2 x float> %253, %266, !dbg !55
  %shift11 = shufflevector <2 x float> %253, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %268 = fadd <2 x float> %shift11, %267, !dbg !55
  %269 = extractelement <2 x float> %268, i64 0, !dbg !55
  %270 = bitcast float %261 to i32, !dbg !60
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 8, i32 31), !dbg !60
  %272 = bitcast i32 %271 to float, !dbg !60
  %273 = fadd float %261, %272, !dbg !55
  %274 = bitcast float %273 to i32, !dbg !60
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 4, i32 31), !dbg !60
  %276 = bitcast i32 %275 to float, !dbg !60
  %277 = fadd float %273, %276, !dbg !55
  %278 = bitcast float %277 to i32, !dbg !60
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 2, i32 31), !dbg !60
  %280 = bitcast i32 %279 to float, !dbg !60
  %281 = fadd float %277, %280, !dbg !55
  %282 = bitcast float %281 to i32, !dbg !60
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 1, i32 31), !dbg !60
  %284 = bitcast i32 %283 to float, !dbg !60
  %285 = fadd float %281, %284, !dbg !55
  %286 = bitcast float %269 to i32, !dbg !60
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 8, i32 31), !dbg !60
  %288 = bitcast i32 %287 to float, !dbg !60
  %289 = fadd float %269, %288, !dbg !55
  %290 = bitcast float %289 to i32, !dbg !60
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 4, i32 31), !dbg !60
  %292 = bitcast i32 %291 to float, !dbg !60
  %293 = fadd float %289, %292, !dbg !55
  %294 = bitcast float %293 to i32, !dbg !60
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 2, i32 31), !dbg !60
  %296 = bitcast i32 %295 to float, !dbg !60
  %297 = fadd float %293, %296, !dbg !55
  %298 = bitcast float %297 to i32, !dbg !60
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 1, i32 31), !dbg !60
  %300 = bitcast i32 %299 to float, !dbg !60
  %301 = fadd float %297, %300, !dbg !55
  %302 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !61
  %303 = bitcast float %285 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 true) #3, !dbg !61
  %304 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !61
  %305 = bitcast float %301 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %304, <1 x i32> %305, i1 true) #3, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %306 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !61
  %307 = load i32, ptr addrspace(3) %306, align 4, !dbg !61
  %308 = getelementptr bfloat, ptr addrspace(1) %5, i64 %34, !dbg !62
  %309 = getelementptr bfloat, ptr addrspace(1) %5, i64 %38, !dbg !62
  %310 = fptrunc <2 x float> %187 to <2 x bfloat>, !dbg !63
  %311 = fptrunc <2 x float> %196 to <2 x bfloat>, !dbg !63
  %312 = fptrunc <2 x float> %205 to <2 x bfloat>, !dbg !63
  %313 = fptrunc <2 x float> %214 to <2 x bfloat>, !dbg !63
  %314 = fptrunc <2 x float> %225 to <2 x bfloat>, !dbg !63
  %315 = fptrunc <2 x float> %234 to <2 x bfloat>, !dbg !63
  %316 = fptrunc <2 x float> %243 to <2 x bfloat>, !dbg !63
  %317 = fptrunc <2 x float> %252 to <2 x bfloat>, !dbg !63
  %318 = bitcast <2 x bfloat> %310 to i32, !dbg !63
  %319 = bitcast <2 x bfloat> %311 to i32, !dbg !63
  %320 = bitcast <2 x bfloat> %312 to i32, !dbg !63
  %321 = bitcast <2 x bfloat> %313 to i32, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %318, i32 %319, i32 %320, i32 %321, ptr addrspace(1) %308) #3, !dbg !63
  %322 = bitcast <2 x bfloat> %314 to i32, !dbg !63
  %323 = bitcast <2 x bfloat> %315 to i32, !dbg !63
  %324 = bitcast <2 x bfloat> %316 to i32, !dbg !63
  %325 = bitcast <2 x bfloat> %317 to i32, !dbg !63
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %322, i32 %323, i32 %324, i32 %325, ptr addrspace(1) %309) #3, !dbg !63
  %326 = sext i32 %20 to i64, !dbg !64
  %327 = getelementptr float, ptr addrspace(1) %6, i64 %326, !dbg !64
  %328 = and i32 %13, 224, !dbg !65
  %329 = icmp eq i32 %328, 0, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %307, ptr addrspace(1) %327, i1 %329) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czbzrbq5on2cwjnhnqxnh2wa5zuv62z3gavdrrggg5dimaepn3e2.py", directory: "/tmp/torchinductor_root/zb")
!4 = !{ptr @triton_per_fused__to_copy_add_mean_pow_3, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_mean_pow_3", linkageName: "triton_per_fused__to_copy_add_mean_pow_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 44, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 27, column: 38, scope: !6)
!14 = !DILocation(line: 34, column: 19, scope: !6)
!15 = !DILocation(line: 35, column: 19, scope: !6)
!16 = !DILocation(line: 36, column: 41, scope: !6)
!17 = !DILocation(line: 36, column: 37, scope: !6)
!18 = !DILocation(line: 36, column: 30, scope: !6)
!19 = !DILocation(line: 36, column: 46, scope: !6)
!20 = !DILocation(line: 37, column: 30, scope: !6)
!21 = !DILocation(line: 37, column: 35, scope: !6)
!22 = !DILocation(line: 38, column: 30, scope: !6)
!23 = !DILocation(line: 38, column: 35, scope: !6)
!24 = !DILocation(line: 39, column: 42, scope: !6)
!25 = !DILocation(line: 39, column: 38, scope: !6)
!26 = !DILocation(line: 39, column: 31, scope: !6)
!27 = !DILocation(line: 39, column: 47, scope: !6)
!28 = !DILocation(line: 40, column: 31, scope: !6)
!29 = !DILocation(line: 40, column: 47, scope: !6)
!30 = !DILocation(line: 97, column: 29, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !6, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 43, column: 40, scope: !6)
!34 = !DILocation(line: 44, column: 12, scope: !6)
!35 = !DILocation(line: 105, column: 29, scope: !31, inlinedAt: !36)
!36 = !DILocation(line: 45, column: 40, scope: !6)
!37 = !DILocation(line: 102, column: 15, scope: !31, inlinedAt: !38)
!38 = !DILocation(line: 46, column: 40, scope: !6)
!39 = !DILocation(line: 104, column: 21, scope: !31, inlinedAt: !38)
!40 = !DILocation(line: 104, column: 16, scope: !31, inlinedAt: !38)
!41 = !DILocation(line: 105, column: 29, scope: !31, inlinedAt: !38)
!42 = !DILocation(line: 48, column: 19, scope: !6)
!43 = !DILocation(line: 102, column: 15, scope: !31, inlinedAt: !44)
!44 = !DILocation(line: 51, column: 42, scope: !6)
!45 = !DILocation(line: 104, column: 21, scope: !31, inlinedAt: !44)
!46 = !DILocation(line: 104, column: 16, scope: !31, inlinedAt: !44)
!47 = !DILocation(line: 105, column: 29, scope: !31, inlinedAt: !44)
!48 = !DILocation(line: 39, column: 86, scope: !6)
!49 = !DILocation(line: 40, column: 86, scope: !6)
!50 = !DILocation(line: 41, column: 19, scope: !6)
!51 = !DILocation(line: 53, column: 19, scope: !6)
!52 = !DILocation(line: 54, column: 20, scope: !6)
!53 = !DILocation(line: 55, column: 20, scope: !6)
!54 = !DILocation(line: 57, column: 20, scope: !6)
!55 = !DILocation(line: 256, column: 15, scope: !56, inlinedAt: !59)
!56 = distinct !DILexicalBlockFile(scope: !58, file: !57, discriminator: 0)
!57 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!58 = distinct !DILexicalBlockFile(scope: !6, file: !57, discriminator: 0)
!59 = !DILocation(line: 59, column: 26, scope: !6)
!60 = !DILocation(line: 286, column: 36, scope: !58, inlinedAt: !59)
!61 = !DILocation(line: 59, column: 29, scope: !6)
!62 = !DILocation(line: 60, column: 25, scope: !6)
!63 = !DILocation(line: 60, column: 48, scope: !6)
!64 = !DILocation(line: 61, column: 25, scope: !6)
!65 = !DILocation(line: 61, column: 37, scope: !6)
!66 = !DILocation(line: 61, column: 4, scope: !6)
