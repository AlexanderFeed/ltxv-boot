; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 6, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 2, !dbg !11
  %12 = and i32 %11, 63, !dbg !11
  %13 = and i32 %10, 3, !dbg !11
  %14 = and i32 %10, 63, !dbg !11
  %15 = or disjoint i32 %12, %9, !dbg !12
  %16 = or disjoint i32 %9, %14, !dbg !12
  %17 = icmp slt i32 %15, 512, !dbg !13
  %18 = icmp slt i32 %16, 512, !dbg !13
  %19 = shl i32 %15, 7, !dbg !14
  br i1 %17, label %.split.us, label %.split

.split.us:                                        ; preds = %7, %.split.us
  %20 = phi float [ %40, %.split.us ], [ 0xFFF0000000000000, %7 ]
  %21 = phi float [ %36, %.split.us ], [ 0x7FF0000000000000, %7 ]
  %22 = phi i32 [ %41, %.split.us ], [ 0, %7 ]
  %23 = lshr i32 %22, 7, !dbg !15
  %24 = mul nuw nsw i32 %23, 526336, !dbg !16
  %25 = add i32 %24, %19, !dbg !17
  %.masked.us = and i32 %22, 124, !dbg !18
  %26 = or disjoint i32 %25, %.masked.us, !dbg !19
  %27 = or disjoint i32 %26, %13, !dbg !19
  %28 = sext i32 %27 to i64, !dbg !20
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !20
  %30 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %29, i1 true) #4, !dbg !21
  %31 = bitcast i16 %30 to bfloat, !dbg !21
  %32 = fpext bfloat %31 to float, !dbg !22
  %33 = fcmp olt float %21, %32, !dbg !23
  %34 = fcmp uno float %21, 0.000000e+00, !dbg !27
  %35 = or i1 %34, %33, !dbg !28
  %36 = select i1 %35, float %21, float %32, !dbg !29
  %37 = fcmp ogt float %20, %32, !dbg !30
  %38 = fcmp uno float %20, 0.000000e+00, !dbg !32
  %39 = or i1 %38, %37, !dbg !33
  %40 = select i1 %39, float %20, float %32, !dbg !34
  %41 = add nuw nsw i32 %22, 4, !dbg !35
  %42 = icmp samesign ult i32 %22, 3068, !dbg !35
  br i1 %42, label %.split.us, label %.split6.us, !dbg !35

.split:                                           ; preds = %7, %.split
  %43 = phi i32 [ %52, %.split ], [ 0, %7 ]
  %44 = lshr i32 %43, 7, !dbg !15
  %45 = mul nuw nsw i32 %44, 526336, !dbg !16
  %46 = add i32 %45, %19, !dbg !17
  %.masked = and i32 %43, 124, !dbg !18
  %47 = or disjoint i32 %46, %.masked, !dbg !19
  %48 = or disjoint i32 %47, %13, !dbg !19
  %49 = sext i32 %48 to i64, !dbg !20
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !20
  %51 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %50, i1 false) #4, !dbg !21
  %52 = add nuw nsw i32 %43, 4, !dbg !35
  %53 = icmp samesign ult i32 %43, 3068, !dbg !35
  br i1 %53, label %.split, label %.split6.us, !dbg !35

.split6.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi float [ %36, %.split.us ], [ 0x7FF0000000000000, %.split ], !dbg !36
  %.us-phi7 = phi float [ %40, %.split.us ], [ 0xFFF0000000000000, %.split ], !dbg !36
  %54 = bitcast float %.us-phi to i32, !dbg !36
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !36
  %56 = bitcast i32 %55 to float, !dbg !36
  %57 = fcmp olt float %.us-phi, %56, !dbg !38
  %58 = fcmp uno float %.us-phi, 0.000000e+00, !dbg !40
  %59 = or i1 %58, %57, !dbg !41
  %60 = select i1 %59, float %.us-phi, float %56, !dbg !42
  %61 = bitcast float %60 to i32, !dbg !36
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !36
  %63 = bitcast i32 %62 to float, !dbg !36
  %64 = fcmp olt float %60, %63, !dbg !38
  %65 = fcmp uno float %60, 0.000000e+00, !dbg !40
  %66 = or i1 %64, %65, !dbg !41
  %67 = select i1 %66, float %60, float %63, !dbg !42
  %68 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !43
  %69 = bitcast float %67 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %70 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !43
  %71 = load float, ptr addrspace(3) %70, align 4, !dbg !43
  %72 = bitcast float %.us-phi7 to i32, !dbg !44
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 2, i32 31), !dbg !44
  %74 = bitcast i32 %73 to float, !dbg !44
  %75 = fcmp ogt float %.us-phi7, %74, !dbg !46
  %76 = fcmp uno float %.us-phi7, 0.000000e+00, !dbg !47
  %77 = or i1 %76, %75, !dbg !48
  %78 = select i1 %77, float %.us-phi7, float %74, !dbg !49
  %79 = bitcast float %78 to i32, !dbg !44
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 1, i32 31), !dbg !44
  %81 = bitcast i32 %80 to float, !dbg !44
  %82 = fcmp ogt float %78, %81, !dbg !46
  %83 = fcmp uno float %78, 0.000000e+00, !dbg !47
  %84 = or i1 %82, %83, !dbg !48
  %85 = select i1 %84, float %78, float %81, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %86 = bitcast float %85 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %86, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %87 = load float, ptr addrspace(3) %70, align 4, !dbg !50
  %88 = sext i32 %16 to i64, !dbg !51
  %89 = getelementptr bfloat, ptr addrspace(1) %1, i64 %88, !dbg !51
  %90 = fptrunc float %71 to bfloat, !dbg !43
  %91 = and i32 %10, 192, !dbg !43
  %92 = icmp eq i32 %91, 0, !dbg !43
  %93 = bitcast bfloat %90 to i16, !dbg !43
  %94 = and i1 %92, %18, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %93, ptr addrspace(1) %89, i1 %94) #4, !dbg !43
  %95 = getelementptr bfloat, ptr addrspace(1) %2, i64 %88, !dbg !52
  %96 = fptrunc float %87 to bfloat, !dbg !50
  %97 = bitcast bfloat %96 to i16, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %97, ptr addrspace(1) %95, i1 %94) #4, !dbg !50
  %.inv = fcmp oge float %67, 0.000000e+00, !dbg !53
  %98 = select i1 %.inv, float 0.000000e+00, float %67, !dbg !53
  %99 = fsub float 0.000000e+00, %98, !dbg !55
  %.inv3 = fcmp ole float %85, 0.000000e+00, !dbg !56
  %100 = select i1 %.inv3, float 0.000000e+00, float %85, !dbg !56
  %101 = fcmp ogt float %99, %100, !dbg !58
  %102 = fcmp uno float %99, 0.000000e+00, !dbg !60
  %103 = or i1 %102, %101, !dbg !61
  %104 = select i1 %103, float %99, float %100, !dbg !62
  %105 = fmul float %104, 0x3F80204080000000, !dbg !63
  %106 = fcmp ogt float %105, 0x3EE4F8B580000000, !dbg !64
  %107 = fcmp uno float %105, 0.000000e+00, !dbg !66
  %108 = or i1 %106, %107, !dbg !67
  %109 = select i1 %108, float %105, float 0x3EE4F8B580000000, !dbg !68
  %110 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %109), !dbg !69
  %111 = mul i32 %15, 3072, !dbg !70
  br label %112, !dbg !71

112:                                              ; preds = %.split6.us, %112
  %indvars.iv = phi i64 [ 0, %.split6.us ], [ %indvars.iv.next, %112 ]
  %113 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !72
  %114 = lshr i32 %113, 7, !dbg !72
  %115 = mul nuw nsw i32 %114, 526336, !dbg !73
  %116 = add i32 %115, %19, !dbg !74
  %117 = trunc i64 %indvars.iv to i32, !dbg !75
  %118 = or disjoint i32 %13, %117, !dbg !75
  %119 = and i32 %118, 127, !dbg !75
  %120 = or disjoint i32 %116, %119, !dbg !76
  %121 = sext i32 %120 to i64, !dbg !77
  %122 = getelementptr bfloat, ptr addrspace(1) %0, i64 %121, !dbg !77
  %123 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %122, i1 %17) #4, !dbg !78
  %124 = bitcast i16 %123 to bfloat, !dbg !78
  %125 = fpext bfloat %124 to float, !dbg !79
  %126 = fmul float %110, %125, !dbg !80
  %127 = tail call float @llvm.nvvm.round.f(float %126) #4, !dbg !81
  %128 = fcmp ogt float %127, -1.270000e+02, !dbg !82
  %129 = fcmp uno float %127, 0.000000e+00, !dbg !84
  %130 = or i1 %128, %129, !dbg !85
  %131 = select i1 %130, float %127, float -1.270000e+02, !dbg !86
  %132 = fcmp olt float %131, 1.270000e+02, !dbg !87
  %133 = fcmp uno float %131, 0.000000e+00, !dbg !89
  %134 = or i1 %132, %133, !dbg !90
  %135 = fptosi float %131 to i8, !dbg !91
  %136 = select i1 %134, i8 %135, i8 127, !dbg !92
  %137 = add i32 %118, %111, !dbg !93
  %138 = sext i32 %137 to i64, !dbg !94
  %139 = getelementptr i8, ptr addrspace(1) %3, i64 %138, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %136, ptr addrspace(1) %139, i1 %17) #4, !dbg !95
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !71
  %140 = icmp samesign ult i64 %indvars.iv, 3068, !dbg !71
  br i1 %140, label %112, label %141, !dbg !71

141:                                              ; preds = %112
  ret void, !dbg !96
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 37, column: 38, scope: !6)
!15 = !DILocation(line: 37, column: 59, scope: !6)
!16 = !DILocation(line: 37, column: 51, scope: !6)
!17 = !DILocation(line: 37, column: 43, scope: !6)
!18 = !DILocation(line: 37, column: 75, scope: !6)
!19 = !DILocation(line: 37, column: 68, scope: !6)
!20 = !DILocation(line: 37, column: 34, scope: !6)
!21 = !DILocation(line: 37, column: 83, scope: !6)
!22 = !DILocation(line: 37, column: 144, scope: !6)
!23 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 39, column: 45, scope: !6)
!27 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !31)
!31 = !DILocation(line: 41, column: 45, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !31)
!35 = !DILocation(line: 31, column: 40, scope: !6)
!36 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !37)
!37 = !DILocation(line: 43, column: 38, scope: !6)
!38 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !37)
!39 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!40 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !37)
!41 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !37)
!42 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !37)
!43 = !DILocation(line: 45, column: 36, scope: !6)
!44 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !45)
!45 = !DILocation(line: 44, column: 38, scope: !6)
!46 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !45)
!47 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !45)
!48 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !45)
!49 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !45)
!50 = !DILocation(line: 46, column: 36, scope: !6)
!51 = !DILocation(line: 45, column: 25, scope: !6)
!52 = !DILocation(line: 46, column: 25, scope: !6)
!53 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !54)
!54 = !DILocation(line: 55, column: 44, scope: !6)
!55 = !DILocation(line: 56, column: 16, scope: !6)
!56 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !57)
!57 = !DILocation(line: 57, column: 45, scope: !6)
!58 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !59)
!59 = !DILocation(line: 58, column: 45, scope: !6)
!60 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !59)
!61 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !59)
!62 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !59)
!63 = !DILocation(line: 60, column: 24, scope: !6)
!64 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !65)
!65 = !DILocation(line: 63, column: 46, scope: !6)
!66 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !65)
!67 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !65)
!68 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !65)
!69 = !DILocation(line: 66, column: 25, scope: !6)
!70 = !DILocation(line: 78, column: 41, scope: !6)
!71 = !DILocation(line: 47, column: 40, scope: !6)
!72 = !DILocation(line: 53, column: 59, scope: !6)
!73 = !DILocation(line: 53, column: 51, scope: !6)
!74 = !DILocation(line: 53, column: 43, scope: !6)
!75 = !DILocation(line: 53, column: 75, scope: !6)
!76 = !DILocation(line: 53, column: 68, scope: !6)
!77 = !DILocation(line: 53, column: 34, scope: !6)
!78 = !DILocation(line: 53, column: 83, scope: !6)
!79 = !DILocation(line: 53, column: 145, scope: !6)
!80 = !DILocation(line: 69, column: 23, scope: !6)
!81 = !DILocation(line: 70, column: 36, scope: !6)
!82 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !83)
!83 = !DILocation(line: 73, column: 46, scope: !6)
!84 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !83)
!85 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !83)
!86 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !83)
!87 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !88)
!88 = !DILocation(line: 75, column: 46, scope: !6)
!89 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !88)
!90 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !88)
!91 = !DILocation(line: 77, column: 25, scope: !6)
!92 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !88)
!93 = !DILocation(line: 78, column: 36, scope: !6)
!94 = !DILocation(line: 78, column: 29, scope: !6)
!95 = !DILocation(line: 78, column: 53, scope: !6)
!96 = !DILocation(line: 47, column: 4, scope: !6)
