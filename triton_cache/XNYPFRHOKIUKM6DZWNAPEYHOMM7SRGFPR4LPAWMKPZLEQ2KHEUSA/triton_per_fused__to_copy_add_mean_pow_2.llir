; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused__to_copy_add_mean_pow_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 1, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 4, !dbg !11
  %.lobit = and i32 %14, 1, !dbg !11
  %15 = and i32 %13, 1, !dbg !11
  %16 = or disjoint i32 %.lobit, %12, !dbg !12
  %17 = or disjoint i32 %12, %15, !dbg !12
  %18 = icmp slt i32 %16, 98688, !dbg !13
  %19 = icmp slt i32 %17, 98688, !dbg !13
  %20 = shl i32 %13, 3, !dbg !14
  %21 = and i32 %20, 120, !dbg !14
  %22 = sdiv i32 %16, 24, !dbg !15
  %23 = mul i32 %22, 24, !dbg !16
  %.decomposed = sub i32 %16, %23, !dbg !16
  %24 = shl i32 %16, 7, !dbg !17
  %25 = or disjoint i32 %24, %21, !dbg !18
  %26 = or disjoint i32 %25, 4, !dbg !18
  %27 = sext i32 %25 to i64, !dbg !19
  %28 = getelementptr i32, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = sext i32 %26 to i64, !dbg !19
  %30 = getelementptr i32, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %18) #3, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %18) #3, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !20
  %41 = sext i32 %22 to i64, !dbg !21
  %42 = getelementptr bfloat, ptr addrspace(1) %1, i64 %41, !dbg !21
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !22
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !22
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !22
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !22
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !22
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !22
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !22
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !22
  %51 = bitcast i16 %50 to bfloat, !dbg !22
  %52 = getelementptr bfloat, ptr addrspace(1) %2, i64 %41, !dbg !23
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %18) #3, !dbg !24
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %18) #3, !dbg !24
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %18) #3, !dbg !24
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %18) #3, !dbg !24
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %18) #3, !dbg !24
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %18) #3, !dbg !24
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %18) #3, !dbg !24
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %18) #3, !dbg !24
  %61 = bitcast i16 %60 to bfloat, !dbg !24
  %62 = shl nsw i32 %.decomposed, 7, !dbg !25
  %63 = or disjoint i32 %62, %21, !dbg !26
  %64 = sext i32 %63 to i64, !dbg !27
  %65 = getelementptr bfloat, ptr addrspace(1) %3, i64 %64, !dbg !27
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %65, i1 %18) #3, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %72 = bitcast i32 %71 to <2 x bfloat>, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %74 = bitcast i32 %73 to <2 x bfloat>, !dbg !28
  %75 = getelementptr bfloat, ptr addrspace(1) %4, i64 %64, !dbg !29
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %75, i1 %18) #3, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !30
  %78 = bitcast i32 %77 to <2 x bfloat>, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !30
  %80 = bitcast i32 %79 to <2 x bfloat>, !dbg !30
  %81 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !30
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !30
  %83 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !30
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !30
  %.inv = fcmp oge bfloat %51, 0xR0000, !dbg !31
  %85 = select i1 %.inv, bfloat 0xR0000, bfloat %51, !dbg !31
  %86 = fpext bfloat %85 to float, !dbg !31
  %87 = fsub float 0.000000e+00, %86, !dbg !35
  %.inv1 = fcmp ole bfloat %61, 0xR0000, !dbg !36
  %88 = select i1 %.inv1, bfloat 0xR0000, bfloat %61, !dbg !36
  %89 = fpext bfloat %88 to float, !dbg !36
  %90 = fcmp ogt float %87, %89, !dbg !38
  %91 = fcmp uno float %87, 0.000000e+00, !dbg !40
  %92 = or i1 %91, %90, !dbg !41
  %93 = select i1 %92, float %87, float %89, !dbg !42
  %94 = fmul float %93, 0x3F80204080000000, !dbg !43
  %95 = fcmp ogt float %94, 0x3EE4F8B580000000, !dbg !44
  %96 = fcmp uno float %94, 0.000000e+00, !dbg !46
  %97 = or i1 %95, %96, !dbg !47
  %98 = select i1 %97, float %94, float 0x3EE4F8B580000000, !dbg !48
  %99 = fpext <2 x bfloat> %70 to <2 x float>, !dbg !49
  %100 = fpext <2 x bfloat> %80 to <2 x float>, !dbg !50
  %101 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !51
  %102 = insertelement <2 x i32> %101, i32 %35, i64 1, !dbg !51
  %103 = sitofp <2 x i32> %102 to <2 x float>, !dbg !51
  %104 = insertelement <2 x float> poison, float %98, i64 0, !dbg !52
  %105 = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %106 = fmul <2 x float> %105, %103, !dbg !52
  %107 = fmul <2 x float> %106, %99, !dbg !53
  %108 = fadd <2 x float> %107, %100, !dbg !54
  %109 = fmul <2 x float> %108, %108, !dbg !55
  %110 = fpext <2 x bfloat> %72 to <2 x float>, !dbg !49
  %111 = fpext <2 x bfloat> %82 to <2 x float>, !dbg !50
  %112 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !51
  %113 = insertelement <2 x i32> %112, i32 %38, i64 1, !dbg !51
  %114 = sitofp <2 x i32> %113 to <2 x float>, !dbg !51
  %115 = fmul <2 x float> %105, %114, !dbg !52
  %116 = fmul <2 x float> %115, %110, !dbg !53
  %117 = fadd <2 x float> %116, %111, !dbg !54
  %118 = fmul <2 x float> %117, %117, !dbg !55
  %119 = fpext <2 x bfloat> %74 to <2 x float>, !dbg !49
  %120 = fpext <2 x bfloat> %84 to <2 x float>, !dbg !50
  %121 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !51
  %122 = insertelement <2 x i32> %121, i32 %40, i64 1, !dbg !51
  %123 = sitofp <2 x i32> %122 to <2 x float>, !dbg !51
  %124 = fmul <2 x float> %105, %123, !dbg !52
  %125 = fmul <2 x float> %124, %119, !dbg !53
  %126 = fadd <2 x float> %125, %120, !dbg !54
  %127 = fmul <2 x float> %126, %126, !dbg !55
  %128 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !56
  %129 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !56
  %130 = getelementptr bfloat, ptr addrspace(1) %5, i64 %27, !dbg !57
  %131 = fpext <2 x bfloat> %68 to <2 x float>, !dbg !49
  %132 = fpext <2 x bfloat> %78 to <2 x float>, !dbg !50
  %133 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !51
  %134 = insertelement <2 x i32> %133, i32 %33, i64 1, !dbg !51
  %135 = sitofp <2 x i32> %134 to <2 x float>, !dbg !51
  %136 = fmul <2 x float> %105, %135, !dbg !52
  %137 = fmul <2 x float> %136, %131, !dbg !53
  %138 = fadd <2 x float> %137, %132, !dbg !54
  %139 = fmul <2 x float> %138, %138, !dbg !55
  %140 = fmul <2 x float> %138, %138, !dbg !55
  %shift = shufflevector <2 x float> %140, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %141 = fadd <2 x float> %139, %shift, !dbg !58
  %142 = fadd <2 x float> %109, %141, !dbg !58
  %shift2 = shufflevector <2 x float> %109, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %143 = fadd <2 x float> %shift2, %142, !dbg !58
  %144 = fadd <2 x float> %118, %143, !dbg !58
  %shift3 = shufflevector <2 x float> %118, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %145 = fadd <2 x float> %shift3, %144, !dbg !58
  %146 = fadd <2 x float> %127, %145, !dbg !58
  %shift4 = shufflevector <2 x float> %127, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %147 = fadd <2 x float> %shift4, %146, !dbg !58
  %148 = extractelement <2 x float> %147, i64 0, !dbg !58
  %149 = select i1 %18, float %148, float 0.000000e+00, !dbg !58
  %150 = bitcast float %149 to i32, !dbg !63
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 8, i32 31), !dbg !63
  %152 = bitcast i32 %151 to float, !dbg !63
  %153 = fadd float %149, %152, !dbg !58
  %154 = bitcast float %153 to i32, !dbg !63
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 4, i32 31), !dbg !63
  %156 = bitcast i32 %155 to float, !dbg !63
  %157 = fadd float %153, %156, !dbg !58
  %158 = bitcast float %157 to i32, !dbg !63
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 2, i32 31), !dbg !63
  %160 = bitcast i32 %159 to float, !dbg !63
  %161 = fadd float %157, %160, !dbg !58
  %162 = bitcast float %161 to i32, !dbg !63
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 1, i32 31), !dbg !63
  %164 = bitcast i32 %163 to float, !dbg !63
  %165 = fadd float %161, %164, !dbg !58
  %166 = bitcast float %165 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %166, i1 true) #3, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %167 = load i32, ptr addrspace(3) %129, align 4, !dbg !56
  %168 = fptrunc <2 x float> %138 to <2 x bfloat>, !dbg !64
  %169 = fptrunc <2 x float> %108 to <2 x bfloat>, !dbg !64
  %170 = fptrunc <2 x float> %117 to <2 x bfloat>, !dbg !64
  %171 = fptrunc <2 x float> %126 to <2 x bfloat>, !dbg !64
  %172 = bitcast <2 x bfloat> %168 to i32, !dbg !64
  %173 = bitcast <2 x bfloat> %169 to i32, !dbg !64
  %174 = bitcast <2 x bfloat> %170 to i32, !dbg !64
  %175 = bitcast <2 x bfloat> %171 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %172, i32 %173, i32 %174, i32 %175, ptr addrspace(1) %130, i1 %18) #3, !dbg !64
  %176 = sext i32 %17 to i64, !dbg !65
  %177 = getelementptr float, ptr addrspace(1) %6, i64 %176, !dbg !65
  %178 = and i32 %13, 30, !dbg !66
  %179 = icmp eq i32 %178, 0, !dbg !66
  %180 = and i1 %179, %19, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %167, ptr addrspace(1) %177, i1 %180) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceqrvh7wabbdeykqepa3zmii6o4hoe3ux2wiocyvm5ynym6kf2go.py", directory: "/tmp/torchinductor_root/eq")
!4 = !{ptr @triton_per_fused__to_copy_add_mean_pow_2, !"reqntidx", i32 32}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_mean_pow_2", linkageName: "triton_per_fused__to_copy_add_mean_pow_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 44, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 21, scope: !6)
!14 = !DILocation(line: 27, column: 38, scope: !6)
!15 = !DILocation(line: 34, column: 19, scope: !6)
!16 = !DILocation(line: 35, column: 19, scope: !6)
!17 = !DILocation(line: 36, column: 41, scope: !6)
!18 = !DILocation(line: 36, column: 37, scope: !6)
!19 = !DILocation(line: 36, column: 30, scope: !6)
!20 = !DILocation(line: 36, column: 46, scope: !6)
!21 = !DILocation(line: 37, column: 30, scope: !6)
!22 = !DILocation(line: 37, column: 35, scope: !6)
!23 = !DILocation(line: 38, column: 30, scope: !6)
!24 = !DILocation(line: 38, column: 35, scope: !6)
!25 = !DILocation(line: 39, column: 42, scope: !6)
!26 = !DILocation(line: 39, column: 38, scope: !6)
!27 = !DILocation(line: 39, column: 31, scope: !6)
!28 = !DILocation(line: 39, column: 47, scope: !6)
!29 = !DILocation(line: 40, column: 31, scope: !6)
!30 = !DILocation(line: 40, column: 47, scope: !6)
!31 = !DILocation(line: 97, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 43, column: 40, scope: !6)
!35 = !DILocation(line: 44, column: 12, scope: !6)
!36 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !37)
!37 = !DILocation(line: 45, column: 40, scope: !6)
!38 = !DILocation(line: 102, column: 15, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 46, column: 40, scope: !6)
!40 = !DILocation(line: 104, column: 21, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 104, column: 16, scope: !32, inlinedAt: !39)
!42 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !39)
!43 = !DILocation(line: 48, column: 19, scope: !6)
!44 = !DILocation(line: 102, column: 15, scope: !32, inlinedAt: !45)
!45 = !DILocation(line: 51, column: 42, scope: !6)
!46 = !DILocation(line: 104, column: 21, scope: !32, inlinedAt: !45)
!47 = !DILocation(line: 104, column: 16, scope: !32, inlinedAt: !45)
!48 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !45)
!49 = !DILocation(line: 39, column: 98, scope: !6)
!50 = !DILocation(line: 40, column: 98, scope: !6)
!51 = !DILocation(line: 41, column: 19, scope: !6)
!52 = !DILocation(line: 53, column: 19, scope: !6)
!53 = !DILocation(line: 54, column: 20, scope: !6)
!54 = !DILocation(line: 55, column: 20, scope: !6)
!55 = !DILocation(line: 57, column: 20, scope: !6)
!56 = !DILocation(line: 60, column: 29, scope: !6)
!57 = !DILocation(line: 61, column: 25, scope: !6)
!58 = !DILocation(line: 256, column: 15, scope: !59, inlinedAt: !62)
!59 = distinct !DILexicalBlockFile(scope: !61, file: !60, discriminator: 0)
!60 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!61 = distinct !DILexicalBlockFile(scope: !6, file: !60, discriminator: 0)
!62 = !DILocation(line: 60, column: 26, scope: !6)
!63 = !DILocation(line: 286, column: 36, scope: !61, inlinedAt: !62)
!64 = !DILocation(line: 61, column: 48, scope: !6)
!65 = !DILocation(line: 62, column: 25, scope: !6)
!66 = !DILocation(line: 62, column: 37, scope: !6)
!67 = !DILocation(line: 62, column: 4, scope: !6)
