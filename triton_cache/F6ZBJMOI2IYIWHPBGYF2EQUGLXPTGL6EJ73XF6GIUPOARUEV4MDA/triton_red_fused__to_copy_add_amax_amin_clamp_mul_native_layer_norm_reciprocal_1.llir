; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = icmp slt i32 %19, 4112, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 31, !dbg !11
  %23 = lshr i32 %21, 5, !dbg !11
  %24 = shl i32 %21, 2, !dbg !11
  %25 = and i32 %24, 4092, !dbg !11
  %26 = icmp samesign ult i32 %25, 3072, !dbg !12
  %27 = mul i32 %19, 3072, !dbg !13
  %28 = add i32 %25, %27, !dbg !14
  %29 = sext i32 %28 to i64, !dbg !15
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !15
  %31 = and i1 %20, %26, !dbg !16
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %31) #5, !dbg !17
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !17
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !17
  %35 = extractvalue { i32, i32 } %32, 1, !dbg !17
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !17
  %37 = extractelement <2 x bfloat> %34, i64 0, !dbg !17
  %38 = extractelement <2 x bfloat> %34, i64 1, !dbg !17
  %39 = extractelement <2 x bfloat> %36, i64 0, !dbg !17
  %40 = extractelement <2 x bfloat> %36, i64 1, !dbg !17
  %41 = fpext bfloat %37 to float, !dbg !18
  %42 = fpext bfloat %38 to float, !dbg !18
  %43 = fpext bfloat %39 to float, !dbg !18
  %44 = fpext bfloat %40 to float, !dbg !18
  %45 = select i1 %31, float %41, float 0.000000e+00, !dbg !19
  %46 = select i1 %31, float %42, float 0.000000e+00, !dbg !19
  %47 = select i1 %31, float %43, float 0.000000e+00, !dbg !19
  %48 = select i1 %31, float %44, float 0.000000e+00, !dbg !19
  %49 = select i1 %31, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %50 = fsub float %46, %45, !dbg !21
  %51 = select i1 %31, float 2.000000e+00, float 0.000000e+00, !dbg !26
  %52 = fcmp oeq float %51, 0.000000e+00, !dbg !27
  %53 = tail call float @llvm.nvvm.div.full(float %49, float %51), !dbg !28
  %54 = select i1 %52, float 0.000000e+00, float %53, !dbg !29
  %55 = fmul float %54, %50, !dbg !30
  %56 = fadd float %45, %55, !dbg !31
  %57 = fmul float %50, %50, !dbg !32
  %58 = fmul float %49, %57, !dbg !33
  %59 = fmul float %54, %58, !dbg !34
  %60 = fadd float %59, 0.000000e+00, !dbg !35
  %61 = fsub float %47, %56, !dbg !21
  %62 = select i1 %31, float 3.000000e+00, float 0.000000e+00, !dbg !26
  %63 = fcmp oeq float %62, 0.000000e+00, !dbg !27
  %64 = tail call float @llvm.nvvm.div.full(float %49, float %62), !dbg !28
  %65 = select i1 %63, float 0.000000e+00, float %64, !dbg !29
  %66 = fmul float %65, %61, !dbg !30
  %67 = fadd float %56, %66, !dbg !31
  %68 = fmul float %61, %61, !dbg !32
  %69 = fmul float %51, %68, !dbg !33
  %70 = fmul float %65, %69, !dbg !34
  %71 = fadd float %60, %70, !dbg !35
  %72 = fsub float %48, %67, !dbg !21
  %73 = select i1 %31, float 4.000000e+00, float 0.000000e+00, !dbg !26
  %74 = fcmp oeq float %73, 0.000000e+00, !dbg !27
  %75 = tail call float @llvm.nvvm.div.full(float %49, float %73), !dbg !28
  %76 = select i1 %74, float 0.000000e+00, float %75, !dbg !29
  %77 = fmul float %76, %72, !dbg !30
  %78 = fadd float %67, %77, !dbg !31
  %79 = fmul float %72, %72, !dbg !32
  %80 = fmul float %62, %79, !dbg !33
  %81 = fmul float %76, %80, !dbg !34
  %82 = fadd float %71, %81, !dbg !35
  %83 = bitcast float %78 to i32, !dbg !36
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 16, i32 31), !dbg !36
  %85 = bitcast i32 %84 to float, !dbg !36
  %86 = bitcast float %82 to i32, !dbg !36
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 16, i32 31), !dbg !36
  %88 = bitcast i32 %87 to float, !dbg !36
  %89 = bitcast float %73 to i32, !dbg !36
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 16, i32 31), !dbg !36
  %91 = bitcast i32 %90 to float, !dbg !36
  %92 = fsub float %85, %78, !dbg !21
  %93 = fadd float %73, %91, !dbg !26
  %94 = fcmp oeq float %93, 0.000000e+00, !dbg !27
  %95 = tail call float @llvm.nvvm.div.full(float %91, float %93), !dbg !28
  %96 = select i1 %94, float 0.000000e+00, float %95, !dbg !29
  %97 = fmul float %96, %92, !dbg !30
  %98 = fadd float %78, %97, !dbg !31
  %99 = fadd float %82, %88, !dbg !37
  %100 = fmul float %92, %92, !dbg !32
  %101 = fmul float %73, %100, !dbg !33
  %102 = fmul float %96, %101, !dbg !34
  %103 = fadd float %99, %102, !dbg !35
  %104 = bitcast float %98 to i32, !dbg !36
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !36
  %106 = bitcast i32 %105 to float, !dbg !36
  %107 = bitcast float %103 to i32, !dbg !36
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 8, i32 31), !dbg !36
  %109 = bitcast i32 %108 to float, !dbg !36
  %110 = bitcast float %93 to i32, !dbg !36
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !36
  %112 = bitcast i32 %111 to float, !dbg !36
  %113 = fsub float %106, %98, !dbg !21
  %114 = fadd float %93, %112, !dbg !26
  %115 = fcmp oeq float %114, 0.000000e+00, !dbg !27
  %116 = tail call float @llvm.nvvm.div.full(float %112, float %114), !dbg !28
  %117 = select i1 %115, float 0.000000e+00, float %116, !dbg !29
  %118 = fmul float %117, %113, !dbg !30
  %119 = fadd float %98, %118, !dbg !31
  %120 = fadd float %103, %109, !dbg !37
  %121 = fmul float %113, %113, !dbg !32
  %122 = fmul float %93, %121, !dbg !33
  %123 = fmul float %117, %122, !dbg !34
  %124 = fadd float %120, %123, !dbg !35
  %125 = bitcast float %119 to i32, !dbg !36
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !36
  %127 = bitcast i32 %126 to float, !dbg !36
  %128 = bitcast float %124 to i32, !dbg !36
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !36
  %130 = bitcast i32 %129 to float, !dbg !36
  %131 = bitcast float %114 to i32, !dbg !36
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !36
  %133 = bitcast i32 %132 to float, !dbg !36
  %134 = fsub float %127, %119, !dbg !21
  %135 = fadd float %114, %133, !dbg !26
  %136 = fcmp oeq float %135, 0.000000e+00, !dbg !27
  %137 = tail call float @llvm.nvvm.div.full(float %133, float %135), !dbg !28
  %138 = select i1 %136, float 0.000000e+00, float %137, !dbg !29
  %139 = fmul float %138, %134, !dbg !30
  %140 = fadd float %119, %139, !dbg !31
  %141 = fadd float %124, %130, !dbg !37
  %142 = fmul float %134, %134, !dbg !32
  %143 = fmul float %114, %142, !dbg !33
  %144 = fmul float %138, %143, !dbg !34
  %145 = fadd float %141, %144, !dbg !35
  %146 = bitcast float %140 to i32, !dbg !36
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 2, i32 31), !dbg !36
  %148 = bitcast i32 %147 to float, !dbg !36
  %149 = bitcast float %145 to i32, !dbg !36
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 2, i32 31), !dbg !36
  %151 = bitcast i32 %150 to float, !dbg !36
  %152 = bitcast float %135 to i32, !dbg !36
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !36
  %154 = bitcast i32 %153 to float, !dbg !36
  %155 = fsub float %148, %140, !dbg !21
  %156 = fadd float %135, %154, !dbg !26
  %157 = fcmp oeq float %156, 0.000000e+00, !dbg !27
  %158 = tail call float @llvm.nvvm.div.full(float %154, float %156), !dbg !28
  %159 = select i1 %157, float 0.000000e+00, float %158, !dbg !29
  %160 = fmul float %159, %155, !dbg !30
  %161 = fadd float %140, %160, !dbg !31
  %162 = fadd float %145, %151, !dbg !37
  %163 = fmul float %155, %155, !dbg !32
  %164 = fmul float %135, %163, !dbg !33
  %165 = fmul float %159, %164, !dbg !34
  %166 = fadd float %162, %165, !dbg !35
  %167 = bitcast float %161 to i32, !dbg !36
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !36
  %169 = bitcast i32 %168 to float, !dbg !36
  %170 = bitcast float %166 to i32, !dbg !36
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !36
  %172 = bitcast i32 %171 to float, !dbg !36
  %173 = bitcast float %156 to i32, !dbg !36
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !36
  %175 = bitcast i32 %174 to float, !dbg !36
  %176 = fsub float %169, %161, !dbg !21
  %177 = fadd float %156, %175, !dbg !26
  %178 = fcmp oeq float %177, 0.000000e+00, !dbg !27
  %179 = tail call float @llvm.nvvm.div.full(float %175, float %177), !dbg !28
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !29
  %181 = fmul float %180, %176, !dbg !30
  %182 = fadd float %161, %181, !dbg !31
  %183 = fadd float %166, %172, !dbg !37
  %184 = fmul float %176, %176, !dbg !32
  %185 = fmul float %156, %184, !dbg !33
  %186 = fmul float %180, %185, !dbg !34
  %187 = fadd float %183, %186, !dbg !35
  %188 = and i32 %23, 31, !dbg !36
  %189 = icmp eq i32 %22, 0, !dbg !36
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !36
  %191 = bitcast float %182 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 %189) #5, !dbg !36
  %192 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %188, !dbg !36
  %193 = bitcast float %187 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 %189) #5, !dbg !36
  %194 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %188, !dbg !36
  %195 = bitcast float %177 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 %189) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %196 = icmp slt i32 %21, 32, !dbg !36
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !36
  %198 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %197, i1 %196) #5, !dbg !36
  %199 = bitcast i32 %198 to float, !dbg !36
  %200 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !36
  %201 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %200, i1 %196) #5, !dbg !36
  %202 = bitcast i32 %201 to float, !dbg !36
  %203 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %21, !dbg !36
  %204 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %203, i1 %196) #5, !dbg !36
  %205 = bitcast i32 %204 to float, !dbg !36
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 16, i32 31), !dbg !36
  %207 = bitcast i32 %206 to float, !dbg !36
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 16, i32 31), !dbg !36
  %209 = bitcast i32 %208 to float, !dbg !36
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 16, i32 31), !dbg !36
  %211 = bitcast i32 %210 to float, !dbg !36
  %212 = fsub float %207, %199, !dbg !21
  %213 = fadd float %205, %211, !dbg !26
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !27
  %215 = tail call float @llvm.nvvm.div.full(float %211, float %213), !dbg !28
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !29
  %217 = fmul float %212, %216, !dbg !30
  %218 = fadd float %217, %199, !dbg !31
  %219 = fadd float %202, %209, !dbg !37
  %220 = fmul float %212, %212, !dbg !32
  %221 = fmul float %220, %205, !dbg !33
  %222 = fmul float %221, %216, !dbg !34
  %223 = fadd float %219, %222, !dbg !35
  %224 = bitcast float %218 to i32, !dbg !36
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 8, i32 31), !dbg !36
  %226 = bitcast i32 %225 to float, !dbg !36
  %227 = bitcast float %223 to i32, !dbg !36
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 8, i32 31), !dbg !36
  %229 = bitcast i32 %228 to float, !dbg !36
  %230 = bitcast float %213 to i32, !dbg !36
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !36
  %232 = bitcast i32 %231 to float, !dbg !36
  %233 = fsub float %226, %218, !dbg !21
  %234 = fadd float %213, %232, !dbg !26
  %235 = fcmp oeq float %234, 0.000000e+00, !dbg !27
  %236 = tail call float @llvm.nvvm.div.full(float %232, float %234), !dbg !28
  %237 = select i1 %235, float 0.000000e+00, float %236, !dbg !29
  %238 = fmul float %233, %237, !dbg !30
  %239 = fadd float %218, %238, !dbg !31
  %240 = fadd float %223, %229, !dbg !37
  %241 = fmul float %233, %233, !dbg !32
  %242 = fmul float %213, %241, !dbg !33
  %243 = fmul float %237, %242, !dbg !34
  %244 = fadd float %240, %243, !dbg !35
  %245 = bitcast float %239 to i32, !dbg !36
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 4, i32 31), !dbg !36
  %247 = bitcast i32 %246 to float, !dbg !36
  %248 = bitcast float %244 to i32, !dbg !36
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 4, i32 31), !dbg !36
  %250 = bitcast i32 %249 to float, !dbg !36
  %251 = bitcast float %234 to i32, !dbg !36
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 4, i32 31), !dbg !36
  %253 = bitcast i32 %252 to float, !dbg !36
  %254 = fsub float %247, %239, !dbg !21
  %255 = fadd float %234, %253, !dbg !26
  %256 = fcmp oeq float %255, 0.000000e+00, !dbg !27
  %257 = tail call float @llvm.nvvm.div.full(float %253, float %255), !dbg !28
  %258 = select i1 %256, float 0.000000e+00, float %257, !dbg !29
  %259 = fmul float %254, %258, !dbg !30
  %260 = fadd float %239, %259, !dbg !31
  %261 = fadd float %244, %250, !dbg !37
  %262 = fmul float %254, %254, !dbg !32
  %263 = fmul float %234, %262, !dbg !33
  %264 = fmul float %258, %263, !dbg !34
  %265 = fadd float %261, %264, !dbg !35
  %266 = bitcast float %260 to i32, !dbg !36
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 2, i32 31), !dbg !36
  %268 = bitcast i32 %267 to float, !dbg !36
  %269 = bitcast float %265 to i32, !dbg !36
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 2, i32 31), !dbg !36
  %271 = bitcast i32 %270 to float, !dbg !36
  %272 = bitcast float %255 to i32, !dbg !36
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 2, i32 31), !dbg !36
  %274 = bitcast i32 %273 to float, !dbg !36
  %275 = fsub float %268, %260, !dbg !21
  %276 = fadd float %255, %274, !dbg !26
  %277 = fcmp oeq float %276, 0.000000e+00, !dbg !27
  %278 = tail call float @llvm.nvvm.div.full(float %274, float %276), !dbg !28
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !29
  %280 = fmul float %275, %279, !dbg !30
  %281 = fadd float %260, %280, !dbg !31
  %282 = fadd float %265, %271, !dbg !37
  %283 = fmul float %275, %275, !dbg !32
  %284 = fmul float %255, %283, !dbg !33
  %285 = fmul float %279, %284, !dbg !34
  %286 = fadd float %282, %285, !dbg !35
  %287 = bitcast float %281 to i32, !dbg !36
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 1, i32 31), !dbg !36
  %289 = bitcast i32 %288 to float, !dbg !36
  %290 = bitcast float %286 to i32, !dbg !36
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 1, i32 31), !dbg !36
  %292 = bitcast i32 %291 to float, !dbg !36
  %293 = bitcast float %276 to i32, !dbg !36
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 1, i32 31), !dbg !36
  %295 = bitcast i32 %294 to float, !dbg !36
  %296 = fsub float %289, %281, !dbg !21
  %297 = fadd float %276, %295, !dbg !26
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !27
  %299 = tail call float @llvm.nvvm.div.full(float %295, float %297), !dbg !28
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !29
  %301 = fmul float %296, %300, !dbg !30
  %302 = fadd float %281, %301, !dbg !31
  %303 = fadd float %286, %292, !dbg !37
  %304 = fmul float %296, %296, !dbg !32
  %305 = fmul float %276, %304, !dbg !33
  %306 = fmul float %300, %305, !dbg !34
  %307 = fadd float %303, %306, !dbg !35
  %308 = and i1 %196, %189, !dbg !36
  %309 = bitcast float %302 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %309, i1 %308) #5, !dbg !36
  %310 = bitcast float %307 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %310, i1 %308) #5, !dbg !36
  %311 = bitcast float %297 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %311, i1 %308) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %312 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %313 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !36
  %314 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %31) #5, !dbg !38
  %315 = add nuw nsw i32 %25, 3072, !dbg !39
  %316 = zext nneg i32 %315 to i64, !dbg !40
  %317 = getelementptr float, ptr addrspace(1) %1, i64 %316, !dbg !40
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %317, i1 %26) #5, !dbg !41
  %319 = getelementptr bfloat, ptr addrspace(1) %2, i64 %316, !dbg !42
  %320 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %319, i1 %26) #5, !dbg !43
  %321 = zext nneg i32 %25 to i64, !dbg !44
  %322 = getelementptr float, ptr addrspace(1) %1, i64 %321, !dbg !44
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %322, i1 %26) #5, !dbg !45
  %324 = getelementptr bfloat, ptr addrspace(1) %2, i64 %321, !dbg !46
  %325 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %324, i1 %26) #5, !dbg !47
  %326 = tail call float @llvm.nvvm.div.full(float %313, float 3.072000e+03), !dbg !48
  %327 = fadd float %326, 0x3EB0C6F7A0000000, !dbg !49
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i8 = icmp eq i32 %331, 0, !dbg !50
  br i1 %.not.i8, label %334, label %332, !dbg !50

332:                                              ; preds = %__nv_rsqrtf.exit
  %333 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %327), !dbg !50
  br label %__nv_rsqrtf.exit10, !dbg !50

334:                                              ; preds = %__nv_rsqrtf.exit
  %335 = tail call float @llvm.nvvm.rsqrt.approx.f(float %327), !dbg !50
  br label %__nv_rsqrtf.exit10, !dbg !50

__nv_rsqrtf.exit10:                               ; preds = %332, %334
  %.0.i9 = phi float [ %333, %332 ], [ %335, %334 ], !dbg !50
  %336 = extractvalue { i32, i32 } %314, 1, !dbg !38
  %337 = bitcast i32 %336 to <2 x bfloat>, !dbg !38
  %338 = extractvalue { i32, i32 } %314, 0, !dbg !38
  %339 = bitcast i32 %338 to <2 x bfloat>, !dbg !38
  %340 = extractvalue { i32, i32 } %325, 1, !dbg !47
  %341 = bitcast i32 %340 to <2 x bfloat>, !dbg !47
  %342 = extractvalue { i32, i32 } %325, 0, !dbg !47
  %343 = bitcast i32 %342 to <2 x bfloat>, !dbg !47
  %344 = extractvalue { i32, i32, i32, i32 } %323, 3, !dbg !45
  %345 = extractvalue { i32, i32, i32, i32 } %323, 2, !dbg !45
  %346 = extractvalue { i32, i32, i32, i32 } %323, 1, !dbg !45
  %347 = extractvalue { i32, i32, i32, i32 } %323, 0, !dbg !45
  %348 = extractvalue { i32, i32 } %320, 1, !dbg !43
  %349 = bitcast i32 %348 to <2 x bfloat>, !dbg !43
  %350 = extractvalue { i32, i32 } %320, 0, !dbg !43
  %351 = bitcast i32 %350 to <2 x bfloat>, !dbg !43
  %352 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !41
  %353 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !41
  %354 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !41
  %355 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !41
  %356 = getelementptr bfloat, ptr addrspace(1) %3, i64 %29, !dbg !51
  %357 = fpext <2 x bfloat> %339 to <2 x float>, !dbg !52
  %358 = insertelement <2 x float> poison, float %312, i64 0, !dbg !53
  %359 = shufflevector <2 x float> %358, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %360 = fsub <2 x float> %357, %359, !dbg !53
  %361 = fpext <2 x bfloat> %343 to <2 x float>, !dbg !54
  %362 = insertelement <2 x i32> poison, i32 %347, i64 0, !dbg !45
  %363 = insertelement <2 x i32> %362, i32 %346, i64 1, !dbg !45
  %364 = bitcast <2 x i32> %363 to <2 x float>, !dbg !45
  %365 = fpext <2 x bfloat> %351 to <2 x float>, !dbg !55
  %366 = insertelement <2 x i32> poison, i32 %355, i64 0, !dbg !41
  %367 = insertelement <2 x i32> %366, i32 %354, i64 1, !dbg !41
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !41
  %369 = insertelement <2 x float> poison, float %.0.i9, i64 0, !dbg !56
  %370 = shufflevector <2 x float> %369, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %371 = fmul <2 x float> %360, %370, !dbg !56
  %372 = fadd <2 x float> %368, %365, !dbg !57
  %373 = fadd <2 x float> %372, splat (float 1.000000e+00), !dbg !58
  %374 = fmul <2 x float> %373, %371, !dbg !59
  %375 = fadd <2 x float> %364, %361, !dbg !60
  %376 = fadd <2 x float> %375, %374, !dbg !61
  %377 = extractelement <2 x float> %376, i64 0, !dbg !62
  %378 = select i1 %31, float %377, float 0x7FF0000000000000, !dbg !63
  %379 = extractelement <2 x float> %376, i64 1, !dbg !62
  %380 = select i1 %31, float %379, float 0x7FF0000000000000, !dbg !63
  %381 = select i1 %31, float %377, float 0xFFF0000000000000, !dbg !62
  %382 = select i1 %31, float %379, float 0xFFF0000000000000, !dbg !62
  %383 = fptrunc <2 x float> %376 to <2 x bfloat>, !dbg !64
  %384 = fpext <2 x bfloat> %337 to <2 x float>, !dbg !52
  %385 = fsub <2 x float> %384, %359, !dbg !53
  %386 = fpext <2 x bfloat> %341 to <2 x float>, !dbg !54
  %387 = insertelement <2 x i32> poison, i32 %345, i64 0, !dbg !45
  %388 = insertelement <2 x i32> %387, i32 %344, i64 1, !dbg !45
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !45
  %390 = fpext <2 x bfloat> %349 to <2 x float>, !dbg !55
  %391 = insertelement <2 x i32> poison, i32 %353, i64 0, !dbg !41
  %392 = insertelement <2 x i32> %391, i32 %352, i64 1, !dbg !41
  %393 = bitcast <2 x i32> %392 to <2 x float>, !dbg !41
  %394 = fmul <2 x float> %385, %370, !dbg !56
  %395 = fadd <2 x float> %393, %390, !dbg !57
  %396 = fadd <2 x float> %395, splat (float 1.000000e+00), !dbg !58
  %397 = fmul <2 x float> %396, %394, !dbg !59
  %398 = fadd <2 x float> %389, %386, !dbg !60
  %399 = fadd <2 x float> %398, %397, !dbg !61
  %400 = extractelement <2 x float> %399, i64 0, !dbg !62
  %401 = select i1 %31, float %400, float 0x7FF0000000000000, !dbg !63
  %402 = extractelement <2 x float> %399, i64 1, !dbg !62
  %403 = select i1 %31, float %402, float 0x7FF0000000000000, !dbg !63
  %404 = select i1 %31, float %400, float 0xFFF0000000000000, !dbg !62
  %405 = select i1 %31, float %402, float 0xFFF0000000000000, !dbg !62
  %406 = fptrunc <2 x float> %399 to <2 x bfloat>, !dbg !64
  %407 = bitcast <2 x bfloat> %383 to i32, !dbg !64
  %408 = bitcast <2 x bfloat> %406 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %407, i32 %408, ptr addrspace(1) %356, i1 %31) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %409 = fcmp olt float %378, %380, !dbg !67
  %410 = fcmp uno float %378, 0.000000e+00, !dbg !68
  %411 = or i1 %409, %410, !dbg !69
  %412 = select i1 %411, float %378, float %380, !dbg !70
  %413 = fcmp olt float %412, %401, !dbg !67
  %414 = fcmp uno float %412, 0.000000e+00, !dbg !68
  %415 = or i1 %413, %414, !dbg !69
  %416 = select i1 %415, float %412, float %401, !dbg !70
  %417 = fcmp olt float %416, %403, !dbg !67
  %418 = fcmp uno float %416, 0.000000e+00, !dbg !68
  %419 = or i1 %417, %418, !dbg !69
  %420 = select i1 %419, float %416, float %403, !dbg !70
  %421 = bitcast float %420 to i32, !dbg !65
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 16, i32 31), !dbg !65
  %423 = bitcast i32 %422 to float, !dbg !65
  %424 = fcmp olt float %420, %423, !dbg !67
  %425 = fcmp uno float %420, 0.000000e+00, !dbg !68
  %426 = or i1 %424, %425, !dbg !69
  %427 = select i1 %426, float %420, float %423, !dbg !70
  %428 = bitcast float %427 to i32, !dbg !65
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 8, i32 31), !dbg !65
  %430 = bitcast i32 %429 to float, !dbg !65
  %431 = fcmp olt float %427, %430, !dbg !67
  %432 = fcmp uno float %427, 0.000000e+00, !dbg !68
  %433 = or i1 %431, %432, !dbg !69
  %434 = select i1 %433, float %427, float %430, !dbg !70
  %435 = bitcast float %434 to i32, !dbg !65
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %435, i32 4, i32 31), !dbg !65
  %437 = bitcast i32 %436 to float, !dbg !65
  %438 = fcmp olt float %434, %437, !dbg !67
  %439 = fcmp uno float %434, 0.000000e+00, !dbg !68
  %440 = or i1 %438, %439, !dbg !69
  %441 = select i1 %440, float %434, float %437, !dbg !70
  %442 = bitcast float %441 to i32, !dbg !65
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 2, i32 31), !dbg !65
  %444 = bitcast i32 %443 to float, !dbg !65
  %445 = fcmp olt float %441, %444, !dbg !67
  %446 = fcmp uno float %441, 0.000000e+00, !dbg !68
  %447 = or i1 %445, %446, !dbg !69
  %448 = select i1 %447, float %441, float %444, !dbg !70
  %449 = bitcast float %448 to i32, !dbg !65
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 1, i32 31), !dbg !65
  %451 = bitcast i32 %450 to float, !dbg !65
  %452 = fcmp olt float %448, %451, !dbg !67
  %453 = fcmp uno float %448, 0.000000e+00, !dbg !68
  %454 = or i1 %452, %453, !dbg !69
  %455 = select i1 %454, i32 %449, i32 %450, !dbg !70
  %456 = insertelement <1 x i32> poison, i32 %455, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %456, i1 %189) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %457 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %197, i1 %196) #5, !dbg !65
  %458 = bitcast i32 %457 to float, !dbg !65
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 16, i32 31), !dbg !65
  %460 = bitcast i32 %459 to float, !dbg !65
  %461 = fcmp olt float %458, %460, !dbg !67
  %462 = fcmp uno float %458, 0.000000e+00, !dbg !68
  %463 = or i1 %462, %461, !dbg !69
  %464 = select i1 %463, float %458, float %460, !dbg !70
  %465 = bitcast float %464 to i32, !dbg !65
  %466 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %465, i32 8, i32 31), !dbg !65
  %467 = bitcast i32 %466 to float, !dbg !65
  %468 = fcmp olt float %464, %467, !dbg !67
  %469 = fcmp uno float %464, 0.000000e+00, !dbg !68
  %470 = or i1 %468, %469, !dbg !69
  %471 = select i1 %470, float %464, float %467, !dbg !70
  %472 = bitcast float %471 to i32, !dbg !65
  %473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 4, i32 31), !dbg !65
  %474 = bitcast i32 %473 to float, !dbg !65
  %475 = fcmp olt float %471, %474, !dbg !67
  %476 = fcmp uno float %471, 0.000000e+00, !dbg !68
  %477 = or i1 %475, %476, !dbg !69
  %478 = select i1 %477, float %471, float %474, !dbg !70
  %479 = bitcast float %478 to i32, !dbg !65
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 2, i32 31), !dbg !65
  %481 = bitcast i32 %480 to float, !dbg !65
  %482 = fcmp olt float %478, %481, !dbg !67
  %483 = fcmp uno float %478, 0.000000e+00, !dbg !68
  %484 = or i1 %482, %483, !dbg !69
  %485 = select i1 %484, float %478, float %481, !dbg !70
  %486 = bitcast float %485 to i32, !dbg !65
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %486, i32 1, i32 31), !dbg !65
  %488 = bitcast i32 %487 to float, !dbg !65
  %489 = fcmp olt float %485, %488, !dbg !67
  %490 = fcmp uno float %485, 0.000000e+00, !dbg !68
  %491 = or i1 %489, %490, !dbg !69
  %492 = select i1 %491, i32 %486, i32 %487, !dbg !70
  %493 = insertelement <1 x i32> poison, i32 %492, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %493, i1 %308) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %494 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %495 = fcmp ogt float %381, %382, !dbg !73
  %496 = fcmp uno float %381, 0.000000e+00, !dbg !74
  %497 = or i1 %495, %496, !dbg !75
  %498 = select i1 %497, float %381, float %382, !dbg !76
  %499 = fcmp ogt float %498, %404, !dbg !73
  %500 = fcmp uno float %498, 0.000000e+00, !dbg !74
  %501 = or i1 %499, %500, !dbg !75
  %502 = select i1 %501, float %498, float %404, !dbg !76
  %503 = fcmp ogt float %502, %405, !dbg !73
  %504 = fcmp uno float %502, 0.000000e+00, !dbg !74
  %505 = or i1 %503, %504, !dbg !75
  %506 = select i1 %505, float %502, float %405, !dbg !76
  %507 = bitcast float %506 to i32, !dbg !71
  %508 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %507, i32 16, i32 31), !dbg !71
  %509 = bitcast i32 %508 to float, !dbg !71
  %510 = fcmp ogt float %506, %509, !dbg !73
  %511 = fcmp uno float %506, 0.000000e+00, !dbg !74
  %512 = or i1 %511, %510, !dbg !75
  %513 = select i1 %512, float %506, float %509, !dbg !76
  %514 = bitcast float %513 to i32, !dbg !71
  %515 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %514, i32 8, i32 31), !dbg !71
  %516 = bitcast i32 %515 to float, !dbg !71
  %517 = fcmp ogt float %513, %516, !dbg !73
  %518 = fcmp uno float %513, 0.000000e+00, !dbg !74
  %519 = or i1 %517, %518, !dbg !75
  %520 = select i1 %519, float %513, float %516, !dbg !76
  %521 = bitcast float %520 to i32, !dbg !71
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 4, i32 31), !dbg !71
  %523 = bitcast i32 %522 to float, !dbg !71
  %524 = fcmp ogt float %520, %523, !dbg !73
  %525 = fcmp uno float %520, 0.000000e+00, !dbg !74
  %526 = or i1 %524, %525, !dbg !75
  %527 = select i1 %526, float %520, float %523, !dbg !76
  %528 = bitcast float %527 to i32, !dbg !71
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 2, i32 31), !dbg !71
  %530 = bitcast i32 %529 to float, !dbg !71
  %531 = fcmp ogt float %527, %530, !dbg !73
  %532 = fcmp uno float %527, 0.000000e+00, !dbg !74
  %533 = or i1 %531, %532, !dbg !75
  %534 = select i1 %533, float %527, float %530, !dbg !76
  %535 = bitcast float %534 to i32, !dbg !71
  %536 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %535, i32 1, i32 31), !dbg !71
  %537 = bitcast i32 %536 to float, !dbg !71
  %538 = fcmp ogt float %534, %537, !dbg !73
  %539 = fcmp uno float %534, 0.000000e+00, !dbg !74
  %540 = or i1 %538, %539, !dbg !75
  %541 = select i1 %540, i32 %535, i32 %536, !dbg !76
  %542 = insertelement <1 x i32> poison, i32 %541, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %542, i1 %189) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %543 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %197, i1 %196) #5, !dbg !71
  %544 = bitcast i32 %543 to float, !dbg !71
  %545 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 16, i32 31), !dbg !71
  %546 = bitcast i32 %545 to float, !dbg !71
  %547 = fcmp ogt float %544, %546, !dbg !73
  %548 = fcmp uno float %544, 0.000000e+00, !dbg !74
  %549 = or i1 %548, %547, !dbg !75
  %550 = select i1 %549, float %544, float %546, !dbg !76
  %551 = bitcast float %550 to i32, !dbg !71
  %552 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %551, i32 8, i32 31), !dbg !71
  %553 = bitcast i32 %552 to float, !dbg !71
  %554 = fcmp ogt float %550, %553, !dbg !73
  %555 = fcmp uno float %550, 0.000000e+00, !dbg !74
  %556 = or i1 %554, %555, !dbg !75
  %557 = select i1 %556, float %550, float %553, !dbg !76
  %558 = bitcast float %557 to i32, !dbg !71
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %558, i32 4, i32 31), !dbg !71
  %560 = bitcast i32 %559 to float, !dbg !71
  %561 = fcmp ogt float %557, %560, !dbg !73
  %562 = fcmp uno float %557, 0.000000e+00, !dbg !74
  %563 = or i1 %561, %562, !dbg !75
  %564 = select i1 %563, float %557, float %560, !dbg !76
  %565 = bitcast float %564 to i32, !dbg !71
  %566 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %565, i32 2, i32 31), !dbg !71
  %567 = bitcast i32 %566 to float, !dbg !71
  %568 = fcmp ogt float %564, %567, !dbg !73
  %569 = fcmp uno float %564, 0.000000e+00, !dbg !74
  %570 = or i1 %568, %569, !dbg !75
  %571 = select i1 %570, float %564, float %567, !dbg !76
  %572 = bitcast float %571 to i32, !dbg !71
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 1, i32 31), !dbg !71
  %574 = bitcast i32 %573 to float, !dbg !71
  %575 = fcmp ogt float %571, %574, !dbg !73
  %576 = fcmp uno float %571, 0.000000e+00, !dbg !74
  %577 = or i1 %575, %576, !dbg !75
  %578 = select i1 %577, i32 %572, i32 %573, !dbg !76
  %579 = insertelement <1 x i32> poison, i32 %578, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %579, i1 %308) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %580 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !71
  %581 = sext i32 %19 to i64, !dbg !77
  %582 = getelementptr bfloat, ptr addrspace(1) %4, i64 %581, !dbg !77
  %583 = fptrunc float %494 to bfloat, !dbg !78
  %584 = and i32 %21, 1023, !dbg !78
  %585 = icmp eq i32 %584, 0, !dbg !78
  %586 = bitcast bfloat %583 to i16, !dbg !78
  %587 = and i1 %20, %585, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %586, ptr addrspace(1) %582, i1 %587) #5, !dbg !78
  %588 = getelementptr bfloat, ptr addrspace(1) %5, i64 %581, !dbg !79
  %589 = fptrunc float %580 to bfloat, !dbg !80
  %590 = bitcast bfloat %589 to i16, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %590, ptr addrspace(1) %588, i1 %587) #5, !dbg !80
  %591 = getelementptr bfloat, ptr addrspace(1) %6, i64 %581, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %586, ptr addrspace(1) %591, i1 %587) #5, !dbg !82
  %592 = getelementptr bfloat, ptr addrspace(1) %7, i64 %581, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %590, ptr addrspace(1) %592, i1 %587) #5, !dbg !84
  %593 = getelementptr bfloat, ptr addrspace(1) %8, i64 %581, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %586, ptr addrspace(1) %593, i1 %587) #5, !dbg !86
  %594 = getelementptr bfloat, ptr addrspace(1) %9, i64 %581, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %590, ptr addrspace(1) %594, i1 %587) #5, !dbg !88
  %595 = getelementptr bfloat, ptr addrspace(1) %10, i64 %581, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %586, ptr addrspace(1) %595, i1 %587) #5, !dbg !90
  %596 = getelementptr bfloat, ptr addrspace(1) %11, i64 %581, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %590, ptr addrspace(1) %596, i1 %587) #5, !dbg !92
  %597 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %356, i1 %31) #5, !dbg !93
  %598 = extractvalue { i32, i32 } %597, 0, !dbg !93
  %599 = bitcast i32 %598 to <2 x bfloat>, !dbg !93
  %600 = extractvalue { i32, i32 } %597, 1, !dbg !93
  %601 = bitcast i32 %600 to <2 x bfloat>, !dbg !93
  %602 = extractelement <2 x bfloat> %599, i64 0, !dbg !93
  %603 = extractelement <2 x bfloat> %599, i64 1, !dbg !93
  %604 = extractelement <2 x bfloat> %601, i64 0, !dbg !93
  %605 = extractelement <2 x bfloat> %601, i64 1, !dbg !93
  %606 = fpext bfloat %602 to float, !dbg !94
  %607 = fpext bfloat %603 to float, !dbg !94
  %608 = fpext bfloat %604 to float, !dbg !94
  %609 = fpext bfloat %605 to float, !dbg !94
  %.inv = fcmp oge float %494, 0.000000e+00, !dbg !95
  %610 = select i1 %.inv, float 0.000000e+00, float %494, !dbg !95
  %611 = fsub float 0.000000e+00, %610, !dbg !97
  %.inv1 = fcmp ole float %580, 0.000000e+00, !dbg !98
  %612 = select i1 %.inv1, float 0.000000e+00, float %580, !dbg !98
  %613 = fcmp ogt float %611, %612, !dbg !100
  %614 = fcmp uno float %611, 0.000000e+00, !dbg !102
  %615 = or i1 %614, %613, !dbg !103
  %616 = select i1 %615, float %611, float %612, !dbg !104
  %617 = fmul float %616, 0x3F80204080000000, !dbg !105
  %618 = fcmp ogt float %617, 0x3EE4F8B580000000, !dbg !106
  %619 = fcmp uno float %617, 0.000000e+00, !dbg !108
  %620 = or i1 %618, %619, !dbg !109
  %621 = select i1 %620, float %617, float 0x3EE4F8B580000000, !dbg !110
  %622 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %621), !dbg !111
  %623 = fmul float %622, %606, !dbg !112
  %624 = fmul float %622, %607, !dbg !112
  %625 = fmul float %622, %608, !dbg !112
  %626 = fmul float %622, %609, !dbg !112
  %627 = tail call float @llvm.nvvm.round.f(float %623) #5, !dbg !113
  %628 = tail call float @llvm.nvvm.round.f(float %624) #5, !dbg !113
  %629 = tail call float @llvm.nvvm.round.f(float %625) #5, !dbg !113
  %630 = tail call float @llvm.nvvm.round.f(float %626) #5, !dbg !113
  %631 = insertelement <4 x float> poison, float %627, i64 0, !dbg !114
  %632 = insertelement <4 x float> %631, float %628, i64 1, !dbg !114
  %633 = insertelement <4 x float> %632, float %629, i64 2, !dbg !114
  %634 = insertelement <4 x float> %633, float %630, i64 3, !dbg !114
  %635 = fcmp ogt <4 x float> %634, splat (float -1.270000e+02), !dbg !114
  %636 = fcmp uno <4 x float> %634, zeroinitializer, !dbg !116
  %637 = or <4 x i1> %635, %636, !dbg !117
  %638 = select <4 x i1> %637, <4 x float> %634, <4 x float> splat (float -1.270000e+02), !dbg !118
  %639 = fcmp olt <4 x float> %638, splat (float 1.270000e+02), !dbg !119
  %640 = fcmp uno <4 x float> %638, zeroinitializer, !dbg !121
  %641 = or <4 x i1> %639, %640, !dbg !122
  %642 = fptosi <4 x float> %638 to <4 x i8>, !dbg !123
  %643 = select <4 x i1> %641, <4 x i8> %642, <4 x i8> splat (i8 127), !dbg !124
  %644 = getelementptr i8, ptr addrspace(1) %12, i64 %29, !dbg !125
  %645 = bitcast <4 x i8> %643 to i32, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %645, ptr addrspace(1) %644, i1 %31) #5, !dbg !126
  %646 = getelementptr i8, ptr addrspace(1) %13, i64 %29, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %645, ptr addrspace(1) %646, i1 %31) #5, !dbg !128
  %647 = getelementptr i8, ptr addrspace(1) %14, i64 %29, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %645, ptr addrspace(1) %647, i1 %31) #5, !dbg !130
  %648 = getelementptr i8, ptr addrspace(1) %15, i64 %29, !dbg !131
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %645, ptr addrspace(1) %648, i1 %31) #5, !dbg !132
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 34, column: 29, scope: !6)
!13 = !DILocation(line: 38, column: 46, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 61, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 217, column: 21, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!25 = !DILocation(line: 47, column: 79, scope: !6)
!26 = !DILocation(line: 218, column: 28, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 219, column: 39, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 219, column: 60, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 219, column: 49, scope: !22, inlinedAt: !25)
!30 = !DILocation(line: 221, column: 25, scope: !22, inlinedAt: !25)
!31 = !DILocation(line: 221, column: 17, scope: !22, inlinedAt: !25)
!32 = !DILocation(line: 222, column: 30, scope: !22, inlinedAt: !25)
!33 = !DILocation(line: 222, column: 38, scope: !22, inlinedAt: !25)
!34 = !DILocation(line: 222, column: 49, scope: !22, inlinedAt: !25)
!35 = !DILocation(line: 222, column: 22, scope: !22, inlinedAt: !25)
!36 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !25)
!37 = !DILocation(line: 222, column: 15, scope: !22, inlinedAt: !25)
!38 = !DILocation(line: 59, column: 51, scope: !6)
!39 = !DILocation(line: 60, column: 42, scope: !6)
!40 = !DILocation(line: 60, column: 35, scope: !6)
!41 = !DILocation(line: 60, column: 49, scope: !6)
!42 = !DILocation(line: 61, column: 35, scope: !6)
!43 = !DILocation(line: 61, column: 49, scope: !6)
!44 = !DILocation(line: 62, column: 35, scope: !6)
!45 = !DILocation(line: 62, column: 42, scope: !6)
!46 = !DILocation(line: 63, column: 35, scope: !6)
!47 = !DILocation(line: 63, column: 42, scope: !6)
!48 = !DILocation(line: 67, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 32, scope: !6)
!51 = !DILocation(line: 86, column: 29, scope: !6)
!52 = !DILocation(line: 59, column: 113, scope: !6)
!53 = !DILocation(line: 65, column: 24, scope: !6)
!54 = !DILocation(line: 63, column: 95, scope: !6)
!55 = !DILocation(line: 61, column: 102, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 74, column: 24, scope: !6)
!58 = !DILocation(line: 76, column: 24, scope: !6)
!59 = !DILocation(line: 77, column: 24, scope: !6)
!60 = !DILocation(line: 79, column: 24, scope: !6)
!61 = !DILocation(line: 80, column: 24, scope: !6)
!62 = !DILocation(line: 85, column: 50, scope: !6)
!63 = !DILocation(line: 83, column: 50, scope: !6)
!64 = !DILocation(line: 86, column: 53, scope: !6)
!65 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !66)
!66 = !DILocation(line: 87, column: 40, scope: !6)
!67 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !66)
!68 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !66)
!69 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !66)
!70 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !66)
!71 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !72)
!72 = !DILocation(line: 88, column: 40, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !72)
!74 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !72)
!75 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !72)
!76 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !72)
!77 = !DILocation(line: 89, column: 25, scope: !6)
!78 = !DILocation(line: 89, column: 37, scope: !6)
!79 = !DILocation(line: 90, column: 25, scope: !6)
!80 = !DILocation(line: 90, column: 37, scope: !6)
!81 = !DILocation(line: 91, column: 25, scope: !6)
!82 = !DILocation(line: 91, column: 37, scope: !6)
!83 = !DILocation(line: 92, column: 25, scope: !6)
!84 = !DILocation(line: 92, column: 37, scope: !6)
!85 = !DILocation(line: 93, column: 25, scope: !6)
!86 = !DILocation(line: 93, column: 37, scope: !6)
!87 = !DILocation(line: 94, column: 25, scope: !6)
!88 = !DILocation(line: 94, column: 37, scope: !6)
!89 = !DILocation(line: 95, column: 25, scope: !6)
!90 = !DILocation(line: 95, column: 37, scope: !6)
!91 = !DILocation(line: 96, column: 26, scope: !6)
!92 = !DILocation(line: 96, column: 38, scope: !6)
!93 = !DILocation(line: 103, column: 53, scope: !6)
!94 = !DILocation(line: 103, column: 115, scope: !6)
!95 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !96)
!96 = !DILocation(line: 105, column: 46, scope: !6)
!97 = !DILocation(line: 106, column: 17, scope: !6)
!98 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !99)
!99 = !DILocation(line: 107, column: 46, scope: !6)
!100 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !101)
!101 = !DILocation(line: 108, column: 46, scope: !6)
!102 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !101)
!103 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !101)
!104 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !101)
!105 = !DILocation(line: 110, column: 24, scope: !6)
!106 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !107)
!107 = !DILocation(line: 113, column: 46, scope: !6)
!108 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !107)
!109 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !107)
!110 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !107)
!111 = !DILocation(line: 116, column: 25, scope: !6)
!112 = !DILocation(line: 119, column: 24, scope: !6)
!113 = !DILocation(line: 120, column: 36, scope: !6)
!114 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !115)
!115 = !DILocation(line: 123, column: 46, scope: !6)
!116 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !115)
!117 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !115)
!118 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !115)
!119 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !120)
!120 = !DILocation(line: 125, column: 46, scope: !6)
!121 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !120)
!122 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !120)
!123 = !DILocation(line: 127, column: 25, scope: !6)
!124 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !120)
!125 = !DILocation(line: 128, column: 30, scope: !6)
!126 = !DILocation(line: 128, column: 54, scope: !6)
!127 = !DILocation(line: 129, column: 30, scope: !6)
!128 = !DILocation(line: 129, column: 54, scope: !6)
!129 = !DILocation(line: 130, column: 30, scope: !6)
!130 = !DILocation(line: 130, column: 54, scope: !6)
!131 = !DILocation(line: 131, column: 30, scope: !6)
!132 = !DILocation(line: 131, column: 54, scope: !6)
!133 = !DILocation(line: 97, column: 4, scope: !6)
