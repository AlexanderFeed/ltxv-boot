; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !10 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %10 = shl i32 %9, 6, !dbg !12
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %12 = lshr i32 %11, 1, !dbg !13
  %13 = and i32 %12, 63, !dbg !13
  %14 = lshr i32 %11, 3, !dbg !13
  %15 = and i32 %14, 15, !dbg !13
  %16 = or disjoint i32 %13, %10, !dbg !14
  %17 = or disjoint i32 %15, %10, !dbg !14
  %18 = or disjoint i32 %17, 16, !dbg !14
  %19 = or disjoint i32 %17, 32, !dbg !14
  %20 = or disjoint i32 %17, 48, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !15
  %22 = icmp slt i32 %17, 512, !dbg !15
  %23 = icmp slt i32 %18, 512, !dbg !15
  %24 = icmp slt i32 %19, 512, !dbg !15
  %25 = icmp slt i32 %20, 512, !dbg !15
  %26 = shl i32 %11, 2, !dbg !16
  %27 = and i32 %26, 4, !dbg !16
  %28 = sext i32 %16 to i64, !dbg !17
  %29 = getelementptr i64, ptr addrspace(1) %0, i64 %28, !dbg !17
  %30 = sext i32 %17 to i64, !dbg !17
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !17
  %32 = sext i32 %18 to i64, !dbg !17
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !17
  %34 = sext i32 %19 to i64, !dbg !17
  %35 = getelementptr i64, ptr addrspace(1) %0, i64 %34, !dbg !17
  %36 = sext i32 %20 to i64, !dbg !17
  %37 = getelementptr i64, ptr addrspace(1) %0, i64 %36, !dbg !17
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %21) #6, !dbg !18
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %21) #6, !dbg !18
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %21) #6, !dbg !18
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %21) #6, !dbg !18
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %22) #6, !dbg !18
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %23) #6, !dbg !18
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %24) #6, !dbg !18
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %25) #6, !dbg !18
  %46 = shl i32 %16, 12, !dbg !19
  %47 = icmp slt i64 %41, 0, !dbg !20
  %48 = insertelement <4 x i64> poison, i64 %45, i64 0, !dbg !21
  %49 = insertelement <4 x i64> %48, i64 %44, i64 1, !dbg !21
  %50 = insertelement <4 x i64> %49, i64 %43, i64 2, !dbg !21
  %51 = insertelement <4 x i64> %50, i64 %42, i64 3, !dbg !21
  %52 = add <4 x i64> %51, splat (i64 32128), !dbg !21
  %53 = icmp slt <4 x i64> %51, zeroinitializer, !dbg !20
  %54 = select <4 x i1> %53, <4 x i64> %52, <4 x i64> %51, !dbg !22
  %55 = icmp ult <4 x i64> %54, splat (i64 32128), !dbg !23
  %56 = xor i1 %22, true, !dbg !24
  %57 = xor i1 %23, true, !dbg !24
  %58 = xor i1 %24, true, !dbg !24
  %59 = xor i1 %25, true, !dbg !24
  %60 = extractelement <4 x i1> %55, i64 3, !dbg !25
  %61 = or i1 %60, %56, !dbg !25
  %62 = extractelement <4 x i1> %55, i64 2, !dbg !25
  %63 = or i1 %62, %57, !dbg !25
  %64 = extractelement <4 x i1> %55, i64 1, !dbg !25
  %65 = or i1 %64, %58, !dbg !25
  %66 = extractelement <4 x i1> %55, i64 0, !dbg !25
  %67 = or i1 %66, %59, !dbg !25
  %68 = shl i64 %41, 12, !dbg !26
  %69 = add i64 %68, 131596288, !dbg !26
  %70 = select i1 %47, i64 %69, i64 %68, !dbg !26
  %invariant.op = or disjoint i32 %27, %46, !dbg !27
  %invariant.op18 = and i1 %65, %67, !dbg !27
  %71 = and i1 %63, %invariant.op18
  %.demorgan7.reass = and i1 %71, %61
  %72 = zext nneg i32 %27 to i64, !dbg !27
  %invariant.op30 = or disjoint i64 %70, %72, !dbg !27
  br label %73, !dbg !27

73:                                               ; preds = %8, %83
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %83 ]
  %74 = phi float [ 0.000000e+00, %8 ], [ %122, %83 ]
  %75 = phi float [ 0.000000e+00, %8 ], [ %123, %83 ]
  %76 = phi float [ 0.000000e+00, %8 ], [ %124, %83 ]
  %77 = phi float [ 0.000000e+00, %8 ], [ %125, %83 ]
  %78 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %78
  %79 = sext i32 %.reass to i64, !dbg !28
  %80 = getelementptr bfloat, ptr addrspace(1) %2, i64 %79, !dbg !28
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %80, i1 %21) #6, !dbg !29
  br i1 %.demorgan7.reass, label %83, label %82, !dbg !30

82:                                               ; preds = %73
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 42, ptr nonnull @assertFunc_0, i64 1), !dbg !30
  unreachable, !dbg !30

83:                                               ; preds = %73
  %84 = extractvalue { i32, i32 } %81, 1, !dbg !29
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !29
  %86 = extractelement <2 x bfloat> %85, i64 1, !dbg !29
  %87 = fpext bfloat %86 to float, !dbg !31
  %88 = extractelement <2 x bfloat> %85, i64 0, !dbg !29
  %89 = fpext bfloat %88 to float, !dbg !31
  %90 = extractvalue { i32, i32 } %81, 0, !dbg !29
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !29
  %92 = extractelement <2 x bfloat> %91, i64 1, !dbg !29
  %93 = fpext bfloat %92 to float, !dbg !31
  %94 = extractelement <2 x bfloat> %91, i64 0, !dbg !29
  %95 = fpext bfloat %94 to float, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %.reass31 = or i64 %indvars.iv, %invariant.op30
  %96 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass31, !dbg !32
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %96, i1 %21) #6, !dbg !33
  %98 = extractvalue { i32, i32 } %97, 0, !dbg !33
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !33
  %100 = extractvalue { i32, i32 } %97, 1, !dbg !33
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !33
  %102 = extractelement <2 x bfloat> %99, i64 0, !dbg !33
  %103 = extractelement <2 x bfloat> %99, i64 1, !dbg !33
  %104 = extractelement <2 x bfloat> %101, i64 0, !dbg !33
  %105 = extractelement <2 x bfloat> %101, i64 1, !dbg !33
  %106 = fpext bfloat %102 to float, !dbg !34
  %107 = fpext bfloat %103 to float, !dbg !34
  %108 = fpext bfloat %104 to float, !dbg !34
  %109 = fpext bfloat %105 to float, !dbg !34
  %110 = fadd float %95, %106, !dbg !35
  %111 = fadd float %93, %107, !dbg !35
  %112 = fadd float %89, %108, !dbg !35
  %113 = fadd float %87, %109, !dbg !35
  %114 = fmul float %110, %110, !dbg !36
  %115 = fmul float %111, %111, !dbg !36
  %116 = fmul float %112, %112, !dbg !36
  %117 = fmul float %113, %113, !dbg !36
  %118 = fadd float %74, %114, !dbg !37
  %119 = fadd float %75, %115, !dbg !37
  %120 = fadd float %76, %116, !dbg !37
  %121 = fadd float %77, %117, !dbg !37
  %122 = select i1 %21, float %118, float %74, !dbg !38
  %123 = select i1 %21, float %119, float %75, !dbg !38
  %124 = select i1 %21, float %120, float %76, !dbg !38
  %125 = select i1 %21, float %121, float %77, !dbg !38
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !27
  %126 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !27
  br i1 %126, label %73, label %__nv_rsqrtf.exit, !dbg !27

__nv_rsqrtf.exit:                                 ; preds = %83
  %127 = fadd float %122, %123, !dbg !39
  %128 = fadd float %124, %127, !dbg !39
  %129 = fadd float %125, %128, !dbg !39
  %130 = bitcast float %129 to i32, !dbg !44
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !44
  %132 = bitcast i32 %131 to float, !dbg !44
  %133 = fadd float %129, %132, !dbg !39
  %134 = tail call float @llvm.nvvm.div.full(float %133, float 4.096000e+03), !dbg !45
  %135 = fadd float %134, 0x3EB0C6F7A0000000, !dbg !46
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %.not.i14 = icmp eq i32 %139, 0, !dbg !47
  br i1 %.not.i14, label %142, label %140, !dbg !47

140:                                              ; preds = %__nv_rsqrtf.exit
  %141 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %135), !dbg !47
  br label %__nv_rsqrtf.exit16, !dbg !47

142:                                              ; preds = %__nv_rsqrtf.exit
  %143 = tail call float @llvm.nvvm.rsqrt.approx.f(float %135), !dbg !47
  br label %__nv_rsqrtf.exit16, !dbg !47

__nv_rsqrtf.exit16:                               ; preds = %140, %142
  %.0.i15 = phi float [ %141, %140 ], [ %143, %142 ], !dbg !47
  %invariant.op32 = or disjoint i64 %70, %72, !dbg !48
  %144 = insertelement <2 x float> poison, float %.0.i15, i64 0, !dbg !49
  %145 = shufflevector <2 x float> %144, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  br label %146, !dbg !48

146:                                              ; preds = %146, %__nv_rsqrtf.exit16
  %indvars.iv25 = phi i64 [ 0, %__nv_rsqrtf.exit16 ], [ %indvars.iv.next26, %146 ]
  %147 = or disjoint i64 %indvars.iv25, %72, !dbg !50
  %148 = getelementptr bfloat, ptr addrspace(1) %3, i64 %147, !dbg !51
  %149 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %148, i1 true) #6, !dbg !52
  %150 = trunc nuw nsw i64 %indvars.iv25 to i32
  %.reass20 = or i32 %invariant.op, %150
  %151 = sext i32 %.reass20 to i64, !dbg !53
  %152 = getelementptr bfloat, ptr addrspace(1) %2, i64 %151, !dbg !53
  %153 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %152, i1 %21) #6, !dbg !54
  %154 = extractvalue { i32, i32 } %153, 1, !dbg !54
  %155 = bitcast i32 %154 to <2 x bfloat>, !dbg !54
  %156 = extractvalue { i32, i32 } %153, 0, !dbg !54
  %157 = bitcast i32 %156 to <2 x bfloat>, !dbg !54
  %158 = extractvalue { i32, i32 } %149, 1, !dbg !52
  %159 = bitcast i32 %158 to <2 x bfloat>, !dbg !52
  %160 = extractvalue { i32, i32 } %149, 0, !dbg !52
  %161 = bitcast i32 %160 to <2 x bfloat>, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %.reass33 = or i64 %indvars.iv25, %invariant.op32
  %162 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass33, !dbg !56
  %163 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %162, i1 %21) #6, !dbg !57
  %164 = extractvalue { i32, i32 } %163, 0, !dbg !57
  %165 = bitcast i32 %164 to <2 x bfloat>, !dbg !57
  %166 = extractvalue { i32, i32 } %163, 1, !dbg !57
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !57
  %168 = getelementptr bfloat, ptr addrspace(1) %4, i64 %151, !dbg !58
  %169 = fpext <2 x bfloat> %157 to <2 x float>, !dbg !59
  %170 = fpext <2 x bfloat> %161 to <2 x float>, !dbg !60
  %171 = fpext <2 x bfloat> %165 to <2 x float>, !dbg !61
  %172 = fadd <2 x float> %169, %171, !dbg !62
  %173 = fmul <2 x float> %145, %172, !dbg !49
  %174 = fmul <2 x float> %173, %170, !dbg !63
  %175 = fptrunc <2 x float> %174 to <2 x bfloat>, !dbg !64
  %176 = fpext <2 x bfloat> %155 to <2 x float>, !dbg !59
  %177 = fpext <2 x bfloat> %159 to <2 x float>, !dbg !60
  %178 = fpext <2 x bfloat> %167 to <2 x float>, !dbg !61
  %179 = fadd <2 x float> %176, %178, !dbg !62
  %180 = fmul <2 x float> %145, %179, !dbg !49
  %181 = fmul <2 x float> %180, %177, !dbg !63
  %182 = fptrunc <2 x float> %181 to <2 x bfloat>, !dbg !64
  %183 = bitcast <2 x bfloat> %175 to i32, !dbg !64
  %184 = bitcast <2 x bfloat> %182 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %183, i32 %184, ptr addrspace(1) %168, i1 %21) #6, !dbg !64
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 8, !dbg !48
  %185 = icmp samesign ult i64 %indvars.iv25, 4088, !dbg !48
  br i1 %185, label %146, label %186, !dbg !48

186:                                              ; preds = %146
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py", directory: "/tmp/torchinductor_root/qq")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 46, scope: !10)
!20 = !DILocation(line: 40, column: 22, scope: !10)
!21 = !DILocation(line: 39, column: 22, scope: !10)
!22 = !DILocation(line: 41, column: 36, scope: !10)
!23 = !DILocation(line: 42, column: 41, scope: !10)
!24 = !DILocation(line: 42, column: 60, scope: !10)
!25 = !DILocation(line: 42, column: 58, scope: !10)
!26 = !DILocation(line: 43, column: 46, scope: !10)
!27 = !DILocation(line: 31, column: 40, scope: !10)
!28 = !DILocation(line: 37, column: 34, scope: !10)
!29 = !DILocation(line: 37, column: 51, scope: !10)
!30 = !DILocation(line: 42, column: 68, scope: !10)
!31 = !DILocation(line: 37, column: 112, scope: !10)
!32 = !DILocation(line: 43, column: 34, scope: !10)
!33 = !DILocation(line: 43, column: 53, scope: !10)
!34 = !DILocation(line: 43, column: 114, scope: !10)
!35 = !DILocation(line: 44, column: 22, scope: !10)
!36 = !DILocation(line: 46, column: 23, scope: !10)
!37 = !DILocation(line: 48, column: 25, scope: !10)
!38 = !DILocation(line: 49, column: 50, scope: !10)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !43)
!40 = distinct !DILexicalBlockFile(scope: !42, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!42 = distinct !DILexicalBlockFile(scope: !10, file: !41, discriminator: 0)
!43 = !DILocation(line: 50, column: 27, scope: !10)
!44 = !DILocation(line: 286, column: 36, scope: !42, inlinedAt: !43)
!45 = !DILocation(line: 68, column: 25, scope: !10)
!46 = !DILocation(line: 70, column: 24, scope: !10)
!47 = !DILocation(line: 71, column: 32, scope: !10)
!48 = !DILocation(line: 51, column: 40, scope: !10)
!49 = !DILocation(line: 72, column: 24, scope: !10)
!50 = !DILocation(line: 52, column: 31, scope: !10)
!51 = !DILocation(line: 57, column: 35, scope: !10)
!52 = !DILocation(line: 57, column: 42, scope: !10)
!53 = !DILocation(line: 58, column: 35, scope: !10)
!54 = !DILocation(line: 58, column: 52, scope: !10)
!55 = !DILocation(line: 63, column: 70, scope: !10)
!56 = !DILocation(line: 64, column: 35, scope: !10)
!57 = !DILocation(line: 64, column: 55, scope: !10)
!58 = !DILocation(line: 75, column: 29, scope: !10)
!59 = !DILocation(line: 58, column: 114, scope: !10)
!60 = !DILocation(line: 57, column: 95, scope: !10)
!61 = !DILocation(line: 64, column: 117, scope: !10)
!62 = !DILocation(line: 65, column: 24, scope: !10)
!63 = !DILocation(line: 74, column: 24, scope: !10)
!64 = !DILocation(line: 75, column: 53, scope: !10)
!65 = !DILocation(line: 51, column: 4, scope: !10)
