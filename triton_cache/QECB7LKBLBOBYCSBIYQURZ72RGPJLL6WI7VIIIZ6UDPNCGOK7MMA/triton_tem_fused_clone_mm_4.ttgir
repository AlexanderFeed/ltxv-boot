#blocked = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [4, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":16:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 2], instrShape = [16, 8]}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @triton_tem_fused_clone_mm_4(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":16:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":16:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":16:0)) attributes {noinline = false} {
    %c126_i32 = arith.constant 126 : i32 loc(#loc1)
    %cst = arith.constant dense<32> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<1x32xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<true> : tensor<32x128xi1, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<true> : tensor<128x32xi1, #blocked1> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<512> : tensor<128x1xi32, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<4096> : tensor<1x128xi32, #blocked2> loc(#loc1)
    %cst_5 = arith.constant dense<4096> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<32768> : tensor<128x32xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<64> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<128x32xi32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<4096> : tensor<128x1xi32, #blocked2> loc(#loc1)
    %cst_10 = arith.constant dense<4096> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<4096> : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_12 = arith.constant dense<512> : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_13 = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.divsi %0, %c256_i32 : i32 loc(#loc3)
    %2 = arith.muli %1, %c8_i32 : i32 loc(#loc4)
    %3 = arith.subi %c4_i32, %2 : i32 loc(#loc5)
    %4 = arith.minsi %3, %c8_i32 : i32 loc(#loc6)
    %5 = arith.remsi %0, %4 : i32 loc(#loc7)
    %6 = arith.addi %2, %5 : i32 loc(#loc8)
    %7 = arith.remsi %0, %c256_i32 : i32 loc(#loc9)
    %8 = arith.divsi %7, %4 : i32 loc(#loc10)
    %9 = arith.muli %6, %c128_i32 : i32 loc(#loc11)
    %10 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc12)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc12)
    %12 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc12)
    %13 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc12)
    %14 = tt.splat %9 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc13)
    %15 = tt.splat %9 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc13)
    %16 = arith.addi %14, %10 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc13)
    %17 = arith.addi %15, %11 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc13)
    %18 = arith.muli %8, %c128_i32 : i32 loc(#loc14)
    %19 = tt.splat %18 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %20 = tt.splat %18 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc15)
    %21 = arith.addi %19, %12 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %22 = arith.addi %20, %13 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc15)
    %23 = arith.remsi %16, %cst_12 {tt.contiguity = dense<128> : tensor<1xi32>, tt.divisibility = dense<128> : tensor<1xi32>} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc16)
    %24 = arith.remsi %21, %cst_11 {tt.contiguity = dense<128> : tensor<1xi32>, tt.divisibility = dense<128> : tensor<1xi32>} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc17)
    %25 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc18)
    %26 = tt.expand_dims %25 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc18)
    %27 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc19)
    %28 = tt.expand_dims %27 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc19)
    %29 = tt.expand_dims %23 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc20)
    %30 = arith.muli %29, %cst_10 : tensor<128x1xi32, #blocked1> loc(#loc21)
    %31 = tt.broadcast %30 : tensor<128x1xi32, #blocked1> -> tensor<128x32xi32, #blocked1> loc(#loc22)
    %32 = arith.muli %29, %cst_7 : tensor<128x1xi32, #blocked1> loc(#loc23)
    %33 = tt.broadcast %32 : tensor<128x1xi32, #blocked1> -> tensor<128x32xi32, #blocked1> loc(#loc24)
    %34 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<128x32x!tt.ptr<bf16>, #blocked1> loc(#loc25)
    %35 = tt.expand_dims %24 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc26)
    %36 = arith.muli %35, %cst_5 : tensor<1x128xi32, #blocked> loc(#loc27)
    %37 = tt.broadcast %36 : tensor<1x128xi32, #blocked> -> tensor<32x128xi32, #blocked> loc(#loc28)
    %38 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<32x128x!tt.ptr<bf16>, #blocked> loc(#loc29)
    %39 = ttg.local_alloc  : () -> !ttg.memdesc<2x128x32xbf16, #shared, #smem, mutable> loc(#loc30)
    %40 = ttg.local_alloc  : () -> !ttg.memdesc<2x32x128xbf16, #shared1, #smem, mutable> loc(#loc31)
    %41 = tt.broadcast %26 : tensor<1x32xi32, #blocked1> -> tensor<128x32xi32, #blocked1> loc(#loc22)
    %42 = arith.addi %41, %31 : tensor<128x32xi32, #blocked1> loc(#loc22)
    %43 = arith.divsi %42, %cst_8 : tensor<128x32xi32, #blocked1> loc(#loc32)
    %44 = arith.remsi %43, %cst_8 : tensor<128x32xi32, #blocked1> loc(#loc33)
    %45 = arith.remsi %42, %cst_8 : tensor<128x32xi32, #blocked1> loc(#loc34)
    %46 = arith.addi %45, %33 : tensor<128x32xi32, #blocked1> loc(#loc24)
    %47 = arith.muli %44, %cst_6 : tensor<128x32xi32, #blocked1> loc(#loc35)
    %48 = arith.addi %46, %47 : tensor<128x32xi32, #blocked1> loc(#loc36)
    %49 = tt.addptr %34, %48 : tensor<128x32x!tt.ptr<bf16>, #blocked1>, tensor<128x32xi32, #blocked1> loc(#loc25)
    %50 = ttg.memdesc_subview %39[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x32xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x32xbf16, #shared, #smem, mutable, 2x128x32> loc(#loc30)
    %51 = ttg.async_copy_global_to_local %49, %50 mask %cst_2 evictionPolicy = evict_last : tensor<128x32x!tt.ptr<bf16>, #blocked1> -> <128x32xbf16, #shared, #smem, mutable, 2x128x32> loc(#loc30)
    %52 = ttg.async_commit_group %51 loc(#loc30)
    %53 = tt.broadcast %28 : tensor<32x1xi32, #blocked> -> tensor<32x128xi32, #blocked> loc(#loc28)
    %54 = arith.addi %53, %37 : tensor<32x128xi32, #blocked> loc(#loc28)
    %55 = tt.addptr %38, %54 : tensor<32x128x!tt.ptr<bf16>, #blocked>, tensor<32x128xi32, #blocked> loc(#loc29)
    %56 = ttg.memdesc_subview %40[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x128xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<32x128xbf16, #shared1, #smem, mutable, 2x32x128> loc(#loc31)
    %57 = ttg.async_copy_global_to_local %55, %56 mask %cst_1 : tensor<32x128x!tt.ptr<bf16>, #blocked> -> <32x128xbf16, #shared1, #smem, mutable, 2x32x128> loc(#loc31)
    %58 = ttg.async_commit_group %57 loc(#loc31)
    %59 = arith.addi %26, %cst_0 : tensor<1x32xi32, #blocked1> loc(#loc37)
    %60 = arith.addi %28, %cst : tensor<32x1xi32, #blocked> loc(#loc38)
    %61 = tt.broadcast %59 : tensor<1x32xi32, #blocked1> -> tensor<128x32xi32, #blocked1> loc(#loc22)
    %62 = arith.addi %61, %31 : tensor<128x32xi32, #blocked1> loc(#loc22)
    %63 = arith.divsi %62, %cst_8 : tensor<128x32xi32, #blocked1> loc(#loc32)
    %64 = arith.remsi %63, %cst_8 : tensor<128x32xi32, #blocked1> loc(#loc33)
    %65 = arith.remsi %62, %cst_8 : tensor<128x32xi32, #blocked1> loc(#loc34)
    %66 = arith.addi %65, %33 : tensor<128x32xi32, #blocked1> loc(#loc24)
    %67 = arith.muli %64, %cst_6 : tensor<128x32xi32, #blocked1> loc(#loc35)
    %68 = arith.addi %66, %67 : tensor<128x32xi32, #blocked1> loc(#loc36)
    %69 = tt.addptr %34, %68 : tensor<128x32x!tt.ptr<bf16>, #blocked1>, tensor<128x32xi32, #blocked1> loc(#loc25)
    %70 = ttg.memdesc_subview %39[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x32xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x32xbf16, #shared, #smem, mutable, 2x128x32> loc(#loc30)
    %71 = ttg.async_copy_global_to_local %69, %70 mask %cst_2 evictionPolicy = evict_last : tensor<128x32x!tt.ptr<bf16>, #blocked1> -> <128x32xbf16, #shared, #smem, mutable, 2x128x32> loc(#loc30)
    %72 = ttg.async_commit_group %71 loc(#loc30)
    %73 = tt.broadcast %60 : tensor<32x1xi32, #blocked> -> tensor<32x128xi32, #blocked> loc(#loc28)
    %74 = arith.addi %73, %37 : tensor<32x128xi32, #blocked> loc(#loc28)
    %75 = tt.addptr %38, %74 : tensor<32x128x!tt.ptr<bf16>, #blocked>, tensor<32x128xi32, #blocked> loc(#loc29)
    %76 = ttg.memdesc_subview %40[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x128xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<32x128xbf16, #shared1, #smem, mutable, 2x32x128> loc(#loc31)
    %77 = ttg.async_copy_global_to_local %75, %76 mask %cst_1 : tensor<32x128x!tt.ptr<bf16>, #blocked> -> <32x128xbf16, #shared1, #smem, mutable, 2x32x128> loc(#loc31)
    %78 = ttg.async_commit_group %77 loc(#loc31)
    %79:5 = scf.for %arg3 = %c0_i32 to %c128_i32 step %c1_i32 iter_args(%arg4 = %cst_13, %arg5 = %c1_i32, %arg6 = %c-1_i32, %arg7 = %58, %arg8 = %78) -> (tensor<128x128xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token)  : i32 {
      %96 = arith.cmpi slt, %arg3, %c126_i32 : i32 loc(#loc39)
      %97 = arith.addi %arg6, %c1_i32 : i32 loc(#loc39)
      %98 = arith.cmpi slt, %97, %c2_i32 : i32 loc(#loc39)
      %99 = arith.select %98, %97, %c0_i32 : i32 loc(#loc39)
      %100 = ttg.async_wait %arg7 {num = 2 : i32} loc(#loc30)
      %101 = ttg.memdesc_subview %39[%99, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x32xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x32xbf16, #shared, #smem, mutable, 2x128x32> loc(#loc30)
      %102 = ttg.local_load %101 : !ttg.memdesc<128x32xbf16, #shared, #smem, mutable, 2x128x32> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc30)
      %103 = ttg.memdesc_subview %40[%99, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x128xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<32x128xbf16, #shared1, #smem, mutable, 2x32x128> loc(#loc31)
      %104 = ttg.local_load %103 : !ttg.memdesc<32x128xbf16, #shared1, #smem, mutable, 2x32x128> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc31)
      %105 = tt.dot %102, %104, %arg4, inputPrecision = tf32 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<32x128xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<128x128xf32, #mma> loc(#loc40)
      %106 = arith.addi %arg5, %c1_i32 : i32 loc(#loc39)
      %107 = arith.cmpi slt, %106, %c2_i32 : i32 loc(#loc39)
      %108 = arith.select %107, %106, %c0_i32 : i32 loc(#loc39)
      %109 = arith.addi %arg3, %c2_i32 : i32 loc(#loc39)
      %110 = arith.muli %109, %c32_i32 : i32 loc(#loc41)
      %111 = tt.splat %110 : i32 -> tensor<1x32xi32, #blocked1> loc(#loc37)
      %112 = arith.addi %26, %111 : tensor<1x32xi32, #blocked1> loc(#loc37)
      %113 = tt.splat %110 : i32 -> tensor<32x1xi32, #blocked> loc(#loc38)
      %114 = arith.addi %28, %113 : tensor<32x1xi32, #blocked> loc(#loc38)
      %115 = tt.broadcast %112 : tensor<1x32xi32, #blocked1> -> tensor<128x32xi32, #blocked1> loc(#loc22)
      %116 = arith.addi %115, %31 : tensor<128x32xi32, #blocked1> loc(#loc22)
      %117 = arith.divsi %116, %cst_8 : tensor<128x32xi32, #blocked1> loc(#loc32)
      %118 = arith.remsi %117, %cst_8 : tensor<128x32xi32, #blocked1> loc(#loc33)
      %119 = arith.remsi %116, %cst_8 : tensor<128x32xi32, #blocked1> loc(#loc34)
      %120 = arith.addi %119, %33 : tensor<128x32xi32, #blocked1> loc(#loc24)
      %121 = arith.muli %118, %cst_6 : tensor<128x32xi32, #blocked1> loc(#loc35)
      %122 = arith.addi %120, %121 : tensor<128x32xi32, #blocked1> loc(#loc36)
      %123 = tt.addptr %34, %122 : tensor<128x32x!tt.ptr<bf16>, #blocked1>, tensor<128x32xi32, #blocked1> loc(#loc25)
      %124 = ttg.memdesc_subview %39[%108, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x32xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x32xbf16, #shared, #smem, mutable, 2x128x32> loc(#loc30)
      %125 = tt.splat %96 : i1 -> tensor<128x32xi1, #blocked1> loc(#loc39)
      %126 = ttg.async_copy_global_to_local %123, %124 mask %125 evictionPolicy = evict_last : tensor<128x32x!tt.ptr<bf16>, #blocked1> -> <128x32xbf16, #shared, #smem, mutable, 2x128x32> loc(#loc30)
      %127 = ttg.async_commit_group %126 loc(#loc30)
      %128 = tt.broadcast %114 : tensor<32x1xi32, #blocked> -> tensor<32x128xi32, #blocked> loc(#loc28)
      %129 = arith.addi %128, %37 : tensor<32x128xi32, #blocked> loc(#loc28)
      %130 = tt.addptr %38, %129 : tensor<32x128x!tt.ptr<bf16>, #blocked>, tensor<32x128xi32, #blocked> loc(#loc29)
      %131 = ttg.memdesc_subview %40[%108, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x128xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<32x128xbf16, #shared1, #smem, mutable, 2x32x128> loc(#loc31)
      %132 = tt.splat %96 : i1 -> tensor<32x128xi1, #blocked> loc(#loc39)
      %133 = ttg.async_copy_global_to_local %130, %131 mask %132 : tensor<32x128x!tt.ptr<bf16>, #blocked> -> <32x128xbf16, #shared1, #smem, mutable, 2x32x128> loc(#loc31)
      %134 = ttg.async_commit_group %133 loc(#loc31)
      scf.yield %105, %108, %99, %arg8, %134 : tensor<128x128xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token loc(#loc39)
    } loc(#loc39)
    %80 = ttg.async_wait  {num = 0 : i32} loc(#loc39)
    ttg.local_dealloc %40 : !ttg.memdesc<2x32x128xbf16, #shared1, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %39 : !ttg.memdesc<2x128x32xbf16, #shared, #smem, mutable> loc(#loc39)
    %81 = tt.expand_dims %17 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc42)
    %82 = tt.expand_dims %22 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x128xi32, #blocked2> loc(#loc43)
    %83 = arith.cmpi slt, %81, %cst_3 : tensor<128x1xi32, #blocked2> loc(#loc44)
    %84 = arith.cmpi slt, %82, %cst_4 : tensor<1x128xi32, #blocked2> loc(#loc45)
    %85 = tt.broadcast %83 : tensor<128x1xi1, #blocked2> -> tensor<128x128xi1, #blocked2> loc(#loc46)
    %86 = tt.broadcast %84 : tensor<1x128xi1, #blocked2> -> tensor<128x128xi1, #blocked2> loc(#loc46)
    %87 = arith.andi %85, %86 : tensor<128x128xi1, #blocked2> loc(#loc46)
    %88 = arith.muli %81, %cst_9 : tensor<128x1xi32, #blocked2> loc(#loc47)
    %89 = tt.broadcast %82 : tensor<1x128xi32, #blocked2> -> tensor<128x128xi32, #blocked2> loc(#loc48)
    %90 = tt.broadcast %88 : tensor<128x1xi32, #blocked2> -> tensor<128x128xi32, #blocked2> loc(#loc48)
    %91 = arith.addi %89, %90 : tensor<128x128xi32, #blocked2> loc(#loc48)
    %92 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<128x128x!tt.ptr<bf16>, #blocked2> loc(#loc49)
    %93 = tt.addptr %92, %91 : tensor<128x128x!tt.ptr<bf16>, #blocked2>, tensor<128x128xi32, #blocked2> loc(#loc49)
    %94 = arith.truncf %79#0 : tensor<128x128xf32, #mma> to tensor<128x128xbf16, #mma> loc(#loc50)
    %95 = ttg.convert_layout %94 : tensor<128x128xbf16, #mma> -> tensor<128x128xbf16, #blocked2> loc(#loc50)
    tt.store %93, %95, %87 : tensor<128x128x!tt.ptr<bf16>, #blocked2> loc(#loc50)
    tt.return loc(#loc51)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":38:24)
#loc3 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":44:22)
#loc4 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":45:41)
#loc5 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":45:30)
#loc6 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":45:50)
#loc7 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":46:40)
#loc8 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":46:34)
#loc9 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":47:19)
#loc10 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":47:30)
#loc11 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":49:17)
#loc12 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":49:40)
#loc13 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":49:27)
#loc14 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":50:17)
#loc15 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":50:27)
#loc16 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":52:57)
#loc17 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":56:57)
#loc18 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":64:30)
#loc19 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":65:30)
#loc20 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":67:25)
#loc21 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":69:30)
#loc22 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":69:25)
#loc23 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":72:42)
#loc24 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":72:39)
#loc25 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":72:34)
#loc26 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":76:25)
#loc27 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":78:55)
#loc28 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":78:50)
#loc29 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":78:25)
#loc30 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":72:62)
#loc31 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":78:20)
#loc32 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":70:26)
#loc33 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":70:32)
#loc34 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":71:23)
#loc35 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":72:56)
#loc36 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":72:50)
#loc37 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":64:42)
#loc38 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":65:42)
#loc39 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":62:26)
#loc40 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":79:25)
#loc41 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":64:50)
#loc42 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":84:15)
#loc43 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":85:15)
#loc44 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":86:20)
#loc45 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":86:34)
#loc46 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":86:26)
#loc47 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":89:26)
#loc48 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":89:21)
#loc49 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":90:25)
#loc50 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":90:67)
#loc51 = loc("/tmp/torchinductor_root/yt/cytbz5mc4bvvni7xhjtzlr25q3nzvibeg2uobwgk3pwiuef4ibeq.py":90:4)
