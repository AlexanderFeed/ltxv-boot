; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused_add_mul_native_layer_norm_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
.peel.begin:
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, 3600, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = shl i32 %11, 2, !dbg !11
  %14 = and i32 %13, 1020, !dbg !11
  %15 = mul i32 %9, 3072, !dbg !12
  %16 = zext nneg i32 %14 to i64, !dbg !13
  %17 = or disjoint i32 %15, %14, !dbg !14
  %18 = sext i32 %17 to i64, !dbg !15
  %19 = getelementptr bfloat, ptr addrspace(1) %1, i64 %18, !dbg !15
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %19, i1 %10) #5, !dbg !16
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !16
  %22 = bitcast i32 %21 to <2 x bfloat>, !dbg !16
  %23 = extractvalue { i32, i32 } %20, 1, !dbg !16
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !16
  %25 = or disjoint i64 %16, 6144, !dbg !17
  %26 = getelementptr bfloat, ptr addrspace(1) %2, i64 %25, !dbg !18
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %26, i1 true) #5, !dbg !19
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !19
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !19
  %30 = extractvalue { i32, i32 } %27, 1, !dbg !19
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !19
  %32 = getelementptr bfloat, ptr addrspace(1) %3, i64 %25, !dbg !20
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 true) #5, !dbg !21
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !21
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !21
  %36 = extractvalue { i32, i32 } %33, 1, !dbg !21
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !21
  %38 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !22
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %38, i1 %10) #5, !dbg !23
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !23
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !23
  %42 = extractvalue { i32, i32 } %39, 1, !dbg !23
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !23
  %44 = getelementptr bfloat, ptr addrspace(1) %4, i64 %16, !dbg !24
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 true) #5, !dbg !25
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !25
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !25
  %48 = extractvalue { i32, i32 } %45, 1, !dbg !25
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !25
  %50 = fpext <2 x bfloat> %22 to <2 x float>, !dbg !26
  %51 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !27
  %52 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !28
  %53 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !29
  %54 = fpext <2 x bfloat> %47 to <2 x float>, !dbg !30
  %55 = fadd <2 x float> %51, %52, !dbg !31
  %56 = fadd <2 x float> %53, %54, !dbg !32
  %57 = fmul <2 x float> %55, %56, !dbg !33
  %58 = fpext <2 x bfloat> %24 to <2 x float>, !dbg !26
  %59 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !27
  %60 = fpext <2 x bfloat> %37 to <2 x float>, !dbg !28
  %61 = fpext <2 x bfloat> %43 to <2 x float>, !dbg !29
  %62 = fpext <2 x bfloat> %49 to <2 x float>, !dbg !30
  %63 = fadd <2 x float> %59, %60, !dbg !31
  %64 = fadd <2 x float> %61, %62, !dbg !32
  %65 = fmul <2 x float> %63, %64, !dbg !33
  %66 = fadd <2 x float> %57, %50, !dbg !34
  %67 = fadd <2 x float> %65, %58, !dbg !34
  %68 = extractelement <2 x float> %67, i64 0, !dbg !35
  %69 = extractelement <2 x float> %67, i64 1, !dbg !35
  %70 = extractelement <2 x float> %66, i64 0, !dbg !35
  %71 = extractelement <2 x float> %66, i64 1, !dbg !35
  %72 = select i1 %10, float %70, float 0.000000e+00, !dbg !39
  %73 = select i1 %10, float %71, float 0.000000e+00, !dbg !39
  %74 = select i1 %10, float %68, float 0.000000e+00, !dbg !39
  %75 = select i1 %10, float %69, float 0.000000e+00, !dbg !39
  %76 = select i1 %10, float 1.000000e+00, float 0.000000e+00, !dbg !40
  %77 = select i1 %10, float 1.000000e+00, float 0.000000e+00, !dbg !40
  %78 = select i1 %10, float 1.000000e+00, float 0.000000e+00, !dbg !40
  %79 = select i1 %10, float 1.000000e+00, float 0.000000e+00, !dbg !40
  %80 = fptrunc <2 x float> %66 to <2 x bfloat>, !dbg !41
  %81 = fptrunc <2 x float> %67 to <2 x bfloat>, !dbg !41
  %82 = bitcast <2 x bfloat> %80 to i32, !dbg !41
  %83 = bitcast <2 x bfloat> %81 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %82, i32 %83, ptr addrspace(1) %38, i1 %10) #5, !dbg !41
  br label %._crit_edge, !dbg !13

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 1024, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %84 = phi float [ %76, %.peel.begin ], [ %189, %._crit_edge ]
  %85 = phi float [ %77, %.peel.begin ], [ %190, %._crit_edge ]
  %86 = phi float [ %78, %.peel.begin ], [ %191, %._crit_edge ]
  %87 = phi float [ %79, %.peel.begin ], [ %192, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %.peel.begin ], [ %185, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %.peel.begin ], [ %186, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %.peel.begin ], [ %187, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %.peel.begin ], [ %188, %._crit_edge ]
  %92 = phi float [ %72, %.peel.begin ], [ %181, %._crit_edge ]
  %93 = phi float [ %73, %.peel.begin ], [ %182, %._crit_edge ]
  %94 = phi float [ %74, %.peel.begin ], [ %183, %._crit_edge ]
  %95 = phi float [ %75, %.peel.begin ], [ %184, %._crit_edge ]
  %96 = or disjoint i64 %indvars.iv, %16, !dbg !42
  %97 = trunc nuw nsw i64 %96 to i32, !dbg !14
  %98 = add i32 %15, %97, !dbg !14
  %99 = sext i32 %98 to i64, !dbg !15
  %100 = getelementptr bfloat, ptr addrspace(1) %1, i64 %99, !dbg !15
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %100, i1 %10) #5, !dbg !16
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !16
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !16
  %104 = extractvalue { i32, i32 } %101, 1, !dbg !16
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !16
  %106 = add nuw nsw i64 %96, 6144, !dbg !17
  %107 = getelementptr bfloat, ptr addrspace(1) %2, i64 %106, !dbg !18
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %107, i1 true) #5, !dbg !19
  %109 = extractvalue { i32, i32 } %108, 0, !dbg !19
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !19
  %111 = extractvalue { i32, i32 } %108, 1, !dbg !19
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !19
  %113 = getelementptr bfloat, ptr addrspace(1) %3, i64 %106, !dbg !20
  %114 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %113, i1 true) #5, !dbg !21
  %115 = extractvalue { i32, i32 } %114, 0, !dbg !21
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !21
  %117 = extractvalue { i32, i32 } %114, 1, !dbg !21
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !21
  %119 = getelementptr bfloat, ptr addrspace(1) %0, i64 %99, !dbg !22
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %119, i1 %10) #5, !dbg !23
  %121 = extractvalue { i32, i32 } %120, 0, !dbg !23
  %122 = bitcast i32 %121 to <2 x bfloat>, !dbg !23
  %123 = extractvalue { i32, i32 } %120, 1, !dbg !23
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !23
  %125 = getelementptr bfloat, ptr addrspace(1) %4, i64 %96, !dbg !24
  %126 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %125, i1 true) #5, !dbg !25
  %127 = extractvalue { i32, i32 } %126, 0, !dbg !25
  %128 = bitcast i32 %127 to <2 x bfloat>, !dbg !25
  %129 = extractvalue { i32, i32 } %126, 1, !dbg !25
  %130 = bitcast i32 %129 to <2 x bfloat>, !dbg !25
  %131 = fpext <2 x bfloat> %103 to <2 x float>, !dbg !26
  %132 = fpext <2 x bfloat> %110 to <2 x float>, !dbg !27
  %133 = fpext <2 x bfloat> %116 to <2 x float>, !dbg !28
  %134 = fpext <2 x bfloat> %122 to <2 x float>, !dbg !29
  %135 = fpext <2 x bfloat> %128 to <2 x float>, !dbg !30
  %136 = fadd <2 x float> %132, %133, !dbg !31
  %137 = fadd <2 x float> %134, %135, !dbg !32
  %138 = fmul <2 x float> %136, %137, !dbg !33
  %139 = fpext <2 x bfloat> %105 to <2 x float>, !dbg !26
  %140 = fpext <2 x bfloat> %112 to <2 x float>, !dbg !27
  %141 = fpext <2 x bfloat> %118 to <2 x float>, !dbg !28
  %142 = fpext <2 x bfloat> %124 to <2 x float>, !dbg !29
  %143 = fpext <2 x bfloat> %130 to <2 x float>, !dbg !30
  %144 = fadd <2 x float> %140, %141, !dbg !31
  %145 = fadd <2 x float> %142, %143, !dbg !32
  %146 = fmul <2 x float> %144, %145, !dbg !33
  %147 = fadd <2 x float> %138, %131, !dbg !34
  %148 = fadd <2 x float> %146, %139, !dbg !34
  %149 = extractelement <2 x float> %147, i64 1, !dbg !35
  %150 = extractelement <2 x float> %147, i64 0, !dbg !35
  %151 = extractelement <2 x float> %148, i64 1, !dbg !35
  %152 = extractelement <2 x float> %148, i64 0, !dbg !35
  %153 = fsub float %150, %92, !dbg !43
  %154 = fsub float %149, %93, !dbg !43
  %155 = fsub float %152, %94, !dbg !43
  %156 = fsub float %151, %95, !dbg !43
  %157 = fadd float %84, 1.000000e+00, !dbg !44
  %158 = fadd float %85, 1.000000e+00, !dbg !44
  %159 = fadd float %86, 1.000000e+00, !dbg !44
  %160 = fadd float %87, 1.000000e+00, !dbg !44
  %161 = tail call float @llvm.nvvm.div.full(float %153, float %157), !dbg !45
  %162 = tail call float @llvm.nvvm.div.full(float %154, float %158), !dbg !45
  %163 = tail call float @llvm.nvvm.div.full(float %155, float %159), !dbg !45
  %164 = tail call float @llvm.nvvm.div.full(float %156, float %160), !dbg !45
  %165 = fadd float %92, %161, !dbg !46
  %166 = fadd float %93, %162, !dbg !46
  %167 = fadd float %94, %163, !dbg !46
  %168 = fadd float %95, %164, !dbg !46
  %169 = fsub float %150, %165, !dbg !47
  %170 = fsub float %149, %166, !dbg !47
  %171 = fsub float %152, %167, !dbg !47
  %172 = fsub float %151, %168, !dbg !47
  %173 = fmul float %153, %169, !dbg !48
  %174 = fmul float %154, %170, !dbg !48
  %175 = fmul float %155, %171, !dbg !48
  %176 = fmul float %156, %172, !dbg !48
  %177 = fadd float %88, %173, !dbg !49
  %178 = fadd float %89, %174, !dbg !49
  %179 = fadd float %90, %175, !dbg !49
  %180 = fadd float %91, %176, !dbg !49
  %181 = select i1 %10, float %165, float %92, !dbg !39
  %182 = select i1 %10, float %166, float %93, !dbg !39
  %183 = select i1 %10, float %167, float %94, !dbg !39
  %184 = select i1 %10, float %168, float %95, !dbg !39
  %185 = select i1 %10, float %177, float %88, !dbg !50
  %186 = select i1 %10, float %178, float %89, !dbg !50
  %187 = select i1 %10, float %179, float %90, !dbg !50
  %188 = select i1 %10, float %180, float %91, !dbg !50
  %189 = select i1 %10, float %157, float %84, !dbg !40
  %190 = select i1 %10, float %158, float %85, !dbg !40
  %191 = select i1 %10, float %159, float %86, !dbg !40
  %192 = select i1 %10, float %160, float %87, !dbg !40
  %193 = fptrunc <2 x float> %147 to <2 x bfloat>, !dbg !41
  %194 = fptrunc <2 x float> %148 to <2 x bfloat>, !dbg !41
  %195 = bitcast <2 x bfloat> %193 to i32, !dbg !41
  %196 = bitcast <2 x bfloat> %194 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %195, i32 %196, ptr addrspace(1) %119, i1 %10) #5, !dbg !41
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !13
  %197 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !13
  br i1 %197, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !13, !llvm.loop !51

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %198 = fadd float %185, %186, !dbg !11
  %199 = lshr i32 %11, 5, !dbg !11
  %200 = fsub float %182, %181, !dbg !53
  %201 = fadd float %189, %190, !dbg !56
  %202 = fcmp oeq float %201, 0.000000e+00, !dbg !57
  %203 = tail call float @llvm.nvvm.div.full(float %190, float %201), !dbg !58
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !59
  %205 = fmul float %200, %204, !dbg !60
  %206 = fadd float %181, %205, !dbg !61
  %207 = fmul float %200, %200, !dbg !62
  %208 = fmul float %207, %189, !dbg !63
  %209 = fmul float %208, %204, !dbg !64
  %210 = fadd float %198, %209, !dbg !65
  %211 = fsub float %183, %206, !dbg !53
  %212 = fadd float %191, %201, !dbg !56
  %213 = fcmp oeq float %212, 0.000000e+00, !dbg !57
  %214 = tail call float @llvm.nvvm.div.full(float %191, float %212), !dbg !58
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !59
  %216 = fmul float %215, %211, !dbg !60
  %217 = fadd float %206, %216, !dbg !61
  %218 = fadd float %187, %210, !dbg !66
  %219 = fmul float %211, %211, !dbg !62
  %220 = fmul float %201, %219, !dbg !63
  %221 = fmul float %215, %220, !dbg !64
  %222 = fadd float %218, %221, !dbg !65
  %223 = fsub float %184, %217, !dbg !53
  %224 = fadd float %192, %212, !dbg !56
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !57
  %226 = tail call float @llvm.nvvm.div.full(float %192, float %224), !dbg !58
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !59
  %228 = fmul float %227, %223, !dbg !60
  %229 = fadd float %217, %228, !dbg !61
  %230 = fadd float %188, %222, !dbg !66
  %231 = fmul float %223, %223, !dbg !62
  %232 = fmul float %212, %231, !dbg !63
  %233 = fmul float %227, %232, !dbg !64
  %234 = fadd float %230, %233, !dbg !65
  %235 = bitcast float %229 to i32, !dbg !67
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 16, i32 31), !dbg !67
  %237 = bitcast i32 %236 to float, !dbg !67
  %238 = bitcast float %234 to i32, !dbg !67
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 16, i32 31), !dbg !67
  %240 = bitcast i32 %239 to float, !dbg !67
  %241 = bitcast float %224 to i32, !dbg !67
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 16, i32 31), !dbg !67
  %243 = bitcast i32 %242 to float, !dbg !67
  %244 = fsub float %237, %229, !dbg !53
  %245 = fadd float %224, %243, !dbg !56
  %246 = fcmp oeq float %245, 0.000000e+00, !dbg !57
  %247 = tail call float @llvm.nvvm.div.full(float %243, float %245), !dbg !58
  %248 = select i1 %246, float 0.000000e+00, float %247, !dbg !59
  %249 = fmul float %248, %244, !dbg !60
  %250 = fadd float %229, %249, !dbg !61
  %251 = fadd float %234, %240, !dbg !66
  %252 = fmul float %244, %244, !dbg !62
  %253 = fmul float %224, %252, !dbg !63
  %254 = fmul float %248, %253, !dbg !64
  %255 = fadd float %251, %254, !dbg !65
  %256 = bitcast float %250 to i32, !dbg !67
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 8, i32 31), !dbg !67
  %258 = bitcast i32 %257 to float, !dbg !67
  %259 = bitcast float %255 to i32, !dbg !67
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 8, i32 31), !dbg !67
  %261 = bitcast i32 %260 to float, !dbg !67
  %262 = bitcast float %245 to i32, !dbg !67
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 8, i32 31), !dbg !67
  %264 = bitcast i32 %263 to float, !dbg !67
  %265 = fsub float %258, %250, !dbg !53
  %266 = fadd float %245, %264, !dbg !56
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !57
  %268 = tail call float @llvm.nvvm.div.full(float %264, float %266), !dbg !58
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !59
  %270 = fmul float %265, %269, !dbg !60
  %271 = fadd float %250, %270, !dbg !61
  %272 = fadd float %255, %261, !dbg !66
  %273 = fmul float %265, %265, !dbg !62
  %274 = fmul float %245, %273, !dbg !63
  %275 = fmul float %269, %274, !dbg !64
  %276 = fadd float %272, %275, !dbg !65
  %277 = bitcast float %271 to i32, !dbg !67
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 4, i32 31), !dbg !67
  %279 = bitcast i32 %278 to float, !dbg !67
  %280 = bitcast float %276 to i32, !dbg !67
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 4, i32 31), !dbg !67
  %282 = bitcast i32 %281 to float, !dbg !67
  %283 = bitcast float %266 to i32, !dbg !67
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 4, i32 31), !dbg !67
  %285 = bitcast i32 %284 to float, !dbg !67
  %286 = fsub float %279, %271, !dbg !53
  %287 = fadd float %266, %285, !dbg !56
  %288 = fcmp oeq float %287, 0.000000e+00, !dbg !57
  %289 = tail call float @llvm.nvvm.div.full(float %285, float %287), !dbg !58
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !59
  %291 = fmul float %286, %290, !dbg !60
  %292 = fadd float %271, %291, !dbg !61
  %293 = fadd float %276, %282, !dbg !66
  %294 = fmul float %286, %286, !dbg !62
  %295 = fmul float %266, %294, !dbg !63
  %296 = fmul float %290, %295, !dbg !64
  %297 = fadd float %293, %296, !dbg !65
  %298 = bitcast float %292 to i32, !dbg !67
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 2, i32 31), !dbg !67
  %300 = bitcast i32 %299 to float, !dbg !67
  %301 = bitcast float %297 to i32, !dbg !67
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 2, i32 31), !dbg !67
  %303 = bitcast i32 %302 to float, !dbg !67
  %304 = bitcast float %287 to i32, !dbg !67
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 2, i32 31), !dbg !67
  %306 = bitcast i32 %305 to float, !dbg !67
  %307 = fsub float %300, %292, !dbg !53
  %308 = fadd float %287, %306, !dbg !56
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !57
  %310 = tail call float @llvm.nvvm.div.full(float %306, float %308), !dbg !58
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !59
  %312 = fmul float %307, %311, !dbg !60
  %313 = fadd float %292, %312, !dbg !61
  %314 = fadd float %297, %303, !dbg !66
  %315 = fmul float %307, %307, !dbg !62
  %316 = fmul float %287, %315, !dbg !63
  %317 = fmul float %311, %316, !dbg !64
  %318 = fadd float %314, %317, !dbg !65
  %319 = bitcast float %313 to i32, !dbg !67
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 1, i32 31), !dbg !67
  %321 = bitcast i32 %320 to float, !dbg !67
  %322 = bitcast float %318 to i32, !dbg !67
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 1, i32 31), !dbg !67
  %324 = bitcast i32 %323 to float, !dbg !67
  %325 = bitcast float %308 to i32, !dbg !67
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 1, i32 31), !dbg !67
  %327 = bitcast i32 %326 to float, !dbg !67
  %328 = fsub float %321, %313, !dbg !53
  %329 = fadd float %308, %327, !dbg !56
  %330 = fcmp oeq float %329, 0.000000e+00, !dbg !57
  %331 = tail call float @llvm.nvvm.div.full(float %327, float %329), !dbg !58
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !59
  %333 = fmul float %328, %332, !dbg !60
  %334 = fadd float %313, %333, !dbg !61
  %335 = fadd float %318, %324, !dbg !66
  %336 = fmul float %328, %328, !dbg !62
  %337 = fmul float %308, %336, !dbg !63
  %338 = fmul float %332, %337, !dbg !64
  %339 = fadd float %335, %338, !dbg !65
  %340 = and i32 %199, 7, !dbg !67
  %341 = icmp eq i32 %12, 0, !dbg !67
  %342 = getelementptr float, ptr addrspace(3) @global_smem, i32 %340, !dbg !67
  %343 = bitcast float %334 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %343, i1 %341) #5, !dbg !67
  %344 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %340, !dbg !67
  %345 = bitcast float %339 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 %341) #5, !dbg !67
  %346 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %340, !dbg !67
  %347 = bitcast float %329 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %347, i1 %341) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %348 = icmp slt i32 %11, 8, !dbg !67
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !67
  %350 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %349, i1 %348) #5, !dbg !67
  %351 = bitcast i32 %350 to float, !dbg !67
  %352 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %11, !dbg !67
  %353 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %352, i1 %348) #5, !dbg !67
  %354 = bitcast i32 %353 to float, !dbg !67
  %355 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %11, !dbg !67
  %356 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %355, i1 %348) #5, !dbg !67
  %357 = bitcast i32 %356 to float, !dbg !67
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 4, i32 31), !dbg !67
  %359 = bitcast i32 %358 to float, !dbg !67
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 4, i32 31), !dbg !67
  %361 = bitcast i32 %360 to float, !dbg !67
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 4, i32 31), !dbg !67
  %363 = bitcast i32 %362 to float, !dbg !67
  %364 = fsub float %359, %351, !dbg !53
  %365 = fadd float %357, %363, !dbg !56
  %366 = fcmp oeq float %365, 0.000000e+00, !dbg !57
  %367 = tail call float @llvm.nvvm.div.full(float %363, float %365), !dbg !58
  %368 = select i1 %366, float 0.000000e+00, float %367, !dbg !59
  %369 = fmul float %364, %368, !dbg !60
  %370 = fadd float %369, %351, !dbg !61
  %371 = fadd float %354, %361, !dbg !66
  %372 = fmul float %364, %364, !dbg !62
  %373 = fmul float %372, %357, !dbg !63
  %374 = fmul float %373, %368, !dbg !64
  %375 = fadd float %371, %374, !dbg !65
  %376 = bitcast float %370 to i32, !dbg !67
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 2, i32 31), !dbg !67
  %378 = bitcast i32 %377 to float, !dbg !67
  %379 = bitcast float %375 to i32, !dbg !67
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 2, i32 31), !dbg !67
  %381 = bitcast i32 %380 to float, !dbg !67
  %382 = bitcast float %365 to i32, !dbg !67
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 2, i32 31), !dbg !67
  %384 = bitcast i32 %383 to float, !dbg !67
  %385 = fsub float %378, %370, !dbg !53
  %386 = fadd float %365, %384, !dbg !56
  %387 = fcmp oeq float %386, 0.000000e+00, !dbg !57
  %388 = tail call float @llvm.nvvm.div.full(float %384, float %386), !dbg !58
  %389 = select i1 %387, float 0.000000e+00, float %388, !dbg !59
  %390 = fmul float %385, %389, !dbg !60
  %391 = fadd float %370, %390, !dbg !61
  %392 = fadd float %375, %381, !dbg !66
  %393 = fmul float %385, %385, !dbg !62
  %394 = fmul float %365, %393, !dbg !63
  %395 = fmul float %389, %394, !dbg !64
  %396 = fadd float %392, %395, !dbg !65
  %397 = bitcast float %391 to i32, !dbg !67
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %397, i32 1, i32 31), !dbg !67
  %399 = bitcast i32 %398 to float, !dbg !67
  %400 = bitcast float %396 to i32, !dbg !67
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 1, i32 31), !dbg !67
  %402 = bitcast i32 %401 to float, !dbg !67
  %403 = bitcast float %386 to i32, !dbg !67
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 1, i32 31), !dbg !67
  %405 = bitcast i32 %404 to float, !dbg !67
  %406 = fsub float %399, %391, !dbg !53
  %407 = fadd float %386, %405, !dbg !56
  %408 = fcmp oeq float %407, 0.000000e+00, !dbg !57
  %409 = tail call float @llvm.nvvm.div.full(float %405, float %407), !dbg !58
  %410 = select i1 %408, float 0.000000e+00, float %409, !dbg !59
  %411 = fmul float %406, %410, !dbg !60
  %412 = fadd float %391, %411, !dbg !61
  %413 = fadd float %396, %402, !dbg !66
  %414 = fmul float %406, %406, !dbg !62
  %415 = fmul float %386, %414, !dbg !63
  %416 = fmul float %410, %415, !dbg !64
  %417 = fadd float %413, %416, !dbg !65
  %418 = and i32 %11, 7, !dbg !67
  %419 = icmp eq i32 %418, 0, !dbg !67
  %420 = and i1 %348, %419, !dbg !67
  %421 = bitcast float %412 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %421, i1 %420) #5, !dbg !67
  %422 = bitcast float %417 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %422, i1 %420) #5, !dbg !67
  %423 = bitcast float %407 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %423, i1 %420) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %424 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !67
  %425 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !67
  %426 = tail call float @llvm.nvvm.div.full(float %425, float 3.072000e+03), !dbg !68
  %427 = fadd float %426, 0x3EB0C6F7A0000000, !dbg !69
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !70
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !70
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !70
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !70
  %.not.i15 = icmp eq i32 %431, 0, !dbg !70
  br i1 %.not.i15, label %434, label %432, !dbg !70

432:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %433 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %427), !dbg !70
  br label %__nv_rsqrtf.exit17, !dbg !70

434:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %435 = tail call float @llvm.nvvm.rsqrt.approx.f(float %427), !dbg !70
  br label %__nv_rsqrtf.exit17, !dbg !70

__nv_rsqrtf.exit17:                               ; preds = %434, %432
  %.0.i16 = phi float [ %433, %432 ], [ %435, %434 ], !dbg !70
  %436 = insertelement <2 x float> poison, float %424, i64 0, !dbg !71
  %437 = shufflevector <2 x float> %436, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !71
  %438 = insertelement <2 x float> poison, float %.0.i16, i64 0, !dbg !72
  %439 = shufflevector <2 x float> %438, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %440 = or disjoint i32 %15, %14, !dbg !73
  %441 = sext i32 %440 to i64, !dbg !74
  %442 = getelementptr bfloat, ptr addrspace(1) %0, i64 %441, !dbg !74
  %443 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %442, i1 %10) #5, !dbg !75
  %444 = extractvalue { i32, i32 } %443, 0, !dbg !75
  %445 = bitcast i32 %444 to <2 x bfloat>, !dbg !75
  %446 = extractvalue { i32, i32 } %443, 1, !dbg !75
  %447 = bitcast i32 %446 to <2 x bfloat>, !dbg !75
  %448 = or disjoint i64 %16, 12288, !dbg !76
  %449 = getelementptr bfloat, ptr addrspace(1) %2, i64 %448, !dbg !77
  %450 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %449, i1 true) #5, !dbg !78
  %451 = extractvalue { i32, i32 } %450, 0, !dbg !78
  %452 = bitcast i32 %451 to <2 x bfloat>, !dbg !78
  %453 = extractvalue { i32, i32 } %450, 1, !dbg !78
  %454 = bitcast i32 %453 to <2 x bfloat>, !dbg !78
  %455 = getelementptr bfloat, ptr addrspace(1) %3, i64 %448, !dbg !79
  %456 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %455, i1 true) #5, !dbg !80
  %457 = extractvalue { i32, i32 } %456, 0, !dbg !80
  %458 = bitcast i32 %457 to <2 x bfloat>, !dbg !80
  %459 = extractvalue { i32, i32 } %456, 1, !dbg !80
  %460 = bitcast i32 %459 to <2 x bfloat>, !dbg !80
  %461 = or disjoint i64 %16, 9216, !dbg !81
  %462 = getelementptr bfloat, ptr addrspace(1) %2, i64 %461, !dbg !82
  %463 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %462, i1 true) #5, !dbg !83
  %464 = extractvalue { i32, i32 } %463, 0, !dbg !83
  %465 = bitcast i32 %464 to <2 x bfloat>, !dbg !83
  %466 = extractvalue { i32, i32 } %463, 1, !dbg !83
  %467 = bitcast i32 %466 to <2 x bfloat>, !dbg !83
  %468 = getelementptr bfloat, ptr addrspace(1) %3, i64 %461, !dbg !84
  %469 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %468, i1 true) #5, !dbg !85
  %470 = extractvalue { i32, i32 } %469, 0, !dbg !85
  %471 = bitcast i32 %470 to <2 x bfloat>, !dbg !85
  %472 = extractvalue { i32, i32 } %469, 1, !dbg !85
  %473 = bitcast i32 %472 to <2 x bfloat>, !dbg !85
  %474 = getelementptr bfloat, ptr addrspace(1) %5, i64 %441, !dbg !86
  %475 = fpext <2 x bfloat> %445 to <2 x float>, !dbg !87
  %476 = fpext <2 x bfloat> %452 to <2 x float>, !dbg !88
  %477 = fpext <2 x bfloat> %458 to <2 x float>, !dbg !89
  %478 = fpext <2 x bfloat> %465 to <2 x float>, !dbg !90
  %479 = fpext <2 x bfloat> %471 to <2 x float>, !dbg !91
  %480 = fsub <2 x float> %475, %437, !dbg !71
  %481 = fmul <2 x float> %439, %480, !dbg !72
  %482 = fadd <2 x float> %476, %477, !dbg !92
  %483 = fadd <2 x float> %482, splat (float 1.000000e+00), !dbg !93
  %484 = fmul <2 x float> %481, %483, !dbg !94
  %485 = fadd <2 x float> %478, %479, !dbg !95
  %486 = fadd <2 x float> %484, %485, !dbg !96
  %487 = fptrunc <2 x float> %486 to <2 x bfloat>, !dbg !97
  %488 = fpext <2 x bfloat> %447 to <2 x float>, !dbg !87
  %489 = fpext <2 x bfloat> %454 to <2 x float>, !dbg !88
  %490 = fpext <2 x bfloat> %460 to <2 x float>, !dbg !89
  %491 = fpext <2 x bfloat> %467 to <2 x float>, !dbg !90
  %492 = fpext <2 x bfloat> %473 to <2 x float>, !dbg !91
  %493 = fsub <2 x float> %488, %437, !dbg !71
  %494 = fmul <2 x float> %439, %493, !dbg !72
  %495 = fadd <2 x float> %489, %490, !dbg !92
  %496 = fadd <2 x float> %495, splat (float 1.000000e+00), !dbg !93
  %497 = fmul <2 x float> %494, %496, !dbg !94
  %498 = fadd <2 x float> %491, %492, !dbg !95
  %499 = fadd <2 x float> %497, %498, !dbg !96
  %500 = fptrunc <2 x float> %499 to <2 x bfloat>, !dbg !97
  %501 = bitcast <2 x bfloat> %487 to i32, !dbg !97
  %502 = bitcast <2 x bfloat> %500 to i32, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %501, i32 %502, ptr addrspace(1) %474, i1 %10) #5, !dbg !97
  %503 = or disjoint i32 %14, 1024, !dbg !98
  %504 = add i32 %15, %503, !dbg !73
  %505 = sext i32 %504 to i64, !dbg !74
  %506 = getelementptr bfloat, ptr addrspace(1) %0, i64 %505, !dbg !74
  %507 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %506, i1 %10) #5, !dbg !75
  %508 = extractvalue { i32, i32 } %507, 0, !dbg !75
  %509 = bitcast i32 %508 to <2 x bfloat>, !dbg !75
  %510 = extractvalue { i32, i32 } %507, 1, !dbg !75
  %511 = bitcast i32 %510 to <2 x bfloat>, !dbg !75
  %512 = or disjoint i64 %16, 13312, !dbg !76
  %513 = getelementptr bfloat, ptr addrspace(1) %2, i64 %512, !dbg !77
  %514 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %513, i1 true) #5, !dbg !78
  %515 = extractvalue { i32, i32 } %514, 0, !dbg !78
  %516 = bitcast i32 %515 to <2 x bfloat>, !dbg !78
  %517 = extractvalue { i32, i32 } %514, 1, !dbg !78
  %518 = bitcast i32 %517 to <2 x bfloat>, !dbg !78
  %519 = getelementptr bfloat, ptr addrspace(1) %3, i64 %512, !dbg !79
  %520 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %519, i1 true) #5, !dbg !80
  %521 = extractvalue { i32, i32 } %520, 0, !dbg !80
  %522 = bitcast i32 %521 to <2 x bfloat>, !dbg !80
  %523 = extractvalue { i32, i32 } %520, 1, !dbg !80
  %524 = bitcast i32 %523 to <2 x bfloat>, !dbg !80
  %525 = or disjoint i64 %16, 10240, !dbg !81
  %526 = getelementptr bfloat, ptr addrspace(1) %2, i64 %525, !dbg !82
  %527 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %526, i1 true) #5, !dbg !83
  %528 = extractvalue { i32, i32 } %527, 0, !dbg !83
  %529 = bitcast i32 %528 to <2 x bfloat>, !dbg !83
  %530 = extractvalue { i32, i32 } %527, 1, !dbg !83
  %531 = bitcast i32 %530 to <2 x bfloat>, !dbg !83
  %532 = getelementptr bfloat, ptr addrspace(1) %3, i64 %525, !dbg !84
  %533 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %532, i1 true) #5, !dbg !85
  %534 = extractvalue { i32, i32 } %533, 0, !dbg !85
  %535 = bitcast i32 %534 to <2 x bfloat>, !dbg !85
  %536 = extractvalue { i32, i32 } %533, 1, !dbg !85
  %537 = bitcast i32 %536 to <2 x bfloat>, !dbg !85
  %538 = getelementptr bfloat, ptr addrspace(1) %5, i64 %505, !dbg !86
  %539 = fpext <2 x bfloat> %509 to <2 x float>, !dbg !87
  %540 = fpext <2 x bfloat> %516 to <2 x float>, !dbg !88
  %541 = fpext <2 x bfloat> %522 to <2 x float>, !dbg !89
  %542 = fpext <2 x bfloat> %529 to <2 x float>, !dbg !90
  %543 = fpext <2 x bfloat> %535 to <2 x float>, !dbg !91
  %544 = fsub <2 x float> %539, %437, !dbg !71
  %545 = fmul <2 x float> %439, %544, !dbg !72
  %546 = fadd <2 x float> %540, %541, !dbg !92
  %547 = fadd <2 x float> %546, splat (float 1.000000e+00), !dbg !93
  %548 = fmul <2 x float> %545, %547, !dbg !94
  %549 = fadd <2 x float> %542, %543, !dbg !95
  %550 = fadd <2 x float> %548, %549, !dbg !96
  %551 = fptrunc <2 x float> %550 to <2 x bfloat>, !dbg !97
  %552 = fpext <2 x bfloat> %511 to <2 x float>, !dbg !87
  %553 = fpext <2 x bfloat> %518 to <2 x float>, !dbg !88
  %554 = fpext <2 x bfloat> %524 to <2 x float>, !dbg !89
  %555 = fpext <2 x bfloat> %531 to <2 x float>, !dbg !90
  %556 = fpext <2 x bfloat> %537 to <2 x float>, !dbg !91
  %557 = fsub <2 x float> %552, %437, !dbg !71
  %558 = fmul <2 x float> %439, %557, !dbg !72
  %559 = fadd <2 x float> %553, %554, !dbg !92
  %560 = fadd <2 x float> %559, splat (float 1.000000e+00), !dbg !93
  %561 = fmul <2 x float> %558, %560, !dbg !94
  %562 = fadd <2 x float> %555, %556, !dbg !95
  %563 = fadd <2 x float> %561, %562, !dbg !96
  %564 = fptrunc <2 x float> %563 to <2 x bfloat>, !dbg !97
  %565 = bitcast <2 x bfloat> %551 to i32, !dbg !97
  %566 = bitcast <2 x bfloat> %564 to i32, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %565, i32 %566, ptr addrspace(1) %538, i1 %10) #5, !dbg !97
  %567 = or disjoint i32 %14, 2048, !dbg !98
  %568 = add i32 %15, %567, !dbg !73
  %569 = sext i32 %568 to i64, !dbg !74
  %570 = getelementptr bfloat, ptr addrspace(1) %0, i64 %569, !dbg !74
  %571 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %570, i1 %10) #5, !dbg !75
  %572 = extractvalue { i32, i32 } %571, 0, !dbg !75
  %573 = bitcast i32 %572 to <2 x bfloat>, !dbg !75
  %574 = extractvalue { i32, i32 } %571, 1, !dbg !75
  %575 = bitcast i32 %574 to <2 x bfloat>, !dbg !75
  %576 = or disjoint i64 %16, 14336, !dbg !76
  %577 = getelementptr bfloat, ptr addrspace(1) %2, i64 %576, !dbg !77
  %578 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %577, i1 true) #5, !dbg !78
  %579 = extractvalue { i32, i32 } %578, 0, !dbg !78
  %580 = bitcast i32 %579 to <2 x bfloat>, !dbg !78
  %581 = extractvalue { i32, i32 } %578, 1, !dbg !78
  %582 = bitcast i32 %581 to <2 x bfloat>, !dbg !78
  %583 = getelementptr bfloat, ptr addrspace(1) %3, i64 %576, !dbg !79
  %584 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %583, i1 true) #5, !dbg !80
  %585 = extractvalue { i32, i32 } %584, 0, !dbg !80
  %586 = bitcast i32 %585 to <2 x bfloat>, !dbg !80
  %587 = extractvalue { i32, i32 } %584, 1, !dbg !80
  %588 = bitcast i32 %587 to <2 x bfloat>, !dbg !80
  %589 = or disjoint i64 %16, 11264, !dbg !81
  %590 = getelementptr bfloat, ptr addrspace(1) %2, i64 %589, !dbg !82
  %591 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %590, i1 true) #5, !dbg !83
  %592 = extractvalue { i32, i32 } %591, 0, !dbg !83
  %593 = bitcast i32 %592 to <2 x bfloat>, !dbg !83
  %594 = extractvalue { i32, i32 } %591, 1, !dbg !83
  %595 = bitcast i32 %594 to <2 x bfloat>, !dbg !83
  %596 = getelementptr bfloat, ptr addrspace(1) %3, i64 %589, !dbg !84
  %597 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %596, i1 true) #5, !dbg !85
  %598 = extractvalue { i32, i32 } %597, 0, !dbg !85
  %599 = bitcast i32 %598 to <2 x bfloat>, !dbg !85
  %600 = extractvalue { i32, i32 } %597, 1, !dbg !85
  %601 = bitcast i32 %600 to <2 x bfloat>, !dbg !85
  %602 = getelementptr bfloat, ptr addrspace(1) %5, i64 %569, !dbg !86
  %603 = fpext <2 x bfloat> %573 to <2 x float>, !dbg !87
  %604 = fpext <2 x bfloat> %580 to <2 x float>, !dbg !88
  %605 = fpext <2 x bfloat> %586 to <2 x float>, !dbg !89
  %606 = fpext <2 x bfloat> %593 to <2 x float>, !dbg !90
  %607 = fpext <2 x bfloat> %599 to <2 x float>, !dbg !91
  %608 = fsub <2 x float> %603, %437, !dbg !71
  %609 = fmul <2 x float> %439, %608, !dbg !72
  %610 = fadd <2 x float> %604, %605, !dbg !92
  %611 = fadd <2 x float> %610, splat (float 1.000000e+00), !dbg !93
  %612 = fmul <2 x float> %609, %611, !dbg !94
  %613 = fadd <2 x float> %606, %607, !dbg !95
  %614 = fadd <2 x float> %612, %613, !dbg !96
  %615 = fptrunc <2 x float> %614 to <2 x bfloat>, !dbg !97
  %616 = fpext <2 x bfloat> %575 to <2 x float>, !dbg !87
  %617 = fpext <2 x bfloat> %582 to <2 x float>, !dbg !88
  %618 = fpext <2 x bfloat> %588 to <2 x float>, !dbg !89
  %619 = fpext <2 x bfloat> %595 to <2 x float>, !dbg !90
  %620 = fpext <2 x bfloat> %601 to <2 x float>, !dbg !91
  %621 = fsub <2 x float> %616, %437, !dbg !71
  %622 = fmul <2 x float> %439, %621, !dbg !72
  %623 = fadd <2 x float> %617, %618, !dbg !92
  %624 = fadd <2 x float> %623, splat (float 1.000000e+00), !dbg !93
  %625 = fmul <2 x float> %622, %624, !dbg !94
  %626 = fadd <2 x float> %619, %620, !dbg !95
  %627 = fadd <2 x float> %625, %626, !dbg !96
  %628 = fptrunc <2 x float> %627 to <2 x bfloat>, !dbg !97
  %629 = bitcast <2 x bfloat> %615 to i32, !dbg !97
  %630 = bitcast <2 x bfloat> %628 to i32, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %629, i32 %630, ptr addrspace(1) %602, i1 %10) #5, !dbg !97
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3mgiydlquqgahxuxqrkeu3hg6gxhrbbjx4qxncdiesulz4vxqnh.py", directory: "/tmp/torchinductor_root/3m")
!4 = !{ptr @triton_red_fused_add_mul_native_layer_norm_12, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_add_mul_native_layer_norm_12", linkageName: "triton_red_fused_add_mul_native_layer_norm_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 32, column: 40, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 51, scope: !6)
!17 = !DILocation(line: 39, column: 41, scope: !6)
!18 = !DILocation(line: 39, column: 34, scope: !6)
!19 = !DILocation(line: 39, column: 48, scope: !6)
!20 = !DILocation(line: 40, column: 34, scope: !6)
!21 = !DILocation(line: 40, column: 48, scope: !6)
!22 = !DILocation(line: 41, column: 38, scope: !6)
!23 = !DILocation(line: 41, column: 55, scope: !6)
!24 = !DILocation(line: 42, column: 34, scope: !6)
!25 = !DILocation(line: 42, column: 41, scope: !6)
!26 = !DILocation(line: 38, column: 113, scope: !6)
!27 = !DILocation(line: 39, column: 101, scope: !6)
!28 = !DILocation(line: 40, column: 101, scope: !6)
!29 = !DILocation(line: 41, column: 117, scope: !6)
!30 = !DILocation(line: 42, column: 94, scope: !6)
!31 = !DILocation(line: 43, column: 22, scope: !6)
!32 = !DILocation(line: 44, column: 22, scope: !6)
!33 = !DILocation(line: 45, column: 22, scope: !6)
!34 = !DILocation(line: 46, column: 22, scope: !6)
!35 = !DILocation(line: 203, column: 7, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !6, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 50, column: 55, scope: !6)
!39 = !DILocation(line: 52, column: 64, scope: !6)
!40 = !DILocation(line: 54, column: 68, scope: !6)
!41 = !DILocation(line: 55, column: 55, scope: !6)
!42 = !DILocation(line: 33, column: 31, scope: !6)
!43 = !DILocation(line: 208, column: 24, scope: !36, inlinedAt: !38)
!44 = !DILocation(line: 209, column: 30, scope: !36, inlinedAt: !38)
!45 = !DILocation(line: 210, column: 34, scope: !36, inlinedAt: !38)
!46 = !DILocation(line: 210, column: 26, scope: !36, inlinedAt: !38)
!47 = !DILocation(line: 211, column: 39, scope: !36, inlinedAt: !38)
!48 = !DILocation(line: 211, column: 31, scope: !36, inlinedAt: !38)
!49 = !DILocation(line: 211, column: 22, scope: !36, inlinedAt: !38)
!50 = !DILocation(line: 53, column: 60, scope: !6)
!51 = distinct !{!51, !52}
!52 = !{!"llvm.loop.peeled.count", i32 1}
!53 = !DILocation(line: 217, column: 21, scope: !54, inlinedAt: !55)
!54 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!55 = !DILocation(line: 56, column: 85, scope: !6)
!56 = !DILocation(line: 218, column: 28, scope: !54, inlinedAt: !55)
!57 = !DILocation(line: 219, column: 39, scope: !54, inlinedAt: !55)
!58 = !DILocation(line: 219, column: 60, scope: !54, inlinedAt: !55)
!59 = !DILocation(line: 219, column: 49, scope: !54, inlinedAt: !55)
!60 = !DILocation(line: 221, column: 25, scope: !54, inlinedAt: !55)
!61 = !DILocation(line: 221, column: 17, scope: !54, inlinedAt: !55)
!62 = !DILocation(line: 222, column: 30, scope: !54, inlinedAt: !55)
!63 = !DILocation(line: 222, column: 38, scope: !54, inlinedAt: !55)
!64 = !DILocation(line: 222, column: 49, scope: !54, inlinedAt: !55)
!65 = !DILocation(line: 222, column: 22, scope: !54, inlinedAt: !55)
!66 = !DILocation(line: 222, column: 15, scope: !54, inlinedAt: !55)
!67 = !DILocation(line: 229, column: 46, scope: !36, inlinedAt: !55)
!68 = !DILocation(line: 74, column: 25, scope: !6)
!69 = !DILocation(line: 76, column: 24, scope: !6)
!70 = !DILocation(line: 77, column: 32, scope: !6)
!71 = !DILocation(line: 72, column: 24, scope: !6)
!72 = !DILocation(line: 78, column: 24, scope: !6)
!73 = !DILocation(line: 66, column: 46, scope: !6)
!74 = !DILocation(line: 66, column: 39, scope: !6)
!75 = !DILocation(line: 66, column: 56, scope: !6)
!76 = !DILocation(line: 67, column: 43, scope: !6)
!77 = !DILocation(line: 67, column: 35, scope: !6)
!78 = !DILocation(line: 67, column: 50, scope: !6)
!79 = !DILocation(line: 68, column: 35, scope: !6)
!80 = !DILocation(line: 68, column: 50, scope: !6)
!81 = !DILocation(line: 69, column: 42, scope: !6)
!82 = !DILocation(line: 69, column: 35, scope: !6)
!83 = !DILocation(line: 69, column: 49, scope: !6)
!84 = !DILocation(line: 70, column: 35, scope: !6)
!85 = !DILocation(line: 70, column: 49, scope: !6)
!86 = !DILocation(line: 86, column: 29, scope: !6)
!87 = !DILocation(line: 66, column: 118, scope: !6)
!88 = !DILocation(line: 67, column: 103, scope: !6)
!89 = !DILocation(line: 68, column: 103, scope: !6)
!90 = !DILocation(line: 69, column: 102, scope: !6)
!91 = !DILocation(line: 70, column: 102, scope: !6)
!92 = !DILocation(line: 80, column: 24, scope: !6)
!93 = !DILocation(line: 82, column: 24, scope: !6)
!94 = !DILocation(line: 83, column: 24, scope: !6)
!95 = !DILocation(line: 84, column: 24, scope: !6)
!96 = !DILocation(line: 85, column: 24, scope: !6)
!97 = !DILocation(line: 86, column: 53, scope: !6)
!98 = !DILocation(line: 61, column: 31, scope: !6)
!99 = !DILocation(line: 60, column: 4, scope: !6)
