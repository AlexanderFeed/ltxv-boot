; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.next:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 512, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = and i32 %18, 511, !dbg !11
  %21 = sext i32 %16 to i64, !dbg !12
  %22 = getelementptr bfloat, ptr addrspace(1) %4, i64 %21, !dbg !12
  %23 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %22, i1 %17) #5, !dbg !13
  %24 = bitcast i16 %23 to bfloat, !dbg !13
  %25 = getelementptr bfloat, ptr addrspace(1) %5, i64 %21, !dbg !14
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %17) #5, !dbg !15
  %27 = bitcast i16 %26 to bfloat, !dbg !15
  %28 = mul i32 %16, 3072, !dbg !16
  %.inv = fcmp oge bfloat %24, 0xR0000, !dbg !17
  %29 = select i1 %.inv, bfloat 0xR0000, bfloat %24, !dbg !17
  %30 = fpext bfloat %29 to float, !dbg !17
  %31 = fsub float 0.000000e+00, %30, !dbg !21
  %.inv3 = fcmp ole bfloat %27, 0xR0000, !dbg !22
  %32 = select i1 %.inv3, bfloat 0xR0000, bfloat %27, !dbg !22
  %33 = fpext bfloat %32 to float, !dbg !22
  %34 = fcmp ogt float %31, %33, !dbg !24
  %35 = fcmp uno float %31, 0.000000e+00, !dbg !26
  %36 = or i1 %34, %35, !dbg !27
  %37 = select i1 %36, float %31, float %33, !dbg !28
  %38 = fmul float %37, 0x3F80204080000000, !dbg !29
  %39 = fcmp ogt float %38, 0x3EE4F8B580000000, !dbg !30
  %40 = fcmp uno float %38, 0.000000e+00, !dbg !32
  %41 = or i1 %39, %40, !dbg !33
  %42 = select i1 %41, float %38, float 0x3EE4F8B580000000, !dbg !34
  %43 = zext nneg i32 %20 to i64, !dbg !35
  %44 = or disjoint i32 %20, %28, !dbg !36
  %45 = sext i32 %44 to i64, !dbg !37
  %46 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !37
  %47 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %46, i1 %17) #5, !dbg !38
  %48 = or disjoint i64 %43, 6144, !dbg !39
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !40
  %50 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %49, i1 true) #5, !dbg !41
  %51 = getelementptr bfloat, ptr addrspace(1) %2, i64 %48, !dbg !42
  %52 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %51, i1 true) #5, !dbg !43
  %53 = getelementptr i32, ptr addrspace(1) %3, i64 %45, !dbg !44
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %17) #5, !dbg !45
  %55 = getelementptr bfloat, ptr addrspace(1) %6, i64 %43, !dbg !46
  %56 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %55, i1 true) #5, !dbg !47
  %57 = getelementptr bfloat, ptr addrspace(1) %7, i64 %43, !dbg !48
  %58 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %57, i1 true) #5, !dbg !49
  %59 = sitofp i32 %54 to float, !dbg !50
  %60 = fmul float %42, %59, !dbg !51
  %61 = bitcast i16 %56 to bfloat, !dbg !47
  %62 = fpext bfloat %61 to float, !dbg !52
  %63 = fmul float %60, %62, !dbg !53
  %64 = insertelement <2 x i16> poison, i16 %52, i64 0, !dbg !43
  %65 = insertelement <2 x i16> %64, i16 %58, i64 1, !dbg !43
  %66 = bitcast <2 x i16> %65 to <2 x bfloat>, !dbg !43
  %67 = fpext <2 x bfloat> %66 to <2 x float>, !dbg !54
  %68 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !55
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !55
  %70 = insertelement <2 x float> %69, float %63, i64 1, !dbg !55
  %71 = fadd <2 x float> %70, %67, !dbg !55
  %shift = shufflevector <2 x float> %71, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %72 = fmul <2 x float> %71, %shift, !dbg !56
  %73 = extractelement <2 x float> %72, i64 0, !dbg !56
  %74 = bitcast i16 %47 to bfloat, !dbg !38
  %75 = fpext bfloat %74 to float, !dbg !57
  %76 = fadd float %73, %75, !dbg !58
  %77 = getelementptr bfloat, ptr addrspace(1) %8, i64 %45, !dbg !59
  %78 = fptrunc float %76 to bfloat, !dbg !60
  %79 = bitcast bfloat %78 to i16, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %79, ptr addrspace(1) %77, i1 %17) #5, !dbg !60
  %80 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !61
  %81 = select i1 %17, float %76, float 0.000000e+00, !dbg !62
  br label %82, !dbg !35

82:                                               ; preds = %.peel.next, %82
  %indvars.iv = phi i64 [ 512, %.peel.next ], [ %indvars.iv.next, %82 ]
  %83 = phi float [ %80, %.peel.next ], [ %130, %82 ]
  %84 = phi float [ 0.000000e+00, %.peel.next ], [ %129, %82 ]
  %85 = phi float [ %81, %.peel.next ], [ %128, %82 ]
  %86 = or disjoint i64 %indvars.iv, %43, !dbg !63
  %87 = trunc nuw nsw i64 %86 to i32, !dbg !36
  %88 = add i32 %28, %87, !dbg !36
  %89 = sext i32 %88 to i64, !dbg !37
  %90 = getelementptr bfloat, ptr addrspace(1) %0, i64 %89, !dbg !37
  %91 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %90, i1 %17) #5, !dbg !38
  %92 = bitcast i16 %91 to bfloat, !dbg !38
  %93 = fpext bfloat %92 to float, !dbg !57
  %94 = add nuw nsw i64 %86, 6144, !dbg !39
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !40
  %96 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %95, i1 true) #5, !dbg !41
  %97 = getelementptr bfloat, ptr addrspace(1) %2, i64 %94, !dbg !42
  %98 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %97, i1 true) #5, !dbg !43
  %99 = getelementptr i32, ptr addrspace(1) %3, i64 %89, !dbg !44
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %17) #5, !dbg !45
  %101 = getelementptr bfloat, ptr addrspace(1) %6, i64 %86, !dbg !46
  %102 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %101, i1 true) #5, !dbg !47
  %103 = bitcast i16 %102 to bfloat, !dbg !47
  %104 = fpext bfloat %103 to float, !dbg !52
  %105 = getelementptr bfloat, ptr addrspace(1) %7, i64 %86, !dbg !48
  %106 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %105, i1 true) #5, !dbg !49
  %107 = sitofp i32 %100 to float, !dbg !50
  %108 = fmul float %42, %107, !dbg !51
  %109 = fmul float %108, %104, !dbg !53
  %110 = insertelement <2 x i16> poison, i16 %98, i64 0, !dbg !43
  %111 = insertelement <2 x i16> %110, i16 %106, i64 1, !dbg !43
  %112 = bitcast <2 x i16> %111 to <2 x bfloat>, !dbg !43
  %113 = fpext <2 x bfloat> %112 to <2 x float>, !dbg !54
  %114 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !55
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !55
  %116 = insertelement <2 x float> %115, float %109, i64 1, !dbg !55
  %117 = fadd <2 x float> %116, %113, !dbg !55
  %shift29 = shufflevector <2 x float> %117, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %118 = fmul <2 x float> %117, %shift29, !dbg !56
  %119 = extractelement <2 x float> %118, i64 0, !dbg !56
  %120 = fadd float %119, %93, !dbg !58
  %121 = fsub float %120, %85, !dbg !64
  %122 = fadd float %83, 1.000000e+00, !dbg !66
  %123 = tail call float @llvm.nvvm.div.full(float %121, float %122), !dbg !67
  %124 = fadd float %85, %123, !dbg !68
  %125 = fsub float %120, %124, !dbg !69
  %126 = fmul float %121, %125, !dbg !70
  %127 = fadd float %84, %126, !dbg !71
  %128 = select i1 %17, float %124, float %85, !dbg !62
  %129 = select i1 %17, float %127, float %84, !dbg !72
  %130 = select i1 %17, float %122, float %83, !dbg !61
  %131 = getelementptr bfloat, ptr addrspace(1) %8, i64 %89, !dbg !59
  %132 = fptrunc float %120 to bfloat, !dbg !60
  %133 = bitcast bfloat %132 to i16, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %133, ptr addrspace(1) %131, i1 %17) #5, !dbg !60
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !35
  %134 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !35
  br i1 %134, label %82, label %.loopexit, !dbg !35, !llvm.loop !73

.loopexit:                                        ; preds = %82
  %135 = lshr i32 %18, 5, !dbg !11
  %136 = bitcast float %128 to i32, !dbg !75
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 16, i32 31), !dbg !75
  %138 = bitcast i32 %137 to float, !dbg !75
  %139 = bitcast float %129 to i32, !dbg !75
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 16, i32 31), !dbg !75
  %141 = bitcast i32 %140 to float, !dbg !75
  %142 = bitcast float %130 to i32, !dbg !75
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 16, i32 31), !dbg !75
  %144 = bitcast i32 %143 to float, !dbg !75
  %145 = fsub float %138, %128, !dbg !77
  %146 = fadd float %130, %144, !dbg !79
  %147 = fcmp oeq float %146, 0.000000e+00, !dbg !80
  %148 = tail call float @llvm.nvvm.div.full(float %144, float %146), !dbg !81
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !82
  %150 = fmul float %145, %149, !dbg !83
  %151 = fadd float %128, %150, !dbg !84
  %152 = fadd float %129, %141, !dbg !85
  %153 = fmul float %145, %145, !dbg !86
  %154 = fmul float %130, %153, !dbg !87
  %155 = fmul float %154, %149, !dbg !88
  %156 = fadd float %152, %155, !dbg !89
  %157 = bitcast float %151 to i32, !dbg !75
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 8, i32 31), !dbg !75
  %159 = bitcast i32 %158 to float, !dbg !75
  %160 = bitcast float %156 to i32, !dbg !75
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 8, i32 31), !dbg !75
  %162 = bitcast i32 %161 to float, !dbg !75
  %163 = bitcast float %146 to i32, !dbg !75
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 8, i32 31), !dbg !75
  %165 = bitcast i32 %164 to float, !dbg !75
  %166 = fsub float %159, %151, !dbg !77
  %167 = fadd float %146, %165, !dbg !79
  %168 = fcmp oeq float %167, 0.000000e+00, !dbg !80
  %169 = tail call float @llvm.nvvm.div.full(float %165, float %167), !dbg !81
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !82
  %171 = fmul float %166, %170, !dbg !83
  %172 = fadd float %151, %171, !dbg !84
  %173 = fadd float %156, %162, !dbg !85
  %174 = fmul float %166, %166, !dbg !86
  %175 = fmul float %146, %174, !dbg !87
  %176 = fmul float %170, %175, !dbg !88
  %177 = fadd float %173, %176, !dbg !89
  %178 = bitcast float %172 to i32, !dbg !75
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 4, i32 31), !dbg !75
  %180 = bitcast i32 %179 to float, !dbg !75
  %181 = bitcast float %177 to i32, !dbg !75
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 4, i32 31), !dbg !75
  %183 = bitcast i32 %182 to float, !dbg !75
  %184 = bitcast float %167 to i32, !dbg !75
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 4, i32 31), !dbg !75
  %186 = bitcast i32 %185 to float, !dbg !75
  %187 = fsub float %180, %172, !dbg !77
  %188 = fadd float %167, %186, !dbg !79
  %189 = fcmp oeq float %188, 0.000000e+00, !dbg !80
  %190 = tail call float @llvm.nvvm.div.full(float %186, float %188), !dbg !81
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !82
  %192 = fmul float %187, %191, !dbg !83
  %193 = fadd float %172, %192, !dbg !84
  %194 = fadd float %177, %183, !dbg !85
  %195 = fmul float %187, %187, !dbg !86
  %196 = fmul float %167, %195, !dbg !87
  %197 = fmul float %191, %196, !dbg !88
  %198 = fadd float %194, %197, !dbg !89
  %199 = bitcast float %193 to i32, !dbg !75
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 2, i32 31), !dbg !75
  %201 = bitcast i32 %200 to float, !dbg !75
  %202 = bitcast float %198 to i32, !dbg !75
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 2, i32 31), !dbg !75
  %204 = bitcast i32 %203 to float, !dbg !75
  %205 = bitcast float %188 to i32, !dbg !75
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 2, i32 31), !dbg !75
  %207 = bitcast i32 %206 to float, !dbg !75
  %208 = fsub float %201, %193, !dbg !77
  %209 = fadd float %188, %207, !dbg !79
  %210 = fcmp oeq float %209, 0.000000e+00, !dbg !80
  %211 = tail call float @llvm.nvvm.div.full(float %207, float %209), !dbg !81
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !82
  %213 = fmul float %208, %212, !dbg !83
  %214 = fadd float %193, %213, !dbg !84
  %215 = fadd float %198, %204, !dbg !85
  %216 = fmul float %208, %208, !dbg !86
  %217 = fmul float %188, %216, !dbg !87
  %218 = fmul float %212, %217, !dbg !88
  %219 = fadd float %215, %218, !dbg !89
  %220 = bitcast float %214 to i32, !dbg !75
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 1, i32 31), !dbg !75
  %222 = bitcast i32 %221 to float, !dbg !75
  %223 = bitcast float %219 to i32, !dbg !75
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 1, i32 31), !dbg !75
  %225 = bitcast i32 %224 to float, !dbg !75
  %226 = bitcast float %209 to i32, !dbg !75
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 1, i32 31), !dbg !75
  %228 = bitcast i32 %227 to float, !dbg !75
  %229 = fsub float %222, %214, !dbg !77
  %230 = fadd float %209, %228, !dbg !79
  %231 = fcmp oeq float %230, 0.000000e+00, !dbg !80
  %232 = tail call float @llvm.nvvm.div.full(float %228, float %230), !dbg !81
  %233 = select i1 %231, float 0.000000e+00, float %232, !dbg !82
  %234 = fmul float %229, %233, !dbg !83
  %235 = fadd float %214, %234, !dbg !84
  %236 = fadd float %219, %225, !dbg !85
  %237 = fmul float %229, %229, !dbg !86
  %238 = fmul float %209, %237, !dbg !87
  %239 = fmul float %233, %238, !dbg !88
  %240 = fadd float %236, %239, !dbg !89
  %241 = and i32 %135, 15, !dbg !75
  %242 = icmp eq i32 %19, 0, !dbg !75
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %241, !dbg !75
  %244 = bitcast float %235 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 %242) #5, !dbg !75
  %245 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %241, !dbg !75
  %246 = bitcast float %240 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 %242) #5, !dbg !75
  %247 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %241, !dbg !75
  %248 = bitcast float %230 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 %242) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %249 = icmp slt i32 %18, 16, !dbg !75
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !75
  %251 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %250, i1 %249) #5, !dbg !75
  %252 = bitcast i32 %251 to float, !dbg !75
  %253 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !75
  %254 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %253, i1 %249) #5, !dbg !75
  %255 = bitcast i32 %254 to float, !dbg !75
  %256 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !75
  %257 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %256, i1 %249) #5, !dbg !75
  %258 = bitcast i32 %257 to float, !dbg !75
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 8, i32 31), !dbg !75
  %260 = bitcast i32 %259 to float, !dbg !75
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 8, i32 31), !dbg !75
  %262 = bitcast i32 %261 to float, !dbg !75
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 8, i32 31), !dbg !75
  %264 = bitcast i32 %263 to float, !dbg !75
  %265 = fsub float %260, %252, !dbg !77
  %266 = fadd float %258, %264, !dbg !79
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !80
  %268 = tail call float @llvm.nvvm.div.full(float %264, float %266), !dbg !81
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !82
  %270 = fmul float %265, %269, !dbg !83
  %271 = fadd float %270, %252, !dbg !84
  %272 = fadd float %255, %262, !dbg !85
  %273 = fmul float %265, %265, !dbg !86
  %274 = fmul float %273, %258, !dbg !87
  %275 = fmul float %274, %269, !dbg !88
  %276 = fadd float %272, %275, !dbg !89
  %277 = bitcast float %271 to i32, !dbg !75
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 4, i32 31), !dbg !75
  %279 = bitcast i32 %278 to float, !dbg !75
  %280 = bitcast float %276 to i32, !dbg !75
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 4, i32 31), !dbg !75
  %282 = bitcast i32 %281 to float, !dbg !75
  %283 = bitcast float %266 to i32, !dbg !75
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 4, i32 31), !dbg !75
  %285 = bitcast i32 %284 to float, !dbg !75
  %286 = fsub float %279, %271, !dbg !77
  %287 = fadd float %266, %285, !dbg !79
  %288 = fcmp oeq float %287, 0.000000e+00, !dbg !80
  %289 = tail call float @llvm.nvvm.div.full(float %285, float %287), !dbg !81
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !82
  %291 = fmul float %286, %290, !dbg !83
  %292 = fadd float %271, %291, !dbg !84
  %293 = fadd float %276, %282, !dbg !85
  %294 = fmul float %286, %286, !dbg !86
  %295 = fmul float %266, %294, !dbg !87
  %296 = fmul float %290, %295, !dbg !88
  %297 = fadd float %293, %296, !dbg !89
  %298 = bitcast float %292 to i32, !dbg !75
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 2, i32 31), !dbg !75
  %300 = bitcast i32 %299 to float, !dbg !75
  %301 = bitcast float %297 to i32, !dbg !75
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 2, i32 31), !dbg !75
  %303 = bitcast i32 %302 to float, !dbg !75
  %304 = bitcast float %287 to i32, !dbg !75
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 2, i32 31), !dbg !75
  %306 = bitcast i32 %305 to float, !dbg !75
  %307 = fsub float %300, %292, !dbg !77
  %308 = fadd float %287, %306, !dbg !79
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !80
  %310 = tail call float @llvm.nvvm.div.full(float %306, float %308), !dbg !81
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !82
  %312 = fmul float %307, %311, !dbg !83
  %313 = fadd float %292, %312, !dbg !84
  %314 = fadd float %297, %303, !dbg !85
  %315 = fmul float %307, %307, !dbg !86
  %316 = fmul float %287, %315, !dbg !87
  %317 = fmul float %311, %316, !dbg !88
  %318 = fadd float %314, %317, !dbg !89
  %319 = bitcast float %313 to i32, !dbg !75
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 1, i32 31), !dbg !75
  %321 = bitcast i32 %320 to float, !dbg !75
  %322 = bitcast float %318 to i32, !dbg !75
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 1, i32 31), !dbg !75
  %324 = bitcast i32 %323 to float, !dbg !75
  %325 = bitcast float %308 to i32, !dbg !75
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 1, i32 31), !dbg !75
  %327 = bitcast i32 %326 to float, !dbg !75
  %328 = fsub float %321, %313, !dbg !77
  %329 = fadd float %308, %327, !dbg !79
  %330 = fcmp oeq float %329, 0.000000e+00, !dbg !80
  %331 = tail call float @llvm.nvvm.div.full(float %327, float %329), !dbg !81
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !82
  %333 = fmul float %328, %332, !dbg !83
  %334 = fadd float %313, %333, !dbg !84
  %335 = fadd float %318, %324, !dbg !85
  %336 = fmul float %328, %328, !dbg !86
  %337 = fmul float %308, %336, !dbg !87
  %338 = fmul float %332, %337, !dbg !88
  %339 = fadd float %335, %338, !dbg !89
  %340 = and i32 %18, 15, !dbg !75
  %341 = icmp eq i32 %340, 0, !dbg !75
  %342 = and i1 %249, %341, !dbg !75
  %343 = bitcast float %334 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %343, i1 %342) #5, !dbg !75
  %344 = bitcast float %339 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %344, i1 %342) #5, !dbg !75
  %345 = bitcast float %329 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %345, i1 %342) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %346 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !75
  %347 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !75
  %348 = tail call float @llvm.nvvm.div.full(float %347, float 3.072000e+03), !dbg !90
  %349 = fadd float %348, 0x3EB0C6F7A0000000, !dbg !91
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !92
  %.not.i = icmp eq i32 %350, 0, !dbg !92
  br i1 %.not.i, label %353, label %351, !dbg !92

351:                                              ; preds = %.loopexit
  %352 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %349), !dbg !92
  br label %__nv_rsqrtf.exit, !dbg !92

353:                                              ; preds = %.loopexit
  %354 = tail call float @llvm.nvvm.rsqrt.approx.f(float %349), !dbg !92
  br label %__nv_rsqrtf.exit, !dbg !92

__nv_rsqrtf.exit:                                 ; preds = %351, %353
  %.0.i = phi float [ %352, %351 ], [ %354, %353 ], !dbg !92
  br label %355, !dbg !93

355:                                              ; preds = %__nv_rsqrtf.exit, %355
  %indvars.iv16 = phi i64 [ 0, %__nv_rsqrtf.exit ], [ %indvars.iv.next17, %355 ]
  %356 = phi float [ 0xFFF0000000000000, %__nv_rsqrtf.exit ], [ %398, %355 ]
  %357 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit ], [ %393, %355 ]
  %358 = or disjoint i64 %indvars.iv16, %43, !dbg !94
  %359 = trunc nuw nsw i64 %358 to i32, !dbg !95
  %360 = add i32 %28, %359, !dbg !95
  %361 = sext i32 %360 to i64, !dbg !96
  %362 = getelementptr bfloat, ptr addrspace(1) %8, i64 %361, !dbg !96
  %363 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %362, i1 %17) #5, !dbg !97
  %364 = bitcast i16 %363 to bfloat, !dbg !97
  %365 = fpext bfloat %364 to float, !dbg !98
  %366 = or disjoint i64 %358, 12288, !dbg !99
  %367 = getelementptr float, ptr addrspace(1) %1, i64 %366, !dbg !100
  %368 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %367, i1 true) #5, !dbg !101
  %369 = bitcast i32 %368 to float, !dbg !101
  %370 = getelementptr bfloat, ptr addrspace(1) %2, i64 %366, !dbg !102
  %371 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %370, i1 true) #5, !dbg !103
  %372 = bitcast i16 %371 to bfloat, !dbg !103
  %373 = fpext bfloat %372 to float, !dbg !104
  %374 = add nuw nsw i64 %358, 9216, !dbg !105
  %375 = getelementptr float, ptr addrspace(1) %1, i64 %374, !dbg !106
  %376 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %375, i1 true) #5, !dbg !107
  %377 = bitcast i32 %376 to float, !dbg !107
  %378 = getelementptr bfloat, ptr addrspace(1) %2, i64 %374, !dbg !108
  %379 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %378, i1 true) #5, !dbg !109
  %380 = bitcast i16 %379 to bfloat, !dbg !109
  %381 = fpext bfloat %380 to float, !dbg !110
  %382 = fsub float %365, %346, !dbg !111
  %383 = fmul float %.0.i, %382, !dbg !112
  %384 = fadd float %369, %373, !dbg !113
  %385 = fadd float %384, 1.000000e+00, !dbg !114
  %386 = fmul float %383, %385, !dbg !115
  %387 = fadd float %377, %381, !dbg !116
  %388 = fadd float %386, %387, !dbg !117
  %389 = fcmp olt float %357, %388, !dbg !118
  %390 = fcmp uno float %357, 0.000000e+00, !dbg !120
  %391 = or i1 %390, %389, !dbg !121
  %392 = select i1 %391, float %357, float %388, !dbg !122
  %393 = select i1 %17, float %392, float %357, !dbg !123
  %394 = fcmp ogt float %356, %388, !dbg !124
  %395 = fcmp uno float %356, 0.000000e+00, !dbg !126
  %396 = or i1 %395, %394, !dbg !127
  %397 = select i1 %396, float %356, float %388, !dbg !128
  %398 = select i1 %17, float %397, float %356, !dbg !129
  %399 = getelementptr bfloat, ptr addrspace(1) %9, i64 %361, !dbg !130
  %400 = fptrunc float %388 to bfloat, !dbg !131
  %401 = bitcast bfloat %400 to i16, !dbg !131
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %401, ptr addrspace(1) %399, i1 %17) #5, !dbg !131
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 512, !dbg !93
  %402 = icmp samesign ult i64 %indvars.iv16, 2560, !dbg !93
  br i1 %402, label %355, label %403, !dbg !93

403:                                              ; preds = %355
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %404 = bitcast float %393 to i32, !dbg !132
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 16, i32 31), !dbg !132
  %406 = bitcast i32 %405 to float, !dbg !132
  %407 = fcmp olt float %393, %406, !dbg !134
  %408 = fcmp uno float %393, 0.000000e+00, !dbg !135
  %409 = or i1 %408, %407, !dbg !136
  %410 = select i1 %409, float %393, float %406, !dbg !137
  %411 = bitcast float %410 to i32, !dbg !132
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 8, i32 31), !dbg !132
  %413 = bitcast i32 %412 to float, !dbg !132
  %414 = fcmp olt float %410, %413, !dbg !134
  %415 = fcmp uno float %410, 0.000000e+00, !dbg !135
  %416 = or i1 %414, %415, !dbg !136
  %417 = select i1 %416, float %410, float %413, !dbg !137
  %418 = bitcast float %417 to i32, !dbg !132
  %419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 4, i32 31), !dbg !132
  %420 = bitcast i32 %419 to float, !dbg !132
  %421 = fcmp olt float %417, %420, !dbg !134
  %422 = fcmp uno float %417, 0.000000e+00, !dbg !135
  %423 = or i1 %421, %422, !dbg !136
  %424 = select i1 %423, float %417, float %420, !dbg !137
  %425 = bitcast float %424 to i32, !dbg !132
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 2, i32 31), !dbg !132
  %427 = bitcast i32 %426 to float, !dbg !132
  %428 = fcmp olt float %424, %427, !dbg !134
  %429 = fcmp uno float %424, 0.000000e+00, !dbg !135
  %430 = or i1 %428, %429, !dbg !136
  %431 = select i1 %430, float %424, float %427, !dbg !137
  %432 = bitcast float %431 to i32, !dbg !132
  %433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %432, i32 1, i32 31), !dbg !132
  %434 = bitcast i32 %433 to float, !dbg !132
  %435 = fcmp olt float %431, %434, !dbg !134
  %436 = fcmp uno float %431, 0.000000e+00, !dbg !135
  %437 = or i1 %435, %436, !dbg !136
  %438 = select i1 %437, i32 %432, i32 %433, !dbg !137
  %439 = insertelement <1 x i32> poison, i32 %438, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %439, i1 %242) #5, !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %440 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %250, i1 %249) #5, !dbg !132
  %441 = bitcast i32 %440 to float, !dbg !132
  %442 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 8, i32 31), !dbg !132
  %443 = bitcast i32 %442 to float, !dbg !132
  %444 = fcmp olt float %441, %443, !dbg !134
  %445 = fcmp uno float %441, 0.000000e+00, !dbg !135
  %446 = or i1 %445, %444, !dbg !136
  %447 = select i1 %446, float %441, float %443, !dbg !137
  %448 = bitcast float %447 to i32, !dbg !132
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 4, i32 31), !dbg !132
  %450 = bitcast i32 %449 to float, !dbg !132
  %451 = fcmp olt float %447, %450, !dbg !134
  %452 = fcmp uno float %447, 0.000000e+00, !dbg !135
  %453 = or i1 %451, %452, !dbg !136
  %454 = select i1 %453, float %447, float %450, !dbg !137
  %455 = bitcast float %454 to i32, !dbg !132
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 2, i32 31), !dbg !132
  %457 = bitcast i32 %456 to float, !dbg !132
  %458 = fcmp olt float %454, %457, !dbg !134
  %459 = fcmp uno float %454, 0.000000e+00, !dbg !135
  %460 = or i1 %458, %459, !dbg !136
  %461 = select i1 %460, float %454, float %457, !dbg !137
  %462 = bitcast float %461 to i32, !dbg !132
  %463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %462, i32 1, i32 31), !dbg !132
  %464 = bitcast i32 %463 to float, !dbg !132
  %465 = fcmp olt float %461, %464, !dbg !134
  %466 = fcmp uno float %461, 0.000000e+00, !dbg !135
  %467 = or i1 %465, %466, !dbg !136
  %468 = select i1 %467, i32 %462, i32 %463, !dbg !137
  %469 = insertelement <1 x i32> poison, i32 %468, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %469, i1 %342) #5, !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %470 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %471 = bitcast float %398 to i32, !dbg !138
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 16, i32 31), !dbg !138
  %473 = bitcast i32 %472 to float, !dbg !138
  %474 = fcmp ogt float %398, %473, !dbg !140
  %475 = fcmp uno float %398, 0.000000e+00, !dbg !141
  %476 = or i1 %475, %474, !dbg !142
  %477 = select i1 %476, float %398, float %473, !dbg !143
  %478 = bitcast float %477 to i32, !dbg !138
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 8, i32 31), !dbg !138
  %480 = bitcast i32 %479 to float, !dbg !138
  %481 = fcmp ogt float %477, %480, !dbg !140
  %482 = fcmp uno float %477, 0.000000e+00, !dbg !141
  %483 = or i1 %481, %482, !dbg !142
  %484 = select i1 %483, float %477, float %480, !dbg !143
  %485 = bitcast float %484 to i32, !dbg !138
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 4, i32 31), !dbg !138
  %487 = bitcast i32 %486 to float, !dbg !138
  %488 = fcmp ogt float %484, %487, !dbg !140
  %489 = fcmp uno float %484, 0.000000e+00, !dbg !141
  %490 = or i1 %488, %489, !dbg !142
  %491 = select i1 %490, float %484, float %487, !dbg !143
  %492 = bitcast float %491 to i32, !dbg !138
  %493 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 2, i32 31), !dbg !138
  %494 = bitcast i32 %493 to float, !dbg !138
  %495 = fcmp ogt float %491, %494, !dbg !140
  %496 = fcmp uno float %491, 0.000000e+00, !dbg !141
  %497 = or i1 %495, %496, !dbg !142
  %498 = select i1 %497, float %491, float %494, !dbg !143
  %499 = bitcast float %498 to i32, !dbg !138
  %500 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %499, i32 1, i32 31), !dbg !138
  %501 = bitcast i32 %500 to float, !dbg !138
  %502 = fcmp ogt float %498, %501, !dbg !140
  %503 = fcmp uno float %498, 0.000000e+00, !dbg !141
  %504 = or i1 %502, %503, !dbg !142
  %505 = select i1 %504, i32 %499, i32 %500, !dbg !143
  %506 = insertelement <1 x i32> poison, i32 %505, i64 0, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %506, i1 %242) #5, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %507 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %250, i1 %249) #5, !dbg !138
  %508 = bitcast i32 %507 to float, !dbg !138
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %507, i32 8, i32 31), !dbg !138
  %510 = bitcast i32 %509 to float, !dbg !138
  %511 = fcmp ogt float %508, %510, !dbg !140
  %512 = fcmp uno float %508, 0.000000e+00, !dbg !141
  %513 = or i1 %512, %511, !dbg !142
  %514 = select i1 %513, float %508, float %510, !dbg !143
  %515 = bitcast float %514 to i32, !dbg !138
  %516 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %515, i32 4, i32 31), !dbg !138
  %517 = bitcast i32 %516 to float, !dbg !138
  %518 = fcmp ogt float %514, %517, !dbg !140
  %519 = fcmp uno float %514, 0.000000e+00, !dbg !141
  %520 = or i1 %518, %519, !dbg !142
  %521 = select i1 %520, float %514, float %517, !dbg !143
  %522 = bitcast float %521 to i32, !dbg !138
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 2, i32 31), !dbg !138
  %524 = bitcast i32 %523 to float, !dbg !138
  %525 = fcmp ogt float %521, %524, !dbg !140
  %526 = fcmp uno float %521, 0.000000e+00, !dbg !141
  %527 = or i1 %525, %526, !dbg !142
  %528 = select i1 %527, float %521, float %524, !dbg !143
  %529 = bitcast float %528 to i32, !dbg !138
  %530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %529, i32 1, i32 31), !dbg !138
  %531 = bitcast i32 %530 to float, !dbg !138
  %532 = fcmp ogt float %528, %531, !dbg !140
  %533 = fcmp uno float %528, 0.000000e+00, !dbg !141
  %534 = or i1 %532, %533, !dbg !142
  %535 = select i1 %534, i32 %529, i32 %530, !dbg !143
  %536 = insertelement <1 x i32> poison, i32 %535, i64 0, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %536, i1 %342) #5, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %537 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !138
  %538 = getelementptr bfloat, ptr addrspace(1) %10, i64 %21, !dbg !144
  %539 = fptrunc float %470 to bfloat, !dbg !145
  %540 = icmp eq i32 %20, 0, !dbg !145
  %541 = bitcast bfloat %539 to i16, !dbg !145
  %542 = and i1 %17, %540, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %541, ptr addrspace(1) %538, i1 %542) #5, !dbg !145
  %543 = getelementptr bfloat, ptr addrspace(1) %11, i64 %21, !dbg !146
  %544 = fptrunc float %537 to bfloat, !dbg !147
  %545 = bitcast bfloat %544 to i16, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %545, ptr addrspace(1) %543, i1 %542) #5, !dbg !147
  %.inv4 = fcmp oge float %470, 0.000000e+00, !dbg !148
  %546 = select i1 %.inv4, float 0.000000e+00, float %470, !dbg !148
  %547 = fsub float 0.000000e+00, %546, !dbg !150
  %.inv5 = fcmp ole float %537, 0.000000e+00, !dbg !151
  %548 = select i1 %.inv5, float 0.000000e+00, float %537, !dbg !151
  %549 = fcmp ogt float %547, %548, !dbg !153
  %550 = fcmp uno float %547, 0.000000e+00, !dbg !155
  %551 = or i1 %550, %549, !dbg !156
  %552 = select i1 %551, float %547, float %548, !dbg !157
  %553 = fmul float %552, 0x3F80204080000000, !dbg !158
  %554 = fcmp ogt float %553, 0x3EE4F8B580000000, !dbg !159
  %555 = fcmp uno float %553, 0.000000e+00, !dbg !161
  %556 = or i1 %554, %555, !dbg !162
  %557 = select i1 %556, float %553, float 0x3EE4F8B580000000, !dbg !163
  %558 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %557), !dbg !164
  %559 = or disjoint i32 %28, %20
  %560 = sext i32 %559 to i64, !dbg !165
  %561 = getelementptr bfloat, ptr addrspace(1) %9, i64 %560, !dbg !165
  %562 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %561, i1 %17) #5, !dbg !166
  %563 = bitcast i16 %562 to bfloat, !dbg !166
  %564 = fpext bfloat %563 to float, !dbg !167
  %565 = fmul float %558, %564, !dbg !168
  %566 = tail call float @llvm.nvvm.round.f(float %565) #5, !dbg !169
  %567 = fcmp ogt float %566, -1.270000e+02, !dbg !170
  %568 = fcmp uno float %566, 0.000000e+00, !dbg !172
  %569 = or i1 %567, %568, !dbg !173
  %570 = select i1 %569, float %566, float -1.270000e+02, !dbg !174
  %571 = fcmp olt float %570, 1.270000e+02, !dbg !175
  %572 = fcmp uno float %570, 0.000000e+00, !dbg !177
  %573 = or i1 %571, %572, !dbg !178
  %574 = fptosi float %570 to i8, !dbg !179
  %575 = select i1 %573, i8 %574, i8 127, !dbg !180
  %576 = getelementptr i8, ptr addrspace(1) %12, i64 %560, !dbg !181
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %575, ptr addrspace(1) %576, i1 %17) #5, !dbg !182
  %577 = or disjoint i32 %559, 512, !dbg !183
  %578 = sext i32 %577 to i64, !dbg !165
  %579 = getelementptr bfloat, ptr addrspace(1) %9, i64 %578, !dbg !165
  %580 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %579, i1 %17) #5, !dbg !166
  %581 = bitcast i16 %580 to bfloat, !dbg !166
  %582 = fpext bfloat %581 to float, !dbg !167
  %583 = fmul float %558, %582, !dbg !168
  %584 = tail call float @llvm.nvvm.round.f(float %583) #5, !dbg !169
  %585 = fcmp ogt float %584, -1.270000e+02, !dbg !170
  %586 = fcmp uno float %584, 0.000000e+00, !dbg !172
  %587 = or i1 %585, %586, !dbg !173
  %588 = select i1 %587, float %584, float -1.270000e+02, !dbg !174
  %589 = fcmp olt float %588, 1.270000e+02, !dbg !175
  %590 = fcmp uno float %588, 0.000000e+00, !dbg !177
  %591 = or i1 %589, %590, !dbg !178
  %592 = fptosi float %588 to i8, !dbg !179
  %593 = select i1 %591, i8 %592, i8 127, !dbg !180
  %594 = getelementptr i8, ptr addrspace(1) %12, i64 %578, !dbg !181
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %593, ptr addrspace(1) %594, i1 %17) #5, !dbg !182
  %595 = add i32 %559, 1024, !dbg !183
  %596 = sext i32 %595 to i64, !dbg !165
  %597 = getelementptr bfloat, ptr addrspace(1) %9, i64 %596, !dbg !165
  %598 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %597, i1 %17) #5, !dbg !166
  %599 = bitcast i16 %598 to bfloat, !dbg !166
  %600 = fpext bfloat %599 to float, !dbg !167
  %601 = fmul float %558, %600, !dbg !168
  %602 = tail call float @llvm.nvvm.round.f(float %601) #5, !dbg !169
  %603 = fcmp ogt float %602, -1.270000e+02, !dbg !170
  %604 = fcmp uno float %602, 0.000000e+00, !dbg !172
  %605 = or i1 %603, %604, !dbg !173
  %606 = select i1 %605, float %602, float -1.270000e+02, !dbg !174
  %607 = fcmp olt float %606, 1.270000e+02, !dbg !175
  %608 = fcmp uno float %606, 0.000000e+00, !dbg !177
  %609 = or i1 %607, %608, !dbg !178
  %610 = fptosi float %606 to i8, !dbg !179
  %611 = select i1 %609, i8 %610, i8 127, !dbg !180
  %612 = getelementptr i8, ptr addrspace(1) %12, i64 %596, !dbg !181
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %611, ptr addrspace(1) %612, i1 %17) #5, !dbg !182
  %613 = add i32 %559, 1536, !dbg !183
  %614 = sext i32 %613 to i64, !dbg !165
  %615 = getelementptr bfloat, ptr addrspace(1) %9, i64 %614, !dbg !165
  %616 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %615, i1 %17) #5, !dbg !166
  %617 = bitcast i16 %616 to bfloat, !dbg !166
  %618 = fpext bfloat %617 to float, !dbg !167
  %619 = fmul float %558, %618, !dbg !168
  %620 = tail call float @llvm.nvvm.round.f(float %619) #5, !dbg !169
  %621 = fcmp ogt float %620, -1.270000e+02, !dbg !170
  %622 = fcmp uno float %620, 0.000000e+00, !dbg !172
  %623 = or i1 %621, %622, !dbg !173
  %624 = select i1 %623, float %620, float -1.270000e+02, !dbg !174
  %625 = fcmp olt float %624, 1.270000e+02, !dbg !175
  %626 = fcmp uno float %624, 0.000000e+00, !dbg !177
  %627 = or i1 %625, %626, !dbg !178
  %628 = fptosi float %624 to i8, !dbg !179
  %629 = select i1 %627, i8 %628, i8 127, !dbg !180
  %630 = getelementptr i8, ptr addrspace(1) %12, i64 %614, !dbg !181
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %629, ptr addrspace(1) %630, i1 %17) #5, !dbg !182
  %631 = add i32 %559, 2048, !dbg !183
  %632 = sext i32 %631 to i64, !dbg !165
  %633 = getelementptr bfloat, ptr addrspace(1) %9, i64 %632, !dbg !165
  %634 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %633, i1 %17) #5, !dbg !166
  %635 = bitcast i16 %634 to bfloat, !dbg !166
  %636 = fpext bfloat %635 to float, !dbg !167
  %637 = fmul float %558, %636, !dbg !168
  %638 = tail call float @llvm.nvvm.round.f(float %637) #5, !dbg !169
  %639 = fcmp ogt float %638, -1.270000e+02, !dbg !170
  %640 = fcmp uno float %638, 0.000000e+00, !dbg !172
  %641 = or i1 %639, %640, !dbg !173
  %642 = select i1 %641, float %638, float -1.270000e+02, !dbg !174
  %643 = fcmp olt float %642, 1.270000e+02, !dbg !175
  %644 = fcmp uno float %642, 0.000000e+00, !dbg !177
  %645 = or i1 %643, %644, !dbg !178
  %646 = fptosi float %642 to i8, !dbg !179
  %647 = select i1 %645, i8 %646, i8 127, !dbg !180
  %648 = getelementptr i8, ptr addrspace(1) %12, i64 %632, !dbg !181
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %647, ptr addrspace(1) %648, i1 %17) #5, !dbg !182
  %649 = add i32 %559, 2560, !dbg !183
  %650 = sext i32 %649 to i64, !dbg !165
  %651 = getelementptr bfloat, ptr addrspace(1) %9, i64 %650, !dbg !165
  %652 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %651, i1 %17) #5, !dbg !166
  %653 = bitcast i16 %652 to bfloat, !dbg !166
  %654 = fpext bfloat %653 to float, !dbg !167
  %655 = fmul float %558, %654, !dbg !168
  %656 = tail call float @llvm.nvvm.round.f(float %655) #5, !dbg !169
  %657 = fcmp ogt float %656, -1.270000e+02, !dbg !170
  %658 = fcmp uno float %656, 0.000000e+00, !dbg !172
  %659 = or i1 %657, %658, !dbg !173
  %660 = select i1 %659, float %656, float -1.270000e+02, !dbg !174
  %661 = fcmp olt float %660, 1.270000e+02, !dbg !175
  %662 = fcmp uno float %660, 0.000000e+00, !dbg !177
  %663 = or i1 %661, %662, !dbg !178
  %664 = fptosi float %660 to i8, !dbg !179
  %665 = select i1 %663, i8 %664, i8 127, !dbg !180
  %666 = getelementptr i8, ptr addrspace(1) %12, i64 %650, !dbg !181
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %665, ptr addrspace(1) %666, i1 %17) #5, !dbg !182
  ret void, !dbg !184
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 40, column: 46, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 50, column: 44, scope: !6)
!21 = !DILocation(line: 51, column: 17, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 52, column: 46, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 53, column: 46, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 55, column: 24, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 58, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 34, column: 40, scope: !6)
!36 = !DILocation(line: 40, column: 41, scope: !6)
!37 = !DILocation(line: 40, column: 34, scope: !6)
!38 = !DILocation(line: 40, column: 51, scope: !6)
!39 = !DILocation(line: 41, column: 41, scope: !6)
!40 = !DILocation(line: 41, column: 34, scope: !6)
!41 = !DILocation(line: 41, column: 48, scope: !6)
!42 = !DILocation(line: 42, column: 34, scope: !6)
!43 = !DILocation(line: 42, column: 48, scope: !6)
!44 = !DILocation(line: 43, column: 34, scope: !6)
!45 = !DILocation(line: 43, column: 51, scope: !6)
!46 = !DILocation(line: 44, column: 35, scope: !6)
!47 = !DILocation(line: 44, column: 42, scope: !6)
!48 = !DILocation(line: 45, column: 35, scope: !6)
!49 = !DILocation(line: 45, column: 42, scope: !6)
!50 = !DILocation(line: 48, column: 23, scope: !6)
!51 = !DILocation(line: 60, column: 23, scope: !6)
!52 = !DILocation(line: 44, column: 95, scope: !6)
!53 = !DILocation(line: 61, column: 24, scope: !6)
!54 = !DILocation(line: 42, column: 101, scope: !6)
!55 = !DILocation(line: 47, column: 22, scope: !6)
!56 = !DILocation(line: 63, column: 23, scope: !6)
!57 = !DILocation(line: 40, column: 113, scope: !6)
!58 = !DILocation(line: 64, column: 23, scope: !6)
!59 = !DILocation(line: 73, column: 29, scope: !6)
!60 = !DILocation(line: 73, column: 53, scope: !6)
!61 = !DILocation(line: 72, column: 68, scope: !6)
!62 = !DILocation(line: 70, column: 64, scope: !6)
!63 = !DILocation(line: 35, column: 31, scope: !6)
!64 = !DILocation(line: 208, column: 24, scope: !18, inlinedAt: !65)
!65 = !DILocation(line: 68, column: 55, scope: !6)
!66 = !DILocation(line: 209, column: 30, scope: !18, inlinedAt: !65)
!67 = !DILocation(line: 210, column: 34, scope: !18, inlinedAt: !65)
!68 = !DILocation(line: 210, column: 26, scope: !18, inlinedAt: !65)
!69 = !DILocation(line: 211, column: 39, scope: !18, inlinedAt: !65)
!70 = !DILocation(line: 211, column: 31, scope: !18, inlinedAt: !65)
!71 = !DILocation(line: 211, column: 22, scope: !18, inlinedAt: !65)
!72 = !DILocation(line: 71, column: 60, scope: !6)
!73 = distinct !{!73, !74}
!74 = !{!"llvm.loop.peeled.count", i32 1}
!75 = !DILocation(line: 229, column: 46, scope: !18, inlinedAt: !76)
!76 = !DILocation(line: 74, column: 85, scope: !6)
!77 = !DILocation(line: 217, column: 21, scope: !78, inlinedAt: !76)
!78 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!79 = !DILocation(line: 218, column: 28, scope: !78, inlinedAt: !76)
!80 = !DILocation(line: 219, column: 39, scope: !78, inlinedAt: !76)
!81 = !DILocation(line: 219, column: 60, scope: !78, inlinedAt: !76)
!82 = !DILocation(line: 219, column: 49, scope: !78, inlinedAt: !76)
!83 = !DILocation(line: 221, column: 25, scope: !78, inlinedAt: !76)
!84 = !DILocation(line: 221, column: 17, scope: !78, inlinedAt: !76)
!85 = !DILocation(line: 222, column: 15, scope: !78, inlinedAt: !76)
!86 = !DILocation(line: 222, column: 30, scope: !78, inlinedAt: !76)
!87 = !DILocation(line: 222, column: 38, scope: !78, inlinedAt: !76)
!88 = !DILocation(line: 222, column: 49, scope: !78, inlinedAt: !76)
!89 = !DILocation(line: 222, column: 22, scope: !78, inlinedAt: !76)
!90 = !DILocation(line: 94, column: 25, scope: !6)
!91 = !DILocation(line: 96, column: 24, scope: !6)
!92 = !DILocation(line: 97, column: 32, scope: !6)
!93 = !DILocation(line: 80, column: 40, scope: !6)
!94 = !DILocation(line: 81, column: 31, scope: !6)
!95 = !DILocation(line: 86, column: 43, scope: !6)
!96 = !DILocation(line: 86, column: 36, scope: !6)
!97 = !DILocation(line: 86, column: 53, scope: !6)
!98 = !DILocation(line: 86, column: 115, scope: !6)
!99 = !DILocation(line: 87, column: 43, scope: !6)
!100 = !DILocation(line: 87, column: 35, scope: !6)
!101 = !DILocation(line: 87, column: 50, scope: !6)
!102 = !DILocation(line: 88, column: 35, scope: !6)
!103 = !DILocation(line: 88, column: 50, scope: !6)
!104 = !DILocation(line: 88, column: 103, scope: !6)
!105 = !DILocation(line: 89, column: 42, scope: !6)
!106 = !DILocation(line: 89, column: 35, scope: !6)
!107 = !DILocation(line: 89, column: 49, scope: !6)
!108 = !DILocation(line: 90, column: 35, scope: !6)
!109 = !DILocation(line: 90, column: 49, scope: !6)
!110 = !DILocation(line: 90, column: 102, scope: !6)
!111 = !DILocation(line: 92, column: 24, scope: !6)
!112 = !DILocation(line: 98, column: 24, scope: !6)
!113 = !DILocation(line: 101, column: 24, scope: !6)
!114 = !DILocation(line: 103, column: 24, scope: !6)
!115 = !DILocation(line: 104, column: 24, scope: !6)
!116 = !DILocation(line: 106, column: 24, scope: !6)
!117 = !DILocation(line: 107, column: 24, scope: !6)
!118 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !119)
!119 = !DILocation(line: 109, column: 47, scope: !6)
!120 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !119)
!121 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !119)
!122 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !119)
!123 = !DILocation(line: 110, column: 50, scope: !6)
!124 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !125)
!125 = !DILocation(line: 111, column: 47, scope: !6)
!126 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !125)
!127 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !125)
!128 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !125)
!129 = !DILocation(line: 112, column: 50, scope: !6)
!130 = !DILocation(line: 113, column: 29, scope: !6)
!131 = !DILocation(line: 113, column: 53, scope: !6)
!132 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !133)
!133 = !DILocation(line: 114, column: 40, scope: !6)
!134 = !DILocation(line: 94, column: 15, scope: !78, inlinedAt: !133)
!135 = !DILocation(line: 96, column: 21, scope: !78, inlinedAt: !133)
!136 = !DILocation(line: 96, column: 16, scope: !78, inlinedAt: !133)
!137 = !DILocation(line: 97, column: 29, scope: !78, inlinedAt: !133)
!138 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !139)
!139 = !DILocation(line: 115, column: 40, scope: !6)
!140 = !DILocation(line: 102, column: 15, scope: !78, inlinedAt: !139)
!141 = !DILocation(line: 104, column: 21, scope: !78, inlinedAt: !139)
!142 = !DILocation(line: 104, column: 16, scope: !78, inlinedAt: !139)
!143 = !DILocation(line: 105, column: 29, scope: !78, inlinedAt: !139)
!144 = !DILocation(line: 116, column: 25, scope: !6)
!145 = !DILocation(line: 116, column: 37, scope: !6)
!146 = !DILocation(line: 117, column: 25, scope: !6)
!147 = !DILocation(line: 117, column: 37, scope: !6)
!148 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !149)
!149 = !DILocation(line: 126, column: 46, scope: !6)
!150 = !DILocation(line: 127, column: 17, scope: !6)
!151 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !152)
!152 = !DILocation(line: 128, column: 46, scope: !6)
!153 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !154)
!154 = !DILocation(line: 129, column: 46, scope: !6)
!155 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !154)
!156 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !154)
!157 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !154)
!158 = !DILocation(line: 131, column: 24, scope: !6)
!159 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !160)
!160 = !DILocation(line: 134, column: 46, scope: !6)
!161 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !160)
!162 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !160)
!163 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !160)
!164 = !DILocation(line: 137, column: 25, scope: !6)
!165 = !DILocation(line: 124, column: 36, scope: !6)
!166 = !DILocation(line: 124, column: 53, scope: !6)
!167 = !DILocation(line: 124, column: 115, scope: !6)
!168 = !DILocation(line: 140, column: 24, scope: !6)
!169 = !DILocation(line: 141, column: 36, scope: !6)
!170 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !171)
!171 = !DILocation(line: 144, column: 46, scope: !6)
!172 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !171)
!173 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !171)
!174 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !171)
!175 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !176)
!176 = !DILocation(line: 146, column: 46, scope: !6)
!177 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !176)
!178 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !176)
!179 = !DILocation(line: 148, column: 25, scope: !6)
!180 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !176)
!181 = !DILocation(line: 149, column: 29, scope: !6)
!182 = !DILocation(line: 149, column: 53, scope: !6)
!183 = !DILocation(line: 124, column: 43, scope: !6)
!184 = !DILocation(line: 118, column: 4, scope: !6)
