; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = shl i32 %5, 10, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = shl i32 %7, 3, !dbg !11
  %9 = and i32 %8, 1016, !dbg !11
  %10 = or disjoint i32 %9, %6, !dbg !12
  %11 = icmp slt i32 %10, 236544, !dbg !13
  %12 = srem i32 %10, 3072, !dbg !14
  %13 = sext i32 %10 to i64, !dbg !15
  %14 = getelementptr bfloat, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 %11) #2, !dbg !16
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !16
  %17 = bitcast i32 %16 to <2 x bfloat>, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !16
  %19 = bitcast i32 %18 to <2 x bfloat>, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !16
  %21 = bitcast i32 %20 to <2 x bfloat>, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !16
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !16
  %24 = sext i32 %12 to i64, !dbg !17
  %25 = getelementptr bfloat, ptr addrspace(1) %1, i64 %24, !dbg !17
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %11) #2, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !18
  %35 = fpext <2 x bfloat> %17 to <2 x float>, !dbg !19
  %36 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !20
  %37 = fadd <2 x float> %35, %36, !dbg !21
  %38 = extractelement <2 x float> %37, i64 0, !dbg !22
  %39 = fmul float %38, 0x3FFB3B6460000000, !dbg !22
  %40 = extractelement <2 x float> %37, i64 1, !dbg !22
  %41 = fmul float %40, 0x3FFB3B6460000000, !dbg !22
  %42 = fsub float 0.000000e+00, %39, !dbg !23
  %43 = fsub float 0.000000e+00, %41, !dbg !23
  %44 = fmul float %42, 0x3FF7154760000000, !dbg !27
  %45 = tail call float @llvm.nvvm.ex2.approx.f(float %44), !dbg !27
  %46 = fmul float %43, 0x3FF7154760000000, !dbg !27
  %47 = tail call float @llvm.nvvm.ex2.approx.f(float %46), !dbg !27
  %48 = fadd float %45, 1.000000e+00, !dbg !28
  %49 = fadd float %47, 1.000000e+00, !dbg !28
  %50 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %48), !dbg !29
  %51 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %49), !dbg !29
  %52 = insertelement <2 x float> poison, float %50, i64 0, !dbg !30
  %53 = insertelement <2 x float> %52, float %51, i64 1, !dbg !30
  %54 = fmul <2 x float> %37, %53, !dbg !30
  %55 = fptrunc <2 x float> %54 to <2 x bfloat>, !dbg !31
  %56 = fpext <2 x bfloat> %19 to <2 x float>, !dbg !19
  %57 = fpext <2 x bfloat> %30 to <2 x float>, !dbg !20
  %58 = fadd <2 x float> %56, %57, !dbg !21
  %59 = extractelement <2 x float> %58, i64 0, !dbg !22
  %60 = fmul float %59, 0x3FFB3B6460000000, !dbg !22
  %61 = extractelement <2 x float> %58, i64 1, !dbg !22
  %62 = fmul float %61, 0x3FFB3B6460000000, !dbg !22
  %63 = fsub float 0.000000e+00, %60, !dbg !23
  %64 = fsub float 0.000000e+00, %62, !dbg !23
  %65 = fmul float %63, 0x3FF7154760000000, !dbg !27
  %66 = tail call float @llvm.nvvm.ex2.approx.f(float %65), !dbg !27
  %67 = fmul float %64, 0x3FF7154760000000, !dbg !27
  %68 = tail call float @llvm.nvvm.ex2.approx.f(float %67), !dbg !27
  %69 = fadd float %66, 1.000000e+00, !dbg !28
  %70 = fadd float %68, 1.000000e+00, !dbg !28
  %71 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %69), !dbg !29
  %72 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %70), !dbg !29
  %73 = insertelement <2 x float> poison, float %71, i64 0, !dbg !30
  %74 = insertelement <2 x float> %73, float %72, i64 1, !dbg !30
  %75 = fmul <2 x float> %58, %74, !dbg !30
  %76 = fptrunc <2 x float> %75 to <2 x bfloat>, !dbg !31
  %77 = fpext <2 x bfloat> %21 to <2 x float>, !dbg !19
  %78 = fpext <2 x bfloat> %32 to <2 x float>, !dbg !20
  %79 = fadd <2 x float> %77, %78, !dbg !21
  %80 = extractelement <2 x float> %79, i64 0, !dbg !22
  %81 = fmul float %80, 0x3FFB3B6460000000, !dbg !22
  %82 = extractelement <2 x float> %79, i64 1, !dbg !22
  %83 = fmul float %82, 0x3FFB3B6460000000, !dbg !22
  %84 = fsub float 0.000000e+00, %81, !dbg !23
  %85 = fsub float 0.000000e+00, %83, !dbg !23
  %86 = fmul float %84, 0x3FF7154760000000, !dbg !27
  %87 = tail call float @llvm.nvvm.ex2.approx.f(float %86), !dbg !27
  %88 = fmul float %85, 0x3FF7154760000000, !dbg !27
  %89 = tail call float @llvm.nvvm.ex2.approx.f(float %88), !dbg !27
  %90 = fadd float %87, 1.000000e+00, !dbg !28
  %91 = fadd float %89, 1.000000e+00, !dbg !28
  %92 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %90), !dbg !29
  %93 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %91), !dbg !29
  %94 = insertelement <2 x float> poison, float %92, i64 0, !dbg !30
  %95 = insertelement <2 x float> %94, float %93, i64 1, !dbg !30
  %96 = fmul <2 x float> %79, %95, !dbg !30
  %97 = fptrunc <2 x float> %96 to <2 x bfloat>, !dbg !31
  %98 = fpext <2 x bfloat> %23 to <2 x float>, !dbg !19
  %99 = fpext <2 x bfloat> %34 to <2 x float>, !dbg !20
  %100 = fadd <2 x float> %98, %99, !dbg !21
  %101 = extractelement <2 x float> %100, i64 0, !dbg !22
  %102 = fmul float %101, 0x3FFB3B6460000000, !dbg !22
  %103 = extractelement <2 x float> %100, i64 1, !dbg !22
  %104 = fmul float %103, 0x3FFB3B6460000000, !dbg !22
  %105 = fsub float 0.000000e+00, %102, !dbg !23
  %106 = fsub float 0.000000e+00, %104, !dbg !23
  %107 = fmul float %105, 0x3FF7154760000000, !dbg !27
  %108 = tail call float @llvm.nvvm.ex2.approx.f(float %107), !dbg !27
  %109 = fmul float %106, 0x3FF7154760000000, !dbg !27
  %110 = tail call float @llvm.nvvm.ex2.approx.f(float %109), !dbg !27
  %111 = fadd float %108, 1.000000e+00, !dbg !28
  %112 = fadd float %110, 1.000000e+00, !dbg !28
  %113 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %111), !dbg !29
  %114 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %112), !dbg !29
  %115 = insertelement <2 x float> poison, float %113, i64 0, !dbg !30
  %116 = insertelement <2 x float> %115, float %114, i64 1, !dbg !30
  %117 = fmul <2 x float> %100, %116, !dbg !30
  %118 = fptrunc <2 x float> %117 to <2 x bfloat>, !dbg !31
  %119 = bitcast <2 x bfloat> %55 to i32, !dbg !31
  %120 = bitcast <2 x bfloat> %76 to i32, !dbg !31
  %121 = bitcast <2 x bfloat> %97 to i32, !dbg !31
  %122 = bitcast <2 x bfloat> %118 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %119, i32 %120, i32 %121, i32 %122, ptr addrspace(1) %14, i1 %11) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cays7uwl4mjrrpbn562uyt2hbd6b25qyzadsmdqftgdhj3yphang.py", directory: "/tmp/torchinductor_root/ay")
!4 = !{ptr @triton_, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 36, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 21, scope: !6)
!14 = !DILocation(line: 28, column: 19, scope: !6)
!15 = !DILocation(line: 29, column: 34, scope: !6)
!16 = !DILocation(line: 29, column: 39, scope: !6)
!17 = !DILocation(line: 30, column: 30, scope: !6)
!18 = !DILocation(line: 30, column: 35, scope: !6)
!19 = !DILocation(line: 29, column: 49, scope: !6)
!20 = !DILocation(line: 30, column: 75, scope: !6)
!21 = !DILocation(line: 31, column: 18, scope: !6)
!22 = !DILocation(line: 33, column: 18, scope: !6)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!26 = !DILocation(line: 34, column: 22, scope: !6)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 35, column: 18, scope: !6)
!31 = !DILocation(line: 36, column: 39, scope: !6)
!32 = !DILocation(line: 36, column: 4, scope: !6)
