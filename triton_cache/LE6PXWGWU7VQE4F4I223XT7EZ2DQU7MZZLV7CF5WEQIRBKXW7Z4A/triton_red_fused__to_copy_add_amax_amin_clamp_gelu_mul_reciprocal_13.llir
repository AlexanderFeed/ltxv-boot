; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = shl i32 %13, 6, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = and i32 %15, 64, !dbg !11
  %17 = lshr i32 %15, 1, !dbg !11
  %18 = and i32 %17, 63, !dbg !11
  %19 = or disjoint i32 %18, %14, !dbg !12
  %20 = icmp slt i32 %19, 512, !dbg !13
  %21 = shl i32 %15, 2, !dbg !14
  %22 = and i32 %21, 4, !dbg !14
  %23 = sext i32 %19 to i64, !dbg !15
  %24 = getelementptr bfloat, ptr addrspace(1) %1, i64 %23, !dbg !15
  %25 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %20) #5, !dbg !16
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %20) #5, !dbg !16
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %20) #5, !dbg !16
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %20) #5, !dbg !16
  %29 = bitcast i16 %28 to bfloat, !dbg !16
  %30 = getelementptr bfloat, ptr addrspace(1) %2, i64 %23, !dbg !17
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !18
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !18
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !18
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !18
  %35 = bitcast i16 %34 to bfloat, !dbg !18
  %36 = mul i32 %19, 12288, !dbg !19
  %.inv = fcmp oge bfloat %29, 0xR0000, !dbg !20
  %37 = select i1 %.inv, bfloat 0xR0000, bfloat %29, !dbg !20
  %38 = fpext bfloat %37 to float, !dbg !20
  %39 = fsub float 0.000000e+00, %38, !dbg !24
  %.inv4 = fcmp ole bfloat %35, 0xR0000, !dbg !25
  %40 = select i1 %.inv4, bfloat 0xR0000, bfloat %35, !dbg !25
  %41 = fpext bfloat %40 to float, !dbg !25
  %42 = fcmp ogt float %39, %41, !dbg !27
  %43 = fcmp uno float %39, 0.000000e+00, !dbg !29
  %44 = or i1 %43, %42, !dbg !30
  %45 = select i1 %44, float %39, float %41, !dbg !31
  %46 = fmul float %45, 0x3F80204080000000, !dbg !32
  %47 = fcmp ogt float %46, 0x3EE4F8B580000000, !dbg !33
  %48 = fcmp uno float %46, 0.000000e+00, !dbg !35
  %49 = or i1 %47, %48, !dbg !36
  %50 = select i1 %49, float %46, float 0x3EE4F8B580000000, !dbg !37
  %51 = zext nneg i32 %22 to i64, !dbg !38
  %52 = insertelement <2 x i1> poison, i1 %20, i64 0, !dbg !39
  %53 = shufflevector <2 x i1> %52, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !39
  %54 = insertelement <2 x float> poison, float %50, i64 0, !dbg !40
  %55 = shufflevector <2 x float> %54, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !40
  %56 = insertelement <4 x i1> poison, i1 %20, i64 0, !dbg !41
  %57 = shufflevector <4 x i1> %56, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !41
  br label %58, !dbg !38

58:                                               ; preds = %12, %__nv_tanhf.exit139
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %__nv_tanhf.exit139 ]
  %59 = phi float [ 0x7FF0000000000000, %12 ], [ %282, %__nv_tanhf.exit139 ]
  %60 = phi float [ 0x7FF0000000000000, %12 ], [ %283, %__nv_tanhf.exit139 ]
  %61 = phi <2 x float> [ splat (float 0x7FF0000000000000), %12 ], [ %281, %__nv_tanhf.exit139 ]
  %62 = phi <4 x float> [ splat (float 0xFFF0000000000000), %12 ], [ %289, %__nv_tanhf.exit139 ]
  %63 = or disjoint i64 %indvars.iv, %51, !dbg !42
  %64 = trunc nuw nsw i64 %63 to i32, !dbg !43
  %65 = add i32 %36, %64, !dbg !43
  %66 = sext i32 %65 to i64, !dbg !44
  %67 = getelementptr i32, ptr addrspace(1) %0, i64 %66, !dbg !44
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %20) #5, !dbg !45
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !45
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !45
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !45
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !45
  %73 = getelementptr bfloat, ptr addrspace(1) %3, i64 %63, !dbg !46
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %73, i1 true) #5, !dbg !47
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !47
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !47
  %77 = extractvalue { i32, i32 } %74, 1, !dbg !47
  %78 = bitcast i32 %77 to <2 x bfloat>, !dbg !47
  %79 = getelementptr bfloat, ptr addrspace(1) %4, i64 %63, !dbg !48
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %79, i1 true) #5, !dbg !49
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !49
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !49
  %83 = extractvalue { i32, i32 } %80, 1, !dbg !49
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !49
  %85 = fpext <2 x bfloat> %76 to <2 x float>, !dbg !50
  %86 = fpext <2 x bfloat> %82 to <2 x float>, !dbg !51
  %87 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !52
  %88 = insertelement <2 x i32> %87, i32 %70, i64 1, !dbg !52
  %89 = sitofp <2 x i32> %88 to <2 x float>, !dbg !52
  %90 = fmul <2 x float> %55, %89, !dbg !40
  %91 = fmul <2 x float> %90, %85, !dbg !53
  %92 = fadd <2 x float> %91, %86, !dbg !54
  %93 = fpext <2 x bfloat> %78 to <2 x float>, !dbg !50
  %94 = fpext <2 x bfloat> %84 to <2 x float>, !dbg !51
  %95 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !52
  %96 = insertelement <2 x i32> %95, i32 %72, i64 1, !dbg !52
  %97 = sitofp <2 x i32> %96 to <2 x float>, !dbg !52
  %98 = fmul <2 x float> %55, %97, !dbg !40
  %99 = fmul <2 x float> %98, %93, !dbg !53
  %100 = fadd <2 x float> %99, %94, !dbg !54
  %101 = fmul <2 x float> %92, splat (float 5.000000e-01), !dbg !55
  %102 = fmul <2 x float> %100, splat (float 5.000000e-01), !dbg !55
  %103 = extractelement <2 x float> %92, i64 0, !dbg !56
  %104 = fmul float %103, %103, !dbg !57
  %105 = extractelement <2 x float> %92, i64 1, !dbg !56
  %106 = fmul float %105, %105, !dbg !57
  %107 = extractelement <2 x float> %100, i64 0, !dbg !56
  %108 = fmul float %107, %107, !dbg !57
  %109 = extractelement <2 x float> %100, i64 1, !dbg !56
  %110 = fmul float %109, %109, !dbg !57
  %111 = fmul float %103, %104, !dbg !58
  %112 = fmul float %105, %106, !dbg !58
  %113 = fmul float %107, %108, !dbg !58
  %114 = fmul float %109, %110, !dbg !58
  %115 = fmul float %111, 0x3FA6E4E260000000, !dbg !59
  %116 = fmul float %112, 0x3FA6E4E260000000, !dbg !59
  %117 = fmul float %113, 0x3FA6E4E260000000, !dbg !59
  %118 = fmul float %114, 0x3FA6E4E260000000, !dbg !59
  %119 = fadd float %103, %115, !dbg !56
  %120 = fadd float %105, %116, !dbg !56
  %121 = fadd float %107, %117, !dbg !56
  %122 = fadd float %109, %118, !dbg !56
  %123 = fmul float %119, 0x3FE9884540000000, !dbg !60
  %124 = fmul float %120, 0x3FE9884540000000, !dbg !60
  %125 = fmul float %121, 0x3FE9884540000000, !dbg !60
  %126 = fmul float %122, 0x3FE9884540000000, !dbg !60
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i64 = icmp eq i32 %127, 0, !dbg !61
  %128 = tail call float @llvm.nvvm.fabs.ftz.f(float %123) #5, !dbg !61
  %129 = tail call float @llvm.nvvm.fabs.f(float %123) #5, !dbg !61
  %.01.i65 = select i1 %.not.i64, float %129, float %128, !dbg !61
  %130 = fcmp ult float %.01.i65, 0x3FE3333340000000, !dbg !61
  br i1 %130, label %__internal_fmad.exit3.i71, label %__internal_fmad.exit1.i66, !dbg !61

__internal_fmad.exit1.i66:                        ; preds = %58
  %131 = fmul float %.01.i65, 0x4007154760000000, !dbg !61
  %132 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %131) #5, !dbg !61
  %133 = fadd float %132, 1.000000e+00, !dbg !61
  %134 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %133) #6, !dbg !61, !srcloc !62
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i67 = icmp eq i32 %135, 0, !dbg !61
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %134, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %134, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i68 = select i1 %.not6.i67, float %137, float %136, !dbg !61
  %138 = fcmp oge float %.01.i65, 0x4022059680000000, !dbg !61
  %s.0.i69 = select i1 %138, float 1.000000e+00, float %.03.i68, !dbg !61
  %139 = bitcast float %s.0.i69 to i32, !dbg !61
  %140 = bitcast float %123 to i32, !dbg !61
  %141 = and i32 %140, -2147483648, !dbg !61
  %142 = or i32 %141, %139, !dbg !61
  %143 = bitcast i32 %142 to float, !dbg !61
  br label %__nv_tanhf.exit82, !dbg !61

__internal_fmad.exit3.i71:                        ; preds = %58
  %144 = fmul float %123, %123, !dbg !61
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i72 = icmp eq i32 %145, 0, !dbg !61
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %144, float 0xBFAAC795C0000000) #5, !dbg !61
  %147 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %144, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i73 = select i1 %.not1.i72, float %147, float %146, !dbg !61
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i74 = icmp eq i32 %148, 0, !dbg !61
  %149 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i73, float %144, float 0x3FC10B2820000000) #5, !dbg !61
  %150 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i73, float %144, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i75 = select i1 %.not2.i74, float %150, float %149, !dbg !61
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i76 = icmp eq i32 %151, 0, !dbg !61
  %152 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i75, float %144, float 0xBFD5553DA0000000) #5, !dbg !61
  %153 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i75, float %144, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i77 = select i1 %.not3.i76, float %153, float %152, !dbg !61
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i78 = icmp eq i32 %154, 0, !dbg !61
  %155 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i77, float %144, float 0.000000e+00) #5, !dbg !61
  %156 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i77, float %144, float 0.000000e+00) #5, !dbg !61
  %.04.i79 = select i1 %.not4.i78, float %156, float %155, !dbg !61
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i80 = icmp eq i32 %157, 0, !dbg !61
  %158 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i79, float %123, float %123) #5, !dbg !61
  %159 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i79, float %123, float %123) #5, !dbg !61
  %.02.i81 = select i1 %.not5.i80, float %159, float %158, !dbg !61
  br label %__nv_tanhf.exit82, !dbg !61

__nv_tanhf.exit82:                                ; preds = %__internal_fmad.exit1.i66, %__internal_fmad.exit3.i71
  %s.1.i70 = phi float [ %143, %__internal_fmad.exit1.i66 ], [ %.02.i81, %__internal_fmad.exit3.i71 ], !dbg !61
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i83 = icmp eq i32 %160, 0, !dbg !61
  %161 = tail call float @llvm.nvvm.fabs.ftz.f(float %124) #5, !dbg !61
  %162 = tail call float @llvm.nvvm.fabs.f(float %124) #5, !dbg !61
  %.01.i84 = select i1 %.not.i83, float %162, float %161, !dbg !61
  %163 = fcmp ult float %.01.i84, 0x3FE3333340000000, !dbg !61
  br i1 %163, label %__internal_fmad.exit3.i90, label %__internal_fmad.exit1.i85, !dbg !61

__internal_fmad.exit1.i85:                        ; preds = %__nv_tanhf.exit82
  %164 = fmul float %.01.i84, 0x4007154760000000, !dbg !61
  %165 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %164) #5, !dbg !61
  %166 = fadd float %165, 1.000000e+00, !dbg !61
  %167 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %166) #6, !dbg !61, !srcloc !62
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i86 = icmp eq i32 %168, 0, !dbg !61
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %167, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %170 = tail call float @llvm.nvvm.fma.rn.f(float %167, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i87 = select i1 %.not6.i86, float %170, float %169, !dbg !61
  %171 = fcmp oge float %.01.i84, 0x4022059680000000, !dbg !61
  %s.0.i88 = select i1 %171, float 1.000000e+00, float %.03.i87, !dbg !61
  %172 = bitcast float %s.0.i88 to i32, !dbg !61
  %173 = bitcast float %124 to i32, !dbg !61
  %174 = and i32 %173, -2147483648, !dbg !61
  %175 = or i32 %174, %172, !dbg !61
  %176 = bitcast i32 %175 to float, !dbg !61
  br label %__nv_tanhf.exit101, !dbg !61

__internal_fmad.exit3.i90:                        ; preds = %__nv_tanhf.exit82
  %177 = fmul float %124, %124, !dbg !61
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i91 = icmp eq i32 %178, 0, !dbg !61
  %179 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %177, float 0xBFAAC795C0000000) #5, !dbg !61
  %180 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %177, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i92 = select i1 %.not1.i91, float %180, float %179, !dbg !61
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i93 = icmp eq i32 %181, 0, !dbg !61
  %182 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i92, float %177, float 0x3FC10B2820000000) #5, !dbg !61
  %183 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i92, float %177, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i94 = select i1 %.not2.i93, float %183, float %182, !dbg !61
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i95 = icmp eq i32 %184, 0, !dbg !61
  %185 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i94, float %177, float 0xBFD5553DA0000000) #5, !dbg !61
  %186 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i94, float %177, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i96 = select i1 %.not3.i95, float %186, float %185, !dbg !61
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i97 = icmp eq i32 %187, 0, !dbg !61
  %188 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i96, float %177, float 0.000000e+00) #5, !dbg !61
  %189 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i96, float %177, float 0.000000e+00) #5, !dbg !61
  %.04.i98 = select i1 %.not4.i97, float %189, float %188, !dbg !61
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i99 = icmp eq i32 %190, 0, !dbg !61
  %191 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i98, float %124, float %124) #5, !dbg !61
  %192 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i98, float %124, float %124) #5, !dbg !61
  %.02.i100 = select i1 %.not5.i99, float %192, float %191, !dbg !61
  br label %__nv_tanhf.exit101, !dbg !61

__nv_tanhf.exit101:                               ; preds = %__internal_fmad.exit1.i85, %__internal_fmad.exit3.i90
  %s.1.i89 = phi float [ %176, %__internal_fmad.exit1.i85 ], [ %.02.i100, %__internal_fmad.exit3.i90 ], !dbg !61
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i102 = icmp eq i32 %193, 0, !dbg !61
  %194 = tail call float @llvm.nvvm.fabs.ftz.f(float %125) #5, !dbg !61
  %195 = tail call float @llvm.nvvm.fabs.f(float %125) #5, !dbg !61
  %.01.i103 = select i1 %.not.i102, float %195, float %194, !dbg !61
  %196 = fcmp ult float %.01.i103, 0x3FE3333340000000, !dbg !61
  br i1 %196, label %__internal_fmad.exit3.i109, label %__internal_fmad.exit1.i104, !dbg !61

__internal_fmad.exit1.i104:                       ; preds = %__nv_tanhf.exit101
  %197 = fmul float %.01.i103, 0x4007154760000000, !dbg !61
  %198 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %197) #5, !dbg !61
  %199 = fadd float %198, 1.000000e+00, !dbg !61
  %200 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %199) #6, !dbg !61, !srcloc !62
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i105 = icmp eq i32 %201, 0, !dbg !61
  %202 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %200, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %203 = tail call float @llvm.nvvm.fma.rn.f(float %200, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i106 = select i1 %.not6.i105, float %203, float %202, !dbg !61
  %204 = fcmp oge float %.01.i103, 0x4022059680000000, !dbg !61
  %s.0.i107 = select i1 %204, float 1.000000e+00, float %.03.i106, !dbg !61
  %205 = bitcast float %s.0.i107 to i32, !dbg !61
  %206 = bitcast float %125 to i32, !dbg !61
  %207 = and i32 %206, -2147483648, !dbg !61
  %208 = or i32 %207, %205, !dbg !61
  %209 = bitcast i32 %208 to float, !dbg !61
  br label %__nv_tanhf.exit120, !dbg !61

__internal_fmad.exit3.i109:                       ; preds = %__nv_tanhf.exit101
  %210 = fmul float %125, %125, !dbg !61
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i110 = icmp eq i32 %211, 0, !dbg !61
  %212 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %210, float 0xBFAAC795C0000000) #5, !dbg !61
  %213 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %210, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i111 = select i1 %.not1.i110, float %213, float %212, !dbg !61
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i112 = icmp eq i32 %214, 0, !dbg !61
  %215 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i111, float %210, float 0x3FC10B2820000000) #5, !dbg !61
  %216 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i111, float %210, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i113 = select i1 %.not2.i112, float %216, float %215, !dbg !61
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i114 = icmp eq i32 %217, 0, !dbg !61
  %218 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i113, float %210, float 0xBFD5553DA0000000) #5, !dbg !61
  %219 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i113, float %210, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i115 = select i1 %.not3.i114, float %219, float %218, !dbg !61
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i116 = icmp eq i32 %220, 0, !dbg !61
  %221 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i115, float %210, float 0.000000e+00) #5, !dbg !61
  %222 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i115, float %210, float 0.000000e+00) #5, !dbg !61
  %.04.i117 = select i1 %.not4.i116, float %222, float %221, !dbg !61
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i118 = icmp eq i32 %223, 0, !dbg !61
  %224 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i117, float %125, float %125) #5, !dbg !61
  %225 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i117, float %125, float %125) #5, !dbg !61
  %.02.i119 = select i1 %.not5.i118, float %225, float %224, !dbg !61
  br label %__nv_tanhf.exit120, !dbg !61

__nv_tanhf.exit120:                               ; preds = %__internal_fmad.exit1.i104, %__internal_fmad.exit3.i109
  %s.1.i108 = phi float [ %209, %__internal_fmad.exit1.i104 ], [ %.02.i119, %__internal_fmad.exit3.i109 ], !dbg !61
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i121 = icmp eq i32 %226, 0, !dbg !61
  %227 = tail call float @llvm.nvvm.fabs.ftz.f(float %126) #5, !dbg !61
  %228 = tail call float @llvm.nvvm.fabs.f(float %126) #5, !dbg !61
  %.01.i122 = select i1 %.not.i121, float %228, float %227, !dbg !61
  %229 = fcmp ult float %.01.i122, 0x3FE3333340000000, !dbg !61
  br i1 %229, label %__internal_fmad.exit3.i128, label %__internal_fmad.exit1.i123, !dbg !61

__internal_fmad.exit1.i123:                       ; preds = %__nv_tanhf.exit120
  %230 = fmul float %.01.i122, 0x4007154760000000, !dbg !61
  %231 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %230) #5, !dbg !61
  %232 = fadd float %231, 1.000000e+00, !dbg !61
  %233 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %232) #6, !dbg !61, !srcloc !62
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i124 = icmp eq i32 %234, 0, !dbg !61
  %235 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %233, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %236 = tail call float @llvm.nvvm.fma.rn.f(float %233, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i125 = select i1 %.not6.i124, float %236, float %235, !dbg !61
  %237 = fcmp oge float %.01.i122, 0x4022059680000000, !dbg !61
  %s.0.i126 = select i1 %237, float 1.000000e+00, float %.03.i125, !dbg !61
  %238 = bitcast float %s.0.i126 to i32, !dbg !61
  %239 = bitcast float %126 to i32, !dbg !61
  %240 = and i32 %239, -2147483648, !dbg !61
  %241 = or i32 %240, %238, !dbg !61
  %242 = bitcast i32 %241 to float, !dbg !61
  br label %__nv_tanhf.exit139, !dbg !61

__internal_fmad.exit3.i128:                       ; preds = %__nv_tanhf.exit120
  %243 = fmul float %126, %126, !dbg !61
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i129 = icmp eq i32 %244, 0, !dbg !61
  %245 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %243, float 0xBFAAC795C0000000) #5, !dbg !61
  %246 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %243, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i130 = select i1 %.not1.i129, float %246, float %245, !dbg !61
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i131 = icmp eq i32 %247, 0, !dbg !61
  %248 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i130, float %243, float 0x3FC10B2820000000) #5, !dbg !61
  %249 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i130, float %243, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i132 = select i1 %.not2.i131, float %249, float %248, !dbg !61
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i133 = icmp eq i32 %250, 0, !dbg !61
  %251 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i132, float %243, float 0xBFD5553DA0000000) #5, !dbg !61
  %252 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i132, float %243, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i134 = select i1 %.not3.i133, float %252, float %251, !dbg !61
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i135 = icmp eq i32 %253, 0, !dbg !61
  %254 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i134, float %243, float 0.000000e+00) #5, !dbg !61
  %255 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i134, float %243, float 0.000000e+00) #5, !dbg !61
  %.04.i136 = select i1 %.not4.i135, float %255, float %254, !dbg !61
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i137 = icmp eq i32 %256, 0, !dbg !61
  %257 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i136, float %126, float %126) #5, !dbg !61
  %258 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i136, float %126, float %126) #5, !dbg !61
  %.02.i138 = select i1 %.not5.i137, float %258, float %257, !dbg !61
  br label %__nv_tanhf.exit139, !dbg !61

__nv_tanhf.exit139:                               ; preds = %__internal_fmad.exit1.i123, %__internal_fmad.exit3.i128
  %s.1.i127 = phi float [ %242, %__internal_fmad.exit1.i123 ], [ %.02.i138, %__internal_fmad.exit3.i128 ], !dbg !61
  %259 = insertelement <2 x float> poison, float %s.1.i70, i64 0, !dbg !63
  %260 = insertelement <2 x float> %259, float %s.1.i89, i64 1, !dbg !63
  %261 = fadd <2 x float> %260, splat (float 1.000000e+00), !dbg !63
  %262 = insertelement <2 x float> poison, float %s.1.i108, i64 0, !dbg !63
  %263 = insertelement <2 x float> %262, float %s.1.i127, i64 1, !dbg !63
  %264 = fadd <2 x float> %263, splat (float 1.000000e+00), !dbg !63
  %265 = fmul <2 x float> %102, %264, !dbg !64
  %266 = extractelement <2 x float> %265, i64 0, !dbg !65
  %267 = fcmp olt float %59, %266, !dbg !67
  %268 = extractelement <2 x float> %265, i64 1, !dbg !65
  %269 = fcmp olt float %60, %268, !dbg !67
  %270 = fcmp uno <2 x float> %61, zeroinitializer, !dbg !68
  %271 = fcmp uno float %59, 0.000000e+00, !dbg !68
  %272 = fcmp uno float %60, 0.000000e+00, !dbg !68
  %273 = or i1 %271, %267, !dbg !69
  %274 = or i1 %272, %269, !dbg !69
  %275 = fmul <2 x float> %101, %261, !dbg !64
  %276 = fcmp olt <2 x float> %61, %275, !dbg !67
  %277 = or <2 x i1> %270, %276, !dbg !69
  %278 = select <2 x i1> %277, <2 x float> %61, <2 x float> %275, !dbg !65
  %279 = select i1 %273, float %59, float %266, !dbg !65
  %280 = select i1 %274, float %60, float %268, !dbg !65
  %281 = select <2 x i1> %53, <2 x float> %278, <2 x float> %61, !dbg !39
  %282 = select i1 %20, float %279, float %59, !dbg !39
  %283 = select i1 %20, float %280, float %60, !dbg !39
  %284 = fcmp uno <4 x float> %62, zeroinitializer, !dbg !70
  %285 = shufflevector <2 x float> %265, <2 x float> %275, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !72
  %286 = fcmp ogt <4 x float> %62, %285, !dbg !72
  %287 = or <4 x i1> %284, %286, !dbg !73
  %288 = select <4 x i1> %287, <4 x float> %62, <4 x float> %285, !dbg !74
  %289 = select <4 x i1> %57, <4 x float> %288, <4 x float> %62, !dbg !41
  %290 = getelementptr float, ptr addrspace(1) %5, i64 %66, !dbg !75
  %291 = bitcast float %103 to i32, !dbg !76
  %292 = bitcast float %105 to i32, !dbg !76
  %293 = bitcast float %107 to i32, !dbg !76
  %294 = bitcast float %109 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %291, i32 %292, i32 %293, i32 %294, ptr addrspace(1) %290, i1 %20) #5, !dbg !76
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !38
  %295 = icmp samesign ult i64 %indvars.iv, 12280, !dbg !38
  br i1 %295, label %58, label %296, !dbg !38

296:                                              ; preds = %__nv_tanhf.exit139
  %297 = icmp eq i32 %16, 0, !dbg !11
  %298 = and i32 %15, 63, !dbg !11
  %299 = or disjoint i32 %14, %298, !dbg !12
  %300 = icmp slt i32 %299, 512, !dbg !13
  %301 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %281, <2 x i32> <i32 0, i32 2>, !dbg !77
  %302 = fcmp olt <2 x float> %301, %281, !dbg !77
  %303 = fcmp uno <2 x float> %301, %281, !dbg !77
  %shift = shufflevector <2 x i1> %302, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !80
  %304 = or <2 x i1> %shift, %303, !dbg !80
  %305 = extractelement <2 x i1> %304, i64 0, !dbg !80
  %306 = extractelement <2 x float> %281, i64 0, !dbg !81
  %307 = extractelement <2 x float> %281, i64 1, !dbg !81
  %308 = select i1 %305, float %306, float %307, !dbg !81
  %309 = fcmp olt float %308, %282, !dbg !77
  %310 = fcmp uno float %308, 0.000000e+00, !dbg !82
  %311 = or i1 %309, %310, !dbg !80
  %312 = select i1 %311, float %308, float %282, !dbg !81
  %313 = fcmp olt float %312, %283, !dbg !77
  %314 = fcmp uno float %312, 0.000000e+00, !dbg !82
  %315 = or i1 %313, %314, !dbg !80
  %316 = select i1 %315, float %312, float %283, !dbg !81
  %317 = bitcast float %316 to i32, !dbg !83
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 1, i32 31), !dbg !83
  %319 = bitcast i32 %318 to float, !dbg !83
  %320 = fcmp olt float %316, %319, !dbg !77
  %321 = fcmp uno float %316, 0.000000e+00, !dbg !82
  %322 = or i1 %321, %320, !dbg !80
  %323 = select i1 %322, float %316, float %319, !dbg !81
  %324 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18, !dbg !84
  %325 = bitcast float %323 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 true) #5, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %326 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %298, !dbg !84
  %327 = load float, ptr addrspace(3) %326, align 4, !dbg !84
  %328 = extractelement <4 x float> %289, i64 2, !dbg !85
  %329 = extractelement <4 x float> %289, i64 3, !dbg !85
  %330 = fcmp ogt float %329, %328, !dbg !85
  %331 = fcmp uno float %329, 0.000000e+00, !dbg !87
  %332 = or i1 %330, %331, !dbg !88
  %333 = select i1 %332, float %329, float %328, !dbg !89
  %334 = extractelement <4 x float> %289, i64 1, !dbg !85
  %335 = fcmp ogt float %333, %334, !dbg !85
  %336 = fcmp uno float %333, 0.000000e+00, !dbg !87
  %337 = or i1 %335, %336, !dbg !88
  %338 = select i1 %337, float %333, float %334, !dbg !89
  %339 = extractelement <4 x float> %289, i64 0, !dbg !85
  %340 = fcmp ogt float %338, %339, !dbg !85
  %341 = fcmp uno float %338, 0.000000e+00, !dbg !87
  %342 = or i1 %340, %341, !dbg !88
  %343 = select i1 %342, float %338, float %339, !dbg !89
  %344 = bitcast float %343 to i32, !dbg !90
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 1, i32 31), !dbg !90
  %346 = bitcast i32 %345 to float, !dbg !90
  %347 = fcmp ogt float %343, %346, !dbg !85
  %348 = fcmp uno float %343, 0.000000e+00, !dbg !87
  %349 = or i1 %348, %347, !dbg !88
  %350 = select i1 %349, float %343, float %346, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %351 = bitcast float %350 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %351, i1 true) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %352 = load float, ptr addrspace(3) %326, align 4, !dbg !91
  %353 = sext i32 %299 to i64, !dbg !92
  %354 = getelementptr bfloat, ptr addrspace(1) %6, i64 %353, !dbg !92
  %355 = fptrunc float %327 to bfloat, !dbg !84
  %356 = bitcast bfloat %355 to i16, !dbg !84
  %357 = and i1 %297, %300, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %356, ptr addrspace(1) %354, i1 %357) #5, !dbg !84
  %358 = getelementptr bfloat, ptr addrspace(1) %7, i64 %353, !dbg !93
  %359 = fptrunc float %352 to bfloat, !dbg !91
  %360 = bitcast bfloat %359 to i16, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %360, ptr addrspace(1) %358, i1 %357) #5, !dbg !91
  %.inv5 = fcmp oge float %323, 0.000000e+00, !dbg !94
  %361 = select i1 %.inv5, float 0.000000e+00, float %323, !dbg !94
  %362 = fsub float 0.000000e+00, %361, !dbg !96
  %.inv6 = fcmp ole float %350, 0.000000e+00, !dbg !97
  %363 = select i1 %.inv6, float 0.000000e+00, float %350, !dbg !97
  %364 = fcmp ogt float %362, %363, !dbg !99
  %365 = fcmp uno float %362, 0.000000e+00, !dbg !101
  %366 = or i1 %365, %364, !dbg !102
  %367 = select i1 %366, float %362, float %363, !dbg !103
  %368 = fmul float %367, 0x3F80204080000000, !dbg !104
  %369 = fcmp ogt float %368, 0x3EE4F8B580000000, !dbg !105
  %370 = fcmp uno float %368, 0.000000e+00, !dbg !107
  %371 = or i1 %369, %370, !dbg !108
  %372 = select i1 %371, float %368, float 0x3EE4F8B580000000, !dbg !109
  %373 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %372), !dbg !110
  %374 = or disjoint i32 %36, %22
  br label %375, !dbg !111

375:                                              ; preds = %296, %__nv_tanhf.exit63
  %indvars.iv148 = phi i64 [ 0, %296 ], [ %indvars.iv.next149, %__nv_tanhf.exit63 ]
  %376 = trunc nuw nsw i64 %indvars.iv148 to i32, !dbg !112
  %377 = add i32 %374, %376, !dbg !112
  %378 = sext i32 %377 to i64, !dbg !113
  %379 = getelementptr float, ptr addrspace(1) %5, i64 %378, !dbg !113
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %379, i1 %20) #5, !dbg !114
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !114
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !114
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !114
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !114
  %385 = bitcast i32 %381 to float, !dbg !114
  %386 = bitcast i32 %382 to float, !dbg !114
  %387 = bitcast i32 %383 to float, !dbg !114
  %388 = bitcast i32 %384 to float, !dbg !114
  %389 = fmul float %385, 5.000000e-01, !dbg !115
  %390 = fmul float %386, 5.000000e-01, !dbg !115
  %391 = fmul float %387, 5.000000e-01, !dbg !115
  %392 = fmul float %388, 5.000000e-01, !dbg !115
  %393 = fmul float %385, %385, !dbg !116
  %394 = fmul float %386, %386, !dbg !116
  %395 = fmul float %387, %387, !dbg !116
  %396 = fmul float %388, %388, !dbg !116
  %397 = fmul float %393, %385, !dbg !117
  %398 = fmul float %394, %386, !dbg !117
  %399 = fmul float %395, %387, !dbg !117
  %400 = fmul float %396, %388, !dbg !117
  %401 = fmul float %397, 0x3FA6E4E260000000, !dbg !118
  %402 = fmul float %398, 0x3FA6E4E260000000, !dbg !118
  %403 = fmul float %399, 0x3FA6E4E260000000, !dbg !118
  %404 = fmul float %400, 0x3FA6E4E260000000, !dbg !118
  %405 = fadd float %401, %385, !dbg !119
  %406 = fadd float %402, %386, !dbg !119
  %407 = fadd float %403, %387, !dbg !119
  %408 = fadd float %404, %388, !dbg !119
  %409 = fmul float %405, 0x3FE9884540000000, !dbg !120
  %410 = fmul float %406, 0x3FE9884540000000, !dbg !120
  %411 = fmul float %407, 0x3FE9884540000000, !dbg !120
  %412 = fmul float %408, 0x3FE9884540000000, !dbg !120
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not.i = icmp eq i32 %413, 0, !dbg !121
  %414 = tail call float @llvm.nvvm.fabs.ftz.f(float %409) #5, !dbg !121
  %415 = tail call float @llvm.nvvm.fabs.f(float %409) #5, !dbg !121
  %.01.i = select i1 %.not.i, float %415, float %414, !dbg !121
  %416 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !121
  br i1 %416, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !121

__internal_fmad.exit1.i:                          ; preds = %375
  %417 = fmul float %.01.i, 0x4007154760000000, !dbg !121
  %418 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %417) #5, !dbg !121
  %419 = fadd float %418, 1.000000e+00, !dbg !121
  %420 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %419) #6, !dbg !121, !srcloc !62
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not6.i = icmp eq i32 %421, 0, !dbg !121
  %422 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %420, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %423 = tail call float @llvm.nvvm.fma.rn.f(float %420, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %.03.i = select i1 %.not6.i, float %423, float %422, !dbg !121
  %424 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !121
  %s.0.i = select i1 %424, float 1.000000e+00, float %.03.i, !dbg !121
  %425 = bitcast float %s.0.i to i32, !dbg !121
  %426 = bitcast float %409 to i32, !dbg !121
  %427 = and i32 %426, -2147483648, !dbg !121
  %428 = or i32 %427, %425, !dbg !121
  %429 = bitcast i32 %428 to float, !dbg !121
  br label %__nv_tanhf.exit, !dbg !121

__internal_fmad.exit3.i:                          ; preds = %375
  %430 = fmul float %409, %409, !dbg !121
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not1.i = icmp eq i32 %431, 0, !dbg !121
  %432 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %430, float 0xBFAAC795C0000000) #5, !dbg !121
  %433 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %430, float 0xBFAAC795C0000000) #5, !dbg !121
  %.06.i = select i1 %.not1.i, float %433, float %432, !dbg !121
  %434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not2.i = icmp eq i32 %434, 0, !dbg !121
  %435 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %430, float 0x3FC10B2820000000) #5, !dbg !121
  %436 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %430, float 0x3FC10B2820000000) #5, !dbg !121
  %.05.i = select i1 %.not2.i, float %436, float %435, !dbg !121
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not3.i = icmp eq i32 %437, 0, !dbg !121
  %438 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %430, float 0xBFD5553DA0000000) #5, !dbg !121
  %439 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %430, float 0xBFD5553DA0000000) #5, !dbg !121
  %.0.i = select i1 %.not3.i, float %439, float %438, !dbg !121
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not4.i = icmp eq i32 %440, 0, !dbg !121
  %441 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %430, float 0.000000e+00) #5, !dbg !121
  %442 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %430, float 0.000000e+00) #5, !dbg !121
  %.04.i = select i1 %.not4.i, float %442, float %441, !dbg !121
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not5.i = icmp eq i32 %443, 0, !dbg !121
  %444 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %409, float %409) #5, !dbg !121
  %445 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %409, float %409) #5, !dbg !121
  %.02.i = select i1 %.not5.i, float %445, float %444, !dbg !121
  br label %__nv_tanhf.exit, !dbg !121

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %429, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !121
  %446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not.i7 = icmp eq i32 %446, 0, !dbg !121
  %447 = tail call float @llvm.nvvm.fabs.ftz.f(float %410) #5, !dbg !121
  %448 = tail call float @llvm.nvvm.fabs.f(float %410) #5, !dbg !121
  %.01.i8 = select i1 %.not.i7, float %448, float %447, !dbg !121
  %449 = fcmp ult float %.01.i8, 0x3FE3333340000000, !dbg !121
  br i1 %449, label %__internal_fmad.exit3.i14, label %__internal_fmad.exit1.i9, !dbg !121

__internal_fmad.exit1.i9:                         ; preds = %__nv_tanhf.exit
  %450 = fmul float %.01.i8, 0x4007154760000000, !dbg !121
  %451 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %450) #5, !dbg !121
  %452 = fadd float %451, 1.000000e+00, !dbg !121
  %453 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %452) #6, !dbg !121, !srcloc !62
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not6.i10 = icmp eq i32 %454, 0, !dbg !121
  %455 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %453, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %456 = tail call float @llvm.nvvm.fma.rn.f(float %453, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %.03.i11 = select i1 %.not6.i10, float %456, float %455, !dbg !121
  %457 = fcmp oge float %.01.i8, 0x4022059680000000, !dbg !121
  %s.0.i12 = select i1 %457, float 1.000000e+00, float %.03.i11, !dbg !121
  %458 = bitcast float %s.0.i12 to i32, !dbg !121
  %459 = bitcast float %410 to i32, !dbg !121
  %460 = and i32 %459, -2147483648, !dbg !121
  %461 = or i32 %460, %458, !dbg !121
  %462 = bitcast i32 %461 to float, !dbg !121
  br label %__nv_tanhf.exit25, !dbg !121

__internal_fmad.exit3.i14:                        ; preds = %__nv_tanhf.exit
  %463 = fmul float %410, %410, !dbg !121
  %464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not1.i15 = icmp eq i32 %464, 0, !dbg !121
  %465 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %463, float 0xBFAAC795C0000000) #5, !dbg !121
  %466 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %463, float 0xBFAAC795C0000000) #5, !dbg !121
  %.06.i16 = select i1 %.not1.i15, float %466, float %465, !dbg !121
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not2.i17 = icmp eq i32 %467, 0, !dbg !121
  %468 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i16, float %463, float 0x3FC10B2820000000) #5, !dbg !121
  %469 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i16, float %463, float 0x3FC10B2820000000) #5, !dbg !121
  %.05.i18 = select i1 %.not2.i17, float %469, float %468, !dbg !121
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not3.i19 = icmp eq i32 %470, 0, !dbg !121
  %471 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i18, float %463, float 0xBFD5553DA0000000) #5, !dbg !121
  %472 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i18, float %463, float 0xBFD5553DA0000000) #5, !dbg !121
  %.0.i20 = select i1 %.not3.i19, float %472, float %471, !dbg !121
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not4.i21 = icmp eq i32 %473, 0, !dbg !121
  %474 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i20, float %463, float 0.000000e+00) #5, !dbg !121
  %475 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i20, float %463, float 0.000000e+00) #5, !dbg !121
  %.04.i22 = select i1 %.not4.i21, float %475, float %474, !dbg !121
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not5.i23 = icmp eq i32 %476, 0, !dbg !121
  %477 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i22, float %410, float %410) #5, !dbg !121
  %478 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i22, float %410, float %410) #5, !dbg !121
  %.02.i24 = select i1 %.not5.i23, float %478, float %477, !dbg !121
  br label %__nv_tanhf.exit25, !dbg !121

__nv_tanhf.exit25:                                ; preds = %__internal_fmad.exit1.i9, %__internal_fmad.exit3.i14
  %s.1.i13 = phi float [ %462, %__internal_fmad.exit1.i9 ], [ %.02.i24, %__internal_fmad.exit3.i14 ], !dbg !121
  %479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not.i26 = icmp eq i32 %479, 0, !dbg !121
  %480 = tail call float @llvm.nvvm.fabs.ftz.f(float %411) #5, !dbg !121
  %481 = tail call float @llvm.nvvm.fabs.f(float %411) #5, !dbg !121
  %.01.i27 = select i1 %.not.i26, float %481, float %480, !dbg !121
  %482 = fcmp ult float %.01.i27, 0x3FE3333340000000, !dbg !121
  br i1 %482, label %__internal_fmad.exit3.i33, label %__internal_fmad.exit1.i28, !dbg !121

__internal_fmad.exit1.i28:                        ; preds = %__nv_tanhf.exit25
  %483 = fmul float %.01.i27, 0x4007154760000000, !dbg !121
  %484 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %483) #5, !dbg !121
  %485 = fadd float %484, 1.000000e+00, !dbg !121
  %486 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %485) #6, !dbg !121, !srcloc !62
  %487 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not6.i29 = icmp eq i32 %487, 0, !dbg !121
  %488 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %486, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %489 = tail call float @llvm.nvvm.fma.rn.f(float %486, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %.03.i30 = select i1 %.not6.i29, float %489, float %488, !dbg !121
  %490 = fcmp oge float %.01.i27, 0x4022059680000000, !dbg !121
  %s.0.i31 = select i1 %490, float 1.000000e+00, float %.03.i30, !dbg !121
  %491 = bitcast float %s.0.i31 to i32, !dbg !121
  %492 = bitcast float %411 to i32, !dbg !121
  %493 = and i32 %492, -2147483648, !dbg !121
  %494 = or i32 %493, %491, !dbg !121
  %495 = bitcast i32 %494 to float, !dbg !121
  br label %__nv_tanhf.exit44, !dbg !121

__internal_fmad.exit3.i33:                        ; preds = %__nv_tanhf.exit25
  %496 = fmul float %411, %411, !dbg !121
  %497 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not1.i34 = icmp eq i32 %497, 0, !dbg !121
  %498 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %496, float 0xBFAAC795C0000000) #5, !dbg !121
  %499 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %496, float 0xBFAAC795C0000000) #5, !dbg !121
  %.06.i35 = select i1 %.not1.i34, float %499, float %498, !dbg !121
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not2.i36 = icmp eq i32 %500, 0, !dbg !121
  %501 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i35, float %496, float 0x3FC10B2820000000) #5, !dbg !121
  %502 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i35, float %496, float 0x3FC10B2820000000) #5, !dbg !121
  %.05.i37 = select i1 %.not2.i36, float %502, float %501, !dbg !121
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not3.i38 = icmp eq i32 %503, 0, !dbg !121
  %504 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i37, float %496, float 0xBFD5553DA0000000) #5, !dbg !121
  %505 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i37, float %496, float 0xBFD5553DA0000000) #5, !dbg !121
  %.0.i39 = select i1 %.not3.i38, float %505, float %504, !dbg !121
  %506 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not4.i40 = icmp eq i32 %506, 0, !dbg !121
  %507 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i39, float %496, float 0.000000e+00) #5, !dbg !121
  %508 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i39, float %496, float 0.000000e+00) #5, !dbg !121
  %.04.i41 = select i1 %.not4.i40, float %508, float %507, !dbg !121
  %509 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not5.i42 = icmp eq i32 %509, 0, !dbg !121
  %510 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i41, float %411, float %411) #5, !dbg !121
  %511 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i41, float %411, float %411) #5, !dbg !121
  %.02.i43 = select i1 %.not5.i42, float %511, float %510, !dbg !121
  br label %__nv_tanhf.exit44, !dbg !121

__nv_tanhf.exit44:                                ; preds = %__internal_fmad.exit1.i28, %__internal_fmad.exit3.i33
  %s.1.i32 = phi float [ %495, %__internal_fmad.exit1.i28 ], [ %.02.i43, %__internal_fmad.exit3.i33 ], !dbg !121
  %512 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not.i45 = icmp eq i32 %512, 0, !dbg !121
  %513 = tail call float @llvm.nvvm.fabs.ftz.f(float %412) #5, !dbg !121
  %514 = tail call float @llvm.nvvm.fabs.f(float %412) #5, !dbg !121
  %.01.i46 = select i1 %.not.i45, float %514, float %513, !dbg !121
  %515 = fcmp ult float %.01.i46, 0x3FE3333340000000, !dbg !121
  br i1 %515, label %__internal_fmad.exit3.i52, label %__internal_fmad.exit1.i47, !dbg !121

__internal_fmad.exit1.i47:                        ; preds = %__nv_tanhf.exit44
  %516 = fmul float %.01.i46, 0x4007154760000000, !dbg !121
  %517 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %516) #5, !dbg !121
  %518 = fadd float %517, 1.000000e+00, !dbg !121
  %519 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %518) #6, !dbg !121, !srcloc !62
  %520 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not6.i48 = icmp eq i32 %520, 0, !dbg !121
  %521 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %519, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %522 = tail call float @llvm.nvvm.fma.rn.f(float %519, float -2.000000e+00, float 1.000000e+00) #5, !dbg !121
  %.03.i49 = select i1 %.not6.i48, float %522, float %521, !dbg !121
  %523 = fcmp oge float %.01.i46, 0x4022059680000000, !dbg !121
  %s.0.i50 = select i1 %523, float 1.000000e+00, float %.03.i49, !dbg !121
  %524 = bitcast float %s.0.i50 to i32, !dbg !121
  %525 = bitcast float %412 to i32, !dbg !121
  %526 = and i32 %525, -2147483648, !dbg !121
  %527 = or i32 %526, %524, !dbg !121
  %528 = bitcast i32 %527 to float, !dbg !121
  br label %__nv_tanhf.exit63, !dbg !121

__internal_fmad.exit3.i52:                        ; preds = %__nv_tanhf.exit44
  %529 = fmul float %412, %412, !dbg !121
  %530 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not1.i53 = icmp eq i32 %530, 0, !dbg !121
  %531 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %529, float 0xBFAAC795C0000000) #5, !dbg !121
  %532 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %529, float 0xBFAAC795C0000000) #5, !dbg !121
  %.06.i54 = select i1 %.not1.i53, float %532, float %531, !dbg !121
  %533 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not2.i55 = icmp eq i32 %533, 0, !dbg !121
  %534 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i54, float %529, float 0x3FC10B2820000000) #5, !dbg !121
  %535 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i54, float %529, float 0x3FC10B2820000000) #5, !dbg !121
  %.05.i56 = select i1 %.not2.i55, float %535, float %534, !dbg !121
  %536 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not3.i57 = icmp eq i32 %536, 0, !dbg !121
  %537 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i56, float %529, float 0xBFD5553DA0000000) #5, !dbg !121
  %538 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i56, float %529, float 0xBFD5553DA0000000) #5, !dbg !121
  %.0.i58 = select i1 %.not3.i57, float %538, float %537, !dbg !121
  %539 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not4.i59 = icmp eq i32 %539, 0, !dbg !121
  %540 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i58, float %529, float 0.000000e+00) #5, !dbg !121
  %541 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i58, float %529, float 0.000000e+00) #5, !dbg !121
  %.04.i60 = select i1 %.not4.i59, float %541, float %540, !dbg !121
  %542 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !121
  %.not5.i61 = icmp eq i32 %542, 0, !dbg !121
  %543 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i60, float %412, float %412) #5, !dbg !121
  %544 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i60, float %412, float %412) #5, !dbg !121
  %.02.i62 = select i1 %.not5.i61, float %544, float %543, !dbg !121
  br label %__nv_tanhf.exit63, !dbg !121

__nv_tanhf.exit63:                                ; preds = %__internal_fmad.exit1.i47, %__internal_fmad.exit3.i52
  %s.1.i51 = phi float [ %528, %__internal_fmad.exit1.i47 ], [ %.02.i62, %__internal_fmad.exit3.i52 ], !dbg !121
  %545 = fadd float %s.1.i, 1.000000e+00, !dbg !122
  %546 = fadd float %s.1.i13, 1.000000e+00, !dbg !122
  %547 = fadd float %s.1.i32, 1.000000e+00, !dbg !122
  %548 = fadd float %s.1.i51, 1.000000e+00, !dbg !122
  %549 = fmul float %389, %545, !dbg !123
  %550 = fmul float %390, %546, !dbg !123
  %551 = fmul float %391, %547, !dbg !123
  %552 = fmul float %392, %548, !dbg !123
  %553 = fmul float %373, %549, !dbg !124
  %554 = fmul float %373, %550, !dbg !124
  %555 = fmul float %373, %551, !dbg !124
  %556 = fmul float %373, %552, !dbg !124
  %557 = tail call float @llvm.nvvm.round.f(float %553) #5, !dbg !125
  %558 = tail call float @llvm.nvvm.round.f(float %554) #5, !dbg !125
  %559 = tail call float @llvm.nvvm.round.f(float %555) #5, !dbg !125
  %560 = tail call float @llvm.nvvm.round.f(float %556) #5, !dbg !125
  %561 = insertelement <4 x float> poison, float %557, i64 0, !dbg !126
  %562 = insertelement <4 x float> %561, float %558, i64 1, !dbg !126
  %563 = insertelement <4 x float> %562, float %559, i64 2, !dbg !126
  %564 = insertelement <4 x float> %563, float %560, i64 3, !dbg !126
  %565 = fcmp ogt <4 x float> %564, splat (float -1.270000e+02), !dbg !126
  %566 = fcmp uno <4 x float> %564, zeroinitializer, !dbg !128
  %567 = or <4 x i1> %565, %566, !dbg !129
  %568 = select <4 x i1> %567, <4 x float> %564, <4 x float> splat (float -1.270000e+02), !dbg !130
  %569 = fcmp olt <4 x float> %568, splat (float 1.270000e+02), !dbg !131
  %570 = fcmp uno <4 x float> %568, zeroinitializer, !dbg !133
  %571 = or <4 x i1> %569, %570, !dbg !134
  %572 = fptosi <4 x float> %568 to <4 x i8>, !dbg !135
  %573 = select <4 x i1> %571, <4 x i8> %572, <4 x i8> splat (i8 127), !dbg !136
  %574 = getelementptr i8, ptr addrspace(1) %8, i64 %378, !dbg !137
  %575 = bitcast <4 x i8> %573 to i32, !dbg !138
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %575, ptr addrspace(1) %574, i1 %20) #5, !dbg !138
  %indvars.iv.next149 = add nuw nsw i64 %indvars.iv148, 8, !dbg !111
  %576 = icmp samesign ult i64 %indvars.iv148, 12280, !dbg !111
  br i1 %576, label %375, label %577, !dbg !111

577:                                              ; preds = %__nv_tanhf.exit63
  ret void, !dbg !139
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmxyjrahlth755bxxcexivgsgdoyxnb2wwthefvjadx2dkvt3x6m.py", directory: "/tmp/torchinductor_root/mx")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 30, scope: !6)
!18 = !DILocation(line: 30, column: 35, scope: !6)
!19 = !DILocation(line: 39, column: 47, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 44, column: 44, scope: !6)
!24 = !DILocation(line: 45, column: 16, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 46, column: 44, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 47, column: 44, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 49, column: 23, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 52, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 33, column: 40, scope: !6)
!39 = !DILocation(line: 74, column: 50, scope: !6)
!40 = !DILocation(line: 54, column: 23, scope: !6)
!41 = !DILocation(line: 76, column: 50, scope: !6)
!42 = !DILocation(line: 34, column: 31, scope: !6)
!43 = !DILocation(line: 39, column: 41, scope: !6)
!44 = !DILocation(line: 39, column: 34, scope: !6)
!45 = !DILocation(line: 39, column: 52, scope: !6)
!46 = !DILocation(line: 40, column: 35, scope: !6)
!47 = !DILocation(line: 40, column: 42, scope: !6)
!48 = !DILocation(line: 41, column: 35, scope: !6)
!49 = !DILocation(line: 41, column: 42, scope: !6)
!50 = !DILocation(line: 40, column: 95, scope: !6)
!51 = !DILocation(line: 41, column: 95, scope: !6)
!52 = !DILocation(line: 42, column: 23, scope: !6)
!53 = !DILocation(line: 55, column: 24, scope: !6)
!54 = !DILocation(line: 56, column: 24, scope: !6)
!55 = !DILocation(line: 59, column: 24, scope: !6)
!56 = !DILocation(line: 64, column: 24, scope: !6)
!57 = !DILocation(line: 60, column: 24, scope: !6)
!58 = !DILocation(line: 61, column: 24, scope: !6)
!59 = !DILocation(line: 63, column: 24, scope: !6)
!60 = !DILocation(line: 66, column: 24, scope: !6)
!61 = !DILocation(line: 67, column: 31, scope: !6)
!62 = !{i32 21046}
!63 = !DILocation(line: 69, column: 24, scope: !6)
!64 = !DILocation(line: 70, column: 24, scope: !6)
!65 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !66)
!66 = !DILocation(line: 73, column: 47, scope: !6)
!67 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !66)
!68 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !66)
!69 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !66)
!70 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !71)
!71 = !DILocation(line: 75, column: 47, scope: !6)
!72 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !71)
!73 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !71)
!74 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !71)
!75 = !DILocation(line: 77, column: 29, scope: !6)
!76 = !DILocation(line: 77, column: 54, scope: !6)
!77 = !DILocation(line: 94, column: 15, scope: !78, inlinedAt: !79)
!78 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!79 = !DILocation(line: 78, column: 40, scope: !6)
!80 = !DILocation(line: 96, column: 16, scope: !78, inlinedAt: !79)
!81 = !DILocation(line: 97, column: 29, scope: !78, inlinedAt: !79)
!82 = !DILocation(line: 96, column: 21, scope: !78, inlinedAt: !79)
!83 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !79)
!84 = !DILocation(line: 80, column: 37, scope: !6)
!85 = !DILocation(line: 102, column: 15, scope: !78, inlinedAt: !86)
!86 = !DILocation(line: 79, column: 40, scope: !6)
!87 = !DILocation(line: 104, column: 21, scope: !78, inlinedAt: !86)
!88 = !DILocation(line: 104, column: 16, scope: !78, inlinedAt: !86)
!89 = !DILocation(line: 105, column: 29, scope: !78, inlinedAt: !86)
!90 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !86)
!91 = !DILocation(line: 81, column: 37, scope: !6)
!92 = !DILocation(line: 80, column: 25, scope: !6)
!93 = !DILocation(line: 81, column: 25, scope: !6)
!94 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !95)
!95 = !DILocation(line: 104, column: 46, scope: !6)
!96 = !DILocation(line: 105, column: 17, scope: !6)
!97 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !98)
!98 = !DILocation(line: 106, column: 46, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !100)
!100 = !DILocation(line: 107, column: 46, scope: !6)
!101 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !100)
!104 = !DILocation(line: 109, column: 24, scope: !6)
!105 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !106)
!106 = !DILocation(line: 112, column: 46, scope: !6)
!107 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !106)
!108 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !106)
!109 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !106)
!110 = !DILocation(line: 115, column: 25, scope: !6)
!111 = !DILocation(line: 82, column: 40, scope: !6)
!112 = !DILocation(line: 88, column: 43, scope: !6)
!113 = !DILocation(line: 88, column: 36, scope: !6)
!114 = !DILocation(line: 88, column: 54, scope: !6)
!115 = !DILocation(line: 90, column: 24, scope: !6)
!116 = !DILocation(line: 91, column: 24, scope: !6)
!117 = !DILocation(line: 92, column: 24, scope: !6)
!118 = !DILocation(line: 94, column: 24, scope: !6)
!119 = !DILocation(line: 95, column: 24, scope: !6)
!120 = !DILocation(line: 97, column: 24, scope: !6)
!121 = !DILocation(line: 98, column: 31, scope: !6)
!122 = !DILocation(line: 100, column: 24, scope: !6)
!123 = !DILocation(line: 101, column: 24, scope: !6)
!124 = !DILocation(line: 117, column: 24, scope: !6)
!125 = !DILocation(line: 118, column: 36, scope: !6)
!126 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !127)
!127 = !DILocation(line: 121, column: 46, scope: !6)
!128 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !127)
!129 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !127)
!130 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !127)
!131 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !132)
!132 = !DILocation(line: 123, column: 46, scope: !6)
!133 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !132)
!134 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !132)
!135 = !DILocation(line: 125, column: 25, scope: !6)
!136 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !132)
!137 = !DILocation(line: 126, column: 29, scope: !6)
!138 = !DILocation(line: 126, column: 54, scope: !6)
!139 = !DILocation(line: 82, column: 4, scope: !6)
