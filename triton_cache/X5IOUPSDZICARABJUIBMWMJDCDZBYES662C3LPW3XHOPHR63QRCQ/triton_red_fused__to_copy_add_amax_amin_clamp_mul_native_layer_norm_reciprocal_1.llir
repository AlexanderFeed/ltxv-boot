; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 3600, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = shl i32 %18, 2, !dbg !11
  %21 = and i32 %20, 1020, !dbg !11
  %22 = mul i32 %16, 3072, !dbg !12
  %23 = or disjoint i32 %21, %22
  %24 = sext i32 %23 to i64, !dbg !13
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %24, !dbg !13
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %25, i1 %17) #5, !dbg !14
  %27 = extractvalue { i32, i32 } %26, 1, !dbg !14
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !14
  %29 = extractelement <2 x bfloat> %28, i64 1, !dbg !14
  %30 = fpext bfloat %29 to float, !dbg !15
  %31 = extractelement <2 x bfloat> %28, i64 0, !dbg !14
  %32 = fpext bfloat %31 to float, !dbg !15
  %33 = extractvalue { i32, i32 } %26, 0, !dbg !14
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !14
  %35 = extractelement <2 x bfloat> %34, i64 1, !dbg !14
  %36 = fpext bfloat %35 to float, !dbg !15
  %37 = extractelement <2 x bfloat> %34, i64 0, !dbg !14
  %38 = fpext bfloat %37 to float, !dbg !15
  %39 = select i1 %17, float %38, float 0.000000e+00, !dbg !16
  %40 = select i1 %17, float %36, float 0.000000e+00, !dbg !16
  %41 = select i1 %17, float %32, float 0.000000e+00, !dbg !16
  %42 = select i1 %17, float %30, float 0.000000e+00, !dbg !16
  %43 = add i32 %23, 1024, !dbg !17
  %44 = sext i32 %43 to i64, !dbg !13
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !13
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %45, i1 %17) #5, !dbg !14
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !14
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !14
  %49 = extractelement <2 x bfloat> %48, i64 0, !dbg !14
  %50 = fpext bfloat %49 to float, !dbg !15
  %51 = fsub float %50, %39, !dbg !18
  %52 = select i1 %17, float 2.000000e+00, float 1.000000e+00, !dbg !22
  %53 = tail call float @llvm.nvvm.div.full(float %51, float %52), !dbg !23
  %54 = fadd float %39, %53, !dbg !24
  %55 = fsub float %50, %54, !dbg !25
  %56 = fmul float %51, %55, !dbg !26
  %57 = fadd float %56, 0.000000e+00, !dbg !27
  %58 = extractelement <2 x bfloat> %48, i64 1, !dbg !14
  %59 = fpext bfloat %58 to float, !dbg !15
  %60 = fsub float %59, %40, !dbg !18
  %61 = tail call float @llvm.nvvm.div.full(float %60, float %52), !dbg !23
  %62 = fadd float %40, %61, !dbg !24
  %63 = fsub float %59, %62, !dbg !25
  %64 = fmul float %60, %63, !dbg !26
  %65 = fadd float %64, 0.000000e+00, !dbg !27
  %66 = extractvalue { i32, i32 } %46, 1, !dbg !14
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !14
  %68 = extractelement <2 x bfloat> %67, i64 0, !dbg !14
  %69 = fpext bfloat %68 to float, !dbg !15
  %70 = fsub float %69, %41, !dbg !18
  %71 = tail call float @llvm.nvvm.div.full(float %70, float %52), !dbg !23
  %72 = fadd float %41, %71, !dbg !24
  %73 = fsub float %69, %72, !dbg !25
  %74 = fmul float %70, %73, !dbg !26
  %75 = fadd float %74, 0.000000e+00, !dbg !27
  %76 = extractelement <2 x bfloat> %67, i64 1, !dbg !14
  %77 = fpext bfloat %76 to float, !dbg !15
  %78 = fsub float %77, %42, !dbg !18
  %79 = tail call float @llvm.nvvm.div.full(float %78, float %52), !dbg !23
  %80 = fadd float %42, %79, !dbg !24
  %81 = fsub float %77, %80, !dbg !25
  %82 = fmul float %78, %81, !dbg !26
  %83 = fadd float %82, 0.000000e+00, !dbg !27
  %84 = select i1 %17, float %54, float 0.000000e+00, !dbg !16
  %85 = select i1 %17, float %62, float 0.000000e+00, !dbg !16
  %86 = select i1 %17, float %72, float 0.000000e+00, !dbg !16
  %87 = select i1 %17, float %80, float 0.000000e+00, !dbg !16
  %88 = add i32 %23, 2048, !dbg !17
  %89 = sext i32 %88 to i64, !dbg !13
  %90 = getelementptr bfloat, ptr addrspace(1) %0, i64 %89, !dbg !13
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %90, i1 %17) #5, !dbg !14
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !14
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !14
  %94 = extractelement <2 x bfloat> %93, i64 0, !dbg !14
  %95 = fpext bfloat %94 to float, !dbg !15
  %96 = fsub float %95, %84, !dbg !18
  %97 = select i1 %17, float 3.000000e+00, float 1.000000e+00, !dbg !22
  %98 = tail call float @llvm.nvvm.div.full(float %96, float %97), !dbg !23
  %99 = fadd float %84, %98, !dbg !24
  %100 = fsub float %95, %99, !dbg !25
  %101 = fmul float %96, %100, !dbg !26
  %102 = fadd float %57, %101, !dbg !27
  %103 = extractelement <2 x bfloat> %93, i64 1, !dbg !14
  %104 = fpext bfloat %103 to float, !dbg !15
  %105 = fsub float %104, %85, !dbg !18
  %106 = select i1 %17, float 3.000000e+00, float 1.000000e+00, !dbg !22
  %107 = tail call float @llvm.nvvm.div.full(float %105, float %106), !dbg !23
  %108 = fadd float %85, %107, !dbg !24
  %109 = fsub float %104, %108, !dbg !25
  %110 = fmul float %105, %109, !dbg !26
  %111 = fadd float %65, %110, !dbg !27
  %112 = extractvalue { i32, i32 } %91, 1, !dbg !14
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !14
  %114 = extractelement <2 x bfloat> %113, i64 0, !dbg !14
  %115 = fpext bfloat %114 to float, !dbg !15
  %116 = fsub float %115, %86, !dbg !18
  %117 = select i1 %17, float 3.000000e+00, float 1.000000e+00, !dbg !22
  %118 = tail call float @llvm.nvvm.div.full(float %116, float %117), !dbg !23
  %119 = fadd float %86, %118, !dbg !24
  %120 = fsub float %115, %119, !dbg !25
  %121 = fmul float %116, %120, !dbg !26
  %122 = fadd float %75, %121, !dbg !27
  %123 = extractelement <2 x bfloat> %113, i64 1, !dbg !14
  %124 = fpext bfloat %123 to float, !dbg !15
  %125 = fsub float %124, %87, !dbg !18
  %126 = select i1 %17, float 3.000000e+00, float 1.000000e+00, !dbg !22
  %127 = tail call float @llvm.nvvm.div.full(float %125, float %126), !dbg !23
  %128 = fadd float %87, %127, !dbg !24
  %129 = fsub float %124, %128, !dbg !25
  %130 = fmul float %125, %129, !dbg !26
  %131 = fadd float %83, %130, !dbg !27
  %132 = select i1 %17, float %99, float 0.000000e+00, !dbg !16
  %133 = select i1 %17, float %108, float 0.000000e+00, !dbg !16
  %134 = select i1 %17, float %119, float 0.000000e+00, !dbg !16
  %135 = select i1 %17, float %128, float 0.000000e+00, !dbg !16
  %136 = select i1 %17, float %122, float 0.000000e+00, !dbg !28
  %137 = select i1 %17, float %131, float 0.000000e+00, !dbg !28
  %138 = select i1 %17, float 3.000000e+00, float 0.000000e+00, !dbg !22
  %139 = select i1 %17, float 3.000000e+00, float 0.000000e+00, !dbg !22
  %140 = select i1 %17, float 3.000000e+00, float 0.000000e+00, !dbg !22
  %141 = select i1 %17, float 3.000000e+00, float 0.000000e+00, !dbg !22
  %142 = lshr i32 %18, 5, !dbg !11
  %143 = fsub float %133, %132, !dbg !29
  %144 = select i1 %17, float 6.000000e+00, float 0.000000e+00, !dbg !32
  %145 = fcmp oeq float %144, 0.000000e+00, !dbg !33
  %146 = tail call float @llvm.nvvm.div.full(float %139, float %144), !dbg !34
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !35
  %148 = fmul float %143, %147, !dbg !36
  %149 = fadd float %132, %148, !dbg !37
  %150 = fadd float %102, %111, !dbg !38
  %151 = select i1 %17, float %150, float 0.000000e+00, !dbg !38
  %152 = fmul float %143, %143, !dbg !39
  %153 = fmul float %152, %138, !dbg !40
  %154 = fmul float %153, %147, !dbg !41
  %155 = fadd float %151, %154, !dbg !42
  %156 = fsub float %134, %149, !dbg !29
  %157 = select i1 %17, float 9.000000e+00, float 0.000000e+00, !dbg !32
  %158 = fcmp oeq float %157, 0.000000e+00, !dbg !33
  %159 = tail call float @llvm.nvvm.div.full(float %140, float %157), !dbg !34
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !35
  %161 = fmul float %160, %156, !dbg !36
  %162 = fadd float %149, %161, !dbg !37
  %163 = fadd float %136, %155, !dbg !38
  %164 = fmul float %156, %156, !dbg !39
  %165 = fmul float %144, %164, !dbg !40
  %166 = fmul float %160, %165, !dbg !41
  %167 = fadd float %163, %166, !dbg !42
  %168 = fsub float %135, %162, !dbg !29
  %169 = select i1 %17, float 1.200000e+01, float 0.000000e+00, !dbg !32
  %170 = fcmp oeq float %169, 0.000000e+00, !dbg !33
  %171 = tail call float @llvm.nvvm.div.full(float %141, float %169), !dbg !34
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !35
  %173 = fmul float %172, %168, !dbg !36
  %174 = fadd float %162, %173, !dbg !37
  %175 = fadd float %137, %167, !dbg !38
  %176 = fmul float %168, %168, !dbg !39
  %177 = fmul float %157, %176, !dbg !40
  %178 = fmul float %172, %177, !dbg !41
  %179 = fadd float %175, %178, !dbg !42
  %180 = bitcast float %174 to i32, !dbg !43
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 16, i32 31), !dbg !43
  %182 = bitcast i32 %181 to float, !dbg !43
  %183 = bitcast float %179 to i32, !dbg !43
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 16, i32 31), !dbg !43
  %185 = bitcast i32 %184 to float, !dbg !43
  %186 = bitcast float %169 to i32, !dbg !43
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 16, i32 31), !dbg !43
  %188 = bitcast i32 %187 to float, !dbg !43
  %189 = fsub float %182, %174, !dbg !29
  %190 = fadd float %169, %188, !dbg !32
  %191 = fcmp oeq float %190, 0.000000e+00, !dbg !33
  %192 = tail call float @llvm.nvvm.div.full(float %188, float %190), !dbg !34
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !35
  %194 = fmul float %193, %189, !dbg !36
  %195 = fadd float %174, %194, !dbg !37
  %196 = fadd float %179, %185, !dbg !38
  %197 = fmul float %189, %189, !dbg !39
  %198 = fmul float %169, %197, !dbg !40
  %199 = fmul float %193, %198, !dbg !41
  %200 = fadd float %196, %199, !dbg !42
  %201 = bitcast float %195 to i32, !dbg !43
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 8, i32 31), !dbg !43
  %203 = bitcast i32 %202 to float, !dbg !43
  %204 = bitcast float %200 to i32, !dbg !43
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !43
  %206 = bitcast i32 %205 to float, !dbg !43
  %207 = bitcast float %190 to i32, !dbg !43
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 8, i32 31), !dbg !43
  %209 = bitcast i32 %208 to float, !dbg !43
  %210 = fsub float %203, %195, !dbg !29
  %211 = fadd float %190, %209, !dbg !32
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !33
  %213 = tail call float @llvm.nvvm.div.full(float %209, float %211), !dbg !34
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !35
  %215 = fmul float %210, %214, !dbg !36
  %216 = fadd float %195, %215, !dbg !37
  %217 = fadd float %200, %206, !dbg !38
  %218 = fmul float %210, %210, !dbg !39
  %219 = fmul float %190, %218, !dbg !40
  %220 = fmul float %214, %219, !dbg !41
  %221 = fadd float %217, %220, !dbg !42
  %222 = bitcast float %216 to i32, !dbg !43
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 4, i32 31), !dbg !43
  %224 = bitcast i32 %223 to float, !dbg !43
  %225 = bitcast float %221 to i32, !dbg !43
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 4, i32 31), !dbg !43
  %227 = bitcast i32 %226 to float, !dbg !43
  %228 = bitcast float %211 to i32, !dbg !43
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !43
  %230 = bitcast i32 %229 to float, !dbg !43
  %231 = fsub float %224, %216, !dbg !29
  %232 = fadd float %211, %230, !dbg !32
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !33
  %234 = tail call float @llvm.nvvm.div.full(float %230, float %232), !dbg !34
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !35
  %236 = fmul float %231, %235, !dbg !36
  %237 = fadd float %216, %236, !dbg !37
  %238 = fadd float %221, %227, !dbg !38
  %239 = fmul float %231, %231, !dbg !39
  %240 = fmul float %211, %239, !dbg !40
  %241 = fmul float %235, %240, !dbg !41
  %242 = fadd float %238, %241, !dbg !42
  %243 = bitcast float %237 to i32, !dbg !43
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !43
  %245 = bitcast i32 %244 to float, !dbg !43
  %246 = bitcast float %242 to i32, !dbg !43
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 2, i32 31), !dbg !43
  %248 = bitcast i32 %247 to float, !dbg !43
  %249 = bitcast float %232 to i32, !dbg !43
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !43
  %251 = bitcast i32 %250 to float, !dbg !43
  %252 = fsub float %245, %237, !dbg !29
  %253 = fadd float %232, %251, !dbg !32
  %254 = fcmp oeq float %253, 0.000000e+00, !dbg !33
  %255 = tail call float @llvm.nvvm.div.full(float %251, float %253), !dbg !34
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !35
  %257 = fmul float %252, %256, !dbg !36
  %258 = fadd float %237, %257, !dbg !37
  %259 = fadd float %242, %248, !dbg !38
  %260 = fmul float %252, %252, !dbg !39
  %261 = fmul float %232, %260, !dbg !40
  %262 = fmul float %256, %261, !dbg !41
  %263 = fadd float %259, %262, !dbg !42
  %264 = bitcast float %258 to i32, !dbg !43
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 1, i32 31), !dbg !43
  %266 = bitcast i32 %265 to float, !dbg !43
  %267 = bitcast float %263 to i32, !dbg !43
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 1, i32 31), !dbg !43
  %269 = bitcast i32 %268 to float, !dbg !43
  %270 = bitcast float %253 to i32, !dbg !43
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 1, i32 31), !dbg !43
  %272 = bitcast i32 %271 to float, !dbg !43
  %273 = fsub float %266, %258, !dbg !29
  %274 = fadd float %253, %272, !dbg !32
  %275 = fcmp oeq float %274, 0.000000e+00, !dbg !33
  %276 = tail call float @llvm.nvvm.div.full(float %272, float %274), !dbg !34
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !35
  %278 = fmul float %273, %277, !dbg !36
  %279 = fadd float %258, %278, !dbg !37
  %280 = fadd float %263, %269, !dbg !38
  %281 = fmul float %273, %273, !dbg !39
  %282 = fmul float %253, %281, !dbg !40
  %283 = fmul float %277, %282, !dbg !41
  %284 = fadd float %280, %283, !dbg !42
  %285 = and i32 %142, 7, !dbg !43
  %286 = icmp eq i32 %19, 0, !dbg !43
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i32 %285, !dbg !43
  %288 = bitcast float %279 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 %286) #5, !dbg !43
  %289 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %285, !dbg !43
  %290 = bitcast float %284 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 %286) #5, !dbg !43
  %291 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %285, !dbg !43
  %292 = bitcast float %274 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 %286) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %293 = icmp slt i32 %18, 8, !dbg !43
  %294 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !43
  %295 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %294, i1 %293) #5, !dbg !43
  %296 = bitcast i32 %295 to float, !dbg !43
  %297 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %18, !dbg !43
  %298 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %297, i1 %293) #5, !dbg !43
  %299 = bitcast i32 %298 to float, !dbg !43
  %300 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !43
  %301 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %300, i1 %293) #5, !dbg !43
  %302 = bitcast i32 %301 to float, !dbg !43
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 4, i32 31), !dbg !43
  %304 = bitcast i32 %303 to float, !dbg !43
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 4, i32 31), !dbg !43
  %306 = bitcast i32 %305 to float, !dbg !43
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 4, i32 31), !dbg !43
  %308 = bitcast i32 %307 to float, !dbg !43
  %309 = fsub float %304, %296, !dbg !29
  %310 = fadd float %302, %308, !dbg !32
  %311 = fcmp oeq float %310, 0.000000e+00, !dbg !33
  %312 = tail call float @llvm.nvvm.div.full(float %308, float %310), !dbg !34
  %313 = select i1 %311, float 0.000000e+00, float %312, !dbg !35
  %314 = fmul float %309, %313, !dbg !36
  %315 = fadd float %314, %296, !dbg !37
  %316 = fadd float %299, %306, !dbg !38
  %317 = fmul float %309, %309, !dbg !39
  %318 = fmul float %317, %302, !dbg !40
  %319 = fmul float %318, %313, !dbg !41
  %320 = fadd float %316, %319, !dbg !42
  %321 = bitcast float %315 to i32, !dbg !43
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 2, i32 31), !dbg !43
  %323 = bitcast i32 %322 to float, !dbg !43
  %324 = bitcast float %320 to i32, !dbg !43
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 2, i32 31), !dbg !43
  %326 = bitcast i32 %325 to float, !dbg !43
  %327 = bitcast float %310 to i32, !dbg !43
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 2, i32 31), !dbg !43
  %329 = bitcast i32 %328 to float, !dbg !43
  %330 = fsub float %323, %315, !dbg !29
  %331 = fadd float %310, %329, !dbg !32
  %332 = fcmp oeq float %331, 0.000000e+00, !dbg !33
  %333 = tail call float @llvm.nvvm.div.full(float %329, float %331), !dbg !34
  %334 = select i1 %332, float 0.000000e+00, float %333, !dbg !35
  %335 = fmul float %330, %334, !dbg !36
  %336 = fadd float %315, %335, !dbg !37
  %337 = fadd float %320, %326, !dbg !38
  %338 = fmul float %330, %330, !dbg !39
  %339 = fmul float %310, %338, !dbg !40
  %340 = fmul float %334, %339, !dbg !41
  %341 = fadd float %337, %340, !dbg !42
  %342 = bitcast float %336 to i32, !dbg !43
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 1, i32 31), !dbg !43
  %344 = bitcast i32 %343 to float, !dbg !43
  %345 = bitcast float %341 to i32, !dbg !43
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 1, i32 31), !dbg !43
  %347 = bitcast i32 %346 to float, !dbg !43
  %348 = bitcast float %331 to i32, !dbg !43
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 1, i32 31), !dbg !43
  %350 = bitcast i32 %349 to float, !dbg !43
  %351 = fsub float %344, %336, !dbg !29
  %352 = fadd float %331, %350, !dbg !32
  %353 = fcmp oeq float %352, 0.000000e+00, !dbg !33
  %354 = tail call float @llvm.nvvm.div.full(float %350, float %352), !dbg !34
  %355 = select i1 %353, float 0.000000e+00, float %354, !dbg !35
  %356 = fmul float %351, %355, !dbg !36
  %357 = fadd float %336, %356, !dbg !37
  %358 = fadd float %341, %347, !dbg !38
  %359 = fmul float %351, %351, !dbg !39
  %360 = fmul float %331, %359, !dbg !40
  %361 = fmul float %355, %360, !dbg !41
  %362 = fadd float %358, %361, !dbg !42
  %363 = and i32 %18, 7, !dbg !43
  %364 = icmp eq i32 %363, 0, !dbg !43
  %365 = and i1 %293, %364, !dbg !43
  %366 = bitcast float %357 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %366, i1 %365) #5, !dbg !43
  %367 = bitcast float %362 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %367, i1 %365) #5, !dbg !43
  %368 = bitcast float %352 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %368, i1 %365) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %369 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %370 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !43
  %371 = tail call float @llvm.nvvm.div.full(float %370, float 3.072000e+03), !dbg !44
  %372 = fadd float %371, 0x3EB0C6F7A0000000, !dbg !45
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i17 = icmp eq i32 %376, 0, !dbg !46
  br i1 %.not.i17, label %379, label %377, !dbg !46

377:                                              ; preds = %__nv_rsqrtf.exit
  %378 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %372), !dbg !46
  br label %__nv_rsqrtf.exit19, !dbg !46

379:                                              ; preds = %__nv_rsqrtf.exit
  %380 = tail call float @llvm.nvvm.rsqrt.approx.f(float %372), !dbg !46
  br label %__nv_rsqrtf.exit19, !dbg !46

__nv_rsqrtf.exit19:                               ; preds = %377, %379
  %.0.i18 = phi float [ %378, %377 ], [ %380, %379 ], !dbg !46
  %381 = zext nneg i32 %21 to i64, !dbg !47
  %382 = insertelement <2 x i1> poison, i1 %17, i64 0, !dbg !48
  %383 = shufflevector <2 x i1> %382, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !48
  %384 = insertelement <2 x float> poison, float %.0.i18, i64 0, !dbg !49
  %385 = shufflevector <2 x float> %384, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %386 = insertelement <2 x float> poison, float %369, i64 0, !dbg !50
  %387 = shufflevector <2 x float> %386, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %388 = insertelement <4 x i1> poison, i1 %17, i64 0, !dbg !51
  %389 = shufflevector <4 x i1> %388, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !51
  br label %390, !dbg !47

390:                                              ; preds = %__nv_rsqrtf.exit19, %390
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit19 ], [ %indvars.iv.next, %390 ]
  %391 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit19 ], [ %480, %390 ]
  %392 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit19 ], [ %481, %390 ]
  %393 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit19 ], [ %452, %390 ]
  %394 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit19 ], [ %486, %390 ]
  %395 = or disjoint i64 %indvars.iv, %381, !dbg !52
  %396 = trunc nuw nsw i64 %395 to i32, !dbg !53
  %397 = add i32 %22, %396, !dbg !53
  %398 = sext i32 %397 to i64, !dbg !54
  %399 = getelementptr bfloat, ptr addrspace(1) %0, i64 %398, !dbg !54
  %400 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %399, i1 %17) #5, !dbg !55
  %401 = extractvalue { i32, i32 } %400, 0, !dbg !55
  %402 = bitcast i32 %401 to <2 x bfloat>, !dbg !55
  %403 = extractvalue { i32, i32 } %400, 1, !dbg !55
  %404 = bitcast i32 %403 to <2 x bfloat>, !dbg !55
  %405 = add nuw nsw i64 %395, 3072, !dbg !56
  %406 = getelementptr float, ptr addrspace(1) %1, i64 %405, !dbg !57
  %407 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %406, i1 true) #5, !dbg !58
  %408 = extractvalue { i32, i32, i32, i32 } %407, 0, !dbg !58
  %409 = extractvalue { i32, i32, i32, i32 } %407, 1, !dbg !58
  %410 = extractvalue { i32, i32, i32, i32 } %407, 2, !dbg !58
  %411 = extractvalue { i32, i32, i32, i32 } %407, 3, !dbg !58
  %412 = getelementptr bfloat, ptr addrspace(1) %2, i64 %405, !dbg !59
  %413 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %412, i1 true) #5, !dbg !60
  %414 = extractvalue { i32, i32 } %413, 0, !dbg !60
  %415 = bitcast i32 %414 to <2 x bfloat>, !dbg !60
  %416 = extractvalue { i32, i32 } %413, 1, !dbg !60
  %417 = bitcast i32 %416 to <2 x bfloat>, !dbg !60
  %418 = getelementptr float, ptr addrspace(1) %1, i64 %395, !dbg !61
  %419 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %418, i1 true) #5, !dbg !62
  %420 = extractvalue { i32, i32, i32, i32 } %419, 0, !dbg !62
  %421 = extractvalue { i32, i32, i32, i32 } %419, 1, !dbg !62
  %422 = extractvalue { i32, i32, i32, i32 } %419, 2, !dbg !62
  %423 = extractvalue { i32, i32, i32, i32 } %419, 3, !dbg !62
  %424 = getelementptr bfloat, ptr addrspace(1) %2, i64 %395, !dbg !63
  %425 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %424, i1 true) #5, !dbg !64
  %426 = extractvalue { i32, i32 } %425, 0, !dbg !64
  %427 = bitcast i32 %426 to <2 x bfloat>, !dbg !64
  %428 = extractvalue { i32, i32 } %425, 1, !dbg !64
  %429 = bitcast i32 %428 to <2 x bfloat>, !dbg !64
  %430 = fcmp uno <2 x float> %393, zeroinitializer, !dbg !65
  %431 = fcmp uno float %391, 0.000000e+00, !dbg !65
  %432 = fcmp uno float %392, 0.000000e+00, !dbg !65
  %433 = fpext <2 x bfloat> %402 to <2 x float>, !dbg !67
  %434 = insertelement <2 x i32> poison, i32 %408, i64 0, !dbg !58
  %435 = insertelement <2 x i32> %434, i32 %409, i64 1, !dbg !58
  %436 = bitcast <2 x i32> %435 to <2 x float>, !dbg !58
  %437 = fpext <2 x bfloat> %415 to <2 x float>, !dbg !68
  %438 = insertelement <2 x i32> poison, i32 %420, i64 0, !dbg !62
  %439 = insertelement <2 x i32> %438, i32 %421, i64 1, !dbg !62
  %440 = bitcast <2 x i32> %439 to <2 x float>, !dbg !62
  %441 = fpext <2 x bfloat> %427 to <2 x float>, !dbg !69
  %442 = fsub <2 x float> %433, %387, !dbg !50
  %443 = fmul <2 x float> %385, %442, !dbg !49
  %444 = fadd <2 x float> %436, %437, !dbg !70
  %445 = fadd <2 x float> %444, splat (float 1.000000e+00), !dbg !71
  %446 = fmul <2 x float> %443, %445, !dbg !72
  %447 = fadd <2 x float> %440, %441, !dbg !73
  %448 = fadd <2 x float> %446, %447, !dbg !74
  %449 = fcmp olt <2 x float> %393, %448, !dbg !75
  %450 = or <2 x i1> %430, %449, !dbg !76
  %451 = select <2 x i1> %450, <2 x float> %393, <2 x float> %448, !dbg !77
  %452 = select <2 x i1> %383, <2 x float> %451, <2 x float> %393, !dbg !48
  %453 = fcmp uno <4 x float> %394, zeroinitializer, !dbg !78
  %454 = getelementptr bfloat, ptr addrspace(1) %3, i64 %398, !dbg !80
  %455 = fptrunc <2 x float> %448 to <2 x bfloat>, !dbg !81
  %456 = fpext <2 x bfloat> %404 to <2 x float>, !dbg !67
  %457 = insertelement <2 x i32> poison, i32 %410, i64 0, !dbg !58
  %458 = insertelement <2 x i32> %457, i32 %411, i64 1, !dbg !58
  %459 = bitcast <2 x i32> %458 to <2 x float>, !dbg !58
  %460 = fpext <2 x bfloat> %417 to <2 x float>, !dbg !68
  %461 = insertelement <2 x i32> poison, i32 %422, i64 0, !dbg !62
  %462 = insertelement <2 x i32> %461, i32 %423, i64 1, !dbg !62
  %463 = bitcast <2 x i32> %462 to <2 x float>, !dbg !62
  %464 = fpext <2 x bfloat> %429 to <2 x float>, !dbg !69
  %465 = fsub <2 x float> %456, %387, !dbg !50
  %466 = fmul <2 x float> %385, %465, !dbg !49
  %467 = fadd <2 x float> %459, %460, !dbg !70
  %468 = fadd <2 x float> %467, splat (float 1.000000e+00), !dbg !71
  %469 = fmul <2 x float> %466, %468, !dbg !72
  %470 = fadd <2 x float> %463, %464, !dbg !73
  %471 = fadd <2 x float> %469, %470, !dbg !74
  %472 = extractelement <2 x float> %471, i64 0, !dbg !77
  %473 = fcmp olt float %391, %472, !dbg !75
  %474 = extractelement <2 x float> %471, i64 1, !dbg !77
  %475 = fcmp olt float %392, %474, !dbg !75
  %476 = or i1 %431, %473, !dbg !76
  %477 = or i1 %432, %475, !dbg !76
  %478 = select i1 %476, float %391, float %472, !dbg !77
  %479 = select i1 %477, float %392, float %474, !dbg !77
  %480 = select i1 %17, float %478, float %391, !dbg !48
  %481 = select i1 %17, float %479, float %392, !dbg !48
  %482 = shufflevector <2 x float> %448, <2 x float> %471, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !82
  %483 = fcmp ogt <4 x float> %394, %482, !dbg !82
  %484 = or <4 x i1> %453, %483, !dbg !83
  %485 = select <4 x i1> %484, <4 x float> %394, <4 x float> %482, !dbg !84
  %486 = select <4 x i1> %389, <4 x float> %485, <4 x float> %394, !dbg !51
  %487 = fptrunc <2 x float> %471 to <2 x bfloat>, !dbg !81
  %488 = bitcast <2 x bfloat> %455 to i32, !dbg !81
  %489 = bitcast <2 x bfloat> %487 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %488, i32 %489, ptr addrspace(1) %454, i1 %17) #5, !dbg !81
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !47
  %490 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !47
  br i1 %490, label %390, label %491, !dbg !47

491:                                              ; preds = %390
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %492 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %452, <2 x i32> <i32 0, i32 2>, !dbg !87
  %493 = fcmp olt <2 x float> %492, %452, !dbg !87
  %494 = fcmp uno <2 x float> %492, %452, !dbg !87
  %shift = shufflevector <2 x i1> %493, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !88
  %495 = or <2 x i1> %shift, %494, !dbg !88
  %496 = extractelement <2 x i1> %495, i64 0, !dbg !88
  %497 = extractelement <2 x float> %452, i64 0, !dbg !89
  %498 = extractelement <2 x float> %452, i64 1, !dbg !89
  %499 = select i1 %496, float %497, float %498, !dbg !89
  %500 = fcmp olt float %499, %480, !dbg !87
  %501 = fcmp uno float %499, 0.000000e+00, !dbg !90
  %502 = or i1 %500, %501, !dbg !88
  %503 = select i1 %502, float %499, float %480, !dbg !89
  %504 = fcmp olt float %503, %481, !dbg !87
  %505 = fcmp uno float %503, 0.000000e+00, !dbg !90
  %506 = or i1 %504, %505, !dbg !88
  %507 = select i1 %506, float %503, float %481, !dbg !89
  %508 = bitcast float %507 to i32, !dbg !85
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 16, i32 31), !dbg !85
  %510 = bitcast i32 %509 to float, !dbg !85
  %511 = fcmp olt float %507, %510, !dbg !87
  %512 = fcmp uno float %507, 0.000000e+00, !dbg !90
  %513 = or i1 %512, %511, !dbg !88
  %514 = select i1 %513, float %507, float %510, !dbg !89
  %515 = bitcast float %514 to i32, !dbg !85
  %516 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %515, i32 8, i32 31), !dbg !85
  %517 = bitcast i32 %516 to float, !dbg !85
  %518 = fcmp olt float %514, %517, !dbg !87
  %519 = fcmp uno float %514, 0.000000e+00, !dbg !90
  %520 = or i1 %518, %519, !dbg !88
  %521 = select i1 %520, float %514, float %517, !dbg !89
  %522 = bitcast float %521 to i32, !dbg !85
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 4, i32 31), !dbg !85
  %524 = bitcast i32 %523 to float, !dbg !85
  %525 = fcmp olt float %521, %524, !dbg !87
  %526 = fcmp uno float %521, 0.000000e+00, !dbg !90
  %527 = or i1 %525, %526, !dbg !88
  %528 = select i1 %527, float %521, float %524, !dbg !89
  %529 = bitcast float %528 to i32, !dbg !85
  %530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %529, i32 2, i32 31), !dbg !85
  %531 = bitcast i32 %530 to float, !dbg !85
  %532 = fcmp olt float %528, %531, !dbg !87
  %533 = fcmp uno float %528, 0.000000e+00, !dbg !90
  %534 = or i1 %532, %533, !dbg !88
  %535 = select i1 %534, float %528, float %531, !dbg !89
  %536 = bitcast float %535 to i32, !dbg !85
  %537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %536, i32 1, i32 31), !dbg !85
  %538 = bitcast i32 %537 to float, !dbg !85
  %539 = fcmp olt float %535, %538, !dbg !87
  %540 = fcmp uno float %535, 0.000000e+00, !dbg !90
  %541 = or i1 %539, %540, !dbg !88
  %542 = select i1 %541, i32 %536, i32 %537, !dbg !89
  %543 = insertelement <1 x i32> poison, i32 %542, i64 0, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %543, i1 %286) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %544 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %294, i1 %293) #5, !dbg !85
  %545 = bitcast i32 %544 to float, !dbg !85
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %544, i32 4, i32 31), !dbg !85
  %547 = bitcast i32 %546 to float, !dbg !85
  %548 = fcmp olt float %545, %547, !dbg !87
  %549 = fcmp uno float %545, 0.000000e+00, !dbg !90
  %550 = or i1 %549, %548, !dbg !88
  %551 = select i1 %550, float %545, float %547, !dbg !89
  %552 = bitcast float %551 to i32, !dbg !85
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 2, i32 31), !dbg !85
  %554 = bitcast i32 %553 to float, !dbg !85
  %555 = fcmp olt float %551, %554, !dbg !87
  %556 = fcmp uno float %551, 0.000000e+00, !dbg !90
  %557 = or i1 %555, %556, !dbg !88
  %558 = select i1 %557, float %551, float %554, !dbg !89
  %559 = bitcast float %558 to i32, !dbg !85
  %560 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %559, i32 1, i32 31), !dbg !85
  %561 = bitcast i32 %560 to float, !dbg !85
  %562 = fcmp olt float %558, %561, !dbg !87
  %563 = fcmp uno float %558, 0.000000e+00, !dbg !90
  %564 = or i1 %562, %563, !dbg !88
  %565 = select i1 %564, i32 %559, i32 %560, !dbg !89
  %566 = insertelement <1 x i32> poison, i32 %565, i64 0, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %566, i1 %365) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %567 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %568 = extractelement <4 x float> %486, i64 0, !dbg !93
  %569 = extractelement <4 x float> %486, i64 1, !dbg !93
  %570 = fcmp ogt float %568, %569, !dbg !93
  %571 = fcmp uno float %568, 0.000000e+00, !dbg !94
  %572 = or i1 %570, %571, !dbg !95
  %573 = select i1 %572, float %568, float %569, !dbg !96
  %574 = extractelement <4 x float> %486, i64 2, !dbg !93
  %575 = fcmp ogt float %573, %574, !dbg !93
  %576 = fcmp uno float %573, 0.000000e+00, !dbg !94
  %577 = or i1 %575, %576, !dbg !95
  %578 = select i1 %577, float %573, float %574, !dbg !96
  %579 = extractelement <4 x float> %486, i64 3, !dbg !93
  %580 = fcmp ogt float %578, %579, !dbg !93
  %581 = fcmp uno float %578, 0.000000e+00, !dbg !94
  %582 = or i1 %580, %581, !dbg !95
  %583 = select i1 %582, float %578, float %579, !dbg !96
  %584 = bitcast float %583 to i32, !dbg !91
  %585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 16, i32 31), !dbg !91
  %586 = bitcast i32 %585 to float, !dbg !91
  %587 = fcmp ogt float %583, %586, !dbg !93
  %588 = fcmp uno float %583, 0.000000e+00, !dbg !94
  %589 = or i1 %588, %587, !dbg !95
  %590 = select i1 %589, float %583, float %586, !dbg !96
  %591 = bitcast float %590 to i32, !dbg !91
  %592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %591, i32 8, i32 31), !dbg !91
  %593 = bitcast i32 %592 to float, !dbg !91
  %594 = fcmp ogt float %590, %593, !dbg !93
  %595 = fcmp uno float %590, 0.000000e+00, !dbg !94
  %596 = or i1 %594, %595, !dbg !95
  %597 = select i1 %596, float %590, float %593, !dbg !96
  %598 = bitcast float %597 to i32, !dbg !91
  %599 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %598, i32 4, i32 31), !dbg !91
  %600 = bitcast i32 %599 to float, !dbg !91
  %601 = fcmp ogt float %597, %600, !dbg !93
  %602 = fcmp uno float %597, 0.000000e+00, !dbg !94
  %603 = or i1 %601, %602, !dbg !95
  %604 = select i1 %603, float %597, float %600, !dbg !96
  %605 = bitcast float %604 to i32, !dbg !91
  %606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %605, i32 2, i32 31), !dbg !91
  %607 = bitcast i32 %606 to float, !dbg !91
  %608 = fcmp ogt float %604, %607, !dbg !93
  %609 = fcmp uno float %604, 0.000000e+00, !dbg !94
  %610 = or i1 %608, %609, !dbg !95
  %611 = select i1 %610, float %604, float %607, !dbg !96
  %612 = bitcast float %611 to i32, !dbg !91
  %613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %612, i32 1, i32 31), !dbg !91
  %614 = bitcast i32 %613 to float, !dbg !91
  %615 = fcmp ogt float %611, %614, !dbg !93
  %616 = fcmp uno float %611, 0.000000e+00, !dbg !94
  %617 = or i1 %615, %616, !dbg !95
  %618 = select i1 %617, i32 %612, i32 %613, !dbg !96
  %619 = insertelement <1 x i32> poison, i32 %618, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %619, i1 %286) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %620 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %294, i1 %293) #5, !dbg !91
  %621 = bitcast i32 %620 to float, !dbg !91
  %622 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %620, i32 4, i32 31), !dbg !91
  %623 = bitcast i32 %622 to float, !dbg !91
  %624 = fcmp ogt float %621, %623, !dbg !93
  %625 = fcmp uno float %621, 0.000000e+00, !dbg !94
  %626 = or i1 %625, %624, !dbg !95
  %627 = select i1 %626, float %621, float %623, !dbg !96
  %628 = bitcast float %627 to i32, !dbg !91
  %629 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %628, i32 2, i32 31), !dbg !91
  %630 = bitcast i32 %629 to float, !dbg !91
  %631 = fcmp ogt float %627, %630, !dbg !93
  %632 = fcmp uno float %627, 0.000000e+00, !dbg !94
  %633 = or i1 %631, %632, !dbg !95
  %634 = select i1 %633, float %627, float %630, !dbg !96
  %635 = bitcast float %634 to i32, !dbg !91
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 1, i32 31), !dbg !91
  %637 = bitcast i32 %636 to float, !dbg !91
  %638 = fcmp ogt float %634, %637, !dbg !93
  %639 = fcmp uno float %634, 0.000000e+00, !dbg !94
  %640 = or i1 %638, %639, !dbg !95
  %641 = select i1 %640, i32 %635, i32 %636, !dbg !96
  %642 = insertelement <1 x i32> poison, i32 %641, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %642, i1 %365) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %643 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !91
  %644 = sext i32 %16 to i64, !dbg !97
  %645 = getelementptr bfloat, ptr addrspace(1) %4, i64 %644, !dbg !97
  %646 = fptrunc float %567 to bfloat, !dbg !98
  %647 = and i32 %18, 255, !dbg !98
  %648 = icmp eq i32 %647, 0, !dbg !98
  %649 = bitcast bfloat %646 to i16, !dbg !98
  %650 = and i1 %17, %648, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %649, ptr addrspace(1) %645, i1 %650) #5, !dbg !98
  %651 = getelementptr bfloat, ptr addrspace(1) %5, i64 %644, !dbg !99
  %652 = fptrunc float %643 to bfloat, !dbg !100
  %653 = bitcast bfloat %652 to i16, !dbg !100
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %653, ptr addrspace(1) %651, i1 %650) #5, !dbg !100
  %654 = getelementptr bfloat, ptr addrspace(1) %6, i64 %644, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %649, ptr addrspace(1) %654, i1 %650) #5, !dbg !102
  %655 = getelementptr bfloat, ptr addrspace(1) %7, i64 %644, !dbg !103
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %653, ptr addrspace(1) %655, i1 %650) #5, !dbg !104
  %656 = getelementptr bfloat, ptr addrspace(1) %8, i64 %644, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %649, ptr addrspace(1) %656, i1 %650) #5, !dbg !106
  %657 = getelementptr bfloat, ptr addrspace(1) %9, i64 %644, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %653, ptr addrspace(1) %657, i1 %650) #5, !dbg !108
  %.inv = fcmp oge float %567, 0.000000e+00, !dbg !109
  %658 = select i1 %.inv, float 0.000000e+00, float %567, !dbg !109
  %659 = fsub float 0.000000e+00, %658, !dbg !111
  %.inv3 = fcmp ole float %643, 0.000000e+00, !dbg !112
  %660 = select i1 %.inv3, float 0.000000e+00, float %643, !dbg !112
  %661 = fcmp ogt float %659, %660, !dbg !114
  %662 = fcmp uno float %659, 0.000000e+00, !dbg !116
  %663 = or i1 %662, %661, !dbg !117
  %664 = select i1 %663, float %659, float %660, !dbg !118
  %665 = fmul float %664, 0x3F80204080000000, !dbg !119
  %666 = fcmp ogt float %665, 0x3EE4F8B580000000, !dbg !120
  %667 = fcmp uno float %665, 0.000000e+00, !dbg !122
  %668 = or i1 %666, %667, !dbg !123
  %669 = select i1 %668, float %665, float 0x3EE4F8B580000000, !dbg !124
  %670 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %669), !dbg !125
  %671 = getelementptr bfloat, ptr addrspace(1) %3, i64 %24, !dbg !126
  %672 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %671, i1 %17) #5, !dbg !127
  %673 = extractvalue { i32, i32 } %672, 0, !dbg !127
  %674 = bitcast i32 %673 to <2 x bfloat>, !dbg !127
  %675 = extractvalue { i32, i32 } %672, 1, !dbg !127
  %676 = bitcast i32 %675 to <2 x bfloat>, !dbg !127
  %677 = extractelement <2 x bfloat> %674, i64 0, !dbg !127
  %678 = extractelement <2 x bfloat> %674, i64 1, !dbg !127
  %679 = extractelement <2 x bfloat> %676, i64 0, !dbg !127
  %680 = extractelement <2 x bfloat> %676, i64 1, !dbg !127
  %681 = fpext bfloat %677 to float, !dbg !128
  %682 = fpext bfloat %678 to float, !dbg !128
  %683 = fpext bfloat %679 to float, !dbg !128
  %684 = fpext bfloat %680 to float, !dbg !128
  %685 = fmul float %670, %681, !dbg !129
  %686 = fmul float %670, %682, !dbg !129
  %687 = fmul float %670, %683, !dbg !129
  %688 = fmul float %670, %684, !dbg !129
  %689 = tail call float @llvm.nvvm.round.f(float %685) #5, !dbg !130
  %690 = tail call float @llvm.nvvm.round.f(float %686) #5, !dbg !130
  %691 = tail call float @llvm.nvvm.round.f(float %687) #5, !dbg !130
  %692 = tail call float @llvm.nvvm.round.f(float %688) #5, !dbg !130
  %693 = insertelement <4 x float> poison, float %689, i64 0, !dbg !131
  %694 = insertelement <4 x float> %693, float %690, i64 1, !dbg !131
  %695 = insertelement <4 x float> %694, float %691, i64 2, !dbg !131
  %696 = insertelement <4 x float> %695, float %692, i64 3, !dbg !131
  %697 = fcmp ogt <4 x float> %696, splat (float -1.270000e+02), !dbg !131
  %698 = fcmp uno <4 x float> %696, zeroinitializer, !dbg !133
  %699 = or <4 x i1> %697, %698, !dbg !134
  %700 = select <4 x i1> %699, <4 x float> %696, <4 x float> splat (float -1.270000e+02), !dbg !135
  %701 = fcmp olt <4 x float> %700, splat (float 1.270000e+02), !dbg !136
  %702 = fcmp uno <4 x float> %700, zeroinitializer, !dbg !138
  %703 = or <4 x i1> %701, %702, !dbg !139
  %704 = fptosi <4 x float> %700 to <4 x i8>, !dbg !140
  %705 = select <4 x i1> %703, <4 x i8> %704, <4 x i8> splat (i8 127), !dbg !141
  %706 = getelementptr i8, ptr addrspace(1) %10, i64 %24, !dbg !142
  %707 = bitcast <4 x i8> %705 to i32, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %707, ptr addrspace(1) %706, i1 %17) #5, !dbg !143
  %708 = getelementptr i8, ptr addrspace(1) %11, i64 %24, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %707, ptr addrspace(1) %708, i1 %17) #5, !dbg !145
  %709 = getelementptr i8, ptr addrspace(1) %12, i64 %24, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %707, ptr addrspace(1) %709, i1 %17) #5, !dbg !147
  %710 = getelementptr bfloat, ptr addrspace(1) %3, i64 %44, !dbg !126
  %711 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %710, i1 %17) #5, !dbg !127
  %712 = extractvalue { i32, i32 } %711, 0, !dbg !127
  %713 = bitcast i32 %712 to <2 x bfloat>, !dbg !127
  %714 = extractvalue { i32, i32 } %711, 1, !dbg !127
  %715 = bitcast i32 %714 to <2 x bfloat>, !dbg !127
  %716 = extractelement <2 x bfloat> %713, i64 0, !dbg !127
  %717 = extractelement <2 x bfloat> %713, i64 1, !dbg !127
  %718 = extractelement <2 x bfloat> %715, i64 0, !dbg !127
  %719 = extractelement <2 x bfloat> %715, i64 1, !dbg !127
  %720 = fpext bfloat %716 to float, !dbg !128
  %721 = fpext bfloat %717 to float, !dbg !128
  %722 = fpext bfloat %718 to float, !dbg !128
  %723 = fpext bfloat %719 to float, !dbg !128
  %724 = fmul float %670, %720, !dbg !129
  %725 = fmul float %670, %721, !dbg !129
  %726 = fmul float %670, %722, !dbg !129
  %727 = fmul float %670, %723, !dbg !129
  %728 = tail call float @llvm.nvvm.round.f(float %724) #5, !dbg !130
  %729 = tail call float @llvm.nvvm.round.f(float %725) #5, !dbg !130
  %730 = tail call float @llvm.nvvm.round.f(float %726) #5, !dbg !130
  %731 = tail call float @llvm.nvvm.round.f(float %727) #5, !dbg !130
  %732 = insertelement <4 x float> poison, float %728, i64 0, !dbg !131
  %733 = insertelement <4 x float> %732, float %729, i64 1, !dbg !131
  %734 = insertelement <4 x float> %733, float %730, i64 2, !dbg !131
  %735 = insertelement <4 x float> %734, float %731, i64 3, !dbg !131
  %736 = fcmp ogt <4 x float> %735, splat (float -1.270000e+02), !dbg !131
  %737 = fcmp uno <4 x float> %735, zeroinitializer, !dbg !133
  %738 = or <4 x i1> %736, %737, !dbg !134
  %739 = select <4 x i1> %738, <4 x float> %735, <4 x float> splat (float -1.270000e+02), !dbg !135
  %740 = fcmp olt <4 x float> %739, splat (float 1.270000e+02), !dbg !136
  %741 = fcmp uno <4 x float> %739, zeroinitializer, !dbg !138
  %742 = or <4 x i1> %740, %741, !dbg !139
  %743 = fptosi <4 x float> %739 to <4 x i8>, !dbg !140
  %744 = select <4 x i1> %742, <4 x i8> %743, <4 x i8> splat (i8 127), !dbg !141
  %745 = getelementptr i8, ptr addrspace(1) %10, i64 %44, !dbg !142
  %746 = bitcast <4 x i8> %744 to i32, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %746, ptr addrspace(1) %745, i1 %17) #5, !dbg !143
  %747 = getelementptr i8, ptr addrspace(1) %11, i64 %44, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %746, ptr addrspace(1) %747, i1 %17) #5, !dbg !145
  %748 = getelementptr i8, ptr addrspace(1) %12, i64 %44, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %746, ptr addrspace(1) %748, i1 %17) #5, !dbg !147
  %749 = getelementptr bfloat, ptr addrspace(1) %3, i64 %89, !dbg !126
  %750 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %749, i1 %17) #5, !dbg !127
  %751 = extractvalue { i32, i32 } %750, 0, !dbg !127
  %752 = bitcast i32 %751 to <2 x bfloat>, !dbg !127
  %753 = extractvalue { i32, i32 } %750, 1, !dbg !127
  %754 = bitcast i32 %753 to <2 x bfloat>, !dbg !127
  %755 = extractelement <2 x bfloat> %752, i64 0, !dbg !127
  %756 = extractelement <2 x bfloat> %752, i64 1, !dbg !127
  %757 = extractelement <2 x bfloat> %754, i64 0, !dbg !127
  %758 = extractelement <2 x bfloat> %754, i64 1, !dbg !127
  %759 = fpext bfloat %755 to float, !dbg !128
  %760 = fpext bfloat %756 to float, !dbg !128
  %761 = fpext bfloat %757 to float, !dbg !128
  %762 = fpext bfloat %758 to float, !dbg !128
  %763 = fmul float %670, %759, !dbg !129
  %764 = fmul float %670, %760, !dbg !129
  %765 = fmul float %670, %761, !dbg !129
  %766 = fmul float %670, %762, !dbg !129
  %767 = tail call float @llvm.nvvm.round.f(float %763) #5, !dbg !130
  %768 = tail call float @llvm.nvvm.round.f(float %764) #5, !dbg !130
  %769 = tail call float @llvm.nvvm.round.f(float %765) #5, !dbg !130
  %770 = tail call float @llvm.nvvm.round.f(float %766) #5, !dbg !130
  %771 = insertelement <4 x float> poison, float %767, i64 0, !dbg !131
  %772 = insertelement <4 x float> %771, float %768, i64 1, !dbg !131
  %773 = insertelement <4 x float> %772, float %769, i64 2, !dbg !131
  %774 = insertelement <4 x float> %773, float %770, i64 3, !dbg !131
  %775 = fcmp ogt <4 x float> %774, splat (float -1.270000e+02), !dbg !131
  %776 = fcmp uno <4 x float> %774, zeroinitializer, !dbg !133
  %777 = or <4 x i1> %775, %776, !dbg !134
  %778 = select <4 x i1> %777, <4 x float> %774, <4 x float> splat (float -1.270000e+02), !dbg !135
  %779 = fcmp olt <4 x float> %778, splat (float 1.270000e+02), !dbg !136
  %780 = fcmp uno <4 x float> %778, zeroinitializer, !dbg !138
  %781 = or <4 x i1> %779, %780, !dbg !139
  %782 = fptosi <4 x float> %778 to <4 x i8>, !dbg !140
  %783 = select <4 x i1> %781, <4 x i8> %782, <4 x i8> splat (i8 127), !dbg !141
  %784 = getelementptr i8, ptr addrspace(1) %10, i64 %89, !dbg !142
  %785 = bitcast <4 x i8> %783 to i32, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %785, ptr addrspace(1) %784, i1 %17) #5, !dbg !143
  %786 = getelementptr i8, ptr addrspace(1) %11, i64 %89, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %785, ptr addrspace(1) %786, i1 %17) #5, !dbg !145
  %787 = getelementptr i8, ptr addrspace(1) %12, i64 %89, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %785, ptr addrspace(1) %787, i1 %17) #5, !dbg !147
  ret void, !dbg !148
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 38, column: 34, scope: !6)
!14 = !DILocation(line: 38, column: 51, scope: !6)
!15 = !DILocation(line: 38, column: 112, scope: !6)
!16 = !DILocation(line: 44, column: 62, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 208, column: 24, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !6, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 42, column: 51, scope: !6)
!22 = !DILocation(line: 46, column: 66, scope: !6)
!23 = !DILocation(line: 210, column: 34, scope: !19, inlinedAt: !21)
!24 = !DILocation(line: 210, column: 26, scope: !19, inlinedAt: !21)
!25 = !DILocation(line: 211, column: 39, scope: !19, inlinedAt: !21)
!26 = !DILocation(line: 211, column: 31, scope: !19, inlinedAt: !21)
!27 = !DILocation(line: 211, column: 22, scope: !19, inlinedAt: !21)
!28 = !DILocation(line: 45, column: 58, scope: !6)
!29 = !DILocation(line: 217, column: 21, scope: !30, inlinedAt: !31)
!30 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!31 = !DILocation(line: 47, column: 79, scope: !6)
!32 = !DILocation(line: 218, column: 28, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 219, column: 39, scope: !30, inlinedAt: !31)
!34 = !DILocation(line: 219, column: 60, scope: !30, inlinedAt: !31)
!35 = !DILocation(line: 219, column: 49, scope: !30, inlinedAt: !31)
!36 = !DILocation(line: 221, column: 25, scope: !30, inlinedAt: !31)
!37 = !DILocation(line: 221, column: 17, scope: !30, inlinedAt: !31)
!38 = !DILocation(line: 222, column: 15, scope: !30, inlinedAt: !31)
!39 = !DILocation(line: 222, column: 30, scope: !30, inlinedAt: !31)
!40 = !DILocation(line: 222, column: 38, scope: !30, inlinedAt: !31)
!41 = !DILocation(line: 222, column: 49, scope: !30, inlinedAt: !31)
!42 = !DILocation(line: 222, column: 22, scope: !30, inlinedAt: !31)
!43 = !DILocation(line: 229, column: 46, scope: !19, inlinedAt: !31)
!44 = !DILocation(line: 67, column: 24, scope: !6)
!45 = !DILocation(line: 69, column: 24, scope: !6)
!46 = !DILocation(line: 70, column: 32, scope: !6)
!47 = !DILocation(line: 53, column: 40, scope: !6)
!48 = !DILocation(line: 83, column: 50, scope: !6)
!49 = !DILocation(line: 71, column: 24, scope: !6)
!50 = !DILocation(line: 65, column: 24, scope: !6)
!51 = !DILocation(line: 85, column: 50, scope: !6)
!52 = !DILocation(line: 54, column: 31, scope: !6)
!53 = !DILocation(line: 59, column: 41, scope: !6)
!54 = !DILocation(line: 59, column: 34, scope: !6)
!55 = !DILocation(line: 59, column: 51, scope: !6)
!56 = !DILocation(line: 60, column: 42, scope: !6)
!57 = !DILocation(line: 60, column: 35, scope: !6)
!58 = !DILocation(line: 60, column: 49, scope: !6)
!59 = !DILocation(line: 61, column: 35, scope: !6)
!60 = !DILocation(line: 61, column: 49, scope: !6)
!61 = !DILocation(line: 62, column: 35, scope: !6)
!62 = !DILocation(line: 62, column: 42, scope: !6)
!63 = !DILocation(line: 63, column: 35, scope: !6)
!64 = !DILocation(line: 63, column: 42, scope: !6)
!65 = !DILocation(line: 96, column: 21, scope: !19, inlinedAt: !66)
!66 = !DILocation(line: 82, column: 47, scope: !6)
!67 = !DILocation(line: 59, column: 113, scope: !6)
!68 = !DILocation(line: 61, column: 102, scope: !6)
!69 = !DILocation(line: 63, column: 95, scope: !6)
!70 = !DILocation(line: 74, column: 24, scope: !6)
!71 = !DILocation(line: 76, column: 24, scope: !6)
!72 = !DILocation(line: 77, column: 24, scope: !6)
!73 = !DILocation(line: 79, column: 24, scope: !6)
!74 = !DILocation(line: 80, column: 24, scope: !6)
!75 = !DILocation(line: 94, column: 15, scope: !19, inlinedAt: !66)
!76 = !DILocation(line: 96, column: 16, scope: !19, inlinedAt: !66)
!77 = !DILocation(line: 97, column: 29, scope: !19, inlinedAt: !66)
!78 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !79)
!79 = !DILocation(line: 84, column: 47, scope: !6)
!80 = !DILocation(line: 86, column: 29, scope: !6)
!81 = !DILocation(line: 86, column: 53, scope: !6)
!82 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !79)
!83 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !79)
!84 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !79)
!85 = !DILocation(line: 110, column: 29, scope: !19, inlinedAt: !86)
!86 = !DILocation(line: 87, column: 40, scope: !6)
!87 = !DILocation(line: 94, column: 15, scope: !30, inlinedAt: !86)
!88 = !DILocation(line: 96, column: 16, scope: !30, inlinedAt: !86)
!89 = !DILocation(line: 97, column: 29, scope: !30, inlinedAt: !86)
!90 = !DILocation(line: 96, column: 21, scope: !30, inlinedAt: !86)
!91 = !DILocation(line: 115, column: 29, scope: !19, inlinedAt: !92)
!92 = !DILocation(line: 88, column: 40, scope: !6)
!93 = !DILocation(line: 102, column: 15, scope: !30, inlinedAt: !92)
!94 = !DILocation(line: 104, column: 21, scope: !30, inlinedAt: !92)
!95 = !DILocation(line: 104, column: 16, scope: !30, inlinedAt: !92)
!96 = !DILocation(line: 105, column: 29, scope: !30, inlinedAt: !92)
!97 = !DILocation(line: 89, column: 25, scope: !6)
!98 = !DILocation(line: 89, column: 37, scope: !6)
!99 = !DILocation(line: 90, column: 25, scope: !6)
!100 = !DILocation(line: 90, column: 37, scope: !6)
!101 = !DILocation(line: 91, column: 25, scope: !6)
!102 = !DILocation(line: 91, column: 37, scope: !6)
!103 = !DILocation(line: 92, column: 25, scope: !6)
!104 = !DILocation(line: 92, column: 37, scope: !6)
!105 = !DILocation(line: 93, column: 25, scope: !6)
!106 = !DILocation(line: 93, column: 37, scope: !6)
!107 = !DILocation(line: 94, column: 25, scope: !6)
!108 = !DILocation(line: 94, column: 37, scope: !6)
!109 = !DILocation(line: 97, column: 29, scope: !19, inlinedAt: !110)
!110 = !DILocation(line: 103, column: 46, scope: !6)
!111 = !DILocation(line: 104, column: 17, scope: !6)
!112 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !113)
!113 = !DILocation(line: 105, column: 46, scope: !6)
!114 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !115)
!115 = !DILocation(line: 106, column: 46, scope: !6)
!116 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !115)
!117 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !115)
!118 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !115)
!119 = !DILocation(line: 108, column: 24, scope: !6)
!120 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !121)
!121 = !DILocation(line: 111, column: 46, scope: !6)
!122 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !121)
!123 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !121)
!124 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !121)
!125 = !DILocation(line: 114, column: 25, scope: !6)
!126 = !DILocation(line: 101, column: 36, scope: !6)
!127 = !DILocation(line: 101, column: 53, scope: !6)
!128 = !DILocation(line: 101, column: 115, scope: !6)
!129 = !DILocation(line: 117, column: 24, scope: !6)
!130 = !DILocation(line: 118, column: 36, scope: !6)
!131 = !DILocation(line: 102, column: 15, scope: !19, inlinedAt: !132)
!132 = !DILocation(line: 121, column: 46, scope: !6)
!133 = !DILocation(line: 104, column: 21, scope: !19, inlinedAt: !132)
!134 = !DILocation(line: 104, column: 16, scope: !19, inlinedAt: !132)
!135 = !DILocation(line: 105, column: 29, scope: !19, inlinedAt: !132)
!136 = !DILocation(line: 94, column: 15, scope: !19, inlinedAt: !137)
!137 = !DILocation(line: 123, column: 46, scope: !6)
!138 = !DILocation(line: 96, column: 21, scope: !19, inlinedAt: !137)
!139 = !DILocation(line: 96, column: 16, scope: !19, inlinedAt: !137)
!140 = !DILocation(line: 125, column: 25, scope: !6)
!141 = !DILocation(line: 97, column: 29, scope: !19, inlinedAt: !137)
!142 = !DILocation(line: 126, column: 29, scope: !6)
!143 = !DILocation(line: 126, column: 53, scope: !6)
!144 = !DILocation(line: 127, column: 30, scope: !6)
!145 = !DILocation(line: 127, column: 54, scope: !6)
!146 = !DILocation(line: 128, column: 30, scope: !6)
!147 = !DILocation(line: 128, column: 54, scope: !6)
!148 = !DILocation(line: 95, column: 4, scope: !6)
