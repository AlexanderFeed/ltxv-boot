; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [83 x i8] c"/tmp/torchinductor_root/4e/c4et2ivhnsbzuvgvkskhvusxztafqlvnki7nq4vyvec3t57z3owu.py\00"
@assertMessage_1 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp11 < 77\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/4e/c4et2ivhnsbzuvgvkskhvusxztafqlvnki7nq4vyvec3t57z3owu.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 49408\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_per_fused_add_embedding_native_layer_norm_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !10 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 1020, !dbg !12
  %17 = icmp samesign ult i32 %16, 768, !dbg !13
  %18 = sext i32 %13 to i64, !dbg !14
  %19 = getelementptr i64, ptr addrspace(1) %1, i64 %18, !dbg !14
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l"(ptr addrspace(1) %19) #6, !dbg !15
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l"(ptr addrspace(1) %19) #6, !dbg !15
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l"(ptr addrspace(1) %19) #6, !dbg !15
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l"(ptr addrspace(1) %19) #6, !dbg !15
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l"(ptr addrspace(1) %19) #6, !dbg !15
  %25 = getelementptr i64, ptr addrspace(1) %3, i64 %18, !dbg !16
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l"(ptr addrspace(1) %25) #6, !dbg !17
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l"(ptr addrspace(1) %25) #6, !dbg !17
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l"(ptr addrspace(1) %25) #6, !dbg !17
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l"(ptr addrspace(1) %25) #6, !dbg !17
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l"(ptr addrspace(1) %25) #6, !dbg !17
  %31 = mul i32 %13, 768, !dbg !18
  %32 = add i32 %16, %31, !dbg !19
  %33 = sext i32 %32 to i64, !dbg !20
  %34 = getelementptr bfloat, ptr addrspace(1) %0, i64 %33, !dbg !20
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %34, i1 %17) #6, !dbg !21
  %36 = zext nneg i32 %16 to i64, !dbg !22
  %37 = getelementptr bfloat, ptr addrspace(1) %5, i64 %36, !dbg !22
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %37, i1 %17) #6, !dbg !23
  %39 = getelementptr bfloat, ptr addrspace(1) %6, i64 %36, !dbg !24
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %39, i1 %17) #6, !dbg !25
  %41 = getelementptr bfloat, ptr addrspace(1) %7, i64 %36, !dbg !26
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %17) #6, !dbg !27
  %43 = add i64 %24, 49408, !dbg !28
  %44 = icmp slt i64 %24, 0, !dbg !29
  %45 = select i1 %44, i64 %43, i64 %24, !dbg !30
  %46 = icmp ugt i64 %45, 49407, !dbg !31
  br i1 %46, label %47, label %48, !dbg !32

47:                                               ; preds = %12
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 45, ptr nonnull @assertFunc_0, i64 1), !dbg !32
  unreachable, !dbg !32

48:                                               ; preds = %12
  %49 = icmp slt i64 %23, 0, !dbg !29
  %50 = add i64 %23, 49408, !dbg !28
  %51 = select i1 %49, i64 %50, i64 %23, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %.idx = mul i64 %51, 1536, !dbg !33
  %52 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !33
  %53 = getelementptr bfloat, ptr addrspace(1) %52, i64 %36, !dbg !33
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %53, i1 %17) #6, !dbg !34
  %55 = add i64 %30, 77, !dbg !35
  %56 = icmp slt i64 %30, 0, !dbg !36
  %57 = select i1 %56, i64 %55, i64 %30, !dbg !37
  %58 = icmp ugt i64 %57, 76, !dbg !38
  br i1 %58, label %59, label %60, !dbg !39

59:                                               ; preds = %48
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 51, ptr nonnull @assertFunc_1, i64 1), !dbg !39
  unreachable, !dbg !39

60:                                               ; preds = %48
  %61 = icmp slt i64 %29, 0, !dbg !36
  %62 = add i64 %29, 77, !dbg !35
  %63 = select i1 %61, i64 %62, i64 %29, !dbg !37
  %64 = extractvalue { i32, i32 } %54, 1, !dbg !34
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !34
  %66 = extractvalue { i32, i32 } %54, 0, !dbg !34
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !34
  %68 = extractvalue { i32, i32 } %38, 1, !dbg !23
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !23
  %70 = extractvalue { i32, i32 } %38, 0, !dbg !23
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !23
  %72 = extractvalue { i32, i32 } %35, 1, !dbg !21
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !21
  %74 = extractvalue { i32, i32 } %35, 0, !dbg !21
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !21
  %76 = lshr i32 %14, 5, !dbg !12
  %77 = and i32 %14, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %.idx1 = mul i64 %63, 1536, !dbg !40
  %78 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx1, !dbg !40
  %79 = getelementptr bfloat, ptr addrspace(1) %78, i64 %36, !dbg !40
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %79, i1 %17) #6, !dbg !41
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !41
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !41
  %83 = extractvalue { i32, i32 } %80, 1, !dbg !41
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !41
  %85 = fpext <2 x bfloat> %67 to <2 x float>, !dbg !42
  %86 = fpext <2 x bfloat> %71 to <2 x float>, !dbg !43
  %87 = fpext <2 x bfloat> %75 to <2 x float>, !dbg !44
  %88 = fpext <2 x bfloat> %82 to <2 x float>, !dbg !45
  %89 = fadd <2 x float> %85, %88, !dbg !46
  %90 = fadd <2 x float> %87, %86, !dbg !47
  %91 = fadd <2 x float> %90, %89, !dbg !48
  %92 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !42
  %93 = fpext <2 x bfloat> %69 to <2 x float>, !dbg !43
  %94 = fpext <2 x bfloat> %73 to <2 x float>, !dbg !44
  %95 = fpext <2 x bfloat> %84 to <2 x float>, !dbg !45
  %96 = fadd <2 x float> %92, %95, !dbg !46
  %97 = fadd <2 x float> %94, %93, !dbg !47
  %98 = fadd <2 x float> %97, %96, !dbg !48
  %99 = extractelement <2 x float> %91, i64 0, !dbg !49
  %100 = extractelement <2 x float> %91, i64 1, !dbg !49
  %101 = fadd float %99, %100, !dbg !49
  %102 = extractelement <2 x float> %98, i64 0, !dbg !49
  %103 = fadd float %102, %101, !dbg !49
  %104 = extractelement <2 x float> %98, i64 1, !dbg !49
  %105 = fadd float %104, %103, !dbg !49
  %106 = select i1 %17, float %105, float 0.000000e+00, !dbg !49
  %107 = bitcast float %106 to i32, !dbg !54
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !54
  %109 = bitcast i32 %108 to float, !dbg !54
  %110 = fadd float %106, %109, !dbg !49
  %111 = bitcast float %110 to i32, !dbg !54
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !54
  %113 = bitcast i32 %112 to float, !dbg !54
  %114 = fadd float %110, %113, !dbg !49
  %115 = bitcast float %114 to i32, !dbg !54
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !54
  %117 = bitcast i32 %116 to float, !dbg !54
  %118 = fadd float %114, %117, !dbg !49
  %119 = bitcast float %118 to i32, !dbg !54
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !54
  %121 = bitcast i32 %120 to float, !dbg !54
  %122 = fadd float %118, %121, !dbg !49
  %123 = bitcast float %122 to i32, !dbg !54
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !54
  %125 = bitcast i32 %124 to float, !dbg !54
  %126 = fadd float %122, %125, !dbg !49
  %127 = and i32 %76, 7, !dbg !54
  %128 = icmp eq i32 %77, 0, !dbg !54
  %129 = zext nneg i32 %127 to i64, !dbg !54
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i64 %129, !dbg !54
  %131 = bitcast float %126 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 %128) #6, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %132 = icmp slt i32 %14, 8, !dbg !54
  %133 = sext i32 %14 to i64, !dbg !54
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i64 %133, !dbg !54
  %135 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %134, i1 %132) #6, !dbg !54
  %136 = bitcast i32 %135 to float, !dbg !54
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !54
  %138 = bitcast i32 %137 to float, !dbg !54
  %139 = fadd float %136, %138, !dbg !49
  %140 = bitcast float %139 to i32, !dbg !54
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !54
  %142 = bitcast i32 %141 to float, !dbg !54
  %143 = fadd float %139, %142, !dbg !49
  %144 = bitcast float %143 to i32, !dbg !54
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !54
  %146 = bitcast i32 %145 to float, !dbg !54
  %147 = fadd float %143, %146, !dbg !49
  %148 = and i32 %14, 7, !dbg !54
  %149 = icmp eq i32 %148, 0, !dbg !54
  %150 = and i1 %132, %149, !dbg !54
  %151 = bitcast float %147 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %151, i1 %150) #6, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %152 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !54
  %153 = fadd float %152, 0.000000e+00, !dbg !55
  %154 = tail call float @llvm.nvvm.div.full(float %153, float 7.680000e+02), !dbg !59
  %155 = fsub float %99, %154, !dbg !60
  %156 = fsub float %100, %154, !dbg !60
  %157 = fsub float %102, %154, !dbg !60
  %158 = fsub float %104, %154, !dbg !60
  %159 = fmul float %155, %155, !dbg !61
  %160 = fmul float %156, %156, !dbg !61
  %161 = fmul float %157, %157, !dbg !61
  %162 = fmul float %158, %158, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %163 = fadd float %159, %160, !dbg !64
  %164 = fadd float %161, %163, !dbg !64
  %165 = fadd float %162, %164, !dbg !64
  %166 = select i1 %17, float %165, float 0.000000e+00, !dbg !64
  %167 = bitcast float %166 to i32, !dbg !62
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 16, i32 31), !dbg !62
  %169 = bitcast i32 %168 to float, !dbg !62
  %170 = fadd float %166, %169, !dbg !64
  %171 = bitcast float %170 to i32, !dbg !62
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 8, i32 31), !dbg !62
  %173 = bitcast i32 %172 to float, !dbg !62
  %174 = fadd float %170, %173, !dbg !64
  %175 = bitcast float %174 to i32, !dbg !62
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 4, i32 31), !dbg !62
  %177 = bitcast i32 %176 to float, !dbg !62
  %178 = fadd float %174, %177, !dbg !64
  %179 = bitcast float %178 to i32, !dbg !62
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 2, i32 31), !dbg !62
  %181 = bitcast i32 %180 to float, !dbg !62
  %182 = fadd float %178, %181, !dbg !64
  %183 = bitcast float %182 to i32, !dbg !62
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !62
  %185 = bitcast i32 %184 to float, !dbg !62
  %186 = fadd float %182, %185, !dbg !64
  %187 = bitcast float %186 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %187, i1 %128) #6, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %188 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %134, i1 %132) #6, !dbg !62
  %189 = bitcast i32 %188 to float, !dbg !62
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 4, i32 31), !dbg !62
  %191 = bitcast i32 %190 to float, !dbg !62
  %192 = fadd float %189, %191, !dbg !64
  %193 = bitcast float %192 to i32, !dbg !62
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 2, i32 31), !dbg !62
  %195 = bitcast i32 %194 to float, !dbg !62
  %196 = fadd float %192, %195, !dbg !64
  %197 = bitcast float %196 to i32, !dbg !62
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 1, i32 31), !dbg !62
  %199 = bitcast i32 %198 to float, !dbg !62
  %200 = fadd float %196, %199, !dbg !64
  %201 = bitcast float %200 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %201, i1 %150) #6, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %202 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !62
  %203 = fadd float %202, 0.000000e+00, !dbg !65
  %204 = tail call float @llvm.nvvm.div.full(float %203, float 7.680000e+02), !dbg !67
  %205 = fadd float %204, 0x3EE4F8B580000000, !dbg !68
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !69
  %.not.i = icmp eq i32 %206, 0, !dbg !69
  br i1 %.not.i, label %209, label %207, !dbg !69

207:                                              ; preds = %60
  %208 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %205), !dbg !69
  br label %__nv_rsqrtf.exit, !dbg !69

209:                                              ; preds = %60
  %210 = tail call float @llvm.nvvm.rsqrt.approx.f(float %205), !dbg !69
  br label %__nv_rsqrtf.exit, !dbg !69

__nv_rsqrtf.exit:                                 ; preds = %207, %209
  %.0.i = phi float [ %208, %207 ], [ %210, %209 ], !dbg !69
  %211 = extractvalue { i32, i32 } %40, 0, !dbg !25
  %212 = bitcast i32 %211 to <2 x bfloat>, !dbg !25
  %213 = extractelement <2 x bfloat> %212, i64 0, !dbg !25
  %214 = fpext bfloat %213 to float, !dbg !70
  %215 = extractelement <2 x bfloat> %212, i64 1, !dbg !25
  %216 = fpext bfloat %215 to float, !dbg !70
  %217 = extractvalue { i32, i32 } %40, 1, !dbg !25
  %218 = bitcast i32 %217 to <2 x bfloat>, !dbg !25
  %219 = extractelement <2 x bfloat> %218, i64 0, !dbg !25
  %220 = fpext bfloat %219 to float, !dbg !70
  %221 = extractelement <2 x bfloat> %218, i64 1, !dbg !25
  %222 = fpext bfloat %221 to float, !dbg !70
  %223 = extractvalue { i32, i32 } %42, 0, !dbg !27
  %224 = bitcast i32 %223 to <2 x bfloat>, !dbg !27
  %225 = extractelement <2 x bfloat> %224, i64 0, !dbg !27
  %226 = fpext bfloat %225 to float, !dbg !71
  %227 = extractelement <2 x bfloat> %224, i64 1, !dbg !27
  %228 = fpext bfloat %227 to float, !dbg !71
  %229 = extractvalue { i32, i32 } %42, 1, !dbg !27
  %230 = bitcast i32 %229 to <2 x bfloat>, !dbg !27
  %231 = extractelement <2 x bfloat> %230, i64 0, !dbg !27
  %232 = fpext bfloat %231 to float, !dbg !71
  %233 = extractelement <2 x bfloat> %230, i64 1, !dbg !27
  %234 = fpext bfloat %233 to float, !dbg !71
  %235 = fmul float %155, %.0.i, !dbg !72
  %236 = fmul float %156, %.0.i, !dbg !72
  %237 = fmul float %157, %.0.i, !dbg !72
  %238 = fmul float %158, %.0.i, !dbg !72
  %239 = fmul float %235, %214, !dbg !73
  %240 = fmul float %236, %216, !dbg !73
  %241 = fmul float %237, %220, !dbg !73
  %242 = fmul float %238, %222, !dbg !73
  %243 = fadd float %239, %226, !dbg !74
  %244 = fadd float %240, %228, !dbg !74
  %245 = fadd float %241, %232, !dbg !74
  %246 = fadd float %242, %234, !dbg !74
  %247 = fptrunc <2 x float> %91 to <2 x bfloat>, !dbg !75
  %248 = fptrunc <2 x float> %98 to <2 x bfloat>, !dbg !75
  %249 = bitcast <2 x bfloat> %247 to i32, !dbg !75
  %250 = bitcast <2 x bfloat> %248 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %249, i32 %250, ptr addrspace(1) %34, i1 %17) #6, !dbg !75
  %251 = getelementptr bfloat, ptr addrspace(1) %8, i64 %33, !dbg !76
  %252 = fptrunc float %243 to bfloat, !dbg !77
  %253 = fptrunc float %244 to bfloat, !dbg !77
  %254 = fptrunc float %245 to bfloat, !dbg !77
  %255 = fptrunc float %246 to bfloat, !dbg !77
  %256 = insertelement <2 x bfloat> poison, bfloat %252, i64 0, !dbg !77
  %257 = insertelement <2 x bfloat> %256, bfloat %253, i64 1, !dbg !77
  %258 = bitcast <2 x bfloat> %257 to i32, !dbg !77
  %259 = insertelement <2 x bfloat> poison, bfloat %254, i64 0, !dbg !77
  %260 = insertelement <2 x bfloat> %259, bfloat %255, i64 1, !dbg !77
  %261 = bitcast <2 x bfloat> %260 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %258, i32 %261, ptr addrspace(1) %251, i1 %17) #6, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4et2ivhnsbzuvgvkskhvusxztafqlvnki7nq4vyvec3t57z3owu.py", directory: "/tmp/torchinductor_root/4e")
!4 = !{ptr @triton_per_fused_add_embedding_native_layer_norm_3, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_per_fused_add_embedding_native_layer_norm_3", linkageName: "triton_per_fused_add_embedding_native_layer_norm_3", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 25, column: 28, scope: !10)
!12 = !DILocation(line: 28, column: 28, scope: !10)
!13 = !DILocation(line: 30, column: 25, scope: !10)
!14 = !DILocation(line: 35, column: 30, scope: !10)
!15 = !DILocation(line: 35, column: 35, scope: !10)
!16 = !DILocation(line: 36, column: 30, scope: !10)
!17 = !DILocation(line: 36, column: 35, scope: !10)
!18 = !DILocation(line: 37, column: 46, scope: !10)
!19 = !DILocation(line: 37, column: 42, scope: !10)
!20 = !DILocation(line: 37, column: 35, scope: !10)
!21 = !DILocation(line: 37, column: 51, scope: !10)
!22 = !DILocation(line: 38, column: 31, scope: !10)
!23 = !DILocation(line: 38, column: 38, scope: !10)
!24 = !DILocation(line: 39, column: 31, scope: !10)
!25 = !DILocation(line: 39, column: 38, scope: !10)
!26 = !DILocation(line: 40, column: 31, scope: !10)
!27 = !DILocation(line: 40, column: 38, scope: !10)
!28 = !DILocation(line: 42, column: 18, scope: !10)
!29 = !DILocation(line: 43, column: 18, scope: !10)
!30 = !DILocation(line: 44, column: 32, scope: !10)
!31 = !DILocation(line: 45, column: 36, scope: !10)
!32 = !DILocation(line: 45, column: 51, scope: !10)
!33 = !DILocation(line: 46, column: 30, scope: !10)
!34 = !DILocation(line: 46, column: 48, scope: !10)
!35 = !DILocation(line: 48, column: 18, scope: !10)
!36 = !DILocation(line: 49, column: 19, scope: !10)
!37 = !DILocation(line: 50, column: 34, scope: !10)
!38 = !DILocation(line: 51, column: 37, scope: !10)
!39 = !DILocation(line: 51, column: 50, scope: !10)
!40 = !DILocation(line: 52, column: 31, scope: !10)
!41 = !DILocation(line: 52, column: 50, scope: !10)
!42 = !DILocation(line: 46, column: 71, scope: !10)
!43 = !DILocation(line: 38, column: 91, scope: !10)
!44 = !DILocation(line: 37, column: 74, scope: !10)
!45 = !DILocation(line: 52, column: 73, scope: !10)
!46 = !DILocation(line: 53, column: 19, scope: !10)
!47 = !DILocation(line: 54, column: 20, scope: !10)
!48 = !DILocation(line: 55, column: 20, scope: !10)
!49 = !DILocation(line: 256, column: 15, scope: !50, inlinedAt: !53)
!50 = distinct !DILexicalBlockFile(scope: !52, file: !51, discriminator: 0)
!51 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!52 = distinct !DILexicalBlockFile(scope: !10, file: !51, discriminator: 0)
!53 = !DILocation(line: 61, column: 59, scope: !10)
!54 = !DILocation(line: 286, column: 36, scope: !52, inlinedAt: !53)
!55 = !DILocation(line: 57, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !10, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 61, column: 45, scope: !10)
!59 = !DILocation(line: 64, column: 21, scope: !10)
!60 = !DILocation(line: 65, column: 20, scope: !10)
!61 = !DILocation(line: 66, column: 20, scope: !10)
!62 = !DILocation(line: 286, column: 36, scope: !52, inlinedAt: !63)
!63 = !DILocation(line: 69, column: 59, scope: !10)
!64 = !DILocation(line: 256, column: 15, scope: !50, inlinedAt: !63)
!65 = !DILocation(line: 57, column: 15, scope: !56, inlinedAt: !66)
!66 = !DILocation(line: 69, column: 45, scope: !10)
!67 = !DILocation(line: 72, column: 21, scope: !10)
!68 = !DILocation(line: 74, column: 20, scope: !10)
!69 = !DILocation(line: 75, column: 28, scope: !10)
!70 = !DILocation(line: 39, column: 91, scope: !10)
!71 = !DILocation(line: 40, column: 91, scope: !10)
!72 = !DILocation(line: 76, column: 20, scope: !10)
!73 = !DILocation(line: 78, column: 20, scope: !10)
!74 = !DILocation(line: 80, column: 20, scope: !10)
!75 = !DILocation(line: 82, column: 51, scope: !10)
!76 = !DILocation(line: 83, column: 25, scope: !10)
!77 = !DILocation(line: 83, column: 48, scope: !10)
!78 = !DILocation(line: 83, column: 4, scope: !10)
