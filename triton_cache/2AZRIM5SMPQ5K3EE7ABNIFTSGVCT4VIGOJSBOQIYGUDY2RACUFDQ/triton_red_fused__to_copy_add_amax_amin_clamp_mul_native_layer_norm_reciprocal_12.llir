; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 1, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 32, !dbg !11
  %.lobit = lshr exact i32 %20, 5, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %18, !dbg !12
  %23 = icmp slt i32 %22, 512, !dbg !13
  %24 = icmp slt i32 %18, 512, !dbg !13
  %25 = shl i32 %19, 3, !dbg !14
  %26 = and i32 %25, 504, !dbg !14
  %27 = or disjoint i32 %26, 4, !dbg !14
  %28 = shl i32 %19, 4, !dbg !14
  %29 = and i32 %28, 496, !dbg !14
  %30 = or disjoint i32 %29, 4, !dbg !14
  %31 = or disjoint i32 %29, 8, !dbg !14
  %32 = or disjoint i32 %29, 12, !dbg !14
  %33 = sext i32 %22 to i64, !dbg !15
  %34 = getelementptr bfloat, ptr addrspace(1) %4, i64 %33, !dbg !15
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %51 = bitcast i16 %50 to bfloat, !dbg !16
  %52 = getelementptr bfloat, ptr addrspace(1) %5, i64 %33, !dbg !17
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %69 = bitcast i16 %68 to bfloat, !dbg !18
  %70 = mul i32 %22, 3072, !dbg !19
  %71 = mul i32 %17, 6144, !dbg !19
  %72 = add i32 %71, 3072, !dbg !19
  %.inv = fcmp oge bfloat %51, 0xR0000, !dbg !20
  %73 = select i1 %.inv, bfloat 0xR0000, bfloat %51, !dbg !20
  %74 = fpext bfloat %73 to float, !dbg !20
  %75 = fsub float 0.000000e+00, %74, !dbg !24
  %.inv4 = fcmp ole bfloat %69, 0xR0000, !dbg !25
  %76 = select i1 %.inv4, bfloat 0xR0000, bfloat %69, !dbg !25
  %77 = fpext bfloat %76 to float, !dbg !25
  %78 = fcmp ogt float %75, %77, !dbg !27
  %79 = fcmp uno float %75, 0.000000e+00, !dbg !29
  %80 = or i1 %79, %78, !dbg !30
  %81 = select i1 %80, float %75, float %77, !dbg !31
  %82 = fmul float %81, 0x3F80204080000000, !dbg !32
  %83 = fcmp ogt float %82, 0x3EE4F8B580000000, !dbg !33
  %84 = fcmp uno float %82, 0.000000e+00, !dbg !35
  %85 = or i1 %83, %84, !dbg !36
  %86 = select i1 %85, float %82, float 0x3EE4F8B580000000, !dbg !37
  %87 = or disjoint i32 %70, %29
  %88 = or disjoint i32 %70, %30
  %89 = or disjoint i32 %70, %31
  %90 = or disjoint i32 %70, %32
  %invariant.gep = getelementptr i8, ptr addrspace(1) %1, i64 24576, !dbg !38
  %91 = and i32 %28, 1008
  %92 = lshr exact i32 %20, 3
  %93 = lshr exact i32 %20, 2
  %94 = or disjoint i32 %93, %91
  %95 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %94
  %96 = or disjoint i32 %91, 8
  %97 = lshr exact i32 %20, 1
  %98 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %97
  %99 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %98, i32 %96
  %100 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26
  %101 = getelementptr inbounds nuw i8, ptr addrspace(3) %100, i32 1040
  %102 = or disjoint i32 %92, %91
  %103 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %102
  %104 = or disjoint i32 %91, 4
  %105 = getelementptr inbounds nuw float, ptr addrspace(3) %98, i32 %104
  %106 = or disjoint i32 %96, %92
  %107 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %106
  %108 = or disjoint i32 %91, 12
  %109 = getelementptr inbounds nuw float, ptr addrspace(3) %98, i32 %108
  %110 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26
  %111 = or disjoint i32 %26, 516
  %112 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %111
  %113 = zext nneg i32 %27 to i64, !dbg !38
  %114 = zext nneg i32 %26 to i64, !dbg !38
  %115 = getelementptr inbounds nuw i8, ptr addrspace(3) %100, i32 1044
  %116 = getelementptr inbounds nuw i8, ptr addrspace(3) %100, i32 1052
  %117 = insertelement <16 x i1> poison, i1 %24, i64 0, !dbg !39
  %118 = shufflevector <16 x i1> %117, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !39
  br label %119, !dbg !38

119:                                              ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %120 = phi float [ 0.000000e+00, %16 ], [ %544, %._crit_edge ]
  %121 = phi float [ 0.000000e+00, %16 ], [ %545, %._crit_edge ]
  %122 = phi float [ 0.000000e+00, %16 ], [ %546, %._crit_edge ]
  %123 = phi float [ 0.000000e+00, %16 ], [ %547, %._crit_edge ]
  %124 = phi float [ 0.000000e+00, %16 ], [ %548, %._crit_edge ]
  %125 = phi float [ 0.000000e+00, %16 ], [ %549, %._crit_edge ]
  %126 = phi float [ 0.000000e+00, %16 ], [ %550, %._crit_edge ]
  %127 = phi float [ 0.000000e+00, %16 ], [ %551, %._crit_edge ]
  %128 = phi float [ 0.000000e+00, %16 ], [ %552, %._crit_edge ]
  %129 = phi float [ 0.000000e+00, %16 ], [ %553, %._crit_edge ]
  %130 = phi float [ 0.000000e+00, %16 ], [ %554, %._crit_edge ]
  %131 = phi float [ 0.000000e+00, %16 ], [ %555, %._crit_edge ]
  %132 = phi float [ 0.000000e+00, %16 ], [ %556, %._crit_edge ]
  %133 = phi float [ 0.000000e+00, %16 ], [ %557, %._crit_edge ]
  %134 = phi float [ 0.000000e+00, %16 ], [ %558, %._crit_edge ]
  %135 = phi float [ 0.000000e+00, %16 ], [ %559, %._crit_edge ]
  %136 = phi float [ 0.000000e+00, %16 ], [ %528, %._crit_edge ]
  %137 = phi float [ 0.000000e+00, %16 ], [ %529, %._crit_edge ]
  %138 = phi float [ 0.000000e+00, %16 ], [ %530, %._crit_edge ]
  %139 = phi float [ 0.000000e+00, %16 ], [ %531, %._crit_edge ]
  %140 = phi float [ 0.000000e+00, %16 ], [ %532, %._crit_edge ]
  %141 = phi float [ 0.000000e+00, %16 ], [ %533, %._crit_edge ]
  %142 = phi float [ 0.000000e+00, %16 ], [ %534, %._crit_edge ]
  %143 = phi float [ 0.000000e+00, %16 ], [ %535, %._crit_edge ]
  %144 = phi float [ 0.000000e+00, %16 ], [ %536, %._crit_edge ]
  %145 = phi float [ 0.000000e+00, %16 ], [ %537, %._crit_edge ]
  %146 = phi float [ 0.000000e+00, %16 ], [ %538, %._crit_edge ]
  %147 = phi float [ 0.000000e+00, %16 ], [ %539, %._crit_edge ]
  %148 = phi float [ 0.000000e+00, %16 ], [ %540, %._crit_edge ]
  %149 = phi float [ 0.000000e+00, %16 ], [ %541, %._crit_edge ]
  %150 = phi float [ 0.000000e+00, %16 ], [ %542, %._crit_edge ]
  %151 = phi float [ 0.000000e+00, %16 ], [ %543, %._crit_edge ]
  %152 = phi <16 x float> [ zeroinitializer, %16 ], [ %527, %._crit_edge ]
  %153 = or disjoint i64 %indvars.iv, %114, !dbg !40
  %154 = or disjoint i64 %indvars.iv, %113, !dbg !40
  %155 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %156 = add i32 %87, %155, !dbg !41
  %157 = add i32 %88, %155, !dbg !41
  %158 = add i32 %89, %155, !dbg !41
  %159 = add i32 %90, %155, !dbg !41
  %160 = trunc nuw nsw i64 %153 to i32, !dbg !41
  %161 = add i32 %71, %160, !dbg !41
  %162 = add i32 %72, %160, !dbg !41
  %163 = sext i32 %156 to i64, !dbg !42
  %164 = getelementptr bfloat, ptr addrspace(1) %0, i64 %163, !dbg !42
  %165 = sext i32 %158 to i64, !dbg !42
  %166 = getelementptr bfloat, ptr addrspace(1) %0, i64 %165, !dbg !42
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %164, i1 %23) #5, !dbg !43
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !43
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !43
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !43
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !43
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %166, i1 %23) #5, !dbg !43
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !43
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !43
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !43
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %95, i32 %168, i32 %169, i32 %170, i32 %171, i1 true) #5, !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %99, i32 %173, i32 %174, i32 %175, i32 %176, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %177 = add nuw nsw i64 %153, 6144, !dbg !45
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !46
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %154, !dbg !46
  %179 = getelementptr bfloat, ptr addrspace(1) %2, i64 %177, !dbg !47
  %180 = getelementptr i32, ptr addrspace(1) %3, i64 %163, !dbg !48
  %181 = sext i32 %157 to i64, !dbg !48
  %182 = getelementptr i32, ptr addrspace(1) %3, i64 %181, !dbg !48
  %183 = getelementptr i32, ptr addrspace(1) %3, i64 %165, !dbg !48
  %184 = sext i32 %159 to i64, !dbg !48
  %185 = getelementptr i32, ptr addrspace(1) %3, i64 %184, !dbg !48
  %186 = getelementptr bfloat, ptr addrspace(1) %6, i64 %153, !dbg !49
  %187 = getelementptr bfloat, ptr addrspace(1) %7, i64 %153, !dbg !50
  %188 = load <8 x bfloat>, ptr addrspace(3) %100, align 16, !dbg !44
  %189 = load <8 x bfloat>, ptr addrspace(3) %101, align 16, !dbg !44
  %190 = shufflevector <8 x bfloat> %188, <8 x bfloat> %189, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !44
  %191 = fpext <16 x bfloat> %190 to <16 x float>, !dbg !44
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %178, i1 true) #5, !dbg !51
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !51
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !51
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !51
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !51
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep, i1 true) #5, !dbg !51
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !51
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !51
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !51
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !51
  %202 = insertelement <8 x i32> poison, i32 %193, i64 0, !dbg !51
  %203 = insertelement <8 x i32> %202, i32 %194, i64 1, !dbg !51
  %204 = insertelement <8 x i32> %203, i32 %195, i64 2, !dbg !51
  %205 = insertelement <8 x i32> %204, i32 %196, i64 3, !dbg !51
  %206 = insertelement <8 x i32> %205, i32 %198, i64 4, !dbg !51
  %207 = insertelement <8 x i32> %206, i32 %199, i64 5, !dbg !51
  %208 = insertelement <8 x i32> %207, i32 %200, i64 6, !dbg !51
  %209 = insertelement <8 x i32> %208, i32 %201, i64 7, !dbg !51
  %210 = bitcast <8 x i32> %209 to <8 x float>, !dbg !51
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %179, i1 true) #5, !dbg !52
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !52
  %213 = bitcast i32 %212 to <2 x bfloat>, !dbg !52
  %214 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !52
  %215 = bitcast i32 %214 to <2 x bfloat>, !dbg !52
  %216 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !52
  %217 = bitcast i32 %216 to <2 x bfloat>, !dbg !52
  %218 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !52
  %219 = bitcast i32 %218 to <2 x bfloat>, !dbg !52
  %220 = shufflevector <2 x bfloat> %213, <2 x bfloat> %215, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %221 = shufflevector <2 x bfloat> %217, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %222 = shufflevector <8 x bfloat> %220, <8 x bfloat> %221, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !53
  %223 = shufflevector <2 x bfloat> %217, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %224 = shufflevector <8 x bfloat> %222, <8 x bfloat> %223, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !53
  %225 = shufflevector <2 x bfloat> %219, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %226 = shufflevector <8 x bfloat> %224, <8 x bfloat> %225, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !53
  %227 = shufflevector <2 x bfloat> %219, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %228 = shufflevector <8 x bfloat> %226, <8 x bfloat> %227, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !53
  %229 = fpext <8 x bfloat> %228 to <8 x float>, !dbg !53
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %180, i1 %23) #5, !dbg !54
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !54
  %232 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !54
  %233 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !54
  %234 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !54
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %182, i1 %23) #5, !dbg !54
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !54
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !54
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !54
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !54
  %240 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %23) #5, !dbg !54
  %241 = extractvalue { i32, i32, i32, i32 } %240, 0, !dbg !54
  %242 = extractvalue { i32, i32, i32, i32 } %240, 1, !dbg !54
  %243 = extractvalue { i32, i32, i32, i32 } %240, 2, !dbg !54
  %244 = extractvalue { i32, i32, i32, i32 } %240, 3, !dbg !54
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %185, i1 %23) #5, !dbg !54
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !54
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !54
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !54
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !54
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %186, i1 true) #5, !dbg !55
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !55
  %252 = bitcast i32 %251 to <2 x bfloat>, !dbg !55
  %253 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !55
  %254 = bitcast i32 %253 to <2 x bfloat>, !dbg !55
  %255 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !55
  %256 = bitcast i32 %255 to <2 x bfloat>, !dbg !55
  %257 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !55
  %258 = bitcast i32 %257 to <2 x bfloat>, !dbg !55
  %259 = shufflevector <2 x bfloat> %252, <2 x bfloat> %254, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %260 = shufflevector <2 x bfloat> %256, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %261 = shufflevector <8 x bfloat> %259, <8 x bfloat> %260, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !56
  %262 = shufflevector <2 x bfloat> %256, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %263 = shufflevector <8 x bfloat> %261, <8 x bfloat> %262, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !56
  %264 = shufflevector <2 x bfloat> %258, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %265 = shufflevector <8 x bfloat> %263, <8 x bfloat> %264, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !56
  %266 = shufflevector <2 x bfloat> %258, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %267 = shufflevector <8 x bfloat> %265, <8 x bfloat> %266, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !56
  %268 = fpext <8 x bfloat> %267 to <8 x float>, !dbg !56
  %269 = shufflevector <8 x float> %268, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !56
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %187, i1 true) #5, !dbg !57
  %271 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !57
  %272 = bitcast i32 %271 to <2 x bfloat>, !dbg !57
  %273 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !57
  %274 = bitcast i32 %273 to <2 x bfloat>, !dbg !57
  %275 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !57
  %276 = bitcast i32 %275 to <2 x bfloat>, !dbg !57
  %277 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !57
  %278 = bitcast i32 %277 to <2 x bfloat>, !dbg !57
  %279 = shufflevector <2 x bfloat> %272, <2 x bfloat> %274, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %280 = shufflevector <2 x bfloat> %276, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %281 = shufflevector <8 x bfloat> %279, <8 x bfloat> %280, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !58
  %282 = shufflevector <2 x bfloat> %276, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %283 = shufflevector <8 x bfloat> %281, <8 x bfloat> %282, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !58
  %284 = shufflevector <2 x bfloat> %278, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %285 = shufflevector <8 x bfloat> %283, <8 x bfloat> %284, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !58
  %286 = shufflevector <2 x bfloat> %278, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %287 = shufflevector <8 x bfloat> %285, <8 x bfloat> %286, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !58
  %288 = fpext <8 x bfloat> %287 to <8 x float>, !dbg !58
  %289 = shufflevector <8 x float> %288, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !58
  %290 = fadd <8 x float> %210, %229, !dbg !59
  %291 = shufflevector <8 x float> %290, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %292 = sitofp i32 %231 to float, !dbg !60
  %293 = sitofp i32 %232 to float, !dbg !60
  %294 = sitofp i32 %233 to float, !dbg !60
  %295 = sitofp i32 %234 to float, !dbg !60
  %296 = sitofp i32 %236 to float, !dbg !60
  %297 = sitofp i32 %237 to float, !dbg !60
  %298 = sitofp i32 %238 to float, !dbg !60
  %299 = sitofp i32 %239 to float, !dbg !60
  %300 = sitofp i32 %241 to float, !dbg !60
  %301 = sitofp i32 %242 to float, !dbg !60
  %302 = sitofp i32 %243 to float, !dbg !60
  %303 = sitofp i32 %244 to float, !dbg !60
  %304 = sitofp i32 %246 to float, !dbg !60
  %305 = sitofp i32 %247 to float, !dbg !60
  %306 = sitofp i32 %248 to float, !dbg !60
  %307 = sitofp i32 %249 to float, !dbg !60
  %308 = fmul float %86, %292, !dbg !61
  %309 = fmul float %86, %293, !dbg !61
  %310 = fmul float %86, %294, !dbg !61
  %311 = fmul float %86, %295, !dbg !61
  %312 = fmul float %86, %296, !dbg !61
  %313 = fmul float %86, %297, !dbg !61
  %314 = fmul float %86, %298, !dbg !61
  %315 = fmul float %86, %299, !dbg !61
  %316 = fmul float %86, %300, !dbg !61
  %317 = fmul float %86, %301, !dbg !61
  %318 = fmul float %86, %302, !dbg !61
  %319 = fmul float %86, %303, !dbg !61
  %320 = fmul float %86, %304, !dbg !61
  %321 = fmul float %86, %305, !dbg !61
  %322 = fmul float %86, %306, !dbg !61
  %323 = fmul float %86, %307, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %324 = bitcast float %308 to i32, !dbg !61
  %325 = bitcast float %309 to i32, !dbg !61
  %326 = bitcast float %310 to i32, !dbg !61
  %327 = bitcast float %311 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %103, i32 %324, i32 %325, i32 %326, i32 %327, i1 true) #5, !dbg !61
  %328 = bitcast float %312 to i32, !dbg !61
  %329 = bitcast float %313 to i32, !dbg !61
  %330 = bitcast float %314 to i32, !dbg !61
  %331 = bitcast float %315 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %105, i32 %328, i32 %329, i32 %330, i32 %331, i1 true) #5, !dbg !61
  %332 = bitcast float %316 to i32, !dbg !61
  %333 = bitcast float %317 to i32, !dbg !61
  %334 = bitcast float %318 to i32, !dbg !61
  %335 = bitcast float %319 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %107, i32 %332, i32 %333, i32 %334, i32 %335, i1 true) #5, !dbg !61
  %336 = bitcast float %320 to i32, !dbg !61
  %337 = bitcast float %321 to i32, !dbg !61
  %338 = bitcast float %322 to i32, !dbg !61
  %339 = bitcast float %323 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %109, i32 %336, i32 %337, i32 %338, i32 %339, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %340 = load <8 x float>, ptr addrspace(3) %110, align 16, !dbg !61
  %341 = load <8 x float>, ptr addrspace(3) %112, align 16, !dbg !61
  %342 = shufflevector <8 x float> %340, <8 x float> %341, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !62
  %343 = fmul <16 x float> %342, %269, !dbg !62
  %344 = fadd <16 x float> %343, %289, !dbg !63
  %345 = fmul <16 x float> %291, %344, !dbg !64
  %346 = fadd <16 x float> %345, %191, !dbg !65
  %347 = icmp eq i64 %indvars.iv, 0, !dbg !66
  br i1 %347, label %._crit_edge, label %348, !dbg !67

348:                                              ; preds = %119
  %349 = fsub <16 x float> %346, %152, !dbg !69
  %350 = extractelement <16 x float> %349, i64 0, !dbg !69
  %351 = fsub <16 x float> %346, %152, !dbg !69
  %352 = extractelement <16 x float> %351, i64 1, !dbg !69
  %353 = fsub <16 x float> %346, %152, !dbg !69
  %354 = extractelement <16 x float> %353, i64 2, !dbg !69
  %355 = fsub <16 x float> %346, %152, !dbg !69
  %356 = extractelement <16 x float> %355, i64 3, !dbg !69
  %357 = fsub <16 x float> %346, %152, !dbg !69
  %358 = extractelement <16 x float> %357, i64 4, !dbg !69
  %359 = fsub <16 x float> %346, %152, !dbg !69
  %360 = extractelement <16 x float> %359, i64 5, !dbg !69
  %361 = fsub <16 x float> %346, %152, !dbg !69
  %362 = extractelement <16 x float> %361, i64 6, !dbg !69
  %363 = fsub <16 x float> %346, %152, !dbg !69
  %364 = extractelement <16 x float> %363, i64 7, !dbg !69
  %365 = fsub <16 x float> %346, %152, !dbg !69
  %366 = extractelement <16 x float> %365, i64 8, !dbg !69
  %367 = fsub <16 x float> %346, %152, !dbg !69
  %368 = extractelement <16 x float> %367, i64 9, !dbg !69
  %369 = fsub <16 x float> %346, %152, !dbg !69
  %370 = extractelement <16 x float> %369, i64 10, !dbg !69
  %371 = fsub <16 x float> %346, %152, !dbg !69
  %372 = extractelement <16 x float> %371, i64 11, !dbg !69
  %373 = fsub <16 x float> %346, %152, !dbg !69
  %374 = extractelement <16 x float> %373, i64 12, !dbg !69
  %375 = fsub <16 x float> %346, %152, !dbg !69
  %376 = extractelement <16 x float> %375, i64 13, !dbg !69
  %377 = fsub <16 x float> %346, %152, !dbg !69
  %378 = extractelement <16 x float> %377, i64 14, !dbg !69
  %379 = fsub <16 x float> %346, %152, !dbg !69
  %380 = extractelement <16 x float> %379, i64 15, !dbg !69
  %381 = fadd float %120, 1.000000e+00, !dbg !70
  %382 = fadd float %121, 1.000000e+00, !dbg !70
  %383 = fadd float %122, 1.000000e+00, !dbg !70
  %384 = fadd float %123, 1.000000e+00, !dbg !70
  %385 = fadd float %124, 1.000000e+00, !dbg !70
  %386 = fadd float %125, 1.000000e+00, !dbg !70
  %387 = fadd float %126, 1.000000e+00, !dbg !70
  %388 = fadd float %127, 1.000000e+00, !dbg !70
  %389 = fadd float %128, 1.000000e+00, !dbg !70
  %390 = fadd float %129, 1.000000e+00, !dbg !70
  %391 = fadd float %130, 1.000000e+00, !dbg !70
  %392 = fadd float %131, 1.000000e+00, !dbg !70
  %393 = fadd float %132, 1.000000e+00, !dbg !70
  %394 = fadd float %133, 1.000000e+00, !dbg !70
  %395 = fadd float %134, 1.000000e+00, !dbg !70
  %396 = fadd float %135, 1.000000e+00, !dbg !70
  %397 = tail call float @llvm.nvvm.div.full(float %350, float %381), !dbg !71
  %398 = tail call float @llvm.nvvm.div.full(float %352, float %382), !dbg !71
  %399 = tail call float @llvm.nvvm.div.full(float %354, float %383), !dbg !71
  %400 = tail call float @llvm.nvvm.div.full(float %356, float %384), !dbg !71
  %401 = tail call float @llvm.nvvm.div.full(float %358, float %385), !dbg !71
  %402 = tail call float @llvm.nvvm.div.full(float %360, float %386), !dbg !71
  %403 = tail call float @llvm.nvvm.div.full(float %362, float %387), !dbg !71
  %404 = tail call float @llvm.nvvm.div.full(float %364, float %388), !dbg !71
  %405 = tail call float @llvm.nvvm.div.full(float %366, float %389), !dbg !71
  %406 = tail call float @llvm.nvvm.div.full(float %368, float %390), !dbg !71
  %407 = tail call float @llvm.nvvm.div.full(float %370, float %391), !dbg !71
  %408 = tail call float @llvm.nvvm.div.full(float %372, float %392), !dbg !71
  %409 = tail call float @llvm.nvvm.div.full(float %374, float %393), !dbg !71
  %410 = tail call float @llvm.nvvm.div.full(float %376, float %394), !dbg !71
  %411 = tail call float @llvm.nvvm.div.full(float %378, float %395), !dbg !71
  %412 = tail call float @llvm.nvvm.div.full(float %380, float %396), !dbg !71
  %413 = insertelement <16 x float> poison, float %397, i64 0, !dbg !72
  %414 = insertelement <16 x float> %413, float %398, i64 1, !dbg !72
  %415 = insertelement <16 x float> %414, float %399, i64 2, !dbg !72
  %416 = insertelement <16 x float> %415, float %400, i64 3, !dbg !72
  %417 = insertelement <16 x float> %416, float %401, i64 4, !dbg !72
  %418 = insertelement <16 x float> %417, float %402, i64 5, !dbg !72
  %419 = insertelement <16 x float> %418, float %403, i64 6, !dbg !72
  %420 = insertelement <16 x float> %419, float %404, i64 7, !dbg !72
  %421 = insertelement <16 x float> %420, float %405, i64 8, !dbg !72
  %422 = insertelement <16 x float> %421, float %406, i64 9, !dbg !72
  %423 = insertelement <16 x float> %422, float %407, i64 10, !dbg !72
  %424 = insertelement <16 x float> %423, float %408, i64 11, !dbg !72
  %425 = insertelement <16 x float> %424, float %409, i64 12, !dbg !72
  %426 = insertelement <16 x float> %425, float %410, i64 13, !dbg !72
  %427 = insertelement <16 x float> %426, float %411, i64 14, !dbg !72
  %428 = insertelement <16 x float> %427, float %412, i64 15, !dbg !72
  %429 = fadd <16 x float> %152, %428, !dbg !72
  %430 = fsub <16 x float> %346, %429, !dbg !73
  %431 = fsub <16 x float> %346, %429, !dbg !73
  %432 = fsub <16 x float> %346, %429, !dbg !73
  %433 = fsub <16 x float> %346, %429, !dbg !73
  %434 = fsub <16 x float> %346, %429, !dbg !73
  %435 = fsub <16 x float> %346, %429, !dbg !73
  %436 = fsub <16 x float> %346, %429, !dbg !73
  %437 = fsub <16 x float> %346, %429, !dbg !73
  %438 = fsub <16 x float> %346, %429, !dbg !73
  %439 = fsub <16 x float> %346, %429, !dbg !73
  %440 = fsub <16 x float> %346, %429, !dbg !73
  %441 = fsub <16 x float> %346, %429, !dbg !73
  %442 = fsub <16 x float> %346, %429, !dbg !73
  %443 = fsub <16 x float> %346, %429, !dbg !73
  %444 = fsub <16 x float> %346, %429, !dbg !73
  %445 = fsub <16 x float> %346, %429, !dbg !73
  %446 = fmul <16 x float> %349, %430, !dbg !74
  %447 = extractelement <16 x float> %446, i64 0, !dbg !74
  %448 = fmul <16 x float> %351, %431, !dbg !74
  %449 = extractelement <16 x float> %448, i64 1, !dbg !74
  %450 = fmul <16 x float> %353, %432, !dbg !74
  %451 = extractelement <16 x float> %450, i64 2, !dbg !74
  %452 = fmul <16 x float> %355, %433, !dbg !74
  %453 = extractelement <16 x float> %452, i64 3, !dbg !74
  %454 = fmul <16 x float> %357, %434, !dbg !74
  %455 = extractelement <16 x float> %454, i64 4, !dbg !74
  %456 = fmul <16 x float> %359, %435, !dbg !74
  %457 = extractelement <16 x float> %456, i64 5, !dbg !74
  %458 = fmul <16 x float> %361, %436, !dbg !74
  %459 = extractelement <16 x float> %458, i64 6, !dbg !74
  %460 = fmul <16 x float> %363, %437, !dbg !74
  %461 = extractelement <16 x float> %460, i64 7, !dbg !74
  %462 = fmul <16 x float> %365, %438, !dbg !74
  %463 = extractelement <16 x float> %462, i64 8, !dbg !74
  %464 = fmul <16 x float> %367, %439, !dbg !74
  %465 = extractelement <16 x float> %464, i64 9, !dbg !74
  %466 = fmul <16 x float> %369, %440, !dbg !74
  %467 = extractelement <16 x float> %466, i64 10, !dbg !74
  %468 = fmul <16 x float> %371, %441, !dbg !74
  %469 = extractelement <16 x float> %468, i64 11, !dbg !74
  %470 = fmul <16 x float> %373, %442, !dbg !74
  %471 = extractelement <16 x float> %470, i64 12, !dbg !74
  %472 = fmul <16 x float> %375, %443, !dbg !74
  %473 = extractelement <16 x float> %472, i64 13, !dbg !74
  %474 = fmul <16 x float> %377, %444, !dbg !74
  %475 = extractelement <16 x float> %474, i64 14, !dbg !74
  %476 = fmul <16 x float> %379, %445, !dbg !74
  %477 = extractelement <16 x float> %476, i64 15, !dbg !74
  %478 = fadd float %136, %447, !dbg !75
  %479 = fadd float %137, %449, !dbg !75
  %480 = fadd float %138, %451, !dbg !75
  %481 = fadd float %139, %453, !dbg !75
  %482 = fadd float %140, %455, !dbg !75
  %483 = fadd float %141, %457, !dbg !75
  %484 = fadd float %142, %459, !dbg !75
  %485 = fadd float %143, %461, !dbg !75
  %486 = fadd float %144, %463, !dbg !75
  %487 = fadd float %145, %465, !dbg !75
  %488 = fadd float %146, %467, !dbg !75
  %489 = fadd float %147, %469, !dbg !75
  %490 = fadd float %148, %471, !dbg !75
  %491 = fadd float %149, %473, !dbg !75
  %492 = fadd float %150, %475, !dbg !75
  %493 = fadd float %151, %477, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %119, %348
  %494 = phi float [ %478, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %495 = phi float [ %479, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %496 = phi float [ %480, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %497 = phi float [ %481, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %498 = phi float [ %482, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %499 = phi float [ %483, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %500 = phi float [ %484, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %501 = phi float [ %485, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %502 = phi float [ %486, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %503 = phi float [ %487, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %504 = phi float [ %488, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %505 = phi float [ %489, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %506 = phi float [ %490, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %507 = phi float [ %491, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %508 = phi float [ %492, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %509 = phi float [ %493, %348 ], [ 0.000000e+00, %119 ], !dbg !68
  %510 = phi float [ %381, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %511 = phi float [ %382, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %512 = phi float [ %383, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %513 = phi float [ %384, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %514 = phi float [ %385, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %515 = phi float [ %386, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %516 = phi float [ %387, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %517 = phi float [ %388, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %518 = phi float [ %389, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %519 = phi float [ %390, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %520 = phi float [ %391, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %521 = phi float [ %392, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %522 = phi float [ %393, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %523 = phi float [ %394, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %524 = phi float [ %395, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %525 = phi float [ %396, %348 ], [ 1.000000e+00, %119 ], !dbg !68
  %526 = phi <16 x float> [ %429, %348 ], [ %346, %119 ]
  %527 = select <16 x i1> %118, <16 x float> %526, <16 x float> %152, !dbg !39
  %528 = select i1 %24, float %494, float %136, !dbg !76
  %529 = select i1 %24, float %495, float %137, !dbg !76
  %530 = select i1 %24, float %496, float %138, !dbg !76
  %531 = select i1 %24, float %497, float %139, !dbg !76
  %532 = select i1 %24, float %498, float %140, !dbg !76
  %533 = select i1 %24, float %499, float %141, !dbg !76
  %534 = select i1 %24, float %500, float %142, !dbg !76
  %535 = select i1 %24, float %501, float %143, !dbg !76
  %536 = select i1 %24, float %502, float %144, !dbg !76
  %537 = select i1 %24, float %503, float %145, !dbg !76
  %538 = select i1 %24, float %504, float %146, !dbg !76
  %539 = select i1 %24, float %505, float %147, !dbg !76
  %540 = select i1 %24, float %506, float %148, !dbg !76
  %541 = select i1 %24, float %507, float %149, !dbg !76
  %542 = select i1 %24, float %508, float %150, !dbg !76
  %543 = select i1 %24, float %509, float %151, !dbg !76
  %544 = select i1 %24, float %510, float %120, !dbg !77
  %545 = select i1 %24, float %511, float %121, !dbg !77
  %546 = select i1 %24, float %512, float %122, !dbg !77
  %547 = select i1 %24, float %513, float %123, !dbg !77
  %548 = select i1 %24, float %514, float %124, !dbg !77
  %549 = select i1 %24, float %515, float %125, !dbg !77
  %550 = select i1 %24, float %516, float %126, !dbg !77
  %551 = select i1 %24, float %517, float %127, !dbg !77
  %552 = select i1 %24, float %518, float %128, !dbg !77
  %553 = select i1 %24, float %519, float %129, !dbg !77
  %554 = select i1 %24, float %520, float %130, !dbg !77
  %555 = select i1 %24, float %521, float %131, !dbg !77
  %556 = select i1 %24, float %522, float %132, !dbg !77
  %557 = select i1 %24, float %523, float %133, !dbg !77
  %558 = select i1 %24, float %524, float %134, !dbg !77
  %559 = select i1 %24, float %525, float %135, !dbg !77
  %560 = sext i32 %161 to i64, !dbg !78
  %561 = getelementptr bfloat, ptr addrspace(1) %8, i64 %560, !dbg !78
  %562 = sext i32 %162 to i64, !dbg !78
  %563 = getelementptr bfloat, ptr addrspace(1) %8, i64 %562, !dbg !78
  %564 = extractelement <16 x float> %346, i64 0, !dbg !79
  %565 = fptrunc float %564 to bfloat, !dbg !79
  %566 = extractelement <16 x float> %346, i64 1, !dbg !79
  %567 = fptrunc float %566 to bfloat, !dbg !79
  %568 = extractelement <16 x float> %346, i64 2, !dbg !79
  %569 = fptrunc float %568 to bfloat, !dbg !79
  %570 = extractelement <16 x float> %346, i64 3, !dbg !79
  %571 = fptrunc float %570 to bfloat, !dbg !79
  %572 = extractelement <16 x float> %346, i64 4, !dbg !79
  %573 = fptrunc float %572 to bfloat, !dbg !79
  %574 = extractelement <16 x float> %346, i64 5, !dbg !79
  %575 = fptrunc float %574 to bfloat, !dbg !79
  %576 = extractelement <16 x float> %346, i64 6, !dbg !79
  %577 = fptrunc float %576 to bfloat, !dbg !79
  %578 = extractelement <16 x float> %346, i64 7, !dbg !79
  %579 = fptrunc float %578 to bfloat, !dbg !79
  %580 = extractelement <16 x float> %346, i64 8, !dbg !79
  %581 = fptrunc float %580 to bfloat, !dbg !79
  %582 = extractelement <16 x float> %346, i64 9, !dbg !79
  %583 = fptrunc float %582 to bfloat, !dbg !79
  %584 = extractelement <16 x float> %346, i64 10, !dbg !79
  %585 = fptrunc float %584 to bfloat, !dbg !79
  %586 = extractelement <16 x float> %346, i64 11, !dbg !79
  %587 = fptrunc float %586 to bfloat, !dbg !79
  %588 = extractelement <16 x float> %346, i64 12, !dbg !79
  %589 = fptrunc float %588 to bfloat, !dbg !79
  %590 = extractelement <16 x float> %346, i64 13, !dbg !79
  %591 = fptrunc float %590 to bfloat, !dbg !79
  %592 = extractelement <16 x float> %346, i64 14, !dbg !79
  %593 = fptrunc float %592 to bfloat, !dbg !79
  %594 = extractelement <16 x float> %346, i64 15, !dbg !79
  %595 = fptrunc float %594 to bfloat, !dbg !79
  %596 = insertelement <2 x bfloat> poison, bfloat %565, i64 0, !dbg !79
  %597 = insertelement <2 x bfloat> %596, bfloat %567, i64 1, !dbg !79
  %598 = bitcast <2 x bfloat> %597 to i32, !dbg !79
  %599 = insertelement <2 x bfloat> poison, bfloat %569, i64 0, !dbg !79
  %600 = insertelement <2 x bfloat> %599, bfloat %571, i64 1, !dbg !79
  %601 = bitcast <2 x bfloat> %600 to i32, !dbg !79
  %602 = insertelement <2 x bfloat> poison, bfloat %573, i64 0, !dbg !79
  %603 = insertelement <2 x bfloat> %602, bfloat %575, i64 1, !dbg !79
  %604 = bitcast <2 x bfloat> %603 to i32, !dbg !79
  %605 = insertelement <2 x bfloat> poison, bfloat %577, i64 0, !dbg !79
  %606 = insertelement <2 x bfloat> %605, bfloat %579, i64 1, !dbg !79
  %607 = bitcast <2 x bfloat> %606 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %598, i32 %601, i32 %604, i32 %607, ptr addrspace(1) %561, i1 %24) #5, !dbg !79
  %608 = insertelement <2 x bfloat> poison, bfloat %581, i64 0, !dbg !79
  %609 = insertelement <2 x bfloat> %608, bfloat %583, i64 1, !dbg !79
  %610 = bitcast <2 x bfloat> %609 to i32, !dbg !79
  %611 = insertelement <2 x bfloat> poison, bfloat %585, i64 0, !dbg !79
  %612 = insertelement <2 x bfloat> %611, bfloat %587, i64 1, !dbg !79
  %613 = bitcast <2 x bfloat> %612 to i32, !dbg !79
  %614 = insertelement <2 x bfloat> poison, bfloat %589, i64 0, !dbg !79
  %615 = insertelement <2 x bfloat> %614, bfloat %591, i64 1, !dbg !79
  %616 = bitcast <2 x bfloat> %615 to i32, !dbg !79
  %617 = insertelement <2 x bfloat> poison, bfloat %593, i64 0, !dbg !79
  %618 = insertelement <2 x bfloat> %617, bfloat %595, i64 1, !dbg !79
  %619 = bitcast <2 x bfloat> %618 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %610, i32 %613, i32 %616, i32 %619, ptr addrspace(1) %563, i1 %24) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !38
  %620 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !38
  br i1 %620, label %119, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %621 = lshr i32 %19, 5, !dbg !11
  %622 = and i32 %19, 1, !dbg !11
  %623 = or disjoint i32 %18, %622, !dbg !12
  %624 = icmp slt i32 %623, 512, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %625 = extractelement <16 x float> %527, i64 0, !dbg !82
  %626 = extractelement <16 x float> %527, i64 1, !dbg !82
  %627 = fsub float %626, %625, !dbg !82
  %628 = fadd float %544, %545, !dbg !84
  %629 = fcmp oeq float %628, 0.000000e+00, !dbg !85
  %630 = tail call float @llvm.nvvm.div.full(float %545, float %628), !dbg !86
  %631 = select i1 %629, float 0.000000e+00, float %630, !dbg !87
  %632 = fmul float %627, %631, !dbg !88
  %633 = fadd float %625, %632, !dbg !89
  %634 = fadd float %528, %529, !dbg !90
  %635 = fmul float %627, %627, !dbg !91
  %636 = fmul float %635, %544, !dbg !92
  %637 = fmul float %636, %631, !dbg !93
  %638 = fadd float %634, %637, !dbg !94
  %639 = extractelement <16 x float> %527, i64 2, !dbg !82
  %640 = fsub float %639, %633, !dbg !82
  %641 = fadd float %546, %628, !dbg !84
  %642 = fcmp oeq float %641, 0.000000e+00, !dbg !85
  %643 = tail call float @llvm.nvvm.div.full(float %546, float %641), !dbg !86
  %644 = select i1 %642, float 0.000000e+00, float %643, !dbg !87
  %645 = fmul float %644, %640, !dbg !88
  %646 = fadd float %633, %645, !dbg !89
  %647 = fadd float %530, %638, !dbg !90
  %648 = fmul float %640, %640, !dbg !91
  %649 = fmul float %628, %648, !dbg !92
  %650 = fmul float %644, %649, !dbg !93
  %651 = fadd float %647, %650, !dbg !94
  %652 = extractelement <16 x float> %527, i64 3, !dbg !82
  %653 = fsub float %652, %646, !dbg !82
  %654 = fadd float %547, %641, !dbg !84
  %655 = fcmp oeq float %654, 0.000000e+00, !dbg !85
  %656 = tail call float @llvm.nvvm.div.full(float %547, float %654), !dbg !86
  %657 = select i1 %655, float 0.000000e+00, float %656, !dbg !87
  %658 = fmul float %657, %653, !dbg !88
  %659 = fadd float %646, %658, !dbg !89
  %660 = fadd float %531, %651, !dbg !90
  %661 = fmul float %653, %653, !dbg !91
  %662 = fmul float %641, %661, !dbg !92
  %663 = fmul float %657, %662, !dbg !93
  %664 = fadd float %660, %663, !dbg !94
  %665 = extractelement <16 x float> %527, i64 4, !dbg !82
  %666 = fsub float %665, %659, !dbg !82
  %667 = fadd float %548, %654, !dbg !84
  %668 = fcmp oeq float %667, 0.000000e+00, !dbg !85
  %669 = tail call float @llvm.nvvm.div.full(float %548, float %667), !dbg !86
  %670 = select i1 %668, float 0.000000e+00, float %669, !dbg !87
  %671 = fmul float %670, %666, !dbg !88
  %672 = fadd float %659, %671, !dbg !89
  %673 = fadd float %532, %664, !dbg !90
  %674 = fmul float %666, %666, !dbg !91
  %675 = fmul float %654, %674, !dbg !92
  %676 = fmul float %670, %675, !dbg !93
  %677 = fadd float %673, %676, !dbg !94
  %678 = extractelement <16 x float> %527, i64 5, !dbg !82
  %679 = fsub float %678, %672, !dbg !82
  %680 = fadd float %549, %667, !dbg !84
  %681 = fcmp oeq float %680, 0.000000e+00, !dbg !85
  %682 = tail call float @llvm.nvvm.div.full(float %549, float %680), !dbg !86
  %683 = select i1 %681, float 0.000000e+00, float %682, !dbg !87
  %684 = fmul float %683, %679, !dbg !88
  %685 = fadd float %672, %684, !dbg !89
  %686 = fadd float %533, %677, !dbg !90
  %687 = fmul float %679, %679, !dbg !91
  %688 = fmul float %667, %687, !dbg !92
  %689 = fmul float %683, %688, !dbg !93
  %690 = fadd float %686, %689, !dbg !94
  %691 = extractelement <16 x float> %527, i64 6, !dbg !82
  %692 = fsub float %691, %685, !dbg !82
  %693 = fadd float %550, %680, !dbg !84
  %694 = fcmp oeq float %693, 0.000000e+00, !dbg !85
  %695 = tail call float @llvm.nvvm.div.full(float %550, float %693), !dbg !86
  %696 = select i1 %694, float 0.000000e+00, float %695, !dbg !87
  %697 = fmul float %696, %692, !dbg !88
  %698 = fadd float %685, %697, !dbg !89
  %699 = fadd float %534, %690, !dbg !90
  %700 = fmul float %692, %692, !dbg !91
  %701 = fmul float %680, %700, !dbg !92
  %702 = fmul float %696, %701, !dbg !93
  %703 = fadd float %699, %702, !dbg !94
  %704 = extractelement <16 x float> %527, i64 7, !dbg !82
  %705 = fsub float %704, %698, !dbg !82
  %706 = fadd float %551, %693, !dbg !84
  %707 = fcmp oeq float %706, 0.000000e+00, !dbg !85
  %708 = tail call float @llvm.nvvm.div.full(float %551, float %706), !dbg !86
  %709 = select i1 %707, float 0.000000e+00, float %708, !dbg !87
  %710 = fmul float %709, %705, !dbg !88
  %711 = fadd float %698, %710, !dbg !89
  %712 = fadd float %535, %703, !dbg !90
  %713 = fmul float %705, %705, !dbg !91
  %714 = fmul float %693, %713, !dbg !92
  %715 = fmul float %709, %714, !dbg !93
  %716 = fadd float %712, %715, !dbg !94
  %717 = extractelement <16 x float> %527, i64 8, !dbg !82
  %718 = extractelement <16 x float> %527, i64 9, !dbg !82
  %719 = fsub float %718, %717, !dbg !82
  %720 = fadd float %552, %553, !dbg !84
  %721 = fcmp oeq float %720, 0.000000e+00, !dbg !85
  %722 = tail call float @llvm.nvvm.div.full(float %553, float %720), !dbg !86
  %723 = select i1 %721, float 0.000000e+00, float %722, !dbg !87
  %724 = fmul float %719, %723, !dbg !88
  %725 = fadd float %717, %724, !dbg !89
  %726 = fadd float %536, %537, !dbg !90
  %727 = fmul float %719, %719, !dbg !91
  %728 = fmul float %727, %552, !dbg !92
  %729 = fmul float %728, %723, !dbg !93
  %730 = fadd float %726, %729, !dbg !94
  %731 = extractelement <16 x float> %527, i64 10, !dbg !82
  %732 = fsub float %731, %725, !dbg !82
  %733 = fadd float %554, %720, !dbg !84
  %734 = fcmp oeq float %733, 0.000000e+00, !dbg !85
  %735 = tail call float @llvm.nvvm.div.full(float %554, float %733), !dbg !86
  %736 = select i1 %734, float 0.000000e+00, float %735, !dbg !87
  %737 = fmul float %736, %732, !dbg !88
  %738 = fadd float %725, %737, !dbg !89
  %739 = fadd float %538, %730, !dbg !90
  %740 = fmul float %732, %732, !dbg !91
  %741 = fmul float %720, %740, !dbg !92
  %742 = fmul float %736, %741, !dbg !93
  %743 = fadd float %739, %742, !dbg !94
  %744 = extractelement <16 x float> %527, i64 11, !dbg !82
  %745 = fsub float %744, %738, !dbg !82
  %746 = fadd float %555, %733, !dbg !84
  %747 = fcmp oeq float %746, 0.000000e+00, !dbg !85
  %748 = tail call float @llvm.nvvm.div.full(float %555, float %746), !dbg !86
  %749 = select i1 %747, float 0.000000e+00, float %748, !dbg !87
  %750 = fmul float %749, %745, !dbg !88
  %751 = fadd float %738, %750, !dbg !89
  %752 = fadd float %539, %743, !dbg !90
  %753 = fmul float %745, %745, !dbg !91
  %754 = fmul float %733, %753, !dbg !92
  %755 = fmul float %749, %754, !dbg !93
  %756 = fadd float %752, %755, !dbg !94
  %757 = extractelement <16 x float> %527, i64 12, !dbg !82
  %758 = fsub float %757, %751, !dbg !82
  %759 = fadd float %556, %746, !dbg !84
  %760 = fcmp oeq float %759, 0.000000e+00, !dbg !85
  %761 = tail call float @llvm.nvvm.div.full(float %556, float %759), !dbg !86
  %762 = select i1 %760, float 0.000000e+00, float %761, !dbg !87
  %763 = fmul float %762, %758, !dbg !88
  %764 = fadd float %751, %763, !dbg !89
  %765 = fadd float %540, %756, !dbg !90
  %766 = fmul float %758, %758, !dbg !91
  %767 = fmul float %746, %766, !dbg !92
  %768 = fmul float %762, %767, !dbg !93
  %769 = fadd float %765, %768, !dbg !94
  %770 = extractelement <16 x float> %527, i64 13, !dbg !82
  %771 = fsub float %770, %764, !dbg !82
  %772 = fadd float %557, %759, !dbg !84
  %773 = fcmp oeq float %772, 0.000000e+00, !dbg !85
  %774 = tail call float @llvm.nvvm.div.full(float %557, float %772), !dbg !86
  %775 = select i1 %773, float 0.000000e+00, float %774, !dbg !87
  %776 = fmul float %775, %771, !dbg !88
  %777 = fadd float %764, %776, !dbg !89
  %778 = fadd float %541, %769, !dbg !90
  %779 = fmul float %771, %771, !dbg !91
  %780 = fmul float %759, %779, !dbg !92
  %781 = fmul float %775, %780, !dbg !93
  %782 = fadd float %778, %781, !dbg !94
  %783 = extractelement <16 x float> %527, i64 14, !dbg !82
  %784 = fsub float %783, %777, !dbg !82
  %785 = fadd float %558, %772, !dbg !84
  %786 = fcmp oeq float %785, 0.000000e+00, !dbg !85
  %787 = tail call float @llvm.nvvm.div.full(float %558, float %785), !dbg !86
  %788 = select i1 %786, float 0.000000e+00, float %787, !dbg !87
  %789 = fmul float %788, %784, !dbg !88
  %790 = fadd float %777, %789, !dbg !89
  %791 = fadd float %542, %782, !dbg !90
  %792 = fmul float %784, %784, !dbg !91
  %793 = fmul float %772, %792, !dbg !92
  %794 = fmul float %788, %793, !dbg !93
  %795 = fadd float %791, %794, !dbg !94
  %796 = extractelement <16 x float> %527, i64 15, !dbg !82
  %797 = fsub float %796, %790, !dbg !82
  %798 = fadd float %559, %785, !dbg !84
  %799 = fcmp oeq float %798, 0.000000e+00, !dbg !85
  %800 = tail call float @llvm.nvvm.div.full(float %559, float %798), !dbg !86
  %801 = select i1 %799, float 0.000000e+00, float %800, !dbg !87
  %802 = fmul float %801, %797, !dbg !88
  %803 = fadd float %790, %802, !dbg !89
  %804 = fadd float %543, %795, !dbg !90
  %805 = fmul float %797, %797, !dbg !91
  %806 = fmul float %785, %805, !dbg !92
  %807 = fmul float %801, %806, !dbg !93
  %808 = fadd float %804, %807, !dbg !94
  %809 = bitcast float %711 to i32, !dbg !80
  %810 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %809, i32 16, i32 31), !dbg !80
  %811 = bitcast i32 %810 to float, !dbg !80
  %812 = bitcast float %716 to i32, !dbg !80
  %813 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %812, i32 16, i32 31), !dbg !80
  %814 = bitcast i32 %813 to float, !dbg !80
  %815 = bitcast float %706 to i32, !dbg !80
  %816 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %815, i32 16, i32 31), !dbg !80
  %817 = bitcast i32 %816 to float, !dbg !80
  %818 = fsub float %811, %711, !dbg !82
  %819 = fadd float %706, %817, !dbg !84
  %820 = fcmp oeq float %819, 0.000000e+00, !dbg !85
  %821 = tail call float @llvm.nvvm.div.full(float %817, float %819), !dbg !86
  %822 = select i1 %820, float 0.000000e+00, float %821, !dbg !87
  %823 = fmul float %822, %818, !dbg !88
  %824 = fadd float %711, %823, !dbg !89
  %825 = fadd float %716, %814, !dbg !90
  %826 = fmul float %818, %818, !dbg !91
  %827 = fmul float %706, %826, !dbg !92
  %828 = fmul float %822, %827, !dbg !93
  %829 = fadd float %825, %828, !dbg !94
  %830 = bitcast float %824 to i32, !dbg !80
  %831 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %830, i32 8, i32 31), !dbg !80
  %832 = bitcast i32 %831 to float, !dbg !80
  %833 = bitcast float %829 to i32, !dbg !80
  %834 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %833, i32 8, i32 31), !dbg !80
  %835 = bitcast i32 %834 to float, !dbg !80
  %836 = bitcast float %819 to i32, !dbg !80
  %837 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %836, i32 8, i32 31), !dbg !80
  %838 = bitcast i32 %837 to float, !dbg !80
  %839 = fsub float %832, %824, !dbg !82
  %840 = fadd float %819, %838, !dbg !84
  %841 = fcmp oeq float %840, 0.000000e+00, !dbg !85
  %842 = tail call float @llvm.nvvm.div.full(float %838, float %840), !dbg !86
  %843 = select i1 %841, float 0.000000e+00, float %842, !dbg !87
  %844 = fmul float %843, %839, !dbg !88
  %845 = fadd float %824, %844, !dbg !89
  %846 = fadd float %829, %835, !dbg !90
  %847 = fmul float %839, %839, !dbg !91
  %848 = fmul float %819, %847, !dbg !92
  %849 = fmul float %843, %848, !dbg !93
  %850 = fadd float %846, %849, !dbg !94
  %851 = bitcast float %845 to i32, !dbg !80
  %852 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %851, i32 4, i32 31), !dbg !80
  %853 = bitcast i32 %852 to float, !dbg !80
  %854 = bitcast float %850 to i32, !dbg !80
  %855 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %854, i32 4, i32 31), !dbg !80
  %856 = bitcast i32 %855 to float, !dbg !80
  %857 = bitcast float %840 to i32, !dbg !80
  %858 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %857, i32 4, i32 31), !dbg !80
  %859 = bitcast i32 %858 to float, !dbg !80
  %860 = fsub float %853, %845, !dbg !82
  %861 = fadd float %840, %859, !dbg !84
  %862 = fcmp oeq float %861, 0.000000e+00, !dbg !85
  %863 = tail call float @llvm.nvvm.div.full(float %859, float %861), !dbg !86
  %864 = select i1 %862, float 0.000000e+00, float %863, !dbg !87
  %865 = fmul float %860, %864, !dbg !88
  %866 = fadd float %845, %865, !dbg !89
  %867 = fadd float %850, %856, !dbg !90
  %868 = fmul float %860, %860, !dbg !91
  %869 = fmul float %840, %868, !dbg !92
  %870 = fmul float %864, %869, !dbg !93
  %871 = fadd float %867, %870, !dbg !94
  %872 = bitcast float %866 to i32, !dbg !80
  %873 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %872, i32 2, i32 31), !dbg !80
  %874 = bitcast i32 %873 to float, !dbg !80
  %875 = bitcast float %871 to i32, !dbg !80
  %876 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %875, i32 2, i32 31), !dbg !80
  %877 = bitcast i32 %876 to float, !dbg !80
  %878 = bitcast float %861 to i32, !dbg !80
  %879 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %878, i32 2, i32 31), !dbg !80
  %880 = bitcast i32 %879 to float, !dbg !80
  %881 = fsub float %874, %866, !dbg !82
  %882 = fadd float %861, %880, !dbg !84
  %883 = fcmp oeq float %882, 0.000000e+00, !dbg !85
  %884 = tail call float @llvm.nvvm.div.full(float %880, float %882), !dbg !86
  %885 = select i1 %883, float 0.000000e+00, float %884, !dbg !87
  %886 = fmul float %881, %885, !dbg !88
  %887 = fadd float %866, %886, !dbg !89
  %888 = fadd float %871, %877, !dbg !90
  %889 = fmul float %881, %881, !dbg !91
  %890 = fmul float %861, %889, !dbg !92
  %891 = fmul float %885, %890, !dbg !93
  %892 = fadd float %888, %891, !dbg !94
  %893 = bitcast float %887 to i32, !dbg !80
  %894 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %893, i32 1, i32 31), !dbg !80
  %895 = bitcast i32 %894 to float, !dbg !80
  %896 = bitcast float %892 to i32, !dbg !80
  %897 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %896, i32 1, i32 31), !dbg !80
  %898 = bitcast i32 %897 to float, !dbg !80
  %899 = bitcast float %882 to i32, !dbg !80
  %900 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %899, i32 1, i32 31), !dbg !80
  %901 = bitcast i32 %900 to float, !dbg !80
  %902 = fsub float %895, %887, !dbg !82
  %903 = fadd float %882, %901, !dbg !84
  %904 = fcmp oeq float %903, 0.000000e+00, !dbg !85
  %905 = tail call float @llvm.nvvm.div.full(float %901, float %903), !dbg !86
  %906 = select i1 %904, float 0.000000e+00, float %905, !dbg !87
  %907 = fmul float %902, %906, !dbg !88
  %908 = fadd float %887, %907, !dbg !89
  %909 = fadd float %892, %898, !dbg !90
  %910 = fmul float %902, %902, !dbg !91
  %911 = fmul float %882, %910, !dbg !92
  %912 = fmul float %906, %911, !dbg !93
  %913 = fadd float %909, %912, !dbg !94
  %914 = bitcast float %803 to i32, !dbg !80
  %915 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %914, i32 16, i32 31), !dbg !80
  %916 = bitcast i32 %915 to float, !dbg !80
  %917 = bitcast float %808 to i32, !dbg !80
  %918 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %917, i32 16, i32 31), !dbg !80
  %919 = bitcast i32 %918 to float, !dbg !80
  %920 = bitcast float %798 to i32, !dbg !80
  %921 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %920, i32 16, i32 31), !dbg !80
  %922 = bitcast i32 %921 to float, !dbg !80
  %923 = fsub float %916, %803, !dbg !82
  %924 = fadd float %798, %922, !dbg !84
  %925 = fcmp oeq float %924, 0.000000e+00, !dbg !85
  %926 = tail call float @llvm.nvvm.div.full(float %922, float %924), !dbg !86
  %927 = select i1 %925, float 0.000000e+00, float %926, !dbg !87
  %928 = fmul float %923, %927, !dbg !88
  %929 = fadd float %803, %928, !dbg !89
  %930 = fadd float %808, %919, !dbg !90
  %931 = fmul float %923, %923, !dbg !91
  %932 = fmul float %798, %931, !dbg !92
  %933 = fmul float %932, %927, !dbg !93
  %934 = fadd float %930, %933, !dbg !94
  %935 = bitcast float %929 to i32, !dbg !80
  %936 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %935, i32 8, i32 31), !dbg !80
  %937 = bitcast i32 %936 to float, !dbg !80
  %938 = bitcast float %934 to i32, !dbg !80
  %939 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %938, i32 8, i32 31), !dbg !80
  %940 = bitcast i32 %939 to float, !dbg !80
  %941 = bitcast float %924 to i32, !dbg !80
  %942 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %941, i32 8, i32 31), !dbg !80
  %943 = bitcast i32 %942 to float, !dbg !80
  %944 = fsub float %937, %929, !dbg !82
  %945 = fadd float %924, %943, !dbg !84
  %946 = fcmp oeq float %945, 0.000000e+00, !dbg !85
  %947 = tail call float @llvm.nvvm.div.full(float %943, float %945), !dbg !86
  %948 = select i1 %946, float 0.000000e+00, float %947, !dbg !87
  %949 = fmul float %944, %948, !dbg !88
  %950 = fadd float %929, %949, !dbg !89
  %951 = fadd float %934, %940, !dbg !90
  %952 = fmul float %944, %944, !dbg !91
  %953 = fmul float %924, %952, !dbg !92
  %954 = fmul float %948, %953, !dbg !93
  %955 = fadd float %951, %954, !dbg !94
  %956 = bitcast float %950 to i32, !dbg !80
  %957 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %956, i32 4, i32 31), !dbg !80
  %958 = bitcast i32 %957 to float, !dbg !80
  %959 = bitcast float %955 to i32, !dbg !80
  %960 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %959, i32 4, i32 31), !dbg !80
  %961 = bitcast i32 %960 to float, !dbg !80
  %962 = bitcast float %945 to i32, !dbg !80
  %963 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %962, i32 4, i32 31), !dbg !80
  %964 = bitcast i32 %963 to float, !dbg !80
  %965 = fsub float %958, %950, !dbg !82
  %966 = fadd float %945, %964, !dbg !84
  %967 = fcmp oeq float %966, 0.000000e+00, !dbg !85
  %968 = tail call float @llvm.nvvm.div.full(float %964, float %966), !dbg !86
  %969 = select i1 %967, float 0.000000e+00, float %968, !dbg !87
  %970 = fmul float %965, %969, !dbg !88
  %971 = fadd float %950, %970, !dbg !89
  %972 = fadd float %955, %961, !dbg !90
  %973 = fmul float %965, %965, !dbg !91
  %974 = fmul float %945, %973, !dbg !92
  %975 = fmul float %969, %974, !dbg !93
  %976 = fadd float %972, %975, !dbg !94
  %977 = bitcast float %971 to i32, !dbg !80
  %978 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %977, i32 2, i32 31), !dbg !80
  %979 = bitcast i32 %978 to float, !dbg !80
  %980 = bitcast float %976 to i32, !dbg !80
  %981 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %980, i32 2, i32 31), !dbg !80
  %982 = bitcast i32 %981 to float, !dbg !80
  %983 = bitcast float %966 to i32, !dbg !80
  %984 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %983, i32 2, i32 31), !dbg !80
  %985 = bitcast i32 %984 to float, !dbg !80
  %986 = fsub float %979, %971, !dbg !82
  %987 = fadd float %966, %985, !dbg !84
  %988 = fcmp oeq float %987, 0.000000e+00, !dbg !85
  %989 = tail call float @llvm.nvvm.div.full(float %985, float %987), !dbg !86
  %990 = select i1 %988, float 0.000000e+00, float %989, !dbg !87
  %991 = fmul float %986, %990, !dbg !88
  %992 = fadd float %971, %991, !dbg !89
  %993 = fadd float %976, %982, !dbg !90
  %994 = fmul float %986, %986, !dbg !91
  %995 = fmul float %966, %994, !dbg !92
  %996 = fmul float %990, %995, !dbg !93
  %997 = fadd float %993, %996, !dbg !94
  %998 = bitcast float %992 to i32, !dbg !80
  %999 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %998, i32 1, i32 31), !dbg !80
  %1000 = bitcast i32 %999 to float, !dbg !80
  %1001 = bitcast float %997 to i32, !dbg !80
  %1002 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1001, i32 1, i32 31), !dbg !80
  %1003 = bitcast i32 %1002 to float, !dbg !80
  %1004 = bitcast float %987 to i32, !dbg !80
  %1005 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1004, i32 1, i32 31), !dbg !80
  %1006 = bitcast i32 %1005 to float, !dbg !80
  %1007 = fsub float %1000, %992, !dbg !82
  %1008 = fadd float %987, %1006, !dbg !84
  %1009 = fcmp oeq float %1008, 0.000000e+00, !dbg !85
  %1010 = tail call float @llvm.nvvm.div.full(float %1006, float %1008), !dbg !86
  %1011 = select i1 %1009, float 0.000000e+00, float %1010, !dbg !87
  %1012 = fmul float %1007, %1011, !dbg !88
  %1013 = fadd float %992, %1012, !dbg !89
  %1014 = fadd float %997, %1003, !dbg !90
  %1015 = fmul float %1007, %1007, !dbg !91
  %1016 = fmul float %987, %1015, !dbg !92
  %1017 = fmul float %1011, %1016, !dbg !93
  %1018 = fadd float %1014, %1017, !dbg !94
  %1019 = and i32 %621, 1, !dbg !80
  %1020 = icmp eq i32 %21, 0, !dbg !80
  %1021 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1019, !dbg !80
  %1022 = bitcast float %908 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1021, <1 x i32> %1022, i1 %1020) #5, !dbg !80
  %1023 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %1019, !dbg !80
  %1024 = bitcast float %913 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1023, <1 x i32> %1024, i1 %1020) #5, !dbg !80
  %1025 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1019, !dbg !80
  %1026 = bitcast float %903 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1025, <1 x i32> %1026, i1 %1020) #5, !dbg !80
  %1027 = or disjoint i32 %1019, 2, !dbg !80
  %1028 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1027, !dbg !80
  %1029 = bitcast float %1013 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1028, <1 x i32> %1029, i1 %1020) #5, !dbg !80
  %1030 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %1027, !dbg !80
  %1031 = bitcast float %1018 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1030, <1 x i32> %1031, i1 %1020) #5, !dbg !80
  %1032 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1027, !dbg !80
  %1033 = bitcast float %1008 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1032, <1 x i32> %1033, i1 %1020) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1034 = icmp slt i32 %19, 4, !dbg !80
  %1035 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !80
  %1036 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1035, i1 %1034) #5, !dbg !80
  %1037 = bitcast i32 %1036 to float, !dbg !80
  %1038 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %19, !dbg !80
  %1039 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1038, i1 %1034) #5, !dbg !80
  %1040 = bitcast i32 %1039 to float, !dbg !80
  %1041 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %19, !dbg !80
  %1042 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1041, i1 %1034) #5, !dbg !80
  %1043 = bitcast i32 %1042 to float, !dbg !80
  %1044 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1036, i32 1, i32 31), !dbg !80
  %1045 = bitcast i32 %1044 to float, !dbg !80
  %1046 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1039, i32 1, i32 31), !dbg !80
  %1047 = bitcast i32 %1046 to float, !dbg !80
  %1048 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1042, i32 1, i32 31), !dbg !80
  %1049 = bitcast i32 %1048 to float, !dbg !80
  %1050 = fsub float %1045, %1037, !dbg !82
  %1051 = fadd float %1043, %1049, !dbg !84
  %1052 = fcmp oeq float %1051, 0.000000e+00, !dbg !85
  %1053 = tail call float @llvm.nvvm.div.full(float %1049, float %1051), !dbg !86
  %1054 = select i1 %1052, float 0.000000e+00, float %1053, !dbg !87
  %1055 = fmul float %1050, %1054, !dbg !88
  %1056 = fadd float %1055, %1037, !dbg !89
  %1057 = fadd float %1040, %1047, !dbg !90
  %1058 = fmul float %1050, %1050, !dbg !91
  %1059 = fmul float %1058, %1043, !dbg !92
  %1060 = fmul float %1059, %1054, !dbg !93
  %1061 = fadd float %1057, %1060, !dbg !94
  %1062 = icmp eq i32 %622, 0, !dbg !80
  %1063 = and i1 %1034, %1062, !dbg !80
  %1064 = bitcast float %1056 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1035, <1 x i32> %1064, i1 %1063) #5, !dbg !80
  %1065 = bitcast float %1061 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1038, <1 x i32> %1065, i1 %1063) #5, !dbg !80
  %1066 = bitcast float %1051 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1041, <1 x i32> %1066, i1 %1063) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1067 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %1068 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), align 8, !dbg !80
  %1069 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !80
  %1070 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24), align 8, !dbg !80
  %1071 = tail call float @llvm.nvvm.div.full(float %1069, float 3.072000e+03), !dbg !95
  %1072 = tail call float @llvm.nvvm.div.full(float %1070, float 3.072000e+03), !dbg !95
  %1073 = fadd float %1071, 0x3EB0C6F7A0000000, !dbg !96
  %1074 = fadd float %1072, 0x3EB0C6F7A0000000, !dbg !96
  %1075 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1076 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1077 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1078 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1079 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1080 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1081 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1082 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i140 = icmp eq i32 %1082, 0, !dbg !97
  br i1 %.not.i140, label %1085, label %1083, !dbg !97

1083:                                             ; preds = %__nv_rsqrtf.exit
  %1084 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1073), !dbg !97
  br label %__nv_rsqrtf.exit142, !dbg !97

1085:                                             ; preds = %__nv_rsqrtf.exit
  %1086 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1073), !dbg !97
  br label %__nv_rsqrtf.exit142, !dbg !97

__nv_rsqrtf.exit142:                              ; preds = %1083, %1085
  %.0.i141 = phi float [ %1084, %1083 ], [ %1086, %1085 ], !dbg !97
  %1087 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1088 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1089 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1090 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1091 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1092 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1093 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1094 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i164 = icmp eq i32 %1094, 0, !dbg !97
  br i1 %.not.i164, label %1097, label %1095, !dbg !97

1095:                                             ; preds = %__nv_rsqrtf.exit142
  %1096 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1074), !dbg !97
  br label %__nv_rsqrtf.exit166, !dbg !97

1097:                                             ; preds = %__nv_rsqrtf.exit142
  %1098 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1074), !dbg !97
  br label %__nv_rsqrtf.exit166, !dbg !97

__nv_rsqrtf.exit166:                              ; preds = %1095, %1097
  %.0.i165 = phi float [ %1096, %1095 ], [ %1098, %1097 ], !dbg !97
  %invariant.gep171 = getelementptr i8, ptr addrspace(1) %1, i64 36864, !dbg !98
  %1099 = insertelement <2 x i1> poison, i1 %24, i64 0, !dbg !99
  %1100 = shufflevector <2 x i1> %1099, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !99
  %1101 = insertelement <2 x float> poison, float %.0.i165, i64 0, !dbg !100
  %1102 = shufflevector <2 x float> %1101, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %1103 = insertelement <2 x float> poison, float %1068, i64 0, !dbg !101
  %1104 = shufflevector <2 x float> %1103, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !101
  %1105 = insertelement <16 x float> poison, float %.0.i141, i64 0, !dbg !100
  %1106 = insertelement <16 x float> %1105, float %.0.i165, i64 1, !dbg !100
  %1107 = shufflevector <16 x float> %1106, <16 x float> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0>, !dbg !100
  %1108 = insertelement <16 x float> poison, float %1067, i64 0, !dbg !101
  %1109 = insertelement <16 x float> %1108, float %1068, i64 1, !dbg !101
  %1110 = shufflevector <16 x float> %1109, <16 x float> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0>, !dbg !101
  %1111 = insertelement <8 x i1> poison, i1 %24, i64 0, !dbg !102
  %1112 = shufflevector <8 x i1> %1111, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !102
  %1113 = insertelement <4 x i1> poison, i1 %24, i64 0, !dbg !102
  %1114 = shufflevector <4 x i1> %1113, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !102
  %invariant.op = or i32 %26, 12292, !dbg !98
  br label %1115, !dbg !98

1115:                                             ; preds = %__nv_rsqrtf.exit166, %1115
  %indvars.iv252 = phi i64 [ 0, %__nv_rsqrtf.exit166 ], [ %indvars.iv.next253, %1115 ]
  %1116 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit166 ], [ %1302, %1115 ]
  %1117 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit166 ], [ %1303, %1115 ]
  %1118 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit166 ], [ %1309, %1115 ]
  %1119 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit166 ], [ %1310, %1115 ]
  %1120 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit166 ], [ %1305, %1115 ]
  %1121 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit166 ], [ %1304, %1115 ]
  %1122 = or disjoint i64 %indvars.iv252, %114, !dbg !103
  %1123 = or disjoint i64 %indvars.iv252, %113, !dbg !103
  %1124 = trunc nuw nsw i64 %indvars.iv252 to i32, !dbg !104
  %1125 = add i32 %87, %1124, !dbg !104
  %1126 = add i32 %89, %1124, !dbg !104
  %1127 = trunc nuw nsw i64 %1122 to i32, !dbg !104
  %1128 = add i32 %71, %1127, !dbg !104
  %1129 = add i32 %72, %1127, !dbg !104
  %1130 = sext i32 %1125 to i64, !dbg !105
  %1131 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1130, !dbg !105
  %1132 = sext i32 %1126 to i64, !dbg !105
  %1133 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1132, !dbg !105
  %1134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1131, i1 %23) #5, !dbg !106
  %1135 = extractvalue { i32, i32, i32, i32 } %1134, 0, !dbg !106
  %1136 = extractvalue { i32, i32, i32, i32 } %1134, 1, !dbg !106
  %1137 = extractvalue { i32, i32, i32, i32 } %1134, 2, !dbg !106
  %1138 = extractvalue { i32, i32, i32, i32 } %1134, 3, !dbg !106
  %1139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1133, i1 %23) #5, !dbg !106
  %1140 = extractvalue { i32, i32, i32, i32 } %1139, 0, !dbg !106
  %1141 = extractvalue { i32, i32, i32, i32 } %1139, 1, !dbg !106
  %1142 = extractvalue { i32, i32, i32, i32 } %1139, 2, !dbg !106
  %1143 = extractvalue { i32, i32, i32, i32 } %1139, 3, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %95, i32 %1135, i32 %1136, i32 %1137, i32 %1138, i1 true) #5, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %99, i32 %1140, i32 %1141, i32 %1142, i32 %1143, i1 true) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1144 = or disjoint i64 %1122, 12288, !dbg !107
  %.reass.reass.reass = or i32 %1124, %invariant.op
  %1145 = getelementptr float, ptr addrspace(1) %1, i64 %1144, !dbg !108
  %1146 = zext nneg i32 %.reass.reass.reass to i64, !dbg !108
  %1147 = getelementptr float, ptr addrspace(1) %1, i64 %1146, !dbg !108
  %1148 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1144, !dbg !109
  %1149 = add nuw nsw i64 %1122, 9216, !dbg !110
  %1150 = getelementptr float, ptr addrspace(1) %1, i64 %1149, !dbg !111
  %gep172 = getelementptr float, ptr addrspace(1) %invariant.gep171, i64 %1123, !dbg !111
  %1151 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1149, !dbg !112
  %1152 = fcmp uno <16 x float> %1119, zeroinitializer, !dbg !113
  %1153 = fcmp uno float %1116, 0.000000e+00, !dbg !115
  %1154 = fcmp uno float %1117, 0.000000e+00, !dbg !115
  %1155 = fcmp uno <4 x float> %1121, zeroinitializer, !dbg !115
  %1156 = fcmp uno <8 x float> %1120, zeroinitializer, !dbg !115
  %1157 = fcmp uno <2 x float> %1118, zeroinitializer, !dbg !113
  %1158 = load <2 x bfloat>, ptr addrspace(3) %101, align 16, !dbg !100
  %1159 = fpext <2 x bfloat> %1158 to <2 x float>, !dbg !117
  %1160 = fsub <2 x float> %1159, %1104, !dbg !101
  %1161 = fmul <2 x float> %1102, %1160, !dbg !100
  %1162 = load <8 x bfloat>, ptr addrspace(3) %100, align 16, !dbg !100
  %1163 = load <4 x bfloat>, ptr addrspace(3) %115, align 4, !dbg !100
  %1164 = load <2 x bfloat>, ptr addrspace(3) %116, align 4, !dbg !100
  %1165 = shufflevector <8 x bfloat> %1162, <8 x bfloat> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !117
  %1166 = shufflevector <8 x bfloat> %1162, <8 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %1167 = shufflevector <16 x bfloat> %1166, <16 x bfloat> %1165, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !117
  %1168 = shufflevector <4 x bfloat> %1163, <4 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %1169 = shufflevector <16 x bfloat> %1167, <16 x bfloat> %1168, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 14, i32 15>, !dbg !117
  %1170 = shufflevector <2 x bfloat> %1164, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %1171 = shufflevector <16 x bfloat> %1169, <16 x bfloat> %1170, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 14, i32 15>, !dbg !117
  %1172 = fpext <16 x bfloat> %1171 to <16 x float>, !dbg !117
  %1173 = fsub <16 x float> %1172, %1110, !dbg !101
  %1174 = fmul <16 x float> %1107, %1173, !dbg !100
  %1175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1145, i1 true) #5, !dbg !118
  %1176 = extractvalue { i32, i32, i32, i32 } %1175, 0, !dbg !118
  %1177 = extractvalue { i32, i32, i32, i32 } %1175, 1, !dbg !118
  %1178 = extractvalue { i32, i32, i32, i32 } %1175, 2, !dbg !118
  %1179 = extractvalue { i32, i32, i32, i32 } %1175, 3, !dbg !118
  %1180 = insertelement <2 x i32> poison, i32 %1176, i64 0, !dbg !118
  %1181 = insertelement <2 x i32> %1180, i32 %1177, i64 1, !dbg !118
  %1182 = bitcast <2 x i32> %1181 to <2 x float>, !dbg !118
  %1183 = insertelement <2 x i32> poison, i32 %1178, i64 0, !dbg !118
  %1184 = insertelement <2 x i32> %1183, i32 %1179, i64 1, !dbg !118
  %1185 = bitcast <2 x i32> %1184 to <2 x float>, !dbg !118
  %1186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1147, i1 true) #5, !dbg !118
  %1187 = extractvalue { i32, i32, i32, i32 } %1186, 0, !dbg !118
  %1188 = extractvalue { i32, i32, i32, i32 } %1186, 1, !dbg !118
  %1189 = extractvalue { i32, i32, i32, i32 } %1186, 2, !dbg !118
  %1190 = extractvalue { i32, i32, i32, i32 } %1186, 3, !dbg !118
  %1191 = insertelement <4 x i32> poison, i32 %1187, i64 0, !dbg !118
  %1192 = insertelement <4 x i32> %1191, i32 %1188, i64 1, !dbg !118
  %1193 = insertelement <4 x i32> %1192, i32 %1189, i64 2, !dbg !118
  %1194 = insertelement <4 x i32> %1193, i32 %1190, i64 3, !dbg !118
  %1195 = bitcast <4 x i32> %1194 to <4 x float>, !dbg !118
  %1196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1148, i1 true) #5, !dbg !119
  %1197 = extractvalue { i32, i32, i32, i32 } %1196, 0, !dbg !119
  %1198 = bitcast i32 %1197 to <2 x bfloat>, !dbg !119
  %1199 = extractvalue { i32, i32, i32, i32 } %1196, 1, !dbg !119
  %1200 = bitcast i32 %1199 to <2 x bfloat>, !dbg !119
  %1201 = extractvalue { i32, i32, i32, i32 } %1196, 2, !dbg !119
  %1202 = bitcast i32 %1201 to <2 x bfloat>, !dbg !119
  %1203 = extractvalue { i32, i32, i32, i32 } %1196, 3, !dbg !119
  %1204 = bitcast i32 %1203 to <2 x bfloat>, !dbg !119
  %1205 = fpext <2 x bfloat> %1198 to <2 x float>, !dbg !120
  %1206 = fpext <2 x bfloat> %1200 to <2 x float>, !dbg !120
  %1207 = shufflevector <2 x bfloat> %1202, <2 x bfloat> %1204, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !120
  %1208 = fpext <4 x bfloat> %1207 to <4 x float>, !dbg !120
  %1209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1150, i1 true) #5, !dbg !121
  %1210 = extractvalue { i32, i32, i32, i32 } %1209, 0, !dbg !121
  %1211 = extractvalue { i32, i32, i32, i32 } %1209, 1, !dbg !121
  %1212 = extractvalue { i32, i32, i32, i32 } %1209, 2, !dbg !121
  %1213 = extractvalue { i32, i32, i32, i32 } %1209, 3, !dbg !121
  %1214 = insertelement <2 x i32> poison, i32 %1210, i64 0, !dbg !121
  %1215 = insertelement <2 x i32> %1214, i32 %1211, i64 1, !dbg !121
  %1216 = bitcast <2 x i32> %1215 to <2 x float>, !dbg !121
  %1217 = insertelement <2 x i32> poison, i32 %1212, i64 0, !dbg !121
  %1218 = insertelement <2 x i32> %1217, i32 %1213, i64 1, !dbg !121
  %1219 = bitcast <2 x i32> %1218 to <2 x float>, !dbg !121
  %1220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep172, i1 true) #5, !dbg !121
  %1221 = extractvalue { i32, i32, i32, i32 } %1220, 0, !dbg !121
  %1222 = extractvalue { i32, i32, i32, i32 } %1220, 1, !dbg !121
  %1223 = extractvalue { i32, i32, i32, i32 } %1220, 2, !dbg !121
  %1224 = extractvalue { i32, i32, i32, i32 } %1220, 3, !dbg !121
  %1225 = insertelement <4 x i32> poison, i32 %1221, i64 0, !dbg !121
  %1226 = insertelement <4 x i32> %1225, i32 %1222, i64 1, !dbg !121
  %1227 = insertelement <4 x i32> %1226, i32 %1223, i64 2, !dbg !121
  %1228 = insertelement <4 x i32> %1227, i32 %1224, i64 3, !dbg !121
  %1229 = bitcast <4 x i32> %1228 to <4 x float>, !dbg !121
  %1230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1151, i1 true) #5, !dbg !122
  %1231 = extractvalue { i32, i32, i32, i32 } %1230, 0, !dbg !122
  %1232 = bitcast i32 %1231 to <2 x bfloat>, !dbg !122
  %1233 = extractvalue { i32, i32, i32, i32 } %1230, 1, !dbg !122
  %1234 = bitcast i32 %1233 to <2 x bfloat>, !dbg !122
  %1235 = extractvalue { i32, i32, i32, i32 } %1230, 2, !dbg !122
  %1236 = bitcast i32 %1235 to <2 x bfloat>, !dbg !122
  %1237 = extractvalue { i32, i32, i32, i32 } %1230, 3, !dbg !122
  %1238 = bitcast i32 %1237 to <2 x bfloat>, !dbg !122
  %1239 = fpext <2 x bfloat> %1232 to <2 x float>, !dbg !123
  %1240 = fpext <2 x bfloat> %1234 to <2 x float>, !dbg !123
  %1241 = shufflevector <2 x bfloat> %1236, <2 x bfloat> %1238, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !123
  %1242 = fpext <4 x bfloat> %1241 to <4 x float>, !dbg !123
  %1243 = fadd <2 x float> %1182, %1205, !dbg !124
  %1244 = fadd <2 x float> %1185, %1206, !dbg !124
  %1245 = fadd <4 x float> %1195, %1208, !dbg !124
  %1246 = fadd <2 x float> %1243, splat (float 1.000000e+00), !dbg !125
  %1247 = fadd <2 x float> %1244, splat (float 1.000000e+00), !dbg !125
  %1248 = fadd <4 x float> %1245, splat (float 1.000000e+00), !dbg !125
  %1249 = fmul <2 x float> %1161, %1246, !dbg !126
  %1250 = shufflevector <2 x float> %1246, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !126
  %1251 = shufflevector <4 x float> %1248, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !126
  %1252 = shufflevector <8 x float> %1250, <8 x float> %1251, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !126
  %1253 = shufflevector <2 x float> %1247, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !126
  %1254 = shufflevector <8 x float> %1252, <8 x float> %1253, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !126
  %1255 = shufflevector <8 x float> %1254, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !126
  %1256 = fmul <16 x float> %1174, %1255, !dbg !126
  %1257 = fadd <2 x float> %1216, %1239, !dbg !127
  %1258 = fadd <2 x float> %1219, %1240, !dbg !127
  %1259 = fadd <4 x float> %1229, %1242, !dbg !127
  %1260 = fadd <2 x float> %1249, %1257, !dbg !128
  %1261 = shufflevector <2 x float> %1257, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %1262 = shufflevector <4 x float> %1259, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %1263 = shufflevector <8 x float> %1261, <8 x float> %1262, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !128
  %1264 = shufflevector <2 x float> %1258, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %1265 = shufflevector <8 x float> %1263, <8 x float> %1264, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !128
  %1266 = shufflevector <8 x float> %1265, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !128
  %1267 = fadd <16 x float> %1256, %1266, !dbg !128
  %1268 = extractelement <16 x float> %1267, i64 2, !dbg !129
  %1269 = fcmp olt float %1116, %1268, !dbg !130
  %1270 = extractelement <16 x float> %1267, i64 3, !dbg !129
  %1271 = fcmp olt float %1117, %1270, !dbg !130
  %1272 = extractelement <16 x float> %1267, i64 4, !dbg !129
  %1273 = extractelement <16 x float> %1267, i64 5, !dbg !129
  %1274 = extractelement <16 x float> %1267, i64 6, !dbg !129
  %1275 = extractelement <16 x float> %1267, i64 7, !dbg !129
  %1276 = extractelement <2 x float> %1260, i64 0, !dbg !129
  %1277 = extractelement <2 x float> %1260, i64 1, !dbg !129
  %1278 = extractelement <16 x float> %1267, i64 8, !dbg !129
  %1279 = extractelement <16 x float> %1267, i64 9, !dbg !129
  %1280 = extractelement <16 x float> %1267, i64 10, !dbg !129
  %1281 = extractelement <16 x float> %1267, i64 11, !dbg !129
  %1282 = extractelement <16 x float> %1267, i64 12, !dbg !129
  %1283 = extractelement <16 x float> %1267, i64 13, !dbg !129
  %1284 = or i1 %1153, %1269, !dbg !131
  %1285 = or i1 %1154, %1271, !dbg !131
  %1286 = select i1 %1284, float %1116, float %1268, !dbg !132
  %1287 = select i1 %1285, float %1117, float %1270, !dbg !132
  %1288 = shufflevector <16 x float> %1267, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !130
  %1289 = fcmp olt <4 x float> %1121, %1288, !dbg !130
  %1290 = or <4 x i1> %1155, %1289, !dbg !131
  %1291 = select <4 x i1> %1290, <4 x float> %1121, <4 x float> %1288, !dbg !132
  %1292 = shufflevector <2 x float> %1260, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !130
  %1293 = shufflevector <16 x float> %1267, <16 x float> %1292, <8 x i32> <i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 17, i32 16>, !dbg !130
  %1294 = fcmp olt <8 x float> %1120, %1293, !dbg !130
  %1295 = or <8 x i1> %1156, %1294, !dbg !131
  %1296 = select <8 x i1> %1295, <8 x float> %1120, <8 x float> %1293, !dbg !132
  %1297 = fcmp ogt <16 x float> %1119, %1267, !dbg !133
  %1298 = fcmp olt <16 x float> %1119, %1267, !dbg !133
  %1299 = shufflevector <16 x i1> %1297, <16 x i1> %1298, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 30, i32 31>, !dbg !133
  %1300 = or <16 x i1> %1152, %1299, !dbg !134
  %1301 = select <16 x i1> %1300, <16 x float> %1119, <16 x float> %1267, !dbg !135
  %1302 = select i1 %24, float %1286, float %1116, !dbg !102
  %1303 = select i1 %24, float %1287, float %1117, !dbg !102
  %1304 = select <4 x i1> %1114, <4 x float> %1291, <4 x float> %1121, !dbg !102
  %1305 = select <8 x i1> %1112, <8 x float> %1296, <8 x float> %1120, !dbg !102
  %1306 = fcmp ogt <2 x float> %1118, %1260, !dbg !133
  %1307 = or <2 x i1> %1157, %1306, !dbg !134
  %1308 = select <2 x i1> %1307, <2 x float> %1118, <2 x float> %1260, !dbg !135
  %1309 = select <2 x i1> %1100, <2 x float> %1308, <2 x float> %1118, !dbg !99
  %1310 = select <16 x i1> %118, <16 x float> %1301, <16 x float> %1119, !dbg !99
  %1311 = sext i32 %1128 to i64, !dbg !136
  %1312 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1311, !dbg !136
  %1313 = sext i32 %1129 to i64, !dbg !136
  %1314 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1313, !dbg !136
  %1315 = extractelement <16 x float> %1267, i64 0, !dbg !129
  %1316 = fptrunc float %1315 to bfloat, !dbg !129
  %1317 = extractelement <16 x float> %1267, i64 1, !dbg !129
  %1318 = fptrunc float %1317 to bfloat, !dbg !129
  %1319 = fptrunc float %1268 to bfloat, !dbg !129
  %1320 = fptrunc float %1270 to bfloat, !dbg !129
  %1321 = fptrunc float %1272 to bfloat, !dbg !129
  %1322 = fptrunc float %1273 to bfloat, !dbg !129
  %1323 = fptrunc float %1274 to bfloat, !dbg !129
  %1324 = fptrunc float %1275 to bfloat, !dbg !129
  %1325 = fptrunc float %1276 to bfloat, !dbg !129
  %1326 = fptrunc float %1277 to bfloat, !dbg !129
  %1327 = fptrunc float %1278 to bfloat, !dbg !129
  %1328 = fptrunc float %1279 to bfloat, !dbg !129
  %1329 = fptrunc float %1280 to bfloat, !dbg !129
  %1330 = fptrunc float %1281 to bfloat, !dbg !129
  %1331 = fptrunc float %1282 to bfloat, !dbg !129
  %1332 = fptrunc float %1283 to bfloat, !dbg !129
  %1333 = insertelement <2 x bfloat> poison, bfloat %1316, i64 0, !dbg !129
  %1334 = insertelement <2 x bfloat> %1333, bfloat %1318, i64 1, !dbg !129
  %1335 = bitcast <2 x bfloat> %1334 to i32, !dbg !129
  %1336 = insertelement <2 x bfloat> poison, bfloat %1319, i64 0, !dbg !129
  %1337 = insertelement <2 x bfloat> %1336, bfloat %1320, i64 1, !dbg !129
  %1338 = bitcast <2 x bfloat> %1337 to i32, !dbg !129
  %1339 = insertelement <2 x bfloat> poison, bfloat %1321, i64 0, !dbg !129
  %1340 = insertelement <2 x bfloat> %1339, bfloat %1322, i64 1, !dbg !129
  %1341 = bitcast <2 x bfloat> %1340 to i32, !dbg !129
  %1342 = insertelement <2 x bfloat> poison, bfloat %1323, i64 0, !dbg !129
  %1343 = insertelement <2 x bfloat> %1342, bfloat %1324, i64 1, !dbg !129
  %1344 = bitcast <2 x bfloat> %1343 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1335, i32 %1338, i32 %1341, i32 %1344, ptr addrspace(1) %1312, i1 %24) #5, !dbg !129
  %1345 = insertelement <2 x bfloat> poison, bfloat %1325, i64 0, !dbg !129
  %1346 = insertelement <2 x bfloat> %1345, bfloat %1326, i64 1, !dbg !129
  %1347 = bitcast <2 x bfloat> %1346 to i32, !dbg !129
  %1348 = insertelement <2 x bfloat> poison, bfloat %1327, i64 0, !dbg !129
  %1349 = insertelement <2 x bfloat> %1348, bfloat %1328, i64 1, !dbg !129
  %1350 = bitcast <2 x bfloat> %1349 to i32, !dbg !129
  %1351 = insertelement <2 x bfloat> poison, bfloat %1329, i64 0, !dbg !129
  %1352 = insertelement <2 x bfloat> %1351, bfloat %1330, i64 1, !dbg !129
  %1353 = bitcast <2 x bfloat> %1352 to i32, !dbg !129
  %1354 = insertelement <2 x bfloat> poison, bfloat %1331, i64 0, !dbg !129
  %1355 = insertelement <2 x bfloat> %1354, bfloat %1332, i64 1, !dbg !129
  %1356 = bitcast <2 x bfloat> %1355 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1347, i32 %1350, i32 %1353, i32 %1356, ptr addrspace(1) %1314, i1 %24) #5, !dbg !129
  %indvars.iv.next253 = add nuw nsw i64 %indvars.iv252, 512, !dbg !98
  %1357 = icmp samesign ult i64 %indvars.iv252, 2560, !dbg !98
  br i1 %1357, label %1115, label %1358, !dbg !98

1358:                                             ; preds = %1115
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1359 = extractelement <16 x float> %1310, i64 14, !dbg !139
  %1360 = extractelement <16 x float> %1310, i64 15, !dbg !139
  %1361 = fcmp olt float %1359, %1360, !dbg !139
  %1362 = fcmp uno float %1359, 0.000000e+00, !dbg !140
  %1363 = or i1 %1361, %1362, !dbg !141
  %1364 = select i1 %1363, float %1359, float %1360, !dbg !142
  %1365 = fcmp olt float %1364, %1302, !dbg !139
  %1366 = fcmp uno float %1364, 0.000000e+00, !dbg !140
  %1367 = or i1 %1365, %1366, !dbg !141
  %1368 = select i1 %1367, float %1364, float %1302, !dbg !142
  %1369 = fcmp olt float %1368, %1303, !dbg !139
  %1370 = fcmp uno float %1368, 0.000000e+00, !dbg !140
  %1371 = or i1 %1369, %1370, !dbg !141
  %1372 = select i1 %1371, float %1368, float %1303, !dbg !142
  %1373 = extractelement <4 x float> %1304, i64 0, !dbg !139
  %1374 = fcmp olt float %1372, %1373, !dbg !139
  %1375 = fcmp uno float %1372, 0.000000e+00, !dbg !140
  %1376 = or i1 %1374, %1375, !dbg !141
  %1377 = select i1 %1376, float %1372, float %1373, !dbg !142
  %1378 = extractelement <4 x float> %1304, i64 1, !dbg !139
  %1379 = fcmp olt float %1377, %1378, !dbg !139
  %1380 = fcmp uno float %1377, 0.000000e+00, !dbg !140
  %1381 = or i1 %1379, %1380, !dbg !141
  %1382 = select i1 %1381, float %1377, float %1378, !dbg !142
  %1383 = extractelement <4 x float> %1304, i64 2, !dbg !139
  %1384 = fcmp olt float %1382, %1383, !dbg !139
  %1385 = fcmp uno float %1382, 0.000000e+00, !dbg !140
  %1386 = or i1 %1384, %1385, !dbg !141
  %1387 = select i1 %1386, float %1382, float %1383, !dbg !142
  %1388 = extractelement <4 x float> %1304, i64 3, !dbg !139
  %1389 = fcmp olt float %1387, %1388, !dbg !139
  %1390 = fcmp uno float %1387, 0.000000e+00, !dbg !140
  %1391 = or i1 %1389, %1390, !dbg !141
  %1392 = select i1 %1391, float %1387, float %1388, !dbg !142
  %1393 = extractelement <8 x float> %1305, i64 6, !dbg !139
  %1394 = extractelement <8 x float> %1305, i64 7, !dbg !139
  %1395 = fcmp olt float %1394, %1393, !dbg !139
  %1396 = fcmp uno float %1394, 0.000000e+00, !dbg !140
  %1397 = or i1 %1395, %1396, !dbg !141
  %1398 = select i1 %1397, float %1394, float %1393, !dbg !142
  %1399 = extractelement <8 x float> %1305, i64 5, !dbg !139
  %1400 = fcmp olt float %1398, %1399, !dbg !139
  %1401 = fcmp uno float %1398, 0.000000e+00, !dbg !140
  %1402 = or i1 %1400, %1401, !dbg !141
  %1403 = select i1 %1402, float %1398, float %1399, !dbg !142
  %1404 = extractelement <8 x float> %1305, i64 4, !dbg !139
  %1405 = fcmp olt float %1403, %1404, !dbg !139
  %1406 = fcmp uno float %1403, 0.000000e+00, !dbg !140
  %1407 = or i1 %1405, %1406, !dbg !141
  %1408 = select i1 %1407, float %1403, float %1404, !dbg !142
  %1409 = extractelement <8 x float> %1305, i64 3, !dbg !139
  %1410 = fcmp olt float %1408, %1409, !dbg !139
  %1411 = fcmp uno float %1408, 0.000000e+00, !dbg !140
  %1412 = or i1 %1410, %1411, !dbg !141
  %1413 = select i1 %1412, float %1408, float %1409, !dbg !142
  %1414 = extractelement <8 x float> %1305, i64 2, !dbg !139
  %1415 = fcmp olt float %1413, %1414, !dbg !139
  %1416 = fcmp uno float %1413, 0.000000e+00, !dbg !140
  %1417 = or i1 %1415, %1416, !dbg !141
  %1418 = select i1 %1417, float %1413, float %1414, !dbg !142
  %1419 = extractelement <8 x float> %1305, i64 1, !dbg !139
  %1420 = fcmp olt float %1418, %1419, !dbg !139
  %1421 = fcmp uno float %1418, 0.000000e+00, !dbg !140
  %1422 = or i1 %1420, %1421, !dbg !141
  %1423 = select i1 %1422, float %1418, float %1419, !dbg !142
  %1424 = extractelement <8 x float> %1305, i64 0, !dbg !139
  %1425 = fcmp olt float %1423, %1424, !dbg !139
  %1426 = fcmp uno float %1423, 0.000000e+00, !dbg !140
  %1427 = or i1 %1425, %1426, !dbg !141
  %1428 = select i1 %1427, float %1423, float %1424, !dbg !142
  %1429 = bitcast float %1392 to i32, !dbg !137
  %1430 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1429, i32 16, i32 31), !dbg !137
  %1431 = bitcast i32 %1430 to float, !dbg !137
  %1432 = fcmp olt float %1392, %1431, !dbg !139
  %1433 = fcmp uno float %1392, 0.000000e+00, !dbg !140
  %1434 = or i1 %1433, %1432, !dbg !141
  %1435 = select i1 %1434, float %1392, float %1431, !dbg !142
  %1436 = bitcast float %1435 to i32, !dbg !137
  %1437 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1436, i32 8, i32 31), !dbg !137
  %1438 = bitcast i32 %1437 to float, !dbg !137
  %1439 = fcmp olt float %1435, %1438, !dbg !139
  %1440 = fcmp uno float %1435, 0.000000e+00, !dbg !140
  %1441 = or i1 %1439, %1440, !dbg !141
  %1442 = select i1 %1441, float %1435, float %1438, !dbg !142
  %1443 = bitcast float %1442 to i32, !dbg !137
  %1444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1443, i32 4, i32 31), !dbg !137
  %1445 = bitcast i32 %1444 to float, !dbg !137
  %1446 = fcmp olt float %1442, %1445, !dbg !139
  %1447 = fcmp uno float %1442, 0.000000e+00, !dbg !140
  %1448 = or i1 %1446, %1447, !dbg !141
  %1449 = select i1 %1448, float %1442, float %1445, !dbg !142
  %1450 = bitcast float %1449 to i32, !dbg !137
  %1451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1450, i32 2, i32 31), !dbg !137
  %1452 = bitcast i32 %1451 to float, !dbg !137
  %1453 = fcmp olt float %1449, %1452, !dbg !139
  %1454 = fcmp uno float %1449, 0.000000e+00, !dbg !140
  %1455 = or i1 %1453, %1454, !dbg !141
  %1456 = select i1 %1455, float %1449, float %1452, !dbg !142
  %1457 = bitcast float %1456 to i32, !dbg !137
  %1458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1457, i32 1, i32 31), !dbg !137
  %1459 = bitcast i32 %1458 to float, !dbg !137
  %1460 = fcmp olt float %1456, %1459, !dbg !139
  %1461 = fcmp uno float %1456, 0.000000e+00, !dbg !140
  %1462 = or i1 %1460, %1461, !dbg !141
  %1463 = bitcast float %1428 to i32, !dbg !137
  %1464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1463, i32 16, i32 31), !dbg !137
  %1465 = bitcast i32 %1464 to float, !dbg !137
  %1466 = fcmp olt float %1428, %1465, !dbg !139
  %1467 = fcmp uno float %1428, 0.000000e+00, !dbg !140
  %1468 = or i1 %1467, %1466, !dbg !141
  %1469 = select i1 %1468, float %1428, float %1465, !dbg !142
  %1470 = bitcast float %1469 to i32, !dbg !137
  %1471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1470, i32 8, i32 31), !dbg !137
  %1472 = bitcast i32 %1471 to float, !dbg !137
  %1473 = fcmp olt float %1469, %1472, !dbg !139
  %1474 = fcmp uno float %1469, 0.000000e+00, !dbg !140
  %1475 = or i1 %1473, %1474, !dbg !141
  %1476 = select i1 %1475, float %1469, float %1472, !dbg !142
  %1477 = bitcast float %1476 to i32, !dbg !137
  %1478 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1477, i32 4, i32 31), !dbg !137
  %1479 = bitcast i32 %1478 to float, !dbg !137
  %1480 = fcmp olt float %1476, %1479, !dbg !139
  %1481 = fcmp uno float %1476, 0.000000e+00, !dbg !140
  %1482 = or i1 %1480, %1481, !dbg !141
  %1483 = select i1 %1482, float %1476, float %1479, !dbg !142
  %1484 = bitcast float %1483 to i32, !dbg !137
  %1485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1484, i32 2, i32 31), !dbg !137
  %1486 = bitcast i32 %1485 to float, !dbg !137
  %1487 = fcmp olt float %1483, %1486, !dbg !139
  %1488 = fcmp uno float %1483, 0.000000e+00, !dbg !140
  %1489 = or i1 %1487, %1488, !dbg !141
  %1490 = select i1 %1489, float %1483, float %1486, !dbg !142
  %1491 = bitcast float %1490 to i32, !dbg !137
  %1492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1491, i32 1, i32 31), !dbg !137
  %1493 = bitcast i32 %1492 to float, !dbg !137
  %1494 = fcmp olt float %1490, %1493, !dbg !139
  %1495 = fcmp uno float %1490, 0.000000e+00, !dbg !140
  %1496 = or i1 %1494, %1495, !dbg !141
  %1497 = select i1 %1462, i32 %1457, i32 %1458, !dbg !142
  %1498 = insertelement <1 x i32> poison, i32 %1497, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1021, <1 x i32> %1498, i1 %1020) #5, !dbg !137
  %1499 = select i1 %1496, i32 %1491, i32 %1492, !dbg !142
  %1500 = insertelement <1 x i32> poison, i32 %1499, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1028, <1 x i32> %1500, i1 %1020) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1501 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1035, i1 %1034) #5, !dbg !137
  %1502 = bitcast i32 %1501 to float, !dbg !137
  %1503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1501, i32 1, i32 31), !dbg !137
  %1504 = bitcast i32 %1503 to float, !dbg !137
  %1505 = fcmp olt float %1502, %1504, !dbg !139
  %1506 = fcmp uno float %1502, 0.000000e+00, !dbg !140
  %1507 = or i1 %1506, %1505, !dbg !141
  %1508 = select i1 %1507, i32 %1501, i32 %1503, !dbg !142
  %1509 = insertelement <1 x i32> poison, i32 %1508, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1035, <1 x i32> %1509, i1 %1063) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1510 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !137
  %1511 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), align 8, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1512 = bitcast float %1510 to i32, !dbg !143
  %1513 = bitcast float %1511 to i32, !dbg !143
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1512, i32 %1513, i1 true) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1514 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %622, !dbg !143
  %1515 = load float, ptr addrspace(3) %1514, align 4, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %1516 = extractelement <16 x float> %1310, i64 0, !dbg !146
  %1517 = extractelement <16 x float> %1310, i64 1, !dbg !146
  %1518 = fcmp ogt float %1516, %1517, !dbg !146
  %1519 = fcmp uno float %1516, 0.000000e+00, !dbg !147
  %1520 = or i1 %1518, %1519, !dbg !148
  %1521 = select i1 %1520, float %1516, float %1517, !dbg !149
  %1522 = extractelement <16 x float> %1310, i64 2, !dbg !146
  %1523 = fcmp ogt float %1521, %1522, !dbg !146
  %1524 = fcmp uno float %1521, 0.000000e+00, !dbg !147
  %1525 = or i1 %1523, %1524, !dbg !148
  %1526 = select i1 %1525, float %1521, float %1522, !dbg !149
  %1527 = extractelement <16 x float> %1310, i64 3, !dbg !146
  %1528 = fcmp ogt float %1526, %1527, !dbg !146
  %1529 = fcmp uno float %1526, 0.000000e+00, !dbg !147
  %1530 = or i1 %1528, %1529, !dbg !148
  %1531 = select i1 %1530, float %1526, float %1527, !dbg !149
  %1532 = extractelement <16 x float> %1310, i64 4, !dbg !146
  %1533 = fcmp ogt float %1531, %1532, !dbg !146
  %1534 = fcmp uno float %1531, 0.000000e+00, !dbg !147
  %1535 = or i1 %1533, %1534, !dbg !148
  %1536 = select i1 %1535, float %1531, float %1532, !dbg !149
  %1537 = extractelement <16 x float> %1310, i64 5, !dbg !146
  %1538 = fcmp ogt float %1536, %1537, !dbg !146
  %1539 = fcmp uno float %1536, 0.000000e+00, !dbg !147
  %1540 = or i1 %1538, %1539, !dbg !148
  %1541 = select i1 %1540, float %1536, float %1537, !dbg !149
  %1542 = extractelement <16 x float> %1310, i64 6, !dbg !146
  %1543 = fcmp ogt float %1541, %1542, !dbg !146
  %1544 = fcmp uno float %1541, 0.000000e+00, !dbg !147
  %1545 = or i1 %1543, %1544, !dbg !148
  %1546 = select i1 %1545, float %1541, float %1542, !dbg !149
  %1547 = extractelement <16 x float> %1310, i64 7, !dbg !146
  %1548 = fcmp ogt float %1546, %1547, !dbg !146
  %1549 = fcmp uno float %1546, 0.000000e+00, !dbg !147
  %1550 = or i1 %1548, %1549, !dbg !148
  %1551 = select i1 %1550, float %1546, float %1547, !dbg !149
  %1552 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1309, <2 x i32> <i32 0, i32 2>, !dbg !146
  %1553 = fcmp ogt <2 x float> %1552, %1309, !dbg !146
  %1554 = fcmp uno <2 x float> %1552, %1309, !dbg !146
  %shift = shufflevector <2 x i1> %1553, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !148
  %1555 = or <2 x i1> %shift, %1554, !dbg !148
  %1556 = extractelement <2 x i1> %1555, i64 0, !dbg !148
  %1557 = extractelement <2 x float> %1309, i64 0, !dbg !149
  %1558 = extractelement <2 x float> %1309, i64 1, !dbg !149
  %1559 = select i1 %1556, float %1557, float %1558, !dbg !149
  %1560 = extractelement <16 x float> %1310, i64 8, !dbg !146
  %1561 = fcmp ogt float %1559, %1560, !dbg !146
  %1562 = fcmp uno float %1559, 0.000000e+00, !dbg !147
  %1563 = or i1 %1561, %1562, !dbg !148
  %1564 = select i1 %1563, float %1559, float %1560, !dbg !149
  %1565 = extractelement <16 x float> %1310, i64 9, !dbg !146
  %1566 = fcmp ogt float %1564, %1565, !dbg !146
  %1567 = fcmp uno float %1564, 0.000000e+00, !dbg !147
  %1568 = or i1 %1566, %1567, !dbg !148
  %1569 = select i1 %1568, float %1564, float %1565, !dbg !149
  %1570 = extractelement <16 x float> %1310, i64 10, !dbg !146
  %1571 = fcmp ogt float %1569, %1570, !dbg !146
  %1572 = fcmp uno float %1569, 0.000000e+00, !dbg !147
  %1573 = or i1 %1571, %1572, !dbg !148
  %1574 = select i1 %1573, float %1569, float %1570, !dbg !149
  %1575 = extractelement <16 x float> %1310, i64 11, !dbg !146
  %1576 = fcmp ogt float %1574, %1575, !dbg !146
  %1577 = fcmp uno float %1574, 0.000000e+00, !dbg !147
  %1578 = or i1 %1576, %1577, !dbg !148
  %1579 = select i1 %1578, float %1574, float %1575, !dbg !149
  %1580 = extractelement <16 x float> %1310, i64 12, !dbg !146
  %1581 = fcmp ogt float %1579, %1580, !dbg !146
  %1582 = fcmp uno float %1579, 0.000000e+00, !dbg !147
  %1583 = or i1 %1581, %1582, !dbg !148
  %1584 = select i1 %1583, float %1579, float %1580, !dbg !149
  %1585 = extractelement <16 x float> %1310, i64 13, !dbg !146
  %1586 = fcmp ogt float %1584, %1585, !dbg !146
  %1587 = fcmp uno float %1584, 0.000000e+00, !dbg !147
  %1588 = or i1 %1586, %1587, !dbg !148
  %1589 = select i1 %1588, float %1584, float %1585, !dbg !149
  %1590 = bitcast float %1551 to i32, !dbg !144
  %1591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1590, i32 16, i32 31), !dbg !144
  %1592 = bitcast i32 %1591 to float, !dbg !144
  %1593 = fcmp ogt float %1551, %1592, !dbg !146
  %1594 = fcmp uno float %1551, 0.000000e+00, !dbg !147
  %1595 = or i1 %1594, %1593, !dbg !148
  %1596 = select i1 %1595, float %1551, float %1592, !dbg !149
  %1597 = bitcast float %1596 to i32, !dbg !144
  %1598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1597, i32 8, i32 31), !dbg !144
  %1599 = bitcast i32 %1598 to float, !dbg !144
  %1600 = fcmp ogt float %1596, %1599, !dbg !146
  %1601 = fcmp uno float %1596, 0.000000e+00, !dbg !147
  %1602 = or i1 %1600, %1601, !dbg !148
  %1603 = select i1 %1602, float %1596, float %1599, !dbg !149
  %1604 = bitcast float %1603 to i32, !dbg !144
  %1605 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1604, i32 4, i32 31), !dbg !144
  %1606 = bitcast i32 %1605 to float, !dbg !144
  %1607 = fcmp ogt float %1603, %1606, !dbg !146
  %1608 = fcmp uno float %1603, 0.000000e+00, !dbg !147
  %1609 = or i1 %1607, %1608, !dbg !148
  %1610 = select i1 %1609, float %1603, float %1606, !dbg !149
  %1611 = bitcast float %1610 to i32, !dbg !144
  %1612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1611, i32 2, i32 31), !dbg !144
  %1613 = bitcast i32 %1612 to float, !dbg !144
  %1614 = fcmp ogt float %1610, %1613, !dbg !146
  %1615 = fcmp uno float %1610, 0.000000e+00, !dbg !147
  %1616 = or i1 %1614, %1615, !dbg !148
  %1617 = select i1 %1616, float %1610, float %1613, !dbg !149
  %1618 = bitcast float %1617 to i32, !dbg !144
  %1619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1618, i32 1, i32 31), !dbg !144
  %1620 = bitcast i32 %1619 to float, !dbg !144
  %1621 = fcmp ogt float %1617, %1620, !dbg !146
  %1622 = fcmp uno float %1617, 0.000000e+00, !dbg !147
  %1623 = or i1 %1621, %1622, !dbg !148
  %1624 = bitcast float %1589 to i32, !dbg !144
  %1625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1624, i32 16, i32 31), !dbg !144
  %1626 = bitcast i32 %1625 to float, !dbg !144
  %1627 = fcmp ogt float %1589, %1626, !dbg !146
  %1628 = fcmp uno float %1589, 0.000000e+00, !dbg !147
  %1629 = or i1 %1628, %1627, !dbg !148
  %1630 = select i1 %1629, float %1589, float %1626, !dbg !149
  %1631 = bitcast float %1630 to i32, !dbg !144
  %1632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1631, i32 8, i32 31), !dbg !144
  %1633 = bitcast i32 %1632 to float, !dbg !144
  %1634 = fcmp ogt float %1630, %1633, !dbg !146
  %1635 = fcmp uno float %1630, 0.000000e+00, !dbg !147
  %1636 = or i1 %1634, %1635, !dbg !148
  %1637 = select i1 %1636, float %1630, float %1633, !dbg !149
  %1638 = bitcast float %1637 to i32, !dbg !144
  %1639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1638, i32 4, i32 31), !dbg !144
  %1640 = bitcast i32 %1639 to float, !dbg !144
  %1641 = fcmp ogt float %1637, %1640, !dbg !146
  %1642 = fcmp uno float %1637, 0.000000e+00, !dbg !147
  %1643 = or i1 %1641, %1642, !dbg !148
  %1644 = select i1 %1643, float %1637, float %1640, !dbg !149
  %1645 = bitcast float %1644 to i32, !dbg !144
  %1646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1645, i32 2, i32 31), !dbg !144
  %1647 = bitcast i32 %1646 to float, !dbg !144
  %1648 = fcmp ogt float %1644, %1647, !dbg !146
  %1649 = fcmp uno float %1644, 0.000000e+00, !dbg !147
  %1650 = or i1 %1648, %1649, !dbg !148
  %1651 = select i1 %1650, float %1644, float %1647, !dbg !149
  %1652 = bitcast float %1651 to i32, !dbg !144
  %1653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1652, i32 1, i32 31), !dbg !144
  %1654 = bitcast i32 %1653 to float, !dbg !144
  %1655 = fcmp ogt float %1651, %1654, !dbg !146
  %1656 = fcmp uno float %1651, 0.000000e+00, !dbg !147
  %1657 = or i1 %1655, %1656, !dbg !148
  %1658 = select i1 %1623, i32 %1618, i32 %1619, !dbg !149
  %1659 = insertelement <1 x i32> poison, i32 %1658, i64 0, !dbg !144
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1021, <1 x i32> %1659, i1 %1020) #5, !dbg !144
  %1660 = select i1 %1657, i32 %1652, i32 %1653, !dbg !149
  %1661 = insertelement <1 x i32> poison, i32 %1660, i64 0, !dbg !144
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1028, <1 x i32> %1661, i1 %1020) #5, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %1662 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1035, i1 %1034) #5, !dbg !144
  %1663 = bitcast i32 %1662 to float, !dbg !144
  %1664 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1662, i32 1, i32 31), !dbg !144
  %1665 = bitcast i32 %1664 to float, !dbg !144
  %1666 = fcmp ogt float %1663, %1665, !dbg !146
  %1667 = fcmp uno float %1663, 0.000000e+00, !dbg !147
  %1668 = or i1 %1667, %1666, !dbg !148
  %1669 = select i1 %1668, i32 %1662, i32 %1664, !dbg !149
  %1670 = insertelement <1 x i32> poison, i32 %1669, i64 0, !dbg !144
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1035, <1 x i32> %1670, i1 %1063) #5, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %1671 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !144
  %1672 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), align 8, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %1673 = bitcast float %1671 to i32, !dbg !150
  %1674 = bitcast float %1672 to i32, !dbg !150
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1673, i32 %1674, i1 true) #5, !dbg !150
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %1675 = load float, ptr addrspace(3) %1514, align 4, !dbg !150
  %1676 = sext i32 %623 to i64, !dbg !151
  %1677 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1676, !dbg !151
  %1678 = fptrunc float %1515 to bfloat, !dbg !143
  %1679 = and i32 %19, 62, !dbg !143
  %1680 = icmp eq i32 %1679, 0, !dbg !143
  %1681 = bitcast bfloat %1678 to i16, !dbg !143
  %1682 = and i1 %1680, %624, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1681, ptr addrspace(1) %1677, i1 %1682) #5, !dbg !143
  %1683 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1676, !dbg !152
  %1684 = fptrunc float %1675 to bfloat, !dbg !150
  %1685 = bitcast bfloat %1684 to i16, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1685, ptr addrspace(1) %1683, i1 %1682) #5, !dbg !150
  %.inv5 = fcmp oge float %1510, 0.000000e+00, !dbg !153
  %1686 = select i1 %.inv5, float 0.000000e+00, float %1510, !dbg !153
  %.inv6 = fcmp oge float %1511, 0.000000e+00, !dbg !153
  %1687 = select i1 %.inv6, float 0.000000e+00, float %1511, !dbg !153
  %1688 = fsub float 0.000000e+00, %1686, !dbg !155
  %1689 = fsub float 0.000000e+00, %1687, !dbg !155
  %.inv7 = fcmp ole float %1671, 0.000000e+00, !dbg !156
  %1690 = select i1 %.inv7, float 0.000000e+00, float %1671, !dbg !156
  %.inv8 = fcmp ole float %1672, 0.000000e+00, !dbg !156
  %1691 = select i1 %.inv8, float 0.000000e+00, float %1672, !dbg !156
  %1692 = fcmp ogt float %1688, %1690, !dbg !158
  %1693 = fcmp ogt float %1689, %1691, !dbg !158
  %1694 = fcmp uno float %1688, 0.000000e+00, !dbg !160
  %1695 = fcmp uno float %1689, 0.000000e+00, !dbg !160
  %1696 = or i1 %1694, %1692, !dbg !161
  %1697 = or i1 %1695, %1693, !dbg !161
  %1698 = select i1 %1696, float %1688, float %1690, !dbg !162
  %1699 = select i1 %1697, float %1689, float %1691, !dbg !162
  %1700 = fmul float %1698, 0x3F80204080000000, !dbg !163
  %1701 = fmul float %1699, 0x3F80204080000000, !dbg !163
  %1702 = fcmp ogt float %1700, 0x3EE4F8B580000000, !dbg !164
  %1703 = fcmp ogt float %1701, 0x3EE4F8B580000000, !dbg !164
  %1704 = fcmp uno float %1700, 0.000000e+00, !dbg !166
  %1705 = fcmp uno float %1701, 0.000000e+00, !dbg !166
  %1706 = or i1 %1702, %1704, !dbg !167
  %1707 = or i1 %1703, %1705, !dbg !167
  %1708 = select i1 %1706, float %1700, float 0x3EE4F8B580000000, !dbg !168
  %1709 = select i1 %1707, float %1701, float 0x3EE4F8B580000000, !dbg !168
  %1710 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1708), !dbg !169
  %1711 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1709), !dbg !169
  tail call void @llvm.nvvm.barrier0(), !dbg !170
  %1712 = bitcast float %1710 to <1 x i32>, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1712, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1712, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1712, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1712, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1712, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1712, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1712, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1712, i1 true) #5, !dbg !170
  %1713 = bitcast float %1711 to <1 x i32>, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1713, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1713, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1713, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1713, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1713, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1713, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1713, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1713, i1 true) #5, !dbg !170
  tail call void @llvm.nvvm.barrier0(), !dbg !170
  %1714 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %93, !dbg !170
  %1715 = load float, ptr addrspace(3) %1714, align 8, !dbg !170
  br label %1716, !dbg !171

1716:                                             ; preds = %1358, %1716
  %indvars.iv254 = phi i64 [ 0, %1358 ], [ %indvars.iv.next255, %1716 ]
  %1717 = trunc nuw nsw i64 %indvars.iv254 to i32, !dbg !172
  %1718 = add i32 %87, %1717, !dbg !172
  %1719 = add i32 %89, %1717, !dbg !172
  %1720 = sext i32 %1718 to i64, !dbg !173
  %1721 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1720, !dbg !173
  %1722 = sext i32 %1719 to i64, !dbg !173
  %1723 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1722, !dbg !173
  %1724 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1721, i1 %23) #5, !dbg !174
  %1725 = extractvalue { i32, i32, i32, i32 } %1724, 0, !dbg !174
  %1726 = bitcast i32 %1725 to <2 x bfloat>, !dbg !174
  %1727 = extractvalue { i32, i32, i32, i32 } %1724, 1, !dbg !174
  %1728 = bitcast i32 %1727 to <2 x bfloat>, !dbg !174
  %1729 = extractvalue { i32, i32, i32, i32 } %1724, 2, !dbg !174
  %1730 = bitcast i32 %1729 to <2 x bfloat>, !dbg !174
  %1731 = extractvalue { i32, i32, i32, i32 } %1724, 3, !dbg !174
  %1732 = bitcast i32 %1731 to <2 x bfloat>, !dbg !174
  %1733 = extractelement <2 x bfloat> %1726, i64 0, !dbg !174
  %1734 = extractelement <2 x bfloat> %1726, i64 1, !dbg !174
  %1735 = extractelement <2 x bfloat> %1728, i64 0, !dbg !174
  %1736 = extractelement <2 x bfloat> %1728, i64 1, !dbg !174
  %1737 = extractelement <2 x bfloat> %1730, i64 0, !dbg !174
  %1738 = extractelement <2 x bfloat> %1730, i64 1, !dbg !174
  %1739 = extractelement <2 x bfloat> %1732, i64 0, !dbg !174
  %1740 = extractelement <2 x bfloat> %1732, i64 1, !dbg !174
  %1741 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1723, i1 %23) #5, !dbg !174
  %1742 = extractvalue { i32, i32, i32, i32 } %1741, 0, !dbg !174
  %1743 = bitcast i32 %1742 to <2 x bfloat>, !dbg !174
  %1744 = extractvalue { i32, i32, i32, i32 } %1741, 1, !dbg !174
  %1745 = bitcast i32 %1744 to <2 x bfloat>, !dbg !174
  %1746 = extractvalue { i32, i32, i32, i32 } %1741, 2, !dbg !174
  %1747 = bitcast i32 %1746 to <2 x bfloat>, !dbg !174
  %1748 = extractvalue { i32, i32, i32, i32 } %1741, 3, !dbg !174
  %1749 = bitcast i32 %1748 to <2 x bfloat>, !dbg !174
  %1750 = extractelement <2 x bfloat> %1743, i64 0, !dbg !174
  %1751 = extractelement <2 x bfloat> %1743, i64 1, !dbg !174
  %1752 = extractelement <2 x bfloat> %1745, i64 0, !dbg !174
  %1753 = extractelement <2 x bfloat> %1745, i64 1, !dbg !174
  %1754 = extractelement <2 x bfloat> %1747, i64 0, !dbg !174
  %1755 = extractelement <2 x bfloat> %1747, i64 1, !dbg !174
  %1756 = extractelement <2 x bfloat> %1749, i64 0, !dbg !174
  %1757 = extractelement <2 x bfloat> %1749, i64 1, !dbg !174
  %1758 = fpext bfloat %1733 to float, !dbg !175
  %1759 = fpext bfloat %1734 to float, !dbg !175
  %1760 = fpext bfloat %1735 to float, !dbg !175
  %1761 = fpext bfloat %1736 to float, !dbg !175
  %1762 = fpext bfloat %1737 to float, !dbg !175
  %1763 = fpext bfloat %1738 to float, !dbg !175
  %1764 = fpext bfloat %1739 to float, !dbg !175
  %1765 = fpext bfloat %1740 to float, !dbg !175
  %1766 = fpext bfloat %1750 to float, !dbg !175
  %1767 = fpext bfloat %1751 to float, !dbg !175
  %1768 = fpext bfloat %1752 to float, !dbg !175
  %1769 = fpext bfloat %1753 to float, !dbg !175
  %1770 = fpext bfloat %1754 to float, !dbg !175
  %1771 = fpext bfloat %1755 to float, !dbg !175
  %1772 = fpext bfloat %1756 to float, !dbg !175
  %1773 = fpext bfloat %1757 to float, !dbg !175
  %1774 = fmul float %1715, %1758, !dbg !170
  %1775 = fmul float %1715, %1759, !dbg !170
  %1776 = fmul float %1715, %1760, !dbg !170
  %1777 = fmul float %1715, %1761, !dbg !170
  %1778 = fmul float %1715, %1762, !dbg !170
  %1779 = fmul float %1715, %1763, !dbg !170
  %1780 = fmul float %1715, %1764, !dbg !170
  %1781 = fmul float %1715, %1765, !dbg !170
  %1782 = fmul float %1715, %1766, !dbg !170
  %1783 = fmul float %1715, %1767, !dbg !170
  %1784 = fmul float %1715, %1768, !dbg !170
  %1785 = fmul float %1715, %1769, !dbg !170
  %1786 = fmul float %1715, %1770, !dbg !170
  %1787 = fmul float %1715, %1771, !dbg !170
  %1788 = fmul float %1715, %1772, !dbg !170
  %1789 = fmul float %1715, %1773, !dbg !170
  %1790 = tail call float @llvm.nvvm.round.f(float %1774) #5, !dbg !176
  %1791 = tail call float @llvm.nvvm.round.f(float %1775) #5, !dbg !176
  %1792 = tail call float @llvm.nvvm.round.f(float %1776) #5, !dbg !176
  %1793 = tail call float @llvm.nvvm.round.f(float %1777) #5, !dbg !176
  %1794 = tail call float @llvm.nvvm.round.f(float %1778) #5, !dbg !176
  %1795 = tail call float @llvm.nvvm.round.f(float %1779) #5, !dbg !176
  %1796 = tail call float @llvm.nvvm.round.f(float %1780) #5, !dbg !176
  %1797 = tail call float @llvm.nvvm.round.f(float %1781) #5, !dbg !176
  %1798 = tail call float @llvm.nvvm.round.f(float %1782) #5, !dbg !176
  %1799 = tail call float @llvm.nvvm.round.f(float %1783) #5, !dbg !176
  %1800 = tail call float @llvm.nvvm.round.f(float %1784) #5, !dbg !176
  %1801 = tail call float @llvm.nvvm.round.f(float %1785) #5, !dbg !176
  %1802 = tail call float @llvm.nvvm.round.f(float %1786) #5, !dbg !176
  %1803 = tail call float @llvm.nvvm.round.f(float %1787) #5, !dbg !176
  %1804 = tail call float @llvm.nvvm.round.f(float %1788) #5, !dbg !176
  %1805 = tail call float @llvm.nvvm.round.f(float %1789) #5, !dbg !176
  %1806 = insertelement <4 x float> poison, float %1790, i64 0, !dbg !177
  %1807 = insertelement <4 x float> %1806, float %1791, i64 1, !dbg !177
  %1808 = insertelement <4 x float> %1807, float %1792, i64 2, !dbg !177
  %1809 = insertelement <4 x float> %1808, float %1793, i64 3, !dbg !177
  %1810 = fcmp ogt <4 x float> %1809, splat (float -1.270000e+02), !dbg !177
  %1811 = fcmp uno <4 x float> %1809, zeroinitializer, !dbg !179
  %1812 = or <4 x i1> %1810, %1811, !dbg !180
  %1813 = select <4 x i1> %1812, <4 x float> %1809, <4 x float> splat (float -1.270000e+02), !dbg !181
  %1814 = fcmp olt <4 x float> %1813, splat (float 1.270000e+02), !dbg !182
  %1815 = fcmp uno <4 x float> %1813, zeroinitializer, !dbg !184
  %1816 = or <4 x i1> %1814, %1815, !dbg !185
  %1817 = fptosi <4 x float> %1813 to <4 x i8>, !dbg !186
  %1818 = select <4 x i1> %1816, <4 x i8> %1817, <4 x i8> splat (i8 127), !dbg !187
  %1819 = insertelement <4 x float> poison, float %1794, i64 0, !dbg !177
  %1820 = insertelement <4 x float> %1819, float %1795, i64 1, !dbg !177
  %1821 = insertelement <4 x float> %1820, float %1796, i64 2, !dbg !177
  %1822 = insertelement <4 x float> %1821, float %1797, i64 3, !dbg !177
  %1823 = fcmp ogt <4 x float> %1822, splat (float -1.270000e+02), !dbg !177
  %1824 = fcmp uno <4 x float> %1822, zeroinitializer, !dbg !179
  %1825 = or <4 x i1> %1823, %1824, !dbg !180
  %1826 = select <4 x i1> %1825, <4 x float> %1822, <4 x float> splat (float -1.270000e+02), !dbg !181
  %1827 = fcmp olt <4 x float> %1826, splat (float 1.270000e+02), !dbg !182
  %1828 = fcmp uno <4 x float> %1826, zeroinitializer, !dbg !184
  %1829 = or <4 x i1> %1827, %1828, !dbg !185
  %1830 = fptosi <4 x float> %1826 to <4 x i8>, !dbg !186
  %1831 = select <4 x i1> %1829, <4 x i8> %1830, <4 x i8> splat (i8 127), !dbg !187
  %1832 = insertelement <4 x float> poison, float %1798, i64 0, !dbg !177
  %1833 = insertelement <4 x float> %1832, float %1799, i64 1, !dbg !177
  %1834 = insertelement <4 x float> %1833, float %1800, i64 2, !dbg !177
  %1835 = insertelement <4 x float> %1834, float %1801, i64 3, !dbg !177
  %1836 = fcmp ogt <4 x float> %1835, splat (float -1.270000e+02), !dbg !177
  %1837 = fcmp uno <4 x float> %1835, zeroinitializer, !dbg !179
  %1838 = or <4 x i1> %1836, %1837, !dbg !180
  %1839 = select <4 x i1> %1838, <4 x float> %1835, <4 x float> splat (float -1.270000e+02), !dbg !181
  %1840 = fcmp olt <4 x float> %1839, splat (float 1.270000e+02), !dbg !182
  %1841 = fcmp uno <4 x float> %1839, zeroinitializer, !dbg !184
  %1842 = or <4 x i1> %1840, %1841, !dbg !185
  %1843 = fptosi <4 x float> %1839 to <4 x i8>, !dbg !186
  %1844 = select <4 x i1> %1842, <4 x i8> %1843, <4 x i8> splat (i8 127), !dbg !187
  %1845 = insertelement <4 x float> poison, float %1802, i64 0, !dbg !177
  %1846 = insertelement <4 x float> %1845, float %1803, i64 1, !dbg !177
  %1847 = insertelement <4 x float> %1846, float %1804, i64 2, !dbg !177
  %1848 = insertelement <4 x float> %1847, float %1805, i64 3, !dbg !177
  %1849 = fcmp ogt <4 x float> %1848, splat (float -1.270000e+02), !dbg !177
  %1850 = fcmp uno <4 x float> %1848, zeroinitializer, !dbg !179
  %1851 = or <4 x i1> %1849, %1850, !dbg !180
  %1852 = select <4 x i1> %1851, <4 x float> %1848, <4 x float> splat (float -1.270000e+02), !dbg !181
  %1853 = fcmp olt <4 x float> %1852, splat (float 1.270000e+02), !dbg !182
  %1854 = fcmp uno <4 x float> %1852, zeroinitializer, !dbg !184
  %1855 = or <4 x i1> %1853, %1854, !dbg !185
  %1856 = fptosi <4 x float> %1852 to <4 x i8>, !dbg !186
  %1857 = select <4 x i1> %1855, <4 x i8> %1856, <4 x i8> splat (i8 127), !dbg !187
  %1858 = getelementptr i8, ptr addrspace(1) %12, i64 %1720, !dbg !188
  %1859 = bitcast <4 x i8> %1818 to i32, !dbg !189
  %1860 = bitcast <4 x i8> %1831 to i32, !dbg !189
  %1861 = bitcast <4 x i8> %1844 to i32, !dbg !189
  %1862 = bitcast <4 x i8> %1857 to i32, !dbg !189
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1859, i32 %1860, i32 %1861, i32 %1862, ptr addrspace(1) %1858, i1 %23) #5, !dbg !189
  %indvars.iv.next255 = add nuw nsw i64 %indvars.iv254, 512, !dbg !171
  %1863 = icmp samesign ult i64 %indvars.iv254, 2560, !dbg !171
  br i1 %1863, label %1716, label %1864, !dbg !171

1864:                                             ; preds = %1716
  ret void, !dbg !190
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 35, column: 31, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 40, column: 113, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 41, column: 48, scope: !6)
!52 = !DILocation(line: 42, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 43, column: 51, scope: !6)
!55 = !DILocation(line: 44, column: 42, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 42, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 60, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 72, column: 68, scope: !6)
!78 = !DILocation(line: 73, column: 29, scope: !6)
!79 = !DILocation(line: 73, column: 53, scope: !6)
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 80, column: 40, scope: !6)
!99 = !DILocation(line: 112, column: 50, scope: !6)
!100 = !DILocation(line: 98, column: 24, scope: !6)
!101 = !DILocation(line: 92, column: 24, scope: !6)
!102 = !DILocation(line: 110, column: 50, scope: !6)
!103 = !DILocation(line: 81, column: 31, scope: !6)
!104 = !DILocation(line: 86, column: 43, scope: !6)
!105 = !DILocation(line: 86, column: 36, scope: !6)
!106 = !DILocation(line: 86, column: 53, scope: !6)
!107 = !DILocation(line: 87, column: 43, scope: !6)
!108 = !DILocation(line: 87, column: 35, scope: !6)
!109 = !DILocation(line: 88, column: 35, scope: !6)
!110 = !DILocation(line: 89, column: 42, scope: !6)
!111 = !DILocation(line: 89, column: 35, scope: !6)
!112 = !DILocation(line: 90, column: 35, scope: !6)
!113 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !114)
!114 = !DILocation(line: 111, column: 47, scope: !6)
!115 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !116)
!116 = !DILocation(line: 109, column: 47, scope: !6)
!117 = !DILocation(line: 86, column: 115, scope: !6)
!118 = !DILocation(line: 87, column: 50, scope: !6)
!119 = !DILocation(line: 88, column: 50, scope: !6)
!120 = !DILocation(line: 88, column: 103, scope: !6)
!121 = !DILocation(line: 89, column: 49, scope: !6)
!122 = !DILocation(line: 90, column: 49, scope: !6)
!123 = !DILocation(line: 90, column: 102, scope: !6)
!124 = !DILocation(line: 101, column: 24, scope: !6)
!125 = !DILocation(line: 103, column: 24, scope: !6)
!126 = !DILocation(line: 104, column: 24, scope: !6)
!127 = !DILocation(line: 106, column: 24, scope: !6)
!128 = !DILocation(line: 107, column: 24, scope: !6)
!129 = !DILocation(line: 113, column: 53, scope: !6)
!130 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !116)
!131 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !116)
!132 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !116)
!133 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !114)
!134 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !114)
!135 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !114)
!136 = !DILocation(line: 113, column: 29, scope: !6)
!137 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !138)
!138 = !DILocation(line: 114, column: 40, scope: !6)
!139 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !138)
!140 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !138)
!141 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !138)
!142 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !138)
!143 = !DILocation(line: 116, column: 37, scope: !6)
!144 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !145)
!145 = !DILocation(line: 115, column: 40, scope: !6)
!146 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !145)
!147 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !145)
!148 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !145)
!149 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !145)
!150 = !DILocation(line: 117, column: 37, scope: !6)
!151 = !DILocation(line: 116, column: 25, scope: !6)
!152 = !DILocation(line: 117, column: 25, scope: !6)
!153 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !154)
!154 = !DILocation(line: 126, column: 46, scope: !6)
!155 = !DILocation(line: 127, column: 17, scope: !6)
!156 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !157)
!157 = !DILocation(line: 128, column: 46, scope: !6)
!158 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !159)
!159 = !DILocation(line: 129, column: 46, scope: !6)
!160 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !159)
!161 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !159)
!162 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !159)
!163 = !DILocation(line: 131, column: 24, scope: !6)
!164 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !165)
!165 = !DILocation(line: 134, column: 46, scope: !6)
!166 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !165)
!167 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !165)
!168 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !165)
!169 = !DILocation(line: 137, column: 25, scope: !6)
!170 = !DILocation(line: 140, column: 24, scope: !6)
!171 = !DILocation(line: 118, column: 40, scope: !6)
!172 = !DILocation(line: 124, column: 43, scope: !6)
!173 = !DILocation(line: 124, column: 36, scope: !6)
!174 = !DILocation(line: 124, column: 53, scope: !6)
!175 = !DILocation(line: 124, column: 115, scope: !6)
!176 = !DILocation(line: 141, column: 36, scope: !6)
!177 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !178)
!178 = !DILocation(line: 144, column: 46, scope: !6)
!179 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !178)
!180 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !178)
!181 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !178)
!182 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !183)
!183 = !DILocation(line: 146, column: 46, scope: !6)
!184 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !183)
!185 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !183)
!186 = !DILocation(line: 148, column: 25, scope: !6)
!187 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !183)
!188 = !DILocation(line: 149, column: 29, scope: !6)
!189 = !DILocation(line: 149, column: 53, scope: !6)
!190 = !DILocation(line: 118, column: 4, scope: !6)
